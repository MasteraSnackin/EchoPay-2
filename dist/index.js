var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod2) => function __require2() {
  return mod2 || (0, cb[__getOwnPropNames(cb)[0]])((mod2 = { exports: {} }).exports, mod2), mod2.exports;
};
var __export = (target, all3) => {
  for (var name in all3)
    __defProp(target, name, { get: all3[name], enumerable: true });
};
var __copyProps = (to, from2, except2, desc2) => {
  if (from2 && typeof from2 === "object" || typeof from2 === "function") {
    for (let key of __getOwnPropNames(from2))
      if (!__hasOwnProp.call(to, key) && key !== except2)
        __defProp(to, key, { get: () => from2[key], enumerable: !(desc2 = __getOwnPropDesc(from2, key)) || desc2.enumerable });
  }
  return to;
};
var __toESM = (mod2, isNodeMode, target) => (target = mod2 != null ? __create(__getProtoOf(mod2)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod2 || !mod2.__esModule ? __defProp(target, "default", { value: mod2, enumerable: true }) : target,
  mod2
));

// (disabled):buffer
var require_buffer = __commonJS({
  "(disabled):buffer"() {
  }
});

// node_modules/bn.js/lib/bn.js
var require_bn = __commonJS({
  "node_modules/bn.js/lib/bn.js"(exports, module2) {
    (function(module3, exports2) {
      "use strict";
      function assert4(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN8(number, base, endian) {
        if (BN8.isBN(number)) {
          return number;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number !== null) {
          if (base === "le" || base === "be") {
            endian = base;
            base = 10;
          }
          this._init(number || 0, base || 10, endian || "be");
        }
      }
      if (typeof module3 === "object") {
        module3.exports = BN8;
      } else {
        exports2.BN = BN8;
      }
      BN8.BN = BN8;
      BN8.wordSize = 26;
      var Buffer2;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer2 = window.Buffer;
        } else {
          Buffer2 = require_buffer().Buffer;
        }
      } catch (e) {
      }
      BN8.isBN = function isBN(num) {
        if (num instanceof BN8) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN8.wordSize && Array.isArray(num.words);
      };
      BN8.max = function max2(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
      };
      BN8.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
      };
      BN8.prototype._init = function init2(number, base, endian) {
        if (typeof number === "number") {
          return this._initNumber(number, base, endian);
        }
        if (typeof number === "object") {
          return this._initArray(number, base, endian);
        }
        if (base === "hex") {
          base = 16;
        }
        assert4(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number.length) {
          if (base === 16) {
            this._parseHex(number, start, endian);
          } else {
            this._parseBase(number, base, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base, endian);
            }
          }
        }
      };
      BN8.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 67108864) {
          this.words = [number & 67108863];
          this.length = 1;
        } else if (number < 4503599627370496) {
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert4(number < 9007199254740992);
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le") return;
        this._initArray(this.toArray(), base, endian);
      };
      BN8.prototype._initArray = function _initArray(number, base, endian) {
        assert4(typeof number.length === "number");
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === "be") {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === "le") {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this._strip();
      };
      function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        if (c >= 48 && c <= 57) {
          return c - 48;
        } else if (c >= 65 && c <= 70) {
          return c - 55;
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        } else {
          assert4(false, "Invalid character in " + string);
        }
      }
      function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) {
          r |= parseHex4Bits(string, index - 1) << 4;
        }
        return r;
      }
      BN8.prototype._parseHex = function _parseHex(number, start, endian) {
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") {
          for (i = number.length - 1; i >= start; i -= 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number.length - start;
          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this._strip();
      };
      function parseBase(str, start, end, mul) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r *= mul;
          if (c >= 49) {
            b = c - 49 + 10;
          } else if (c >= 17) {
            b = c - 17 + 10;
          } else {
            b = c;
          }
          assert4(c >= 0 && b < mul, "Invalid character");
          r += b;
        }
        return r;
      }
      BN8.prototype._parseBase = function _parseBase(number, base, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod2 = total % limbLen;
        var end = Math.min(total, total - mod2) + start;
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod2 !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base);
          for (i = 0; i < mod2; i++) {
            pow *= base;
          }
          this.imuln(pow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this._strip();
      };
      BN8.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
      }
      BN8.prototype._move = function _move(dest) {
        move(dest, this);
      };
      BN8.prototype.clone = function clone() {
        var r = new BN8(null);
        this.copy(r);
        return r;
      };
      BN8.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN8.prototype._strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN8.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") {
        try {
          BN8.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect;
        } catch (e) {
          BN8.prototype.inspect = inspect;
        }
      } else {
        BN8.prototype.inspect = inspect;
      }
      function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      }
      var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN8.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = ((w << off | carry) & 16777215).toString(16);
            carry = w >>> 24 - off & 16777215;
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
          var groupSize = groupSizes[base];
          var groupBase = groupBases[base];
          out = "";
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r = c.modrn(groupBase).toString(base);
            c = c.idivn(groupBase);
            if (!c.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert4(false, "Base should be between 2 and 36");
      };
      BN8.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert4(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN8.prototype.toJSON = function toJSON() {
        return this.toString(16, 2);
      };
      if (Buffer2) {
        BN8.prototype.toBuffer = function toBuffer(endian, length) {
          return this.toArrayLike(Buffer2, endian, length);
        };
      }
      BN8.prototype.toArray = function toArray2(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      var allocate = function allocate2(ArrayType, size) {
        if (ArrayType.allocUnsafe) {
          return ArrayType.allocUnsafe(size);
        }
        return new ArrayType(size);
      };
      BN8.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert4(byteLength <= reqLength, "byte array longer than desired length");
        assert4(reqLength > 0, "Requested array length <= 0");
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === "le" ? "LE" : "BE";
        this["_toArrayLike" + postfix](res, byteLength);
        return res;
      };
      BN8.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;
        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position++] = word & 255;
          if (position < res.length) {
            res[position++] = word >> 8 & 255;
          }
          if (position < res.length) {
            res[position++] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position < res.length) {
              res[position++] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position < res.length) {
          res[position++] = carry;
          while (position < res.length) {
            res[position++] = 0;
          }
        }
      };
      BN8.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position--] = word & 255;
          if (position >= 0) {
            res[position--] = word >> 8 & 255;
          }
          if (position >= 0) {
            res[position--] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position >= 0) {
              res[position--] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position >= 0) {
          res[position--] = carry;
          while (position >= 0) {
            res[position--] = 0;
          }
        }
      };
      if (Math.clz32) {
        BN8.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN8.prototype._countBits = function _countBits(w) {
          var t = w;
          var r = 0;
          if (t >= 4096) {
            r += 13;
            t >>>= 13;
          }
          if (t >= 64) {
            r += 7;
            t >>>= 7;
          }
          if (t >= 8) {
            r += 4;
            t >>>= 4;
          }
          if (t >= 2) {
            r += 2;
            t >>>= 2;
          }
          return r + t;
        };
      }
      BN8.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 8191) === 0) {
          r += 13;
          t >>>= 13;
        }
        if ((t & 127) === 0) {
          r += 7;
          t >>>= 7;
        }
        if ((t & 15) === 0) {
          r += 4;
          t >>>= 4;
        }
        if ((t & 3) === 0) {
          r += 2;
          t >>>= 2;
        }
        if ((t & 1) === 0) {
          r++;
        }
        return r;
      };
      BN8.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = num.words[off] >>> wbit & 1;
        }
        return w;
      }
      BN8.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r += b;
          if (b !== 26) break;
        }
        return r;
      };
      BN8.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN8.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN8.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN8.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN8.prototype.neg = function neg() {
        return this.clone().ineg();
      };
      BN8.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN8.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }
        return this._strip();
      };
      BN8.prototype.ior = function ior(num) {
        assert4((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN8.prototype.or = function or2(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN8.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN8.prototype.iuand = function iuand(num) {
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }
        this.length = b.length;
        return this._strip();
      };
      BN8.prototype.iand = function iand(num) {
        assert4((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN8.prototype.and = function and2(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN8.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN8.prototype.iuxor = function iuxor(num) {
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }
        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = a.length;
        return this._strip();
      };
      BN8.prototype.ixor = function ixor(num) {
        assert4((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN8.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN8.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN8.prototype.inotn = function inotn(width) {
        assert4(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        }
        return this._strip();
      };
      BN8.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN8.prototype.setn = function setn(bit, val) {
        assert4(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this._strip();
      };
      BN8.prototype.iadd = function iadd(num) {
        var r;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        }
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        return this;
      };
      BN8.prototype.add = function add2(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN8.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = Math.max(this.length, i);
        if (a !== this) {
          this.negative = 1;
        }
        return this._strip();
      };
      BN8.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = self2.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a = self2.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 67108863;
        var carry = r / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j | 0;
            a = self2.words[i] | 0;
            b = num.words[j] | 0;
            r = a * b + rword;
            ncarry += r / 67108864 | 0;
            rword = r & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out._strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a = self2.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self2.words[i] | 0;
            var b = num.words[j] | 0;
            var r = a * b;
            var lo = r & 67108863;
            ncarry = ncarry + (r / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out._strip();
      }
      function jumboMulTo(self2, num, out) {
        return bigMulTo(self2, num, out);
      }
      BN8.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x, y) {
        this.x = x;
        this.y = y;
      }
      FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l13 = BN8.prototype._countBits(N) - 1;
        for (var i = 0; i < N; i++) {
          t[i] = this.revBin(i, l13, N);
        }
        return t;
      };
      FFTM.prototype.revBin = function revBin(x, l13, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for (var i = 0; i < l13; i++) {
          rb |= (x & 1) << l13 - i - 1;
          x >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for (var i = 0; i < N; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for (var s = 1; s < N; s <<= 1) {
          var l13 = s << 1;
          var rtwdf = Math.cos(2 * Math.PI / l13);
          var itwdf = Math.sin(2 * Math.PI / l13);
          for (var p = 0; p < N; p += l13) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
              var ro = rtws[p + j + s];
              var io = itws[p + j + s];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;
              if (j !== l13) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for (N = N / 2 | 0; N; N = N >>> 1) {
          i++;
        }
        return 1 << i + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for (var i = 0; i < N / 2; i++) {
          var t = rws[i];
          rws[i] = rws[N - i - 1];
          rws[N - i - 1] = t;
          t = iws[i];
          iws[i] = -iws[N - i - 1];
          iws[N - i - 1] = -t;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for (var i = 0; i < N / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
          ws[i] = w & 67108863;
          if (w < 67108864) {
            carry = 0;
          } else {
            carry = w / 67108864 | 0;
          }
        }
        return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);
          rws[2 * i] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i = 2 * len; i < N; ++i) {
          rws[i] = 0;
        }
        assert4(carry === 0);
        assert4((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for (var i = 0; i < N; i++) {
          ph[i] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for (var i = 0; i < N; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out._strip();
      };
      BN8.prototype.mul = function mul(num) {
        var out = new BN8(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN8.prototype.mulf = function mulf(num) {
        var out = new BN8(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN8.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN8.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert4(typeof num === "number");
        assert4(num < 67108864);
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        this.length = num === 0 ? 1 : this.length;
        return isNegNum ? this.ineg() : this;
      };
      BN8.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN8.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN8.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN8.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN8(1);
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0) break;
        }
        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0) continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN8.prototype.iushln = function iushln(bits2) {
        assert4(typeof bits2 === "number" && bits2 >= 0);
        var r = bits2 % 26;
        var s = (bits2 - r) / 26;
        var carryMask = 67108863 >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
          var carry = 0;
          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = (this.words[i] | 0) - newCarry << r;
            this.words[i] = c | carry;
            carry = newCarry >>> 26 - r;
          }
          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }
        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }
          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }
          this.length += s;
        }
        return this._strip();
      };
      BN8.prototype.ishln = function ishln(bits2) {
        assert4(this.negative === 0);
        return this.iushln(bits2);
      };
      BN8.prototype.iushrn = function iushrn(bits2, hint, extended) {
        assert4(typeof bits2 === "number" && bits2 >= 0);
        var h;
        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }
        var r = bits2 % 26;
        var s = Math.min((bits2 - r) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }
        if (s === 0) {
        } else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = carry << 26 - r | word >>> r;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this._strip();
      };
      BN8.prototype.ishrn = function ishrn(bits2, hint, extended) {
        assert4(this.negative === 0);
        return this.iushrn(bits2, hint, extended);
      };
      BN8.prototype.shln = function shln(bits2) {
        return this.clone().ishln(bits2);
      };
      BN8.prototype.ushln = function ushln(bits2) {
        return this.clone().iushln(bits2);
      };
      BN8.prototype.shrn = function shrn(bits2) {
        return this.clone().ishrn(bits2);
      };
      BN8.prototype.ushrn = function ushrn(bits2) {
        return this.clone().iushrn(bits2);
      };
      BN8.prototype.testn = function testn(bit) {
        assert4(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s) return false;
        var w = this.words[s];
        return !!(w & q);
      };
      BN8.prototype.imaskn = function imaskn(bits2) {
        assert4(typeof bits2 === "number" && bits2 >= 0);
        var r = bits2 % 26;
        var s = (bits2 - r) / 26;
        assert4(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) {
          return this;
        }
        if (r !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);
        if (r !== 0) {
          var mask = 67108863 ^ 67108863 >>> r << r;
          this.words[this.length - 1] &= mask;
        }
        return this._strip();
      };
      BN8.prototype.maskn = function maskn(bits2) {
        return this.clone().imaskn(bits2);
      };
      BN8.prototype.iaddn = function iaddn(num) {
        assert4(typeof num === "number");
        assert4(num < 67108864);
        if (num < 0) return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) <= num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN8.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
          this.words[i] -= 67108864;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);
        return this;
      };
      BN8.prototype.isubn = function isubn(num) {
        assert4(typeof num === "number");
        assert4(num < 67108864);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
          }
        }
        return this._strip();
      };
      BN8.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN8.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN8.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN8.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN8.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 67108863;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i + shift] = w & 67108863;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 67108863;
        }
        if (carry === 0) return this._strip();
        assert4(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this._strip();
      };
      BN8.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
          q = new BN8(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q._strip();
        }
        a._strip();
        if (mode !== "div" && shift !== 0) {
          a.iushrn(shift);
        }
        return {
          div: q || null,
          mod: a
        };
      };
      BN8.prototype.divmod = function divmod(num, mode, positive) {
        assert4(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN8(0),
            mod: new BN8(0)
          };
        }
        var div, mod2, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod2 = res.mod.neg();
            if (positive && mod2.negative !== 0) {
              mod2.iadd(num);
            }
          }
          return {
            div,
            mod: mod2
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod2 = res.mod.neg();
            if (positive && mod2.negative !== 0) {
              mod2.isub(num);
            }
          }
          return {
            div: res.div,
            mod: mod2
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN8(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN8(this.modrn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN8(this.modrn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN8.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN8.prototype.mod = function mod2(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN8.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN8.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero()) return dm.div;
        var mod2 = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod2.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN8.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert4(num <= 67108863);
        var p = (1 << 26) % num;
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }
        return isNegNum ? -acc : acc;
      };
      BN8.prototype.modn = function modn(num) {
        return this.modrn(num);
      };
      BN8.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert4(num <= 67108863);
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 67108864;
          this.words[i] = w / num | 0;
          carry = w % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
      };
      BN8.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN8.prototype.egcd = function egcd(p) {
        assert4(p.negative === 0);
        assert4(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
        var A = new BN8(1);
        var B = new BN8(0);
        var C = new BN8(0);
        var D = new BN8(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1) ;
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
      BN8.prototype._invmp = function _invmp(p) {
        assert4(p.negative === 0);
        assert4(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
        var x1 = new BN8(1);
        var x2 = new BN8(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1) ;
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
        return res;
      };
      BN8.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r = a.cmp(b);
          if (r < 0) {
            var t = a;
            a = b;
            b = t;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }
          a.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN8.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN8.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN8.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN8.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN8.prototype.bincn = function bincn(bit) {
        assert4(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN8.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN8.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this._strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert4(num <= 67108863, "Number is too big");
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
      };
      BN8.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
      };
      BN8.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;
          if (a === b) continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN8.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN8.prototype.gt = function gt2(num) {
        return this.cmp(num) === 1;
      };
      BN8.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN8.prototype.gte = function gte2(num) {
        return this.cmp(num) >= 0;
      };
      BN8.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN8.prototype.lt = function lt2(num) {
        return this.cmp(num) === -1;
      };
      BN8.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN8.prototype.lte = function lte2(num) {
        return this.cmp(num) <= 0;
      };
      BN8.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN8.prototype.eq = function eq3(num) {
        return this.cmp(num) === 0;
      };
      BN8.red = function red(num) {
        return new Red(num);
      };
      BN8.prototype.toRed = function toRed(ctx) {
        assert4(!this.red, "Already a number in reduction context");
        assert4(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN8.prototype.fromRed = function fromRed() {
        assert4(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN8.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN8.prototype.forceRed = function forceRed(ctx) {
        assert4(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN8.prototype.redAdd = function redAdd(num) {
        assert4(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN8.prototype.redIAdd = function redIAdd(num) {
        assert4(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN8.prototype.redSub = function redSub(num) {
        assert4(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN8.prototype.redISub = function redISub(num) {
        assert4(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN8.prototype.redShl = function redShl(num) {
        assert4(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN8.prototype.redMul = function redMul(num) {
        assert4(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN8.prototype.redIMul = function redIMul(num) {
        assert4(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN8.prototype.redSqr = function redSqr() {
        assert4(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN8.prototype.redISqr = function redISqr() {
        assert4(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN8.prototype.redSqrt = function redSqrt() {
        assert4(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN8.prototype.redInvm = function redInvm() {
        assert4(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN8.prototype.redNeg = function redNeg() {
        assert4(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN8.prototype.redPow = function redPow(num) {
        assert4(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name, p) {
        this.name = name;
        this.p = new BN8(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN8(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN8(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r = num;
        var rlen;
        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          if (r.strip !== void 0) {
            r.strip();
          } else {
            r._strip();
          }
        }
        return r;
      };
      MPrime.prototype.split = function split2(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split2(input, output) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 977;
          num.words[i] = lo & 67108863;
          lo = w * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN8._prime = function prime6(name) {
        if (primes[name]) return primes[name];
        var prime7;
        if (name === "k256") {
          prime7 = new K256();
        } else if (name === "p224") {
          prime7 = new P224();
        } else if (name === "p192") {
          prime7 = new P192();
        } else if (name === "p25519") {
          prime7 = new P25519();
        } else {
          throw new Error("Unknown prime " + name);
        }
        primes[name] = prime7;
        return prime7;
      };
      function Red(m) {
        if (typeof m === "string") {
          var prime6 = BN8._prime(m);
          this.m = prime6.p;
          this.prime = prime6;
        } else {
          assert4(m.gtn(1), "modulus must be greater than 1");
          this.m = m;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert4(a.negative === 0, "red works only with positives");
        assert4(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b) {
        assert4((a.negative | b.negative) === 0, "red works only with positives");
        assert4(
          a.red && a.red === b.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        move(a, a.umod(this.m)._forceRed(this));
        return a;
      };
      Red.prototype.neg = function neg(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add2(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert4(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow = this.m.add(new BN8(1)).iushrn(2);
          return this.pow(a, pow);
        }
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert4(!q.isZero());
        var one = new BN8(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN8(2 * z * z).toRed(this);
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert4(i < m);
          var b = this.pow(c, new BN8(1).iushln(m - i - 1));
          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }
        return r;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN8(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN8(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN8.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN8(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };
      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN8(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module2 === "undefined" || module2, exports);
  }
});

// node_modules/@polkadot/wasm-crypto-wasm/cjs/bytes.js
var require_bytes = __commonJS({
  "node_modules/@polkadot/wasm-crypto-wasm/cjs/bytes.js"(exports) {
    exports.lenIn = 171008;
    exports.lenOut = 339468;
    exports.bytes = "";
  }
});

// node_modules/eventemitter3/index.js
var require_eventemitter3 = __commonJS({
  "node_modules/eventemitter3/index.js"(exports, module2) {
    "use strict";
    var has = Object.prototype.hasOwnProperty;
    var prefix2 = "~";
    function Events2() {
    }
    if (Object.create) {
      Events2.prototype = /* @__PURE__ */ Object.create(null);
      if (!new Events2().__proto__) prefix2 = false;
    }
    function EE(fn, context2, once) {
      this.fn = fn;
      this.context = context2;
      this.once = once || false;
    }
    function addListener(emitter, event, fn, context2, once) {
      if (typeof fn !== "function") {
        throw new TypeError("The listener must be a function");
      }
      var listener = new EE(fn, context2 || emitter, once), evt = prefix2 ? prefix2 + event : event;
      if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
      else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
      else emitter._events[evt] = [emitter._events[evt], listener];
      return emitter;
    }
    function clearEvent(emitter, evt) {
      if (--emitter._eventsCount === 0) emitter._events = new Events2();
      else delete emitter._events[evt];
    }
    function EventEmitter2() {
      this._events = new Events2();
      this._eventsCount = 0;
    }
    EventEmitter2.prototype.eventNames = function eventNames() {
      var names = [], events2, name;
      if (this._eventsCount === 0) return names;
      for (name in events2 = this._events) {
        if (has.call(events2, name)) names.push(prefix2 ? name.slice(1) : name);
      }
      if (Object.getOwnPropertySymbols) {
        return names.concat(Object.getOwnPropertySymbols(events2));
      }
      return names;
    };
    EventEmitter2.prototype.listeners = function listeners(event) {
      var evt = prefix2 ? prefix2 + event : event, handlers = this._events[evt];
      if (!handlers) return [];
      if (handlers.fn) return [handlers.fn];
      for (var i = 0, l13 = handlers.length, ee = new Array(l13); i < l13; i++) {
        ee[i] = handlers[i].fn;
      }
      return ee;
    };
    EventEmitter2.prototype.listenerCount = function listenerCount(event) {
      var evt = prefix2 ? prefix2 + event : event, listeners = this._events[evt];
      if (!listeners) return 0;
      if (listeners.fn) return 1;
      return listeners.length;
    };
    EventEmitter2.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
      var evt = prefix2 ? prefix2 + event : event;
      if (!this._events[evt]) return false;
      var listeners = this._events[evt], len = arguments.length, args, i;
      if (listeners.fn) {
        if (listeners.once) this.removeListener(event, listeners.fn, void 0, true);
        switch (len) {
          case 1:
            return listeners.fn.call(listeners.context), true;
          case 2:
            return listeners.fn.call(listeners.context, a1), true;
          case 3:
            return listeners.fn.call(listeners.context, a1, a2), true;
          case 4:
            return listeners.fn.call(listeners.context, a1, a2, a3), true;
          case 5:
            return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
          case 6:
            return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
        }
        for (i = 1, args = new Array(len - 1); i < len; i++) {
          args[i - 1] = arguments[i];
        }
        listeners.fn.apply(listeners.context, args);
      } else {
        var length = listeners.length, j;
        for (i = 0; i < length; i++) {
          if (listeners[i].once) this.removeListener(event, listeners[i].fn, void 0, true);
          switch (len) {
            case 1:
              listeners[i].fn.call(listeners[i].context);
              break;
            case 2:
              listeners[i].fn.call(listeners[i].context, a1);
              break;
            case 3:
              listeners[i].fn.call(listeners[i].context, a1, a2);
              break;
            case 4:
              listeners[i].fn.call(listeners[i].context, a1, a2, a3);
              break;
            default:
              if (!args) for (j = 1, args = new Array(len - 1); j < len; j++) {
                args[j - 1] = arguments[j];
              }
              listeners[i].fn.apply(listeners[i].context, args);
          }
        }
      }
      return true;
    };
    EventEmitter2.prototype.on = function on(event, fn, context2) {
      return addListener(this, event, fn, context2, false);
    };
    EventEmitter2.prototype.once = function once(event, fn, context2) {
      return addListener(this, event, fn, context2, true);
    };
    EventEmitter2.prototype.removeListener = function removeListener(event, fn, context2, once) {
      var evt = prefix2 ? prefix2 + event : event;
      if (!this._events[evt]) return this;
      if (!fn) {
        clearEvent(this, evt);
        return this;
      }
      var listeners = this._events[evt];
      if (listeners.fn) {
        if (listeners.fn === fn && (!once || listeners.once) && (!context2 || listeners.context === context2)) {
          clearEvent(this, evt);
        }
      } else {
        for (var i = 0, events2 = [], length = listeners.length; i < length; i++) {
          if (listeners[i].fn !== fn || once && !listeners[i].once || context2 && listeners[i].context !== context2) {
            events2.push(listeners[i]);
          }
        }
        if (events2.length) this._events[evt] = events2.length === 1 ? events2[0] : events2;
        else clearEvent(this, evt);
      }
      return this;
    };
    EventEmitter2.prototype.removeAllListeners = function removeAllListeners(event) {
      var evt;
      if (event) {
        evt = prefix2 ? prefix2 + event : event;
        if (this._events[evt]) clearEvent(this, evt);
      } else {
        this._events = new Events2();
        this._eventsCount = 0;
      }
      return this;
    };
    EventEmitter2.prototype.off = EventEmitter2.prototype.removeListener;
    EventEmitter2.prototype.addListener = EventEmitter2.prototype.on;
    EventEmitter2.prefixed = prefix2;
    EventEmitter2.EventEmitter = EventEmitter2;
    if ("undefined" !== typeof module2) {
      module2.exports = EventEmitter2;
    }
  }
});

// node_modules/hono/dist/compose.js
var compose = (middleware, onError, onNotFound) => {
  return (context2, next) => {
    let index = -1;
    return dispatch(0);
    async function dispatch(i) {
      if (i <= index) {
        throw new Error("next() called multiple times");
      }
      index = i;
      let res;
      let isError = false;
      let handler;
      if (middleware[i]) {
        handler = middleware[i][0][0];
        context2.req.routeIndex = i;
      } else {
        handler = i === middleware.length && next || void 0;
      }
      if (handler) {
        try {
          res = await handler(context2, () => dispatch(i + 1));
        } catch (err) {
          if (err instanceof Error && onError) {
            context2.error = err;
            res = await onError(err, context2);
            isError = true;
          } else {
            throw err;
          }
        }
      } else {
        if (context2.finalized === false && onNotFound) {
          res = await onNotFound(context2);
        }
      }
      if (res && (context2.finalized === false || isError)) {
        context2.res = res;
      }
      return context2;
    }
  };
};

// node_modules/hono/dist/request/constants.js
var GET_MATCH_RESULT = Symbol();

// node_modules/hono/dist/utils/body.js
var parseBody = async (request, options = /* @__PURE__ */ Object.create(null)) => {
  const { all: all3 = false, dot = false } = options;
  const headers = request instanceof HonoRequest ? request.raw.headers : request.headers;
  const contentType = headers.get("Content-Type");
  if (contentType?.startsWith("multipart/form-data") || contentType?.startsWith("application/x-www-form-urlencoded")) {
    return parseFormData(request, { all: all3, dot });
  }
  return {};
};
async function parseFormData(request, options) {
  const formData = await request.formData();
  if (formData) {
    return convertFormDataToBodyData(formData, options);
  }
  return {};
}
function convertFormDataToBodyData(formData, options) {
  const form = /* @__PURE__ */ Object.create(null);
  formData.forEach((value, key) => {
    const shouldParseAllValues = options.all || key.endsWith("[]");
    if (!shouldParseAllValues) {
      form[key] = value;
    } else {
      handleParsingAllValues(form, key, value);
    }
  });
  if (options.dot) {
    Object.entries(form).forEach(([key, value]) => {
      const shouldParseDotValues = key.includes(".");
      if (shouldParseDotValues) {
        handleParsingNestedValues(form, key, value);
        delete form[key];
      }
    });
  }
  return form;
}
var handleParsingAllValues = (form, key, value) => {
  if (form[key] !== void 0) {
    if (Array.isArray(form[key])) {
      ;
      form[key].push(value);
    } else {
      form[key] = [form[key], value];
    }
  } else {
    if (!key.endsWith("[]")) {
      form[key] = value;
    } else {
      form[key] = [value];
    }
  }
};
var handleParsingNestedValues = (form, key, value) => {
  let nestedForm = form;
  const keys2 = key.split(".");
  keys2.forEach((key2, index) => {
    if (index === keys2.length - 1) {
      nestedForm[key2] = value;
    } else {
      if (!nestedForm[key2] || typeof nestedForm[key2] !== "object" || Array.isArray(nestedForm[key2]) || nestedForm[key2] instanceof File) {
        nestedForm[key2] = /* @__PURE__ */ Object.create(null);
      }
      nestedForm = nestedForm[key2];
    }
  });
};

// node_modules/hono/dist/utils/url.js
var splitPath = (path) => {
  const paths = path.split("/");
  if (paths[0] === "") {
    paths.shift();
  }
  return paths;
};
var splitRoutingPath = (routePath) => {
  const { groups, path } = extractGroupsFromPath(routePath);
  const paths = splitPath(path);
  return replaceGroupMarks(paths, groups);
};
var extractGroupsFromPath = (path) => {
  const groups = [];
  path = path.replace(/\{[^}]+\}/g, (match, index) => {
    const mark = `@${index}`;
    groups.push([mark, match]);
    return mark;
  });
  return { groups, path };
};
var replaceGroupMarks = (paths, groups) => {
  for (let i = groups.length - 1; i >= 0; i--) {
    const [mark] = groups[i];
    for (let j = paths.length - 1; j >= 0; j--) {
      if (paths[j].includes(mark)) {
        paths[j] = paths[j].replace(mark, groups[i][1]);
        break;
      }
    }
  }
  return paths;
};
var patternCache = {};
var getPattern = (label, next) => {
  if (label === "*") {
    return "*";
  }
  const match = label.match(/^\:([^\{\}]+)(?:\{(.+)\})?$/);
  if (match) {
    const cacheKey = `${label}#${next}`;
    if (!patternCache[cacheKey]) {
      if (match[2]) {
        patternCache[cacheKey] = next && next[0] !== ":" && next[0] !== "*" ? [cacheKey, match[1], new RegExp(`^${match[2]}(?=/${next})`)] : [label, match[1], new RegExp(`^${match[2]}$`)];
      } else {
        patternCache[cacheKey] = [label, match[1], true];
      }
    }
    return patternCache[cacheKey];
  }
  return null;
};
var tryDecode = (str, decoder5) => {
  try {
    return decoder5(str);
  } catch {
    return str.replace(/(?:%[0-9A-Fa-f]{2})+/g, (match) => {
      try {
        return decoder5(match);
      } catch {
        return match;
      }
    });
  }
};
var tryDecodeURI = (str) => tryDecode(str, decodeURI);
var getPath = (request) => {
  const url = request.url;
  const start = url.indexOf(
    "/",
    url.charCodeAt(9) === 58 ? 13 : 8
  );
  let i = start;
  for (; i < url.length; i++) {
    const charCode = url.charCodeAt(i);
    if (charCode === 37) {
      const queryIndex = url.indexOf("?", i);
      const path = url.slice(start, queryIndex === -1 ? void 0 : queryIndex);
      return tryDecodeURI(path.includes("%25") ? path.replace(/%25/g, "%2525") : path);
    } else if (charCode === 63) {
      break;
    }
  }
  return url.slice(start, i);
};
var getPathNoStrict = (request) => {
  const result = getPath(request);
  return result.length > 1 && result.at(-1) === "/" ? result.slice(0, -1) : result;
};
var mergePath = (base, sub, ...rest) => {
  if (rest.length) {
    sub = mergePath(sub, ...rest);
  }
  return `${base?.[0] === "/" ? "" : "/"}${base}${sub === "/" ? "" : `${base?.at(-1) === "/" ? "" : "/"}${sub?.[0] === "/" ? sub.slice(1) : sub}`}`;
};
var checkOptionalParameter = (path) => {
  if (path.charCodeAt(path.length - 1) !== 63 || !path.includes(":")) {
    return null;
  }
  const segments = path.split("/");
  const results = [];
  let basePath = "";
  segments.forEach((segment) => {
    if (segment !== "" && !/\:/.test(segment)) {
      basePath += "/" + segment;
    } else if (/\:/.test(segment)) {
      if (/\?/.test(segment)) {
        if (results.length === 0 && basePath === "") {
          results.push("/");
        } else {
          results.push(basePath);
        }
        const optionalSegment = segment.replace("?", "");
        basePath += "/" + optionalSegment;
        results.push(basePath);
      } else {
        basePath += "/" + segment;
      }
    }
  });
  return results.filter((v, i, a) => a.indexOf(v) === i);
};
var _decodeURI = (value) => {
  if (!/[%+]/.test(value)) {
    return value;
  }
  if (value.indexOf("+") !== -1) {
    value = value.replace(/\+/g, " ");
  }
  return value.indexOf("%") !== -1 ? tryDecode(value, decodeURIComponent_) : value;
};
var _getQueryParam = (url, key, multiple) => {
  let encoded;
  if (!multiple && key && !/[%+]/.test(key)) {
    let keyIndex2 = url.indexOf(`?${key}`, 8);
    if (keyIndex2 === -1) {
      keyIndex2 = url.indexOf(`&${key}`, 8);
    }
    while (keyIndex2 !== -1) {
      const trailingKeyCode = url.charCodeAt(keyIndex2 + key.length + 1);
      if (trailingKeyCode === 61) {
        const valueIndex = keyIndex2 + key.length + 2;
        const endIndex = url.indexOf("&", valueIndex);
        return _decodeURI(url.slice(valueIndex, endIndex === -1 ? void 0 : endIndex));
      } else if (trailingKeyCode == 38 || isNaN(trailingKeyCode)) {
        return "";
      }
      keyIndex2 = url.indexOf(`&${key}`, keyIndex2 + 1);
    }
    encoded = /[%+]/.test(url);
    if (!encoded) {
      return void 0;
    }
  }
  const results = {};
  encoded ??= /[%+]/.test(url);
  let keyIndex = url.indexOf("?", 8);
  while (keyIndex !== -1) {
    const nextKeyIndex = url.indexOf("&", keyIndex + 1);
    let valueIndex = url.indexOf("=", keyIndex);
    if (valueIndex > nextKeyIndex && nextKeyIndex !== -1) {
      valueIndex = -1;
    }
    let name = url.slice(
      keyIndex + 1,
      valueIndex === -1 ? nextKeyIndex === -1 ? void 0 : nextKeyIndex : valueIndex
    );
    if (encoded) {
      name = _decodeURI(name);
    }
    keyIndex = nextKeyIndex;
    if (name === "") {
      continue;
    }
    let value;
    if (valueIndex === -1) {
      value = "";
    } else {
      value = url.slice(valueIndex + 1, nextKeyIndex === -1 ? void 0 : nextKeyIndex);
      if (encoded) {
        value = _decodeURI(value);
      }
    }
    if (multiple) {
      if (!(results[name] && Array.isArray(results[name]))) {
        results[name] = [];
      }
      ;
      results[name].push(value);
    } else {
      results[name] ??= value;
    }
  }
  return key ? results[key] : results;
};
var getQueryParam = _getQueryParam;
var getQueryParams = (url, key) => {
  return _getQueryParam(url, key, true);
};
var decodeURIComponent_ = decodeURIComponent;

// node_modules/hono/dist/request.js
var tryDecodeURIComponent = (str) => tryDecode(str, decodeURIComponent_);
var HonoRequest = class {
  raw;
  #validatedData;
  #matchResult;
  routeIndex = 0;
  path;
  bodyCache = {};
  constructor(request, path = "/", matchResult = [[]]) {
    this.raw = request;
    this.path = path;
    this.#matchResult = matchResult;
    this.#validatedData = {};
  }
  param(key) {
    return key ? this.#getDecodedParam(key) : this.#getAllDecodedParams();
  }
  #getDecodedParam(key) {
    const paramKey = this.#matchResult[0][this.routeIndex][1][key];
    const param = this.#getParamValue(paramKey);
    return param ? /\%/.test(param) ? tryDecodeURIComponent(param) : param : void 0;
  }
  #getAllDecodedParams() {
    const decoded = {};
    const keys2 = Object.keys(this.#matchResult[0][this.routeIndex][1]);
    for (const key of keys2) {
      const value = this.#getParamValue(this.#matchResult[0][this.routeIndex][1][key]);
      if (value && typeof value === "string") {
        decoded[key] = /\%/.test(value) ? tryDecodeURIComponent(value) : value;
      }
    }
    return decoded;
  }
  #getParamValue(paramKey) {
    return this.#matchResult[1] ? this.#matchResult[1][paramKey] : paramKey;
  }
  query(key) {
    return getQueryParam(this.url, key);
  }
  queries(key) {
    return getQueryParams(this.url, key);
  }
  header(name) {
    if (name) {
      return this.raw.headers.get(name) ?? void 0;
    }
    const headerData = {};
    this.raw.headers.forEach((value, key) => {
      headerData[key] = value;
    });
    return headerData;
  }
  async parseBody(options) {
    return this.bodyCache.parsedBody ??= await parseBody(this, options);
  }
  #cachedBody = (key) => {
    const { bodyCache, raw: raw2 } = this;
    const cachedBody = bodyCache[key];
    if (cachedBody) {
      return cachedBody;
    }
    const anyCachedKey = Object.keys(bodyCache)[0];
    if (anyCachedKey) {
      return bodyCache[anyCachedKey].then((body) => {
        if (anyCachedKey === "json") {
          body = JSON.stringify(body);
        }
        return new Response(body)[key]();
      });
    }
    return bodyCache[key] = raw2[key]();
  };
  json() {
    return this.#cachedBody("text").then((text2) => JSON.parse(text2));
  }
  text() {
    return this.#cachedBody("text");
  }
  arrayBuffer() {
    return this.#cachedBody("arrayBuffer");
  }
  blob() {
    return this.#cachedBody("blob");
  }
  formData() {
    return this.#cachedBody("formData");
  }
  addValidatedData(target, data) {
    this.#validatedData[target] = data;
  }
  valid(target) {
    return this.#validatedData[target];
  }
  get url() {
    return this.raw.url;
  }
  get method() {
    return this.raw.method;
  }
  get [GET_MATCH_RESULT]() {
    return this.#matchResult;
  }
  get matchedRoutes() {
    return this.#matchResult[0].map(([[, route]]) => route);
  }
  get routePath() {
    return this.#matchResult[0].map(([[, route]]) => route)[this.routeIndex].path;
  }
};

// node_modules/hono/dist/utils/html.js
var HtmlEscapedCallbackPhase = {
  Stringify: 1,
  BeforeStream: 2,
  Stream: 3
};
var raw = (value, callbacks) => {
  const escapedString = new String(value);
  escapedString.isEscaped = true;
  escapedString.callbacks = callbacks;
  return escapedString;
};
var resolveCallback = async (str, phase, preserveCallbacks, context2, buffer) => {
  if (typeof str === "object" && !(str instanceof String)) {
    if (!(str instanceof Promise)) {
      str = str.toString();
    }
    if (str instanceof Promise) {
      str = await str;
    }
  }
  const callbacks = str.callbacks;
  if (!callbacks?.length) {
    return Promise.resolve(str);
  }
  if (buffer) {
    buffer[0] += str;
  } else {
    buffer = [str];
  }
  const resStr = Promise.all(callbacks.map((c) => c({ phase, buffer, context: context2 }))).then(
    (res) => Promise.all(
      res.filter(Boolean).map((str2) => resolveCallback(str2, phase, false, context2, buffer))
    ).then(() => buffer[0])
  );
  if (preserveCallbacks) {
    return raw(await resStr, callbacks);
  } else {
    return resStr;
  }
};

// node_modules/hono/dist/context.js
var TEXT_PLAIN = "text/plain; charset=UTF-8";
var setDefaultContentType = (contentType, headers) => {
  return {
    "Content-Type": contentType,
    ...headers
  };
};
var Context = class {
  #rawRequest;
  #req;
  env = {};
  #var;
  finalized = false;
  error;
  #status;
  #executionCtx;
  #res;
  #layout;
  #renderer;
  #notFoundHandler;
  #preparedHeaders;
  #matchResult;
  #path;
  constructor(req, options) {
    this.#rawRequest = req;
    if (options) {
      this.#executionCtx = options.executionCtx;
      this.env = options.env;
      this.#notFoundHandler = options.notFoundHandler;
      this.#path = options.path;
      this.#matchResult = options.matchResult;
    }
  }
  get req() {
    this.#req ??= new HonoRequest(this.#rawRequest, this.#path, this.#matchResult);
    return this.#req;
  }
  get event() {
    if (this.#executionCtx && "respondWith" in this.#executionCtx) {
      return this.#executionCtx;
    } else {
      throw Error("This context has no FetchEvent");
    }
  }
  get executionCtx() {
    if (this.#executionCtx) {
      return this.#executionCtx;
    } else {
      throw Error("This context has no ExecutionContext");
    }
  }
  get res() {
    return this.#res ||= new Response(null, {
      headers: this.#preparedHeaders ??= new Headers()
    });
  }
  set res(_res) {
    if (this.#res && _res) {
      _res = new Response(_res.body, _res);
      for (const [k, v] of this.#res.headers.entries()) {
        if (k === "content-type") {
          continue;
        }
        if (k === "set-cookie") {
          const cookies = this.#res.headers.getSetCookie();
          _res.headers.delete("set-cookie");
          for (const cookie of cookies) {
            _res.headers.append("set-cookie", cookie);
          }
        } else {
          _res.headers.set(k, v);
        }
      }
    }
    this.#res = _res;
    this.finalized = true;
  }
  render = (...args) => {
    this.#renderer ??= (content) => this.html(content);
    return this.#renderer(...args);
  };
  setLayout = (layout2) => this.#layout = layout2;
  getLayout = () => this.#layout;
  setRenderer = (renderer) => {
    this.#renderer = renderer;
  };
  header = (name, value, options) => {
    if (this.finalized) {
      this.#res = new Response(this.#res.body, this.#res);
    }
    const headers = this.#res ? this.#res.headers : this.#preparedHeaders ??= new Headers();
    if (value === void 0) {
      headers.delete(name);
    } else if (options?.append) {
      headers.append(name, value);
    } else {
      headers.set(name, value);
    }
  };
  status = (status) => {
    this.#status = status;
  };
  set = (key, value) => {
    this.#var ??= /* @__PURE__ */ new Map();
    this.#var.set(key, value);
  };
  get = (key) => {
    return this.#var ? this.#var.get(key) : void 0;
  };
  get var() {
    if (!this.#var) {
      return {};
    }
    return Object.fromEntries(this.#var);
  }
  #newResponse(data, arg, headers) {
    const responseHeaders = this.#res ? new Headers(this.#res.headers) : this.#preparedHeaders ?? new Headers();
    if (typeof arg === "object" && "headers" in arg) {
      const argHeaders = arg.headers instanceof Headers ? arg.headers : new Headers(arg.headers);
      for (const [key, value] of argHeaders) {
        if (key.toLowerCase() === "set-cookie") {
          responseHeaders.append(key, value);
        } else {
          responseHeaders.set(key, value);
        }
      }
    }
    if (headers) {
      for (const [k, v] of Object.entries(headers)) {
        if (typeof v === "string") {
          responseHeaders.set(k, v);
        } else {
          responseHeaders.delete(k);
          for (const v22 of v) {
            responseHeaders.append(k, v22);
          }
        }
      }
    }
    const status = typeof arg === "number" ? arg : arg?.status ?? this.#status;
    return new Response(data, { status, headers: responseHeaders });
  }
  newResponse = (...args) => this.#newResponse(...args);
  body = (data, arg, headers) => this.#newResponse(data, arg, headers);
  text = (text2, arg, headers) => {
    return !this.#preparedHeaders && !this.#status && !arg && !headers && !this.finalized ? new Response(text2) : this.#newResponse(
      text2,
      arg,
      setDefaultContentType(TEXT_PLAIN, headers)
    );
  };
  json = (object, arg, headers) => {
    return this.#newResponse(
      JSON.stringify(object),
      arg,
      setDefaultContentType("application/json", headers)
    );
  };
  html = (html, arg, headers) => {
    const res = (html2) => this.#newResponse(html2, arg, setDefaultContentType("text/html; charset=UTF-8", headers));
    return typeof html === "object" ? resolveCallback(html, HtmlEscapedCallbackPhase.Stringify, false, {}).then(res) : res(html);
  };
  redirect = (location2, status) => {
    const locationString = String(location2);
    this.header(
      "Location",
      !/[^\x00-\xFF]/.test(locationString) ? locationString : encodeURI(locationString)
    );
    return this.newResponse(null, status ?? 302);
  };
  notFound = () => {
    this.#notFoundHandler ??= () => new Response();
    return this.#notFoundHandler(this);
  };
};

// node_modules/hono/dist/router.js
var METHOD_NAME_ALL = "ALL";
var METHOD_NAME_ALL_LOWERCASE = "all";
var METHODS = ["get", "post", "put", "delete", "options", "patch"];
var MESSAGE_MATCHER_IS_ALREADY_BUILT = "Can not add a route since the matcher is already built.";
var UnsupportedPathError = class extends Error {
};

// node_modules/hono/dist/utils/constants.js
var COMPOSED_HANDLER = "__COMPOSED_HANDLER";

// node_modules/hono/dist/hono-base.js
var notFoundHandler = (c) => {
  return c.text("404 Not Found", 404);
};
var errorHandler = (err, c) => {
  if ("getResponse" in err) {
    const res = err.getResponse();
    return c.newResponse(res.body, res);
  }
  console.error(err);
  return c.text("Internal Server Error", 500);
};
var Hono = class {
  get;
  post;
  put;
  delete;
  options;
  patch;
  all;
  on;
  use;
  router;
  getPath;
  _basePath = "/";
  #path = "/";
  routes = [];
  constructor(options = {}) {
    const allMethods = [...METHODS, METHOD_NAME_ALL_LOWERCASE];
    allMethods.forEach((method) => {
      this[method] = (args1, ...args) => {
        if (typeof args1 === "string") {
          this.#path = args1;
        } else {
          this.#addRoute(method, this.#path, args1);
        }
        args.forEach((handler) => {
          this.#addRoute(method, this.#path, handler);
        });
        return this;
      };
    });
    this.on = (method, path, ...handlers) => {
      for (const p of [path].flat()) {
        this.#path = p;
        for (const m of [method].flat()) {
          handlers.map((handler) => {
            this.#addRoute(m.toUpperCase(), this.#path, handler);
          });
        }
      }
      return this;
    };
    this.use = (arg1, ...handlers) => {
      if (typeof arg1 === "string") {
        this.#path = arg1;
      } else {
        this.#path = "*";
        handlers.unshift(arg1);
      }
      handlers.forEach((handler) => {
        this.#addRoute(METHOD_NAME_ALL, this.#path, handler);
      });
      return this;
    };
    const { strict, ...optionsWithoutStrict } = options;
    Object.assign(this, optionsWithoutStrict);
    this.getPath = strict ?? true ? options.getPath ?? getPath : getPathNoStrict;
  }
  #clone() {
    const clone = new Hono({
      router: this.router,
      getPath: this.getPath
    });
    clone.errorHandler = this.errorHandler;
    clone.#notFoundHandler = this.#notFoundHandler;
    clone.routes = this.routes;
    return clone;
  }
  #notFoundHandler = notFoundHandler;
  errorHandler = errorHandler;
  route(path, app2) {
    const subApp = this.basePath(path);
    app2.routes.map((r) => {
      let handler;
      if (app2.errorHandler === errorHandler) {
        handler = r.handler;
      } else {
        handler = async (c, next) => (await compose([], app2.errorHandler)(c, () => r.handler(c, next))).res;
        handler[COMPOSED_HANDLER] = r.handler;
      }
      subApp.#addRoute(r.method, r.path, handler);
    });
    return this;
  }
  basePath(path) {
    const subApp = this.#clone();
    subApp._basePath = mergePath(this._basePath, path);
    return subApp;
  }
  onError = (handler) => {
    this.errorHandler = handler;
    return this;
  };
  notFound = (handler) => {
    this.#notFoundHandler = handler;
    return this;
  };
  mount(path, applicationHandler, options) {
    let replaceRequest;
    let optionHandler;
    if (options) {
      if (typeof options === "function") {
        optionHandler = options;
      } else {
        optionHandler = options.optionHandler;
        if (options.replaceRequest === false) {
          replaceRequest = (request) => request;
        } else {
          replaceRequest = options.replaceRequest;
        }
      }
    }
    const getOptions = optionHandler ? (c) => {
      const options2 = optionHandler(c);
      return Array.isArray(options2) ? options2 : [options2];
    } : (c) => {
      let executionContext = void 0;
      try {
        executionContext = c.executionCtx;
      } catch {
      }
      return [c.env, executionContext];
    };
    replaceRequest ||= (() => {
      const mergedPath = mergePath(this._basePath, path);
      const pathPrefixLength = mergedPath === "/" ? 0 : mergedPath.length;
      return (request) => {
        const url = new URL(request.url);
        url.pathname = url.pathname.slice(pathPrefixLength) || "/";
        return new Request(url, request);
      };
    })();
    const handler = async (c, next) => {
      const res = await applicationHandler(replaceRequest(c.req.raw), ...getOptions(c));
      if (res) {
        return res;
      }
      await next();
    };
    this.#addRoute(METHOD_NAME_ALL, mergePath(path, "*"), handler);
    return this;
  }
  #addRoute(method, path, handler) {
    method = method.toUpperCase();
    path = mergePath(this._basePath, path);
    const r = { basePath: this._basePath, path, method, handler };
    this.router.add(method, path, [handler, r]);
    this.routes.push(r);
  }
  #handleError(err, c) {
    if (err instanceof Error) {
      return this.errorHandler(err, c);
    }
    throw err;
  }
  #dispatch(request, executionCtx, env, method) {
    if (method === "HEAD") {
      return (async () => new Response(null, await this.#dispatch(request, executionCtx, env, "GET")))();
    }
    const path = this.getPath(request, { env });
    const matchResult = this.router.match(method, path);
    const c = new Context(request, {
      path,
      matchResult,
      env,
      executionCtx,
      notFoundHandler: this.#notFoundHandler
    });
    if (matchResult[0].length === 1) {
      let res;
      try {
        res = matchResult[0][0][0][0](c, async () => {
          c.res = await this.#notFoundHandler(c);
        });
      } catch (err) {
        return this.#handleError(err, c);
      }
      return res instanceof Promise ? res.then(
        (resolved2) => resolved2 || (c.finalized ? c.res : this.#notFoundHandler(c))
      ).catch((err) => this.#handleError(err, c)) : res ?? this.#notFoundHandler(c);
    }
    const composed = compose(matchResult[0], this.errorHandler, this.#notFoundHandler);
    return (async () => {
      try {
        const context2 = await composed(c);
        if (!context2.finalized) {
          throw new Error(
            "Context is not finalized. Did you forget to return a Response object or `await next()`?"
          );
        }
        return context2.res;
      } catch (err) {
        return this.#handleError(err, c);
      }
    })();
  }
  fetch = (request, ...rest) => {
    return this.#dispatch(request, rest[1], rest[0], request.method);
  };
  request = (input, requestInit, Env4, executionCtx) => {
    if (input instanceof Request) {
      return this.fetch(requestInit ? new Request(input, requestInit) : input, Env4, executionCtx);
    }
    input = input.toString();
    return this.fetch(
      new Request(
        /^https?:\/\//.test(input) ? input : `http://localhost${mergePath("/", input)}`,
        requestInit
      ),
      Env4,
      executionCtx
    );
  };
  fire = () => {
    addEventListener("fetch", (event) => {
      event.respondWith(this.#dispatch(event.request, event, void 0, event.request.method));
    });
  };
};

// node_modules/hono/dist/router/reg-exp-router/node.js
var LABEL_REG_EXP_STR = "[^/]+";
var ONLY_WILDCARD_REG_EXP_STR = ".*";
var TAIL_WILDCARD_REG_EXP_STR = "(?:|/.*)";
var PATH_ERROR = Symbol();
var regExpMetaChars = new Set(".\\+*[^]$()");
function compareKey(a, b) {
  if (a.length === 1) {
    return b.length === 1 ? a < b ? -1 : 1 : -1;
  }
  if (b.length === 1) {
    return 1;
  }
  if (a === ONLY_WILDCARD_REG_EXP_STR || a === TAIL_WILDCARD_REG_EXP_STR) {
    return 1;
  } else if (b === ONLY_WILDCARD_REG_EXP_STR || b === TAIL_WILDCARD_REG_EXP_STR) {
    return -1;
  }
  if (a === LABEL_REG_EXP_STR) {
    return 1;
  } else if (b === LABEL_REG_EXP_STR) {
    return -1;
  }
  return a.length === b.length ? a < b ? -1 : 1 : b.length - a.length;
}
var Node = class {
  #index;
  #varIndex;
  #children = /* @__PURE__ */ Object.create(null);
  insert(tokens, index, paramMap, context2, pathErrorCheckOnly) {
    if (tokens.length === 0) {
      if (this.#index !== void 0) {
        throw PATH_ERROR;
      }
      if (pathErrorCheckOnly) {
        return;
      }
      this.#index = index;
      return;
    }
    const [token, ...restTokens] = tokens;
    const pattern = token === "*" ? restTokens.length === 0 ? ["", "", ONLY_WILDCARD_REG_EXP_STR] : ["", "", LABEL_REG_EXP_STR] : token === "/*" ? ["", "", TAIL_WILDCARD_REG_EXP_STR] : token.match(/^\:([^\{\}]+)(?:\{(.+)\})?$/);
    let node;
    if (pattern) {
      const name = pattern[1];
      let regexpStr = pattern[2] || LABEL_REG_EXP_STR;
      if (name && pattern[2]) {
        if (regexpStr === ".*") {
          throw PATH_ERROR;
        }
        regexpStr = regexpStr.replace(/^\((?!\?:)(?=[^)]+\)$)/, "(?:");
        if (/\((?!\?:)/.test(regexpStr)) {
          throw PATH_ERROR;
        }
      }
      node = this.#children[regexpStr];
      if (!node) {
        if (Object.keys(this.#children).some(
          (k) => k !== ONLY_WILDCARD_REG_EXP_STR && k !== TAIL_WILDCARD_REG_EXP_STR
        )) {
          throw PATH_ERROR;
        }
        if (pathErrorCheckOnly) {
          return;
        }
        node = this.#children[regexpStr] = new Node();
        if (name !== "") {
          node.#varIndex = context2.varIndex++;
        }
      }
      if (!pathErrorCheckOnly && name !== "") {
        paramMap.push([name, node.#varIndex]);
      }
    } else {
      node = this.#children[token];
      if (!node) {
        if (Object.keys(this.#children).some(
          (k) => k.length > 1 && k !== ONLY_WILDCARD_REG_EXP_STR && k !== TAIL_WILDCARD_REG_EXP_STR
        )) {
          throw PATH_ERROR;
        }
        if (pathErrorCheckOnly) {
          return;
        }
        node = this.#children[token] = new Node();
      }
    }
    node.insert(restTokens, index, paramMap, context2, pathErrorCheckOnly);
  }
  buildRegExpStr() {
    const childKeys = Object.keys(this.#children).sort(compareKey);
    const strList = childKeys.map((k) => {
      const c = this.#children[k];
      return (typeof c.#varIndex === "number" ? `(${k})@${c.#varIndex}` : regExpMetaChars.has(k) ? `\\${k}` : k) + c.buildRegExpStr();
    });
    if (typeof this.#index === "number") {
      strList.unshift(`#${this.#index}`);
    }
    if (strList.length === 0) {
      return "";
    }
    if (strList.length === 1) {
      return strList[0];
    }
    return "(?:" + strList.join("|") + ")";
  }
};

// node_modules/hono/dist/router/reg-exp-router/trie.js
var Trie = class {
  #context = { varIndex: 0 };
  #root = new Node();
  insert(path, index, pathErrorCheckOnly) {
    const paramAssoc = [];
    const groups = [];
    for (let i = 0; ; ) {
      let replaced = false;
      path = path.replace(/\{[^}]+\}/g, (m) => {
        const mark = `@\\${i}`;
        groups[i] = [mark, m];
        i++;
        replaced = true;
        return mark;
      });
      if (!replaced) {
        break;
      }
    }
    const tokens = path.match(/(?::[^\/]+)|(?:\/\*$)|./g) || [];
    for (let i = groups.length - 1; i >= 0; i--) {
      const [mark] = groups[i];
      for (let j = tokens.length - 1; j >= 0; j--) {
        if (tokens[j].indexOf(mark) !== -1) {
          tokens[j] = tokens[j].replace(mark, groups[i][1]);
          break;
        }
      }
    }
    this.#root.insert(tokens, index, paramAssoc, this.#context, pathErrorCheckOnly);
    return paramAssoc;
  }
  buildRegExp() {
    let regexp = this.#root.buildRegExpStr();
    if (regexp === "") {
      return [/^$/, [], []];
    }
    let captureIndex = 0;
    const indexReplacementMap = [];
    const paramReplacementMap = [];
    regexp = regexp.replace(/#(\d+)|@(\d+)|\.\*\$/g, (_, handlerIndex, paramIndex) => {
      if (handlerIndex !== void 0) {
        indexReplacementMap[++captureIndex] = Number(handlerIndex);
        return "$()";
      }
      if (paramIndex !== void 0) {
        paramReplacementMap[Number(paramIndex)] = ++captureIndex;
        return "";
      }
      return "";
    });
    return [new RegExp(`^${regexp}`), indexReplacementMap, paramReplacementMap];
  }
};

// node_modules/hono/dist/router/reg-exp-router/router.js
var emptyParam = [];
var nullMatcher = [/^$/, [], /* @__PURE__ */ Object.create(null)];
var wildcardRegExpCache = /* @__PURE__ */ Object.create(null);
function buildWildcardRegExp(path) {
  return wildcardRegExpCache[path] ??= new RegExp(
    path === "*" ? "" : `^${path.replace(
      /\/\*$|([.\\+*[^\]$()])/g,
      (_, metaChar) => metaChar ? `\\${metaChar}` : "(?:|/.*)"
    )}$`
  );
}
function clearWildcardRegExpCache() {
  wildcardRegExpCache = /* @__PURE__ */ Object.create(null);
}
function buildMatcherFromPreprocessedRoutes(routes) {
  const trie = new Trie();
  const handlerData = [];
  if (routes.length === 0) {
    return nullMatcher;
  }
  const routesWithStaticPathFlag = routes.map(
    (route) => [!/\*|\/:/.test(route[0]), ...route]
  ).sort(
    ([isStaticA, pathA], [isStaticB, pathB]) => isStaticA ? 1 : isStaticB ? -1 : pathA.length - pathB.length
  );
  const staticMap = /* @__PURE__ */ Object.create(null);
  for (let i = 0, j = -1, len = routesWithStaticPathFlag.length; i < len; i++) {
    const [pathErrorCheckOnly, path, handlers] = routesWithStaticPathFlag[i];
    if (pathErrorCheckOnly) {
      staticMap[path] = [handlers.map(([h]) => [h, /* @__PURE__ */ Object.create(null)]), emptyParam];
    } else {
      j++;
    }
    let paramAssoc;
    try {
      paramAssoc = trie.insert(path, j, pathErrorCheckOnly);
    } catch (e) {
      throw e === PATH_ERROR ? new UnsupportedPathError(path) : e;
    }
    if (pathErrorCheckOnly) {
      continue;
    }
    handlerData[j] = handlers.map(([h, paramCount]) => {
      const paramIndexMap = /* @__PURE__ */ Object.create(null);
      paramCount -= 1;
      for (; paramCount >= 0; paramCount--) {
        const [key, value] = paramAssoc[paramCount];
        paramIndexMap[key] = value;
      }
      return [h, paramIndexMap];
    });
  }
  const [regexp, indexReplacementMap, paramReplacementMap] = trie.buildRegExp();
  for (let i = 0, len = handlerData.length; i < len; i++) {
    for (let j = 0, len2 = handlerData[i].length; j < len2; j++) {
      const map3 = handlerData[i][j]?.[1];
      if (!map3) {
        continue;
      }
      const keys2 = Object.keys(map3);
      for (let k = 0, len3 = keys2.length; k < len3; k++) {
        map3[keys2[k]] = paramReplacementMap[map3[keys2[k]]];
      }
    }
  }
  const handlerMap = [];
  for (const i in indexReplacementMap) {
    handlerMap[i] = handlerData[indexReplacementMap[i]];
  }
  return [regexp, handlerMap, staticMap];
}
function findMiddleware(middleware, path) {
  if (!middleware) {
    return void 0;
  }
  for (const k of Object.keys(middleware).sort((a, b) => b.length - a.length)) {
    if (buildWildcardRegExp(k).test(path)) {
      return [...middleware[k]];
    }
  }
  return void 0;
}
var RegExpRouter = class {
  name = "RegExpRouter";
  #middleware;
  #routes;
  constructor() {
    this.#middleware = { [METHOD_NAME_ALL]: /* @__PURE__ */ Object.create(null) };
    this.#routes = { [METHOD_NAME_ALL]: /* @__PURE__ */ Object.create(null) };
  }
  add(method, path, handler) {
    const middleware = this.#middleware;
    const routes = this.#routes;
    if (!middleware || !routes) {
      throw new Error(MESSAGE_MATCHER_IS_ALREADY_BUILT);
    }
    if (!middleware[method]) {
      ;
      [middleware, routes].forEach((handlerMap) => {
        handlerMap[method] = /* @__PURE__ */ Object.create(null);
        Object.keys(handlerMap[METHOD_NAME_ALL]).forEach((p) => {
          handlerMap[method][p] = [...handlerMap[METHOD_NAME_ALL][p]];
        });
      });
    }
    if (path === "/*") {
      path = "*";
    }
    const paramCount = (path.match(/\/:/g) || []).length;
    if (/\*$/.test(path)) {
      const re = buildWildcardRegExp(path);
      if (method === METHOD_NAME_ALL) {
        Object.keys(middleware).forEach((m) => {
          middleware[m][path] ||= findMiddleware(middleware[m], path) || findMiddleware(middleware[METHOD_NAME_ALL], path) || [];
        });
      } else {
        middleware[method][path] ||= findMiddleware(middleware[method], path) || findMiddleware(middleware[METHOD_NAME_ALL], path) || [];
      }
      Object.keys(middleware).forEach((m) => {
        if (method === METHOD_NAME_ALL || method === m) {
          Object.keys(middleware[m]).forEach((p) => {
            re.test(p) && middleware[m][p].push([handler, paramCount]);
          });
        }
      });
      Object.keys(routes).forEach((m) => {
        if (method === METHOD_NAME_ALL || method === m) {
          Object.keys(routes[m]).forEach(
            (p) => re.test(p) && routes[m][p].push([handler, paramCount])
          );
        }
      });
      return;
    }
    const paths = checkOptionalParameter(path) || [path];
    for (let i = 0, len = paths.length; i < len; i++) {
      const path2 = paths[i];
      Object.keys(routes).forEach((m) => {
        if (method === METHOD_NAME_ALL || method === m) {
          routes[m][path2] ||= [
            ...findMiddleware(middleware[m], path2) || findMiddleware(middleware[METHOD_NAME_ALL], path2) || []
          ];
          routes[m][path2].push([handler, paramCount - len + i + 1]);
        }
      });
    }
  }
  match(method, path) {
    clearWildcardRegExpCache();
    const matchers = this.#buildAllMatchers();
    this.match = (method2, path2) => {
      const matcher = matchers[method2] || matchers[METHOD_NAME_ALL];
      const staticMatch = matcher[2][path2];
      if (staticMatch) {
        return staticMatch;
      }
      const match = path2.match(matcher[0]);
      if (!match) {
        return [[], emptyParam];
      }
      const index = match.indexOf("", 1);
      return [matcher[1][index], match];
    };
    return this.match(method, path);
  }
  #buildAllMatchers() {
    const matchers = /* @__PURE__ */ Object.create(null);
    Object.keys(this.#routes).concat(Object.keys(this.#middleware)).forEach((method) => {
      matchers[method] ||= this.#buildMatcher(method);
    });
    this.#middleware = this.#routes = void 0;
    return matchers;
  }
  #buildMatcher(method) {
    const routes = [];
    let hasOwnRoute = method === METHOD_NAME_ALL;
    [this.#middleware, this.#routes].forEach((r) => {
      const ownRoute = r[method] ? Object.keys(r[method]).map((path) => [path, r[method][path]]) : [];
      if (ownRoute.length !== 0) {
        hasOwnRoute ||= true;
        routes.push(...ownRoute);
      } else if (method !== METHOD_NAME_ALL) {
        routes.push(
          ...Object.keys(r[METHOD_NAME_ALL]).map((path) => [path, r[METHOD_NAME_ALL][path]])
        );
      }
    });
    if (!hasOwnRoute) {
      return null;
    } else {
      return buildMatcherFromPreprocessedRoutes(routes);
    }
  }
};

// node_modules/hono/dist/router/smart-router/router.js
var SmartRouter = class {
  name = "SmartRouter";
  #routers = [];
  #routes = [];
  constructor(init2) {
    this.#routers = init2.routers;
  }
  add(method, path, handler) {
    if (!this.#routes) {
      throw new Error(MESSAGE_MATCHER_IS_ALREADY_BUILT);
    }
    this.#routes.push([method, path, handler]);
  }
  match(method, path) {
    if (!this.#routes) {
      throw new Error("Fatal error");
    }
    const routers = this.#routers;
    const routes = this.#routes;
    const len = routers.length;
    let i = 0;
    let res;
    for (; i < len; i++) {
      const router = routers[i];
      try {
        for (let i2 = 0, len2 = routes.length; i2 < len2; i2++) {
          router.add(...routes[i2]);
        }
        res = router.match(method, path);
      } catch (e) {
        if (e instanceof UnsupportedPathError) {
          continue;
        }
        throw e;
      }
      this.match = router.match.bind(router);
      this.#routers = [router];
      this.#routes = void 0;
      break;
    }
    if (i === len) {
      throw new Error("Fatal error");
    }
    this.name = `SmartRouter + ${this.activeRouter.name}`;
    return res;
  }
  get activeRouter() {
    if (this.#routes || this.#routers.length !== 1) {
      throw new Error("No active router has been determined yet.");
    }
    return this.#routers[0];
  }
};

// node_modules/hono/dist/router/trie-router/node.js
var emptyParams = /* @__PURE__ */ Object.create(null);
var Node2 = class {
  #methods;
  #children;
  #patterns;
  #order = 0;
  #params = emptyParams;
  constructor(method, handler, children) {
    this.#children = children || /* @__PURE__ */ Object.create(null);
    this.#methods = [];
    if (method && handler) {
      const m = /* @__PURE__ */ Object.create(null);
      m[method] = { handler, possibleKeys: [], score: 0 };
      this.#methods = [m];
    }
    this.#patterns = [];
  }
  insert(method, path, handler) {
    this.#order = ++this.#order;
    let curNode = this;
    const parts = splitRoutingPath(path);
    const possibleKeys = [];
    for (let i = 0, len = parts.length; i < len; i++) {
      const p = parts[i];
      const nextP = parts[i + 1];
      const pattern = getPattern(p, nextP);
      const key = Array.isArray(pattern) ? pattern[0] : p;
      if (key in curNode.#children) {
        curNode = curNode.#children[key];
        if (pattern) {
          possibleKeys.push(pattern[1]);
        }
        continue;
      }
      curNode.#children[key] = new Node2();
      if (pattern) {
        curNode.#patterns.push(pattern);
        possibleKeys.push(pattern[1]);
      }
      curNode = curNode.#children[key];
    }
    curNode.#methods.push({
      [method]: {
        handler,
        possibleKeys: possibleKeys.filter((v, i, a) => a.indexOf(v) === i),
        score: this.#order
      }
    });
    return curNode;
  }
  #getHandlerSets(node, method, nodeParams, params) {
    const handlerSets = [];
    for (let i = 0, len = node.#methods.length; i < len; i++) {
      const m = node.#methods[i];
      const handlerSet = m[method] || m[METHOD_NAME_ALL];
      const processedSet = {};
      if (handlerSet !== void 0) {
        handlerSet.params = /* @__PURE__ */ Object.create(null);
        handlerSets.push(handlerSet);
        if (nodeParams !== emptyParams || params && params !== emptyParams) {
          for (let i2 = 0, len2 = handlerSet.possibleKeys.length; i2 < len2; i2++) {
            const key = handlerSet.possibleKeys[i2];
            const processed = processedSet[handlerSet.score];
            handlerSet.params[key] = params?.[key] && !processed ? params[key] : nodeParams[key] ?? params?.[key];
            processedSet[handlerSet.score] = true;
          }
        }
      }
    }
    return handlerSets;
  }
  search(method, path) {
    const handlerSets = [];
    this.#params = emptyParams;
    const curNode = this;
    let curNodes = [curNode];
    const parts = splitPath(path);
    const curNodesQueue = [];
    for (let i = 0, len = parts.length; i < len; i++) {
      const part = parts[i];
      const isLast = i === len - 1;
      const tempNodes = [];
      for (let j = 0, len2 = curNodes.length; j < len2; j++) {
        const node = curNodes[j];
        const nextNode = node.#children[part];
        if (nextNode) {
          nextNode.#params = node.#params;
          if (isLast) {
            if (nextNode.#children["*"]) {
              handlerSets.push(
                ...this.#getHandlerSets(nextNode.#children["*"], method, node.#params)
              );
            }
            handlerSets.push(...this.#getHandlerSets(nextNode, method, node.#params));
          } else {
            tempNodes.push(nextNode);
          }
        }
        for (let k = 0, len3 = node.#patterns.length; k < len3; k++) {
          const pattern = node.#patterns[k];
          const params = node.#params === emptyParams ? {} : { ...node.#params };
          if (pattern === "*") {
            const astNode = node.#children["*"];
            if (astNode) {
              handlerSets.push(...this.#getHandlerSets(astNode, method, node.#params));
              astNode.#params = params;
              tempNodes.push(astNode);
            }
            continue;
          }
          const [key, name, matcher] = pattern;
          if (!part && !(matcher instanceof RegExp)) {
            continue;
          }
          const child = node.#children[key];
          const restPathString = parts.slice(i).join("/");
          if (matcher instanceof RegExp) {
            const m = matcher.exec(restPathString);
            if (m) {
              params[name] = m[0];
              handlerSets.push(...this.#getHandlerSets(child, method, node.#params, params));
              if (Object.keys(child.#children).length) {
                child.#params = params;
                const componentCount = m[0].match(/\//)?.length ?? 0;
                const targetCurNodes = curNodesQueue[componentCount] ||= [];
                targetCurNodes.push(child);
              }
              continue;
            }
          }
          if (matcher === true || matcher.test(part)) {
            params[name] = part;
            if (isLast) {
              handlerSets.push(...this.#getHandlerSets(child, method, params, node.#params));
              if (child.#children["*"]) {
                handlerSets.push(
                  ...this.#getHandlerSets(child.#children["*"], method, params, node.#params)
                );
              }
            } else {
              child.#params = params;
              tempNodes.push(child);
            }
          }
        }
      }
      curNodes = tempNodes.concat(curNodesQueue.shift() ?? []);
    }
    if (handlerSets.length > 1) {
      handlerSets.sort((a, b) => {
        return a.score - b.score;
      });
    }
    return [handlerSets.map(({ handler, params }) => [handler, params])];
  }
};

// node_modules/hono/dist/router/trie-router/router.js
var TrieRouter = class {
  name = "TrieRouter";
  #node;
  constructor() {
    this.#node = new Node2();
  }
  add(method, path, handler) {
    const results = checkOptionalParameter(path);
    if (results) {
      for (let i = 0, len = results.length; i < len; i++) {
        this.#node.insert(method, results[i], handler);
      }
      return;
    }
    this.#node.insert(method, path, handler);
  }
  match(method, path) {
    return this.#node.search(method, path);
  }
};

// node_modules/hono/dist/hono.js
var Hono2 = class extends Hono {
  constructor(options = {}) {
    super(options);
    this.router = options.router ?? new SmartRouter({
      routers: [new RegExpRouter(), new TrieRouter()]
    });
  }
};

// node_modules/drizzle-orm/entity.js
var entityKind = Symbol.for("drizzle:entityKind");
var hasOwnEntityKind = Symbol.for("drizzle:hasOwnEntityKind");
function is(value, type) {
  if (!value || typeof value !== "object") {
    return false;
  }
  if (value instanceof type) {
    return true;
  }
  if (!Object.prototype.hasOwnProperty.call(type, entityKind)) {
    throw new Error(
      `Class "${type.name ?? "<unknown>"}" doesn't look like a Drizzle entity. If this is incorrect and the class is provided by Drizzle, please report this as a bug.`
    );
  }
  let cls = Object.getPrototypeOf(value).constructor;
  if (cls) {
    while (cls) {
      if (entityKind in cls && cls[entityKind] === type[entityKind]) {
        return true;
      }
      cls = Object.getPrototypeOf(cls);
    }
  }
  return false;
}

// node_modules/drizzle-orm/logger.js
var ConsoleLogWriter = class {
  static [entityKind] = "ConsoleLogWriter";
  write(message) {
    console.log(message);
  }
};
var DefaultLogger = class {
  static [entityKind] = "DefaultLogger";
  writer;
  constructor(config4) {
    this.writer = config4?.writer ?? new ConsoleLogWriter();
  }
  logQuery(query2, params) {
    const stringifiedParams = params.map((p) => {
      try {
        return JSON.stringify(p);
      } catch {
        return String(p);
      }
    });
    const paramsStr = stringifiedParams.length ? ` -- params: [${stringifiedParams.join(", ")}]` : "";
    this.writer.write(`Query: ${query2}${paramsStr}`);
  }
};
var NoopLogger = class {
  static [entityKind] = "NoopLogger";
  logQuery() {
  }
};

// node_modules/drizzle-orm/table.utils.js
var TableName = Symbol.for("drizzle:Name");

// node_modules/drizzle-orm/table.js
var Schema = Symbol.for("drizzle:Schema");
var Columns = Symbol.for("drizzle:Columns");
var ExtraConfigColumns = Symbol.for("drizzle:ExtraConfigColumns");
var OriginalName = Symbol.for("drizzle:OriginalName");
var BaseName = Symbol.for("drizzle:BaseName");
var IsAlias = Symbol.for("drizzle:IsAlias");
var ExtraConfigBuilder = Symbol.for("drizzle:ExtraConfigBuilder");
var IsDrizzleTable = Symbol.for("drizzle:IsDrizzleTable");
var Table = class {
  static [entityKind] = "Table";
  /** @internal */
  static Symbol = {
    Name: TableName,
    Schema,
    OriginalName,
    Columns,
    ExtraConfigColumns,
    BaseName,
    IsAlias,
    ExtraConfigBuilder
  };
  /**
   * @internal
   * Can be changed if the table is aliased.
   */
  [TableName];
  /**
   * @internal
   * Used to store the original name of the table, before any aliasing.
   */
  [OriginalName];
  /** @internal */
  [Schema];
  /** @internal */
  [Columns];
  /** @internal */
  [ExtraConfigColumns];
  /**
   *  @internal
   * Used to store the table name before the transformation via the `tableCreator` functions.
   */
  [BaseName];
  /** @internal */
  [IsAlias] = false;
  /** @internal */
  [IsDrizzleTable] = true;
  /** @internal */
  [ExtraConfigBuilder] = void 0;
  constructor(name, schema, baseName) {
    this[TableName] = this[OriginalName] = name;
    this[Schema] = schema;
    this[BaseName] = baseName;
  }
};
function getTableName(table) {
  return table[TableName];
}
function getTableUniqueName(table) {
  return `${table[Schema] ?? "public"}.${table[TableName]}`;
}

// node_modules/drizzle-orm/column.js
var Column = class {
  constructor(table, config4) {
    this.table = table;
    this.config = config4;
    this.name = config4.name;
    this.keyAsName = config4.keyAsName;
    this.notNull = config4.notNull;
    this.default = config4.default;
    this.defaultFn = config4.defaultFn;
    this.onUpdateFn = config4.onUpdateFn;
    this.hasDefault = config4.hasDefault;
    this.primary = config4.primaryKey;
    this.isUnique = config4.isUnique;
    this.uniqueName = config4.uniqueName;
    this.uniqueType = config4.uniqueType;
    this.dataType = config4.dataType;
    this.columnType = config4.columnType;
    this.generated = config4.generated;
    this.generatedIdentity = config4.generatedIdentity;
  }
  static [entityKind] = "Column";
  name;
  keyAsName;
  primary;
  notNull;
  default;
  defaultFn;
  onUpdateFn;
  hasDefault;
  isUnique;
  uniqueName;
  uniqueType;
  dataType;
  columnType;
  enumValues = void 0;
  generated = void 0;
  generatedIdentity = void 0;
  config;
  mapFromDriverValue(value) {
    return value;
  }
  mapToDriverValue(value) {
    return value;
  }
  // ** @internal */
  shouldDisableInsert() {
    return this.config.generated !== void 0 && this.config.generated.type !== "byDefault";
  }
};

// node_modules/drizzle-orm/column-builder.js
var ColumnBuilder = class {
  static [entityKind] = "ColumnBuilder";
  config;
  constructor(name, dataType, columnType) {
    this.config = {
      name,
      keyAsName: name === "",
      notNull: false,
      default: void 0,
      hasDefault: false,
      primaryKey: false,
      isUnique: false,
      uniqueName: void 0,
      uniqueType: void 0,
      dataType,
      columnType,
      generated: void 0
    };
  }
  /**
   * Changes the data type of the column. Commonly used with `json` columns. Also, useful for branded types.
   *
   * @example
   * ```ts
   * const users = pgTable('users', {
   * 	id: integer('id').$type<UserId>().primaryKey(),
   * 	details: json('details').$type<UserDetails>().notNull(),
   * });
   * ```
   */
  $type() {
    return this;
  }
  /**
   * Adds a `not null` clause to the column definition.
   *
   * Affects the `select` model of the table - columns *without* `not null` will be nullable on select.
   */
  notNull() {
    this.config.notNull = true;
    return this;
  }
  /**
   * Adds a `default <value>` clause to the column definition.
   *
   * Affects the `insert` model of the table - columns *with* `default` are optional on insert.
   *
   * If you need to set a dynamic default value, use {@link $defaultFn} instead.
   */
  default(value) {
    this.config.default = value;
    this.config.hasDefault = true;
    return this;
  }
  /**
   * Adds a dynamic default value to the column.
   * The function will be called when the row is inserted, and the returned value will be used as the column value.
   *
   * **Note:** This value does not affect the `drizzle-kit` behavior, it is only used at runtime in `drizzle-orm`.
   */
  $defaultFn(fn) {
    this.config.defaultFn = fn;
    this.config.hasDefault = true;
    return this;
  }
  /**
   * Alias for {@link $defaultFn}.
   */
  $default = this.$defaultFn;
  /**
   * Adds a dynamic update value to the column.
   * The function will be called when the row is updated, and the returned value will be used as the column value if none is provided.
   * If no `default` (or `$defaultFn`) value is provided, the function will be called when the row is inserted as well, and the returned value will be used as the column value.
   *
   * **Note:** This value does not affect the `drizzle-kit` behavior, it is only used at runtime in `drizzle-orm`.
   */
  $onUpdateFn(fn) {
    this.config.onUpdateFn = fn;
    this.config.hasDefault = true;
    return this;
  }
  /**
   * Alias for {@link $onUpdateFn}.
   */
  $onUpdate = this.$onUpdateFn;
  /**
   * Adds a `primary key` clause to the column definition. This implicitly makes the column `not null`.
   *
   * In SQLite, `integer primary key` implicitly makes the column auto-incrementing.
   */
  primaryKey() {
    this.config.primaryKey = true;
    this.config.notNull = true;
    return this;
  }
  /** @internal Sets the name of the column to the key within the table definition if a name was not given. */
  setName(name) {
    if (this.config.name !== "") return;
    this.config.name = name;
  }
};

// node_modules/drizzle-orm/pg-core/foreign-keys.js
var ForeignKeyBuilder = class {
  static [entityKind] = "PgForeignKeyBuilder";
  /** @internal */
  reference;
  /** @internal */
  _onUpdate = "no action";
  /** @internal */
  _onDelete = "no action";
  constructor(config4, actions) {
    this.reference = () => {
      const { name, columns, foreignColumns } = config4();
      return { name, columns, foreignTable: foreignColumns[0].table, foreignColumns };
    };
    if (actions) {
      this._onUpdate = actions.onUpdate;
      this._onDelete = actions.onDelete;
    }
  }
  onUpdate(action) {
    this._onUpdate = action === void 0 ? "no action" : action;
    return this;
  }
  onDelete(action) {
    this._onDelete = action === void 0 ? "no action" : action;
    return this;
  }
  /** @internal */
  build(table) {
    return new ForeignKey(table, this);
  }
};
var ForeignKey = class {
  constructor(table, builder) {
    this.table = table;
    this.reference = builder.reference;
    this.onUpdate = builder._onUpdate;
    this.onDelete = builder._onDelete;
  }
  static [entityKind] = "PgForeignKey";
  reference;
  onUpdate;
  onDelete;
  getName() {
    const { name, columns, foreignColumns } = this.reference();
    const columnNames = columns.map((column) => column.name);
    const foreignColumnNames = foreignColumns.map((column) => column.name);
    const chunks = [
      this.table[TableName],
      ...columnNames,
      foreignColumns[0].table[TableName],
      ...foreignColumnNames
    ];
    return name ?? `${chunks.join("_")}_fk`;
  }
};

// node_modules/drizzle-orm/tracing-utils.js
function iife(fn, ...args) {
  return fn(...args);
}

// node_modules/drizzle-orm/pg-core/unique-constraint.js
function uniqueKeyName(table, columns) {
  return `${table[TableName]}_${columns.join("_")}_unique`;
}
var UniqueConstraintBuilder = class {
  constructor(columns, name) {
    this.name = name;
    this.columns = columns;
  }
  static [entityKind] = "PgUniqueConstraintBuilder";
  /** @internal */
  columns;
  /** @internal */
  nullsNotDistinctConfig = false;
  nullsNotDistinct() {
    this.nullsNotDistinctConfig = true;
    return this;
  }
  /** @internal */
  build(table) {
    return new UniqueConstraint(table, this.columns, this.nullsNotDistinctConfig, this.name);
  }
};
var UniqueOnConstraintBuilder = class {
  static [entityKind] = "PgUniqueOnConstraintBuilder";
  /** @internal */
  name;
  constructor(name) {
    this.name = name;
  }
  on(...columns) {
    return new UniqueConstraintBuilder(columns, this.name);
  }
};
var UniqueConstraint = class {
  constructor(table, columns, nullsNotDistinct, name) {
    this.table = table;
    this.columns = columns;
    this.name = name ?? uniqueKeyName(this.table, this.columns.map((column) => column.name));
    this.nullsNotDistinct = nullsNotDistinct;
  }
  static [entityKind] = "PgUniqueConstraint";
  columns;
  name;
  nullsNotDistinct = false;
  getName() {
    return this.name;
  }
};

// node_modules/drizzle-orm/pg-core/utils/array.js
function parsePgArrayValue(arrayString, startFrom, inQuotes) {
  for (let i = startFrom; i < arrayString.length; i++) {
    const char = arrayString[i];
    if (char === "\\") {
      i++;
      continue;
    }
    if (char === '"') {
      return [arrayString.slice(startFrom, i).replace(/\\/g, ""), i + 1];
    }
    if (inQuotes) {
      continue;
    }
    if (char === "," || char === "}") {
      return [arrayString.slice(startFrom, i).replace(/\\/g, ""), i];
    }
  }
  return [arrayString.slice(startFrom).replace(/\\/g, ""), arrayString.length];
}
function parsePgNestedArray(arrayString, startFrom = 0) {
  const result = [];
  let i = startFrom;
  let lastCharIsComma = false;
  while (i < arrayString.length) {
    const char = arrayString[i];
    if (char === ",") {
      if (lastCharIsComma || i === startFrom) {
        result.push("");
      }
      lastCharIsComma = true;
      i++;
      continue;
    }
    lastCharIsComma = false;
    if (char === "\\") {
      i += 2;
      continue;
    }
    if (char === '"') {
      const [value2, startFrom2] = parsePgArrayValue(arrayString, i + 1, true);
      result.push(value2);
      i = startFrom2;
      continue;
    }
    if (char === "}") {
      return [result, i + 1];
    }
    if (char === "{") {
      const [value2, startFrom2] = parsePgNestedArray(arrayString, i + 1);
      result.push(value2);
      i = startFrom2;
      continue;
    }
    const [value, newStartFrom] = parsePgArrayValue(arrayString, i, false);
    result.push(value);
    i = newStartFrom;
  }
  return [result, i];
}
function parsePgArray(arrayString) {
  const [result] = parsePgNestedArray(arrayString, 1);
  return result;
}
function makePgArray(array) {
  return `{${array.map((item) => {
    if (Array.isArray(item)) {
      return makePgArray(item);
    }
    if (typeof item === "string") {
      return `"${item.replace(/\\/g, "\\\\").replace(/"/g, '\\"')}"`;
    }
    return `${item}`;
  }).join(",")}}`;
}

// node_modules/drizzle-orm/pg-core/columns/common.js
var PgColumnBuilder = class extends ColumnBuilder {
  foreignKeyConfigs = [];
  static [entityKind] = "PgColumnBuilder";
  array(size) {
    return new PgArrayBuilder(this.config.name, this, size);
  }
  references(ref, actions = {}) {
    this.foreignKeyConfigs.push({ ref, actions });
    return this;
  }
  unique(name, config4) {
    this.config.isUnique = true;
    this.config.uniqueName = name;
    this.config.uniqueType = config4?.nulls;
    return this;
  }
  generatedAlwaysAs(as) {
    this.config.generated = {
      as,
      type: "always",
      mode: "stored"
    };
    return this;
  }
  /** @internal */
  buildForeignKeys(column, table) {
    return this.foreignKeyConfigs.map(({ ref, actions }) => {
      return iife(
        (ref2, actions2) => {
          const builder = new ForeignKeyBuilder(() => {
            const foreignColumn = ref2();
            return { columns: [column], foreignColumns: [foreignColumn] };
          });
          if (actions2.onUpdate) {
            builder.onUpdate(actions2.onUpdate);
          }
          if (actions2.onDelete) {
            builder.onDelete(actions2.onDelete);
          }
          return builder.build(table);
        },
        ref,
        actions
      );
    });
  }
  /** @internal */
  buildExtraConfigColumn(table) {
    return new ExtraConfigColumn(table, this.config);
  }
};
var PgColumn = class extends Column {
  constructor(table, config4) {
    if (!config4.uniqueName) {
      config4.uniqueName = uniqueKeyName(table, [config4.name]);
    }
    super(table, config4);
    this.table = table;
  }
  static [entityKind] = "PgColumn";
};
var ExtraConfigColumn = class extends PgColumn {
  static [entityKind] = "ExtraConfigColumn";
  getSQLType() {
    return this.getSQLType();
  }
  indexConfig = {
    order: this.config.order ?? "asc",
    nulls: this.config.nulls ?? "last",
    opClass: this.config.opClass
  };
  defaultConfig = {
    order: "asc",
    nulls: "last",
    opClass: void 0
  };
  asc() {
    this.indexConfig.order = "asc";
    return this;
  }
  desc() {
    this.indexConfig.order = "desc";
    return this;
  }
  nullsFirst() {
    this.indexConfig.nulls = "first";
    return this;
  }
  nullsLast() {
    this.indexConfig.nulls = "last";
    return this;
  }
  /**
   * ### PostgreSQL documentation quote
   *
   * > An operator class with optional parameters can be specified for each column of an index.
   * The operator class identifies the operators to be used by the index for that column.
   * For example, a B-tree index on four-byte integers would use the int4_ops class;
   * this operator class includes comparison functions for four-byte integers.
   * In practice the default operator class for the column's data type is usually sufficient.
   * The main point of having operator classes is that for some data types, there could be more than one meaningful ordering.
   * For example, we might want to sort a complex-number data type either by absolute value or by real part.
   * We could do this by defining two operator classes for the data type and then selecting the proper class when creating an index.
   * More information about operator classes check:
   *
   * ### Useful links
   * https://www.postgresql.org/docs/current/sql-createindex.html
   *
   * https://www.postgresql.org/docs/current/indexes-opclass.html
   *
   * https://www.postgresql.org/docs/current/xindex.html
   *
   * ### Additional types
   * If you have the `pg_vector` extension installed in your database, you can use the
   * `vector_l2_ops`, `vector_ip_ops`, `vector_cosine_ops`, `vector_l1_ops`, `bit_hamming_ops`, `bit_jaccard_ops`, `halfvec_l2_ops`, `sparsevec_l2_ops` options, which are predefined types.
   *
   * **You can always specify any string you want in the operator class, in case Drizzle doesn't have it natively in its types**
   *
   * @param opClass
   * @returns
   */
  op(opClass) {
    this.indexConfig.opClass = opClass;
    return this;
  }
};
var IndexedColumn = class {
  static [entityKind] = "IndexedColumn";
  constructor(name, keyAsName, type, indexConfig) {
    this.name = name;
    this.keyAsName = keyAsName;
    this.type = type;
    this.indexConfig = indexConfig;
  }
  name;
  keyAsName;
  type;
  indexConfig;
};
var PgArrayBuilder = class extends PgColumnBuilder {
  static [entityKind] = "PgArrayBuilder";
  constructor(name, baseBuilder, size) {
    super(name, "array", "PgArray");
    this.config.baseBuilder = baseBuilder;
    this.config.size = size;
  }
  /** @internal */
  build(table) {
    const baseColumn = this.config.baseBuilder.build(table);
    return new PgArray(
      table,
      this.config,
      baseColumn
    );
  }
};
var PgArray = class _PgArray extends PgColumn {
  constructor(table, config4, baseColumn, range) {
    super(table, config4);
    this.baseColumn = baseColumn;
    this.range = range;
    this.size = config4.size;
  }
  size;
  static [entityKind] = "PgArray";
  getSQLType() {
    return `${this.baseColumn.getSQLType()}[${typeof this.size === "number" ? this.size : ""}]`;
  }
  mapFromDriverValue(value) {
    if (typeof value === "string") {
      value = parsePgArray(value);
    }
    return value.map((v) => this.baseColumn.mapFromDriverValue(v));
  }
  mapToDriverValue(value, isNestedArray = false) {
    const a = value.map(
      (v) => v === null ? null : is(this.baseColumn, _PgArray) ? this.baseColumn.mapToDriverValue(v, true) : this.baseColumn.mapToDriverValue(v)
    );
    if (isNestedArray) return a;
    return makePgArray(a);
  }
};

// node_modules/drizzle-orm/pg-core/columns/enum.js
var PgEnumObjectColumnBuilder = class extends PgColumnBuilder {
  static [entityKind] = "PgEnumObjectColumnBuilder";
  constructor(name, enumInstance) {
    super(name, "string", "PgEnumObjectColumn");
    this.config.enum = enumInstance;
  }
  /** @internal */
  build(table) {
    return new PgEnumObjectColumn(
      table,
      this.config
    );
  }
};
var PgEnumObjectColumn = class extends PgColumn {
  static [entityKind] = "PgEnumObjectColumn";
  enum;
  enumValues = this.config.enum.enumValues;
  constructor(table, config4) {
    super(table, config4);
    this.enum = config4.enum;
  }
  getSQLType() {
    return this.enum.enumName;
  }
};
var isPgEnumSym = Symbol.for("drizzle:isPgEnum");
function isPgEnum(obj) {
  return !!obj && typeof obj === "function" && isPgEnumSym in obj && obj[isPgEnumSym] === true;
}
var PgEnumColumnBuilder = class extends PgColumnBuilder {
  static [entityKind] = "PgEnumColumnBuilder";
  constructor(name, enumInstance) {
    super(name, "string", "PgEnumColumn");
    this.config.enum = enumInstance;
  }
  /** @internal */
  build(table) {
    return new PgEnumColumn(
      table,
      this.config
    );
  }
};
var PgEnumColumn = class extends PgColumn {
  static [entityKind] = "PgEnumColumn";
  enum = this.config.enum;
  enumValues = this.config.enum.enumValues;
  constructor(table, config4) {
    super(table, config4);
    this.enum = config4.enum;
  }
  getSQLType() {
    return this.enum.enumName;
  }
};

// node_modules/drizzle-orm/subquery.js
var Subquery = class {
  static [entityKind] = "Subquery";
  constructor(sql2, fields, alias2, isWith = false, usedTables = []) {
    this._ = {
      brand: "Subquery",
      sql: sql2,
      selectedFields: fields,
      alias: alias2,
      isWith,
      usedTables
    };
  }
  // getSQL(): SQL<unknown> {
  // 	return new SQL([this]);
  // }
};
var WithSubquery = class extends Subquery {
  static [entityKind] = "WithSubquery";
};

// node_modules/drizzle-orm/version.js
var version = "0.44.4";

// node_modules/drizzle-orm/tracing.js
var otel;
var rawTracer;
var tracer = {
  startActiveSpan(name, fn) {
    if (!otel) {
      return fn();
    }
    if (!rawTracer) {
      rawTracer = otel.trace.getTracer("drizzle-orm", version);
    }
    return iife(
      (otel2, rawTracer2) => rawTracer2.startActiveSpan(
        name,
        (span) => {
          try {
            return fn(span);
          } catch (e) {
            span.setStatus({
              code: otel2.SpanStatusCode.ERROR,
              message: e instanceof Error ? e.message : "Unknown error"
              // eslint-disable-line no-instanceof/no-instanceof
            });
            throw e;
          } finally {
            span.end();
          }
        }
      ),
      otel,
      rawTracer
    );
  }
};

// node_modules/drizzle-orm/view-common.js
var ViewBaseConfig = Symbol.for("drizzle:ViewBaseConfig");

// node_modules/drizzle-orm/sql/sql.js
var FakePrimitiveParam = class {
  static [entityKind] = "FakePrimitiveParam";
};
function isSQLWrapper(value) {
  return value !== null && value !== void 0 && typeof value.getSQL === "function";
}
function mergeQueries(queries) {
  const result = { sql: "", params: [] };
  for (const query2 of queries) {
    result.sql += query2.sql;
    result.params.push(...query2.params);
    if (query2.typings?.length) {
      if (!result.typings) {
        result.typings = [];
      }
      result.typings.push(...query2.typings);
    }
  }
  return result;
}
var StringChunk = class {
  static [entityKind] = "StringChunk";
  value;
  constructor(value) {
    this.value = Array.isArray(value) ? value : [value];
  }
  getSQL() {
    return new SQL([this]);
  }
};
var SQL = class _SQL {
  constructor(queryChunks) {
    this.queryChunks = queryChunks;
    for (const chunk of queryChunks) {
      if (is(chunk, Table)) {
        const schemaName = chunk[Table.Symbol.Schema];
        this.usedTables.push(
          schemaName === void 0 ? chunk[Table.Symbol.Name] : schemaName + "." + chunk[Table.Symbol.Name]
        );
      }
    }
  }
  static [entityKind] = "SQL";
  /** @internal */
  decoder = noopDecoder;
  shouldInlineParams = false;
  /** @internal */
  usedTables = [];
  append(query2) {
    this.queryChunks.push(...query2.queryChunks);
    return this;
  }
  toQuery(config4) {
    return tracer.startActiveSpan("drizzle.buildSQL", (span) => {
      const query2 = this.buildQueryFromSourceParams(this.queryChunks, config4);
      span?.setAttributes({
        "drizzle.query.text": query2.sql,
        "drizzle.query.params": JSON.stringify(query2.params)
      });
      return query2;
    });
  }
  buildQueryFromSourceParams(chunks, _config) {
    const config4 = Object.assign({}, _config, {
      inlineParams: _config.inlineParams || this.shouldInlineParams,
      paramStartIndex: _config.paramStartIndex || { value: 0 }
    });
    const {
      casing,
      escapeName,
      escapeParam,
      prepareTyping,
      inlineParams,
      paramStartIndex
    } = config4;
    return mergeQueries(chunks.map((chunk) => {
      if (is(chunk, StringChunk)) {
        return { sql: chunk.value.join(""), params: [] };
      }
      if (is(chunk, Name)) {
        return { sql: escapeName(chunk.value), params: [] };
      }
      if (chunk === void 0) {
        return { sql: "", params: [] };
      }
      if (Array.isArray(chunk)) {
        const result = [new StringChunk("(")];
        for (const [i, p] of chunk.entries()) {
          result.push(p);
          if (i < chunk.length - 1) {
            result.push(new StringChunk(", "));
          }
        }
        result.push(new StringChunk(")"));
        return this.buildQueryFromSourceParams(result, config4);
      }
      if (is(chunk, _SQL)) {
        return this.buildQueryFromSourceParams(chunk.queryChunks, {
          ...config4,
          inlineParams: inlineParams || chunk.shouldInlineParams
        });
      }
      if (is(chunk, Table)) {
        const schemaName = chunk[Table.Symbol.Schema];
        const tableName = chunk[Table.Symbol.Name];
        return {
          sql: schemaName === void 0 || chunk[IsAlias] ? escapeName(tableName) : escapeName(schemaName) + "." + escapeName(tableName),
          params: []
        };
      }
      if (is(chunk, Column)) {
        const columnName = casing.getColumnCasing(chunk);
        if (_config.invokeSource === "indexes") {
          return { sql: escapeName(columnName), params: [] };
        }
        const schemaName = chunk.table[Table.Symbol.Schema];
        return {
          sql: chunk.table[IsAlias] || schemaName === void 0 ? escapeName(chunk.table[Table.Symbol.Name]) + "." + escapeName(columnName) : escapeName(schemaName) + "." + escapeName(chunk.table[Table.Symbol.Name]) + "." + escapeName(columnName),
          params: []
        };
      }
      if (is(chunk, View)) {
        const schemaName = chunk[ViewBaseConfig].schema;
        const viewName = chunk[ViewBaseConfig].name;
        return {
          sql: schemaName === void 0 || chunk[ViewBaseConfig].isAlias ? escapeName(viewName) : escapeName(schemaName) + "." + escapeName(viewName),
          params: []
        };
      }
      if (is(chunk, Param)) {
        if (is(chunk.value, Placeholder)) {
          return { sql: escapeParam(paramStartIndex.value++, chunk), params: [chunk], typings: ["none"] };
        }
        const mappedValue = chunk.value === null ? null : chunk.encoder.mapToDriverValue(chunk.value);
        if (is(mappedValue, _SQL)) {
          return this.buildQueryFromSourceParams([mappedValue], config4);
        }
        if (inlineParams) {
          return { sql: this.mapInlineParam(mappedValue, config4), params: [] };
        }
        let typings = ["none"];
        if (prepareTyping) {
          typings = [prepareTyping(chunk.encoder)];
        }
        return { sql: escapeParam(paramStartIndex.value++, mappedValue), params: [mappedValue], typings };
      }
      if (is(chunk, Placeholder)) {
        return { sql: escapeParam(paramStartIndex.value++, chunk), params: [chunk], typings: ["none"] };
      }
      if (is(chunk, _SQL.Aliased) && chunk.fieldAlias !== void 0) {
        return { sql: escapeName(chunk.fieldAlias), params: [] };
      }
      if (is(chunk, Subquery)) {
        if (chunk._.isWith) {
          return { sql: escapeName(chunk._.alias), params: [] };
        }
        return this.buildQueryFromSourceParams([
          new StringChunk("("),
          chunk._.sql,
          new StringChunk(") "),
          new Name(chunk._.alias)
        ], config4);
      }
      if (isPgEnum(chunk)) {
        if (chunk.schema) {
          return { sql: escapeName(chunk.schema) + "." + escapeName(chunk.enumName), params: [] };
        }
        return { sql: escapeName(chunk.enumName), params: [] };
      }
      if (isSQLWrapper(chunk)) {
        if (chunk.shouldOmitSQLParens?.()) {
          return this.buildQueryFromSourceParams([chunk.getSQL()], config4);
        }
        return this.buildQueryFromSourceParams([
          new StringChunk("("),
          chunk.getSQL(),
          new StringChunk(")")
        ], config4);
      }
      if (inlineParams) {
        return { sql: this.mapInlineParam(chunk, config4), params: [] };
      }
      return { sql: escapeParam(paramStartIndex.value++, chunk), params: [chunk], typings: ["none"] };
    }));
  }
  mapInlineParam(chunk, { escapeString }) {
    if (chunk === null) {
      return "null";
    }
    if (typeof chunk === "number" || typeof chunk === "boolean") {
      return chunk.toString();
    }
    if (typeof chunk === "string") {
      return escapeString(chunk);
    }
    if (typeof chunk === "object") {
      const mappedValueAsString = chunk.toString();
      if (mappedValueAsString === "[object Object]") {
        return escapeString(JSON.stringify(chunk));
      }
      return escapeString(mappedValueAsString);
    }
    throw new Error("Unexpected param value: " + chunk);
  }
  getSQL() {
    return this;
  }
  as(alias2) {
    if (alias2 === void 0) {
      return this;
    }
    return new _SQL.Aliased(this, alias2);
  }
  mapWith(decoder5) {
    this.decoder = typeof decoder5 === "function" ? { mapFromDriverValue: decoder5 } : decoder5;
    return this;
  }
  inlineParams() {
    this.shouldInlineParams = true;
    return this;
  }
  /**
   * This method is used to conditionally include a part of the query.
   *
   * @param condition - Condition to check
   * @returns itself if the condition is `true`, otherwise `undefined`
   */
  if(condition) {
    return condition ? this : void 0;
  }
};
var Name = class {
  constructor(value) {
    this.value = value;
  }
  static [entityKind] = "Name";
  brand;
  getSQL() {
    return new SQL([this]);
  }
};
function isDriverValueEncoder(value) {
  return typeof value === "object" && value !== null && "mapToDriverValue" in value && typeof value.mapToDriverValue === "function";
}
var noopDecoder = {
  mapFromDriverValue: (value) => value
};
var noopEncoder = {
  mapToDriverValue: (value) => value
};
var noopMapper = {
  ...noopDecoder,
  ...noopEncoder
};
var Param = class {
  /**
   * @param value - Parameter value
   * @param encoder - Encoder to convert the value to a driver parameter
   */
  constructor(value, encoder9 = noopEncoder) {
    this.value = value;
    this.encoder = encoder9;
  }
  static [entityKind] = "Param";
  brand;
  getSQL() {
    return new SQL([this]);
  }
};
function sql(strings, ...params) {
  const queryChunks = [];
  if (params.length > 0 || strings.length > 0 && strings[0] !== "") {
    queryChunks.push(new StringChunk(strings[0]));
  }
  for (const [paramIndex, param2] of params.entries()) {
    queryChunks.push(param2, new StringChunk(strings[paramIndex + 1]));
  }
  return new SQL(queryChunks);
}
((sql2) => {
  function empty2() {
    return new SQL([]);
  }
  sql2.empty = empty2;
  function fromList(list) {
    return new SQL(list);
  }
  sql2.fromList = fromList;
  function raw2(str) {
    return new SQL([new StringChunk(str)]);
  }
  sql2.raw = raw2;
  function join2(chunks, separator) {
    const result = [];
    for (const [i, chunk] of chunks.entries()) {
      if (i > 0 && separator !== void 0) {
        result.push(separator);
      }
      result.push(chunk);
    }
    return new SQL(result);
  }
  sql2.join = join2;
  function identifier(value) {
    return new Name(value);
  }
  sql2.identifier = identifier;
  function placeholder2(name2) {
    return new Placeholder(name2);
  }
  sql2.placeholder = placeholder2;
  function param2(value, encoder9) {
    return new Param(value, encoder9);
  }
  sql2.param = param2;
})(sql || (sql = {}));
((SQL2) => {
  class Aliased {
    constructor(sql2, fieldAlias) {
      this.sql = sql2;
      this.fieldAlias = fieldAlias;
    }
    static [entityKind] = "SQL.Aliased";
    /** @internal */
    isSelectionField = false;
    getSQL() {
      return this.sql;
    }
    /** @internal */
    clone() {
      return new Aliased(this.sql, this.fieldAlias);
    }
  }
  SQL2.Aliased = Aliased;
})(SQL || (SQL = {}));
var Placeholder = class {
  constructor(name2) {
    this.name = name2;
  }
  static [entityKind] = "Placeholder";
  getSQL() {
    return new SQL([this]);
  }
};
function fillPlaceholders(params, values) {
  return params.map((p) => {
    if (is(p, Placeholder)) {
      if (!(p.name in values)) {
        throw new Error(`No value for placeholder "${p.name}" was provided`);
      }
      return values[p.name];
    }
    if (is(p, Param) && is(p.value, Placeholder)) {
      if (!(p.value.name in values)) {
        throw new Error(`No value for placeholder "${p.value.name}" was provided`);
      }
      return p.encoder.mapToDriverValue(values[p.value.name]);
    }
    return p;
  });
}
var IsDrizzleView = Symbol.for("drizzle:IsDrizzleView");
var View = class {
  static [entityKind] = "View";
  /** @internal */
  [ViewBaseConfig];
  /** @internal */
  [IsDrizzleView] = true;
  constructor({ name: name2, schema, selectedFields, query: query2 }) {
    this[ViewBaseConfig] = {
      name: name2,
      originalName: name2,
      schema,
      selectedFields,
      query: query2,
      isExisting: !query2,
      isAlias: false
    };
  }
  getSQL() {
    return new SQL([this]);
  }
};
Column.prototype.getSQL = function() {
  return new SQL([this]);
};
Table.prototype.getSQL = function() {
  return new SQL([this]);
};
Subquery.prototype.getSQL = function() {
  return new SQL([this]);
};

// node_modules/drizzle-orm/utils.js
function mapResultRow(columns, row, joinsNotNullableMap) {
  const nullifyMap = {};
  const result = columns.reduce(
    (result2, { path, field }, columnIndex) => {
      let decoder5;
      if (is(field, Column)) {
        decoder5 = field;
      } else if (is(field, SQL)) {
        decoder5 = field.decoder;
      } else {
        decoder5 = field.sql.decoder;
      }
      let node = result2;
      for (const [pathChunkIndex, pathChunk] of path.entries()) {
        if (pathChunkIndex < path.length - 1) {
          if (!(pathChunk in node)) {
            node[pathChunk] = {};
          }
          node = node[pathChunk];
        } else {
          const rawValue = row[columnIndex];
          const value = node[pathChunk] = rawValue === null ? null : decoder5.mapFromDriverValue(rawValue);
          if (joinsNotNullableMap && is(field, Column) && path.length === 2) {
            const objectName = path[0];
            if (!(objectName in nullifyMap)) {
              nullifyMap[objectName] = value === null ? getTableName(field.table) : false;
            } else if (typeof nullifyMap[objectName] === "string" && nullifyMap[objectName] !== getTableName(field.table)) {
              nullifyMap[objectName] = false;
            }
          }
        }
      }
      return result2;
    },
    {}
  );
  if (joinsNotNullableMap && Object.keys(nullifyMap).length > 0) {
    for (const [objectName, tableName] of Object.entries(nullifyMap)) {
      if (typeof tableName === "string" && !joinsNotNullableMap[tableName]) {
        result[objectName] = null;
      }
    }
  }
  return result;
}
function orderSelectedFields(fields, pathPrefix) {
  return Object.entries(fields).reduce((result, [name, field]) => {
    if (typeof name !== "string") {
      return result;
    }
    const newPath = pathPrefix ? [...pathPrefix, name] : [name];
    if (is(field, Column) || is(field, SQL) || is(field, SQL.Aliased)) {
      result.push({ path: newPath, field });
    } else if (is(field, Table)) {
      result.push(...orderSelectedFields(field[Table.Symbol.Columns], newPath));
    } else {
      result.push(...orderSelectedFields(field, newPath));
    }
    return result;
  }, []);
}
function haveSameKeys(left, right) {
  const leftKeys = Object.keys(left);
  const rightKeys = Object.keys(right);
  if (leftKeys.length !== rightKeys.length) {
    return false;
  }
  for (const [index, key] of leftKeys.entries()) {
    if (key !== rightKeys[index]) {
      return false;
    }
  }
  return true;
}
function mapUpdateSet(table, values) {
  const entries = Object.entries(values).filter(([, value]) => value !== void 0).map(([key, value]) => {
    if (is(value, SQL) || is(value, Column)) {
      return [key, value];
    } else {
      return [key, new Param(value, table[Table.Symbol.Columns][key])];
    }
  });
  if (entries.length === 0) {
    throw new Error("No values to set");
  }
  return Object.fromEntries(entries);
}
function applyMixins(baseClass, extendedClasses) {
  for (const extendedClass of extendedClasses) {
    for (const name of Object.getOwnPropertyNames(extendedClass.prototype)) {
      if (name === "constructor") continue;
      Object.defineProperty(
        baseClass.prototype,
        name,
        Object.getOwnPropertyDescriptor(extendedClass.prototype, name) || /* @__PURE__ */ Object.create(null)
      );
    }
  }
}
function getTableColumns(table) {
  return table[Table.Symbol.Columns];
}
function getTableLikeName(table) {
  return is(table, Subquery) ? table._.alias : is(table, View) ? table[ViewBaseConfig].name : is(table, SQL) ? void 0 : table[Table.Symbol.IsAlias] ? table[Table.Symbol.Name] : table[Table.Symbol.BaseName];
}
function getColumnNameAndConfig(a, b) {
  return {
    name: typeof a === "string" && a.length > 0 ? a : "",
    config: typeof a === "object" ? a : b
  };
}

// node_modules/drizzle-orm/pg-core/table.js
var InlineForeignKeys = Symbol.for("drizzle:PgInlineForeignKeys");
var EnableRLS = Symbol.for("drizzle:EnableRLS");
var PgTable = class extends Table {
  static [entityKind] = "PgTable";
  /** @internal */
  static Symbol = Object.assign({}, Table.Symbol, {
    InlineForeignKeys,
    EnableRLS
  });
  /**@internal */
  [InlineForeignKeys] = [];
  /** @internal */
  [EnableRLS] = false;
  /** @internal */
  [Table.Symbol.ExtraConfigBuilder] = void 0;
  /** @internal */
  [Table.Symbol.ExtraConfigColumns] = {};
};

// node_modules/drizzle-orm/pg-core/primary-keys.js
var PrimaryKeyBuilder = class {
  static [entityKind] = "PgPrimaryKeyBuilder";
  /** @internal */
  columns;
  /** @internal */
  name;
  constructor(columns, name) {
    this.columns = columns;
    this.name = name;
  }
  /** @internal */
  build(table) {
    return new PrimaryKey(table, this.columns, this.name);
  }
};
var PrimaryKey = class {
  constructor(table, columns, name) {
    this.table = table;
    this.columns = columns;
    this.name = name;
  }
  static [entityKind] = "PgPrimaryKey";
  columns;
  name;
  getName() {
    return this.name ?? `${this.table[PgTable.Symbol.Name]}_${this.columns.map((column) => column.name).join("_")}_pk`;
  }
};

// node_modules/drizzle-orm/sql/expressions/conditions.js
function bindIfParam(value, column) {
  if (isDriverValueEncoder(column) && !isSQLWrapper(value) && !is(value, Param) && !is(value, Placeholder) && !is(value, Column) && !is(value, Table) && !is(value, View)) {
    return new Param(value, column);
  }
  return value;
}
var eq = (left, right) => {
  return sql`${left} = ${bindIfParam(right, left)}`;
};
var ne = (left, right) => {
  return sql`${left} <> ${bindIfParam(right, left)}`;
};
function and(...unfilteredConditions) {
  const conditions = unfilteredConditions.filter(
    (c) => c !== void 0
  );
  if (conditions.length === 0) {
    return void 0;
  }
  if (conditions.length === 1) {
    return new SQL(conditions);
  }
  return new SQL([
    new StringChunk("("),
    sql.join(conditions, new StringChunk(" and ")),
    new StringChunk(")")
  ]);
}
function or(...unfilteredConditions) {
  const conditions = unfilteredConditions.filter(
    (c) => c !== void 0
  );
  if (conditions.length === 0) {
    return void 0;
  }
  if (conditions.length === 1) {
    return new SQL(conditions);
  }
  return new SQL([
    new StringChunk("("),
    sql.join(conditions, new StringChunk(" or ")),
    new StringChunk(")")
  ]);
}
function not(condition) {
  return sql`not ${condition}`;
}
var gt = (left, right) => {
  return sql`${left} > ${bindIfParam(right, left)}`;
};
var gte = (left, right) => {
  return sql`${left} >= ${bindIfParam(right, left)}`;
};
var lt = (left, right) => {
  return sql`${left} < ${bindIfParam(right, left)}`;
};
var lte = (left, right) => {
  return sql`${left} <= ${bindIfParam(right, left)}`;
};
function inArray(column, values) {
  if (Array.isArray(values)) {
    if (values.length === 0) {
      return sql`false`;
    }
    return sql`${column} in ${values.map((v) => bindIfParam(v, column))}`;
  }
  return sql`${column} in ${bindIfParam(values, column)}`;
}
function notInArray(column, values) {
  if (Array.isArray(values)) {
    if (values.length === 0) {
      return sql`true`;
    }
    return sql`${column} not in ${values.map((v) => bindIfParam(v, column))}`;
  }
  return sql`${column} not in ${bindIfParam(values, column)}`;
}
function isNull(value) {
  return sql`${value} is null`;
}
function isNotNull(value) {
  return sql`${value} is not null`;
}
function exists(subquery) {
  return sql`exists ${subquery}`;
}
function notExists(subquery) {
  return sql`not exists ${subquery}`;
}
function between(column, min, max2) {
  return sql`${column} between ${bindIfParam(min, column)} and ${bindIfParam(
    max2,
    column
  )}`;
}
function notBetween(column, min, max2) {
  return sql`${column} not between ${bindIfParam(
    min,
    column
  )} and ${bindIfParam(max2, column)}`;
}
function like(column, value) {
  return sql`${column} like ${value}`;
}
function notLike(column, value) {
  return sql`${column} not like ${value}`;
}
function ilike(column, value) {
  return sql`${column} ilike ${value}`;
}
function notIlike(column, value) {
  return sql`${column} not ilike ${value}`;
}

// node_modules/drizzle-orm/sql/expressions/select.js
function asc(column) {
  return sql`${column} asc`;
}
function desc(column) {
  return sql`${column} desc`;
}

// node_modules/drizzle-orm/relations.js
var Relation = class {
  constructor(sourceTable, referencedTable, relationName) {
    this.sourceTable = sourceTable;
    this.referencedTable = referencedTable;
    this.relationName = relationName;
    this.referencedTableName = referencedTable[Table.Symbol.Name];
  }
  static [entityKind] = "Relation";
  referencedTableName;
  fieldName;
};
var Relations = class {
  constructor(table, config4) {
    this.table = table;
    this.config = config4;
  }
  static [entityKind] = "Relations";
};
var One = class _One extends Relation {
  constructor(sourceTable, referencedTable, config4, isNullable) {
    super(sourceTable, referencedTable, config4?.relationName);
    this.config = config4;
    this.isNullable = isNullable;
  }
  static [entityKind] = "One";
  withFieldName(fieldName) {
    const relation = new _One(
      this.sourceTable,
      this.referencedTable,
      this.config,
      this.isNullable
    );
    relation.fieldName = fieldName;
    return relation;
  }
};
var Many = class _Many extends Relation {
  constructor(sourceTable, referencedTable, config4) {
    super(sourceTable, referencedTable, config4?.relationName);
    this.config = config4;
  }
  static [entityKind] = "Many";
  withFieldName(fieldName) {
    const relation = new _Many(
      this.sourceTable,
      this.referencedTable,
      this.config
    );
    relation.fieldName = fieldName;
    return relation;
  }
};
function getOperators() {
  return {
    and,
    between,
    eq,
    exists,
    gt,
    gte,
    ilike,
    inArray,
    isNull,
    isNotNull,
    like,
    lt,
    lte,
    ne,
    not,
    notBetween,
    notExists,
    notLike,
    notIlike,
    notInArray,
    or,
    sql
  };
}
function getOrderByOperators() {
  return {
    sql,
    asc,
    desc
  };
}
function extractTablesRelationalConfig(schema, configHelpers) {
  if (Object.keys(schema).length === 1 && "default" in schema && !is(schema["default"], Table)) {
    schema = schema["default"];
  }
  const tableNamesMap = {};
  const relationsBuffer = {};
  const tablesConfig = {};
  for (const [key, value] of Object.entries(schema)) {
    if (is(value, Table)) {
      const dbName = getTableUniqueName(value);
      const bufferedRelations = relationsBuffer[dbName];
      tableNamesMap[dbName] = key;
      tablesConfig[key] = {
        tsName: key,
        dbName: value[Table.Symbol.Name],
        schema: value[Table.Symbol.Schema],
        columns: value[Table.Symbol.Columns],
        relations: bufferedRelations?.relations ?? {},
        primaryKey: bufferedRelations?.primaryKey ?? []
      };
      for (const column of Object.values(
        value[Table.Symbol.Columns]
      )) {
        if (column.primary) {
          tablesConfig[key].primaryKey.push(column);
        }
      }
      const extraConfig = value[Table.Symbol.ExtraConfigBuilder]?.(value[Table.Symbol.ExtraConfigColumns]);
      if (extraConfig) {
        for (const configEntry of Object.values(extraConfig)) {
          if (is(configEntry, PrimaryKeyBuilder)) {
            tablesConfig[key].primaryKey.push(...configEntry.columns);
          }
        }
      }
    } else if (is(value, Relations)) {
      const dbName = getTableUniqueName(value.table);
      const tableName = tableNamesMap[dbName];
      const relations2 = value.config(
        configHelpers(value.table)
      );
      let primaryKey;
      for (const [relationName, relation] of Object.entries(relations2)) {
        if (tableName) {
          const tableConfig = tablesConfig[tableName];
          tableConfig.relations[relationName] = relation;
          if (primaryKey) {
            tableConfig.primaryKey.push(...primaryKey);
          }
        } else {
          if (!(dbName in relationsBuffer)) {
            relationsBuffer[dbName] = {
              relations: {},
              primaryKey
            };
          }
          relationsBuffer[dbName].relations[relationName] = relation;
        }
      }
    }
  }
  return { tables: tablesConfig, tableNamesMap };
}
function createOne(sourceTable) {
  return function one(table, config4) {
    return new One(
      sourceTable,
      table,
      config4,
      config4?.fields.reduce((res, f) => res && f.notNull, true) ?? false
    );
  };
}
function createMany(sourceTable) {
  return function many(referencedTable, config4) {
    return new Many(sourceTable, referencedTable, config4);
  };
}
function normalizeRelation(schema, tableNamesMap, relation) {
  if (is(relation, One) && relation.config) {
    return {
      fields: relation.config.fields,
      references: relation.config.references
    };
  }
  const referencedTableTsName = tableNamesMap[getTableUniqueName(relation.referencedTable)];
  if (!referencedTableTsName) {
    throw new Error(
      `Table "${relation.referencedTable[Table.Symbol.Name]}" not found in schema`
    );
  }
  const referencedTableConfig = schema[referencedTableTsName];
  if (!referencedTableConfig) {
    throw new Error(`Table "${referencedTableTsName}" not found in schema`);
  }
  const sourceTable = relation.sourceTable;
  const sourceTableTsName = tableNamesMap[getTableUniqueName(sourceTable)];
  if (!sourceTableTsName) {
    throw new Error(
      `Table "${sourceTable[Table.Symbol.Name]}" not found in schema`
    );
  }
  const reverseRelations = [];
  for (const referencedTableRelation of Object.values(
    referencedTableConfig.relations
  )) {
    if (relation.relationName && relation !== referencedTableRelation && referencedTableRelation.relationName === relation.relationName || !relation.relationName && referencedTableRelation.referencedTable === relation.sourceTable) {
      reverseRelations.push(referencedTableRelation);
    }
  }
  if (reverseRelations.length > 1) {
    throw relation.relationName ? new Error(
      `There are multiple relations with name "${relation.relationName}" in table "${referencedTableTsName}"`
    ) : new Error(
      `There are multiple relations between "${referencedTableTsName}" and "${relation.sourceTable[Table.Symbol.Name]}". Please specify relation name`
    );
  }
  if (reverseRelations[0] && is(reverseRelations[0], One) && reverseRelations[0].config) {
    return {
      fields: reverseRelations[0].config.references,
      references: reverseRelations[0].config.fields
    };
  }
  throw new Error(
    `There is not enough information to infer relation "${sourceTableTsName}.${relation.fieldName}"`
  );
}
function createTableRelationsHelpers(sourceTable) {
  return {
    one: createOne(sourceTable),
    many: createMany(sourceTable)
  };
}
function mapRelationalRow(tablesConfig, tableConfig, row, buildQueryResultSelection, mapColumnValue = (value) => value) {
  const result = {};
  for (const [
    selectionItemIndex,
    selectionItem
  ] of buildQueryResultSelection.entries()) {
    if (selectionItem.isJson) {
      const relation = tableConfig.relations[selectionItem.tsKey];
      const rawSubRows = row[selectionItemIndex];
      const subRows = typeof rawSubRows === "string" ? JSON.parse(rawSubRows) : rawSubRows;
      result[selectionItem.tsKey] = is(relation, One) ? subRows && mapRelationalRow(
        tablesConfig,
        tablesConfig[selectionItem.relationTableTsKey],
        subRows,
        selectionItem.selection,
        mapColumnValue
      ) : subRows.map(
        (subRow) => mapRelationalRow(
          tablesConfig,
          tablesConfig[selectionItem.relationTableTsKey],
          subRow,
          selectionItem.selection,
          mapColumnValue
        )
      );
    } else {
      const value = mapColumnValue(row[selectionItemIndex]);
      const field = selectionItem.field;
      let decoder5;
      if (is(field, Column)) {
        decoder5 = field;
      } else if (is(field, SQL)) {
        decoder5 = field.decoder;
      } else {
        decoder5 = field.sql.decoder;
      }
      result[selectionItem.tsKey] = value === null ? null : decoder5.mapFromDriverValue(value);
    }
  }
  return result;
}

// node_modules/drizzle-orm/alias.js
var ColumnAliasProxyHandler = class {
  constructor(table) {
    this.table = table;
  }
  static [entityKind] = "ColumnAliasProxyHandler";
  get(columnObj, prop) {
    if (prop === "table") {
      return this.table;
    }
    return columnObj[prop];
  }
};
var TableAliasProxyHandler = class {
  constructor(alias2, replaceOriginalName) {
    this.alias = alias2;
    this.replaceOriginalName = replaceOriginalName;
  }
  static [entityKind] = "TableAliasProxyHandler";
  get(target, prop) {
    if (prop === Table.Symbol.IsAlias) {
      return true;
    }
    if (prop === Table.Symbol.Name) {
      return this.alias;
    }
    if (this.replaceOriginalName && prop === Table.Symbol.OriginalName) {
      return this.alias;
    }
    if (prop === ViewBaseConfig) {
      return {
        ...target[ViewBaseConfig],
        name: this.alias,
        isAlias: true
      };
    }
    if (prop === Table.Symbol.Columns) {
      const columns = target[Table.Symbol.Columns];
      if (!columns) {
        return columns;
      }
      const proxiedColumns = {};
      Object.keys(columns).map((key) => {
        proxiedColumns[key] = new Proxy(
          columns[key],
          new ColumnAliasProxyHandler(new Proxy(target, this))
        );
      });
      return proxiedColumns;
    }
    const value = target[prop];
    if (is(value, Column)) {
      return new Proxy(value, new ColumnAliasProxyHandler(new Proxy(target, this)));
    }
    return value;
  }
};
var RelationTableAliasProxyHandler = class {
  constructor(alias2) {
    this.alias = alias2;
  }
  static [entityKind] = "RelationTableAliasProxyHandler";
  get(target, prop) {
    if (prop === "sourceTable") {
      return aliasedTable(target.sourceTable, this.alias);
    }
    return target[prop];
  }
};
function aliasedTable(table, tableAlias) {
  return new Proxy(table, new TableAliasProxyHandler(tableAlias, false));
}
function aliasedTableColumn(column, tableAlias) {
  return new Proxy(
    column,
    new ColumnAliasProxyHandler(new Proxy(column.table, new TableAliasProxyHandler(tableAlias, false)))
  );
}
function mapColumnsInAliasedSQLToAlias(query2, alias2) {
  return new SQL.Aliased(mapColumnsInSQLToAlias(query2.sql, alias2), query2.fieldAlias);
}
function mapColumnsInSQLToAlias(query2, alias2) {
  return sql.join(query2.queryChunks.map((c) => {
    if (is(c, Column)) {
      return aliasedTableColumn(c, alias2);
    }
    if (is(c, SQL)) {
      return mapColumnsInSQLToAlias(c, alias2);
    }
    if (is(c, SQL.Aliased)) {
      return mapColumnsInAliasedSQLToAlias(c, alias2);
    }
    return c;
  }));
}

// node_modules/drizzle-orm/selection-proxy.js
var SelectionProxyHandler = class _SelectionProxyHandler {
  static [entityKind] = "SelectionProxyHandler";
  config;
  constructor(config4) {
    this.config = { ...config4 };
  }
  get(subquery, prop) {
    if (prop === "_") {
      return {
        ...subquery["_"],
        selectedFields: new Proxy(
          subquery._.selectedFields,
          this
        )
      };
    }
    if (prop === ViewBaseConfig) {
      return {
        ...subquery[ViewBaseConfig],
        selectedFields: new Proxy(
          subquery[ViewBaseConfig].selectedFields,
          this
        )
      };
    }
    if (typeof prop === "symbol") {
      return subquery[prop];
    }
    const columns = is(subquery, Subquery) ? subquery._.selectedFields : is(subquery, View) ? subquery[ViewBaseConfig].selectedFields : subquery;
    const value = columns[prop];
    if (is(value, SQL.Aliased)) {
      if (this.config.sqlAliasedBehavior === "sql" && !value.isSelectionField) {
        return value.sql;
      }
      const newValue = value.clone();
      newValue.isSelectionField = true;
      return newValue;
    }
    if (is(value, SQL)) {
      if (this.config.sqlBehavior === "sql") {
        return value;
      }
      throw new Error(
        `You tried to reference "${prop}" field from a subquery, which is a raw SQL field, but it doesn't have an alias declared. Please add an alias to the field using ".as('alias')" method.`
      );
    }
    if (is(value, Column)) {
      if (this.config.alias) {
        return new Proxy(
          value,
          new ColumnAliasProxyHandler(
            new Proxy(
              value.table,
              new TableAliasProxyHandler(this.config.alias, this.config.replaceOriginalName ?? false)
            )
          )
        );
      }
      return value;
    }
    if (typeof value !== "object" || value === null) {
      return value;
    }
    return new Proxy(value, new _SelectionProxyHandler(this.config));
  }
};

// node_modules/drizzle-orm/query-promise.js
var QueryPromise = class {
  static [entityKind] = "QueryPromise";
  [Symbol.toStringTag] = "QueryPromise";
  catch(onRejected) {
    return this.then(void 0, onRejected);
  }
  finally(onFinally) {
    return this.then(
      (value) => {
        onFinally?.();
        return value;
      },
      (reason) => {
        onFinally?.();
        throw reason;
      }
    );
  }
  then(onFulfilled, onRejected) {
    return this.execute().then(onFulfilled, onRejected);
  }
};

// node_modules/drizzle-orm/sqlite-core/foreign-keys.js
var ForeignKeyBuilder2 = class {
  static [entityKind] = "SQLiteForeignKeyBuilder";
  /** @internal */
  reference;
  /** @internal */
  _onUpdate;
  /** @internal */
  _onDelete;
  constructor(config4, actions) {
    this.reference = () => {
      const { name, columns, foreignColumns } = config4();
      return { name, columns, foreignTable: foreignColumns[0].table, foreignColumns };
    };
    if (actions) {
      this._onUpdate = actions.onUpdate;
      this._onDelete = actions.onDelete;
    }
  }
  onUpdate(action) {
    this._onUpdate = action;
    return this;
  }
  onDelete(action) {
    this._onDelete = action;
    return this;
  }
  /** @internal */
  build(table) {
    return new ForeignKey2(table, this);
  }
};
var ForeignKey2 = class {
  constructor(table, builder) {
    this.table = table;
    this.reference = builder.reference;
    this.onUpdate = builder._onUpdate;
    this.onDelete = builder._onDelete;
  }
  static [entityKind] = "SQLiteForeignKey";
  reference;
  onUpdate;
  onDelete;
  getName() {
    const { name, columns, foreignColumns } = this.reference();
    const columnNames = columns.map((column) => column.name);
    const foreignColumnNames = foreignColumns.map((column) => column.name);
    const chunks = [
      this.table[TableName],
      ...columnNames,
      foreignColumns[0].table[TableName],
      ...foreignColumnNames
    ];
    return name ?? `${chunks.join("_")}_fk`;
  }
};

// node_modules/drizzle-orm/sqlite-core/unique-constraint.js
function uniqueKeyName2(table, columns) {
  return `${table[TableName]}_${columns.join("_")}_unique`;
}
var UniqueConstraintBuilder2 = class {
  constructor(columns, name) {
    this.name = name;
    this.columns = columns;
  }
  static [entityKind] = "SQLiteUniqueConstraintBuilder";
  /** @internal */
  columns;
  /** @internal */
  build(table) {
    return new UniqueConstraint2(table, this.columns, this.name);
  }
};
var UniqueOnConstraintBuilder2 = class {
  static [entityKind] = "SQLiteUniqueOnConstraintBuilder";
  /** @internal */
  name;
  constructor(name) {
    this.name = name;
  }
  on(...columns) {
    return new UniqueConstraintBuilder2(columns, this.name);
  }
};
var UniqueConstraint2 = class {
  constructor(table, columns, name) {
    this.table = table;
    this.columns = columns;
    this.name = name ?? uniqueKeyName2(this.table, this.columns.map((column) => column.name));
  }
  static [entityKind] = "SQLiteUniqueConstraint";
  columns;
  name;
  getName() {
    return this.name;
  }
};

// node_modules/drizzle-orm/sqlite-core/columns/common.js
var SQLiteColumnBuilder = class extends ColumnBuilder {
  static [entityKind] = "SQLiteColumnBuilder";
  foreignKeyConfigs = [];
  references(ref, actions = {}) {
    this.foreignKeyConfigs.push({ ref, actions });
    return this;
  }
  unique(name) {
    this.config.isUnique = true;
    this.config.uniqueName = name;
    return this;
  }
  generatedAlwaysAs(as, config4) {
    this.config.generated = {
      as,
      type: "always",
      mode: config4?.mode ?? "virtual"
    };
    return this;
  }
  /** @internal */
  buildForeignKeys(column, table) {
    return this.foreignKeyConfigs.map(({ ref, actions }) => {
      return ((ref2, actions2) => {
        const builder = new ForeignKeyBuilder2(() => {
          const foreignColumn = ref2();
          return { columns: [column], foreignColumns: [foreignColumn] };
        });
        if (actions2.onUpdate) {
          builder.onUpdate(actions2.onUpdate);
        }
        if (actions2.onDelete) {
          builder.onDelete(actions2.onDelete);
        }
        return builder.build(table);
      })(ref, actions);
    });
  }
};
var SQLiteColumn = class extends Column {
  constructor(table, config4) {
    if (!config4.uniqueName) {
      config4.uniqueName = uniqueKeyName2(table, [config4.name]);
    }
    super(table, config4);
    this.table = table;
  }
  static [entityKind] = "SQLiteColumn";
};

// node_modules/drizzle-orm/sqlite-core/columns/blob.js
var SQLiteBigIntBuilder = class extends SQLiteColumnBuilder {
  static [entityKind] = "SQLiteBigIntBuilder";
  constructor(name) {
    super(name, "bigint", "SQLiteBigInt");
  }
  /** @internal */
  build(table) {
    return new SQLiteBigInt(table, this.config);
  }
};
var SQLiteBigInt = class extends SQLiteColumn {
  static [entityKind] = "SQLiteBigInt";
  getSQLType() {
    return "blob";
  }
  mapFromDriverValue(value) {
    if (Buffer.isBuffer(value)) {
      return BigInt(value.toString());
    }
    if (value instanceof ArrayBuffer) {
      const decoder5 = new TextDecoder();
      return BigInt(decoder5.decode(value));
    }
    return BigInt(String.fromCodePoint(...value));
  }
  mapToDriverValue(value) {
    return Buffer.from(value.toString());
  }
};
var SQLiteBlobJsonBuilder = class extends SQLiteColumnBuilder {
  static [entityKind] = "SQLiteBlobJsonBuilder";
  constructor(name) {
    super(name, "json", "SQLiteBlobJson");
  }
  /** @internal */
  build(table) {
    return new SQLiteBlobJson(
      table,
      this.config
    );
  }
};
var SQLiteBlobJson = class extends SQLiteColumn {
  static [entityKind] = "SQLiteBlobJson";
  getSQLType() {
    return "blob";
  }
  mapFromDriverValue(value) {
    if (Buffer.isBuffer(value)) {
      return JSON.parse(value.toString());
    }
    if (value instanceof ArrayBuffer) {
      const decoder5 = new TextDecoder();
      return JSON.parse(decoder5.decode(value));
    }
    return JSON.parse(String.fromCodePoint(...value));
  }
  mapToDriverValue(value) {
    return Buffer.from(JSON.stringify(value));
  }
};
var SQLiteBlobBufferBuilder = class extends SQLiteColumnBuilder {
  static [entityKind] = "SQLiteBlobBufferBuilder";
  constructor(name) {
    super(name, "buffer", "SQLiteBlobBuffer");
  }
  /** @internal */
  build(table) {
    return new SQLiteBlobBuffer(table, this.config);
  }
};
var SQLiteBlobBuffer = class extends SQLiteColumn {
  static [entityKind] = "SQLiteBlobBuffer";
  mapFromDriverValue(value) {
    if (Buffer.isBuffer(value)) {
      return value;
    }
    return Buffer.from(value);
  }
  getSQLType() {
    return "blob";
  }
};
function blob(a, b) {
  const { name, config: config4 } = getColumnNameAndConfig(a, b);
  if (config4?.mode === "json") {
    return new SQLiteBlobJsonBuilder(name);
  }
  if (config4?.mode === "bigint") {
    return new SQLiteBigIntBuilder(name);
  }
  return new SQLiteBlobBufferBuilder(name);
}

// node_modules/drizzle-orm/sqlite-core/columns/custom.js
var SQLiteCustomColumnBuilder = class extends SQLiteColumnBuilder {
  static [entityKind] = "SQLiteCustomColumnBuilder";
  constructor(name, fieldConfig, customTypeParams) {
    super(name, "custom", "SQLiteCustomColumn");
    this.config.fieldConfig = fieldConfig;
    this.config.customTypeParams = customTypeParams;
  }
  /** @internal */
  build(table) {
    return new SQLiteCustomColumn(
      table,
      this.config
    );
  }
};
var SQLiteCustomColumn = class extends SQLiteColumn {
  static [entityKind] = "SQLiteCustomColumn";
  sqlName;
  mapTo;
  mapFrom;
  constructor(table, config4) {
    super(table, config4);
    this.sqlName = config4.customTypeParams.dataType(config4.fieldConfig);
    this.mapTo = config4.customTypeParams.toDriver;
    this.mapFrom = config4.customTypeParams.fromDriver;
  }
  getSQLType() {
    return this.sqlName;
  }
  mapFromDriverValue(value) {
    return typeof this.mapFrom === "function" ? this.mapFrom(value) : value;
  }
  mapToDriverValue(value) {
    return typeof this.mapTo === "function" ? this.mapTo(value) : value;
  }
};
function customType(customTypeParams) {
  return (a, b) => {
    const { name, config: config4 } = getColumnNameAndConfig(a, b);
    return new SQLiteCustomColumnBuilder(
      name,
      config4,
      customTypeParams
    );
  };
}

// node_modules/drizzle-orm/sqlite-core/columns/integer.js
var SQLiteBaseIntegerBuilder = class extends SQLiteColumnBuilder {
  static [entityKind] = "SQLiteBaseIntegerBuilder";
  constructor(name, dataType, columnType) {
    super(name, dataType, columnType);
    this.config.autoIncrement = false;
  }
  primaryKey(config4) {
    if (config4?.autoIncrement) {
      this.config.autoIncrement = true;
    }
    this.config.hasDefault = true;
    return super.primaryKey();
  }
};
var SQLiteBaseInteger = class extends SQLiteColumn {
  static [entityKind] = "SQLiteBaseInteger";
  autoIncrement = this.config.autoIncrement;
  getSQLType() {
    return "integer";
  }
};
var SQLiteIntegerBuilder = class extends SQLiteBaseIntegerBuilder {
  static [entityKind] = "SQLiteIntegerBuilder";
  constructor(name) {
    super(name, "number", "SQLiteInteger");
  }
  build(table) {
    return new SQLiteInteger(
      table,
      this.config
    );
  }
};
var SQLiteInteger = class extends SQLiteBaseInteger {
  static [entityKind] = "SQLiteInteger";
};
var SQLiteTimestampBuilder = class extends SQLiteBaseIntegerBuilder {
  static [entityKind] = "SQLiteTimestampBuilder";
  constructor(name, mode) {
    super(name, "date", "SQLiteTimestamp");
    this.config.mode = mode;
  }
  /**
   * @deprecated Use `default()` with your own expression instead.
   *
   * Adds `DEFAULT (cast((julianday('now') - 2440587.5)*86400000 as integer))` to the column, which is the current epoch timestamp in milliseconds.
   */
  defaultNow() {
    return this.default(sql`(cast((julianday('now') - 2440587.5)*86400000 as integer))`);
  }
  build(table) {
    return new SQLiteTimestamp(
      table,
      this.config
    );
  }
};
var SQLiteTimestamp = class extends SQLiteBaseInteger {
  static [entityKind] = "SQLiteTimestamp";
  mode = this.config.mode;
  mapFromDriverValue(value) {
    if (this.config.mode === "timestamp") {
      return new Date(value * 1e3);
    }
    return new Date(value);
  }
  mapToDriverValue(value) {
    const unix = value.getTime();
    if (this.config.mode === "timestamp") {
      return Math.floor(unix / 1e3);
    }
    return unix;
  }
};
var SQLiteBooleanBuilder = class extends SQLiteBaseIntegerBuilder {
  static [entityKind] = "SQLiteBooleanBuilder";
  constructor(name, mode) {
    super(name, "boolean", "SQLiteBoolean");
    this.config.mode = mode;
  }
  build(table) {
    return new SQLiteBoolean(
      table,
      this.config
    );
  }
};
var SQLiteBoolean = class extends SQLiteBaseInteger {
  static [entityKind] = "SQLiteBoolean";
  mode = this.config.mode;
  mapFromDriverValue(value) {
    return Number(value) === 1;
  }
  mapToDriverValue(value) {
    return value ? 1 : 0;
  }
};
function integer(a, b) {
  const { name, config: config4 } = getColumnNameAndConfig(a, b);
  if (config4?.mode === "timestamp" || config4?.mode === "timestamp_ms") {
    return new SQLiteTimestampBuilder(name, config4.mode);
  }
  if (config4?.mode === "boolean") {
    return new SQLiteBooleanBuilder(name, config4.mode);
  }
  return new SQLiteIntegerBuilder(name);
}

// node_modules/drizzle-orm/sqlite-core/columns/numeric.js
var SQLiteNumericBuilder = class extends SQLiteColumnBuilder {
  static [entityKind] = "SQLiteNumericBuilder";
  constructor(name) {
    super(name, "string", "SQLiteNumeric");
  }
  /** @internal */
  build(table) {
    return new SQLiteNumeric(
      table,
      this.config
    );
  }
};
var SQLiteNumeric = class extends SQLiteColumn {
  static [entityKind] = "SQLiteNumeric";
  mapFromDriverValue(value) {
    if (typeof value === "string") return value;
    return String(value);
  }
  getSQLType() {
    return "numeric";
  }
};
var SQLiteNumericNumberBuilder = class extends SQLiteColumnBuilder {
  static [entityKind] = "SQLiteNumericNumberBuilder";
  constructor(name) {
    super(name, "number", "SQLiteNumericNumber");
  }
  /** @internal */
  build(table) {
    return new SQLiteNumericNumber(
      table,
      this.config
    );
  }
};
var SQLiteNumericNumber = class extends SQLiteColumn {
  static [entityKind] = "SQLiteNumericNumber";
  mapFromDriverValue(value) {
    if (typeof value === "number") return value;
    return Number(value);
  }
  mapToDriverValue = String;
  getSQLType() {
    return "numeric";
  }
};
var SQLiteNumericBigIntBuilder = class extends SQLiteColumnBuilder {
  static [entityKind] = "SQLiteNumericBigIntBuilder";
  constructor(name) {
    super(name, "bigint", "SQLiteNumericBigInt");
  }
  /** @internal */
  build(table) {
    return new SQLiteNumericBigInt(
      table,
      this.config
    );
  }
};
var SQLiteNumericBigInt = class extends SQLiteColumn {
  static [entityKind] = "SQLiteNumericBigInt";
  mapFromDriverValue = BigInt;
  mapToDriverValue = String;
  getSQLType() {
    return "numeric";
  }
};
function numeric(a, b) {
  const { name, config: config4 } = getColumnNameAndConfig(a, b);
  const mode = config4?.mode;
  return mode === "number" ? new SQLiteNumericNumberBuilder(name) : mode === "bigint" ? new SQLiteNumericBigIntBuilder(name) : new SQLiteNumericBuilder(name);
}

// node_modules/drizzle-orm/sqlite-core/columns/real.js
var SQLiteRealBuilder = class extends SQLiteColumnBuilder {
  static [entityKind] = "SQLiteRealBuilder";
  constructor(name) {
    super(name, "number", "SQLiteReal");
  }
  /** @internal */
  build(table) {
    return new SQLiteReal(table, this.config);
  }
};
var SQLiteReal = class extends SQLiteColumn {
  static [entityKind] = "SQLiteReal";
  getSQLType() {
    return "real";
  }
};
function real(name) {
  return new SQLiteRealBuilder(name ?? "");
}

// node_modules/drizzle-orm/sqlite-core/columns/text.js
var SQLiteTextBuilder = class extends SQLiteColumnBuilder {
  static [entityKind] = "SQLiteTextBuilder";
  constructor(name, config4) {
    super(name, "string", "SQLiteText");
    this.config.enumValues = config4.enum;
    this.config.length = config4.length;
  }
  /** @internal */
  build(table) {
    return new SQLiteText(
      table,
      this.config
    );
  }
};
var SQLiteText = class extends SQLiteColumn {
  static [entityKind] = "SQLiteText";
  enumValues = this.config.enumValues;
  length = this.config.length;
  constructor(table, config4) {
    super(table, config4);
  }
  getSQLType() {
    return `text${this.config.length ? `(${this.config.length})` : ""}`;
  }
};
var SQLiteTextJsonBuilder = class extends SQLiteColumnBuilder {
  static [entityKind] = "SQLiteTextJsonBuilder";
  constructor(name) {
    super(name, "json", "SQLiteTextJson");
  }
  /** @internal */
  build(table) {
    return new SQLiteTextJson(
      table,
      this.config
    );
  }
};
var SQLiteTextJson = class extends SQLiteColumn {
  static [entityKind] = "SQLiteTextJson";
  getSQLType() {
    return "text";
  }
  mapFromDriverValue(value) {
    return JSON.parse(value);
  }
  mapToDriverValue(value) {
    return JSON.stringify(value);
  }
};
function text(a, b = {}) {
  const { name, config: config4 } = getColumnNameAndConfig(a, b);
  if (config4.mode === "json") {
    return new SQLiteTextJsonBuilder(name);
  }
  return new SQLiteTextBuilder(name, config4);
}

// node_modules/drizzle-orm/sqlite-core/columns/all.js
function getSQLiteColumnBuilders() {
  return {
    blob,
    customType,
    integer,
    numeric,
    real,
    text
  };
}

// node_modules/drizzle-orm/sqlite-core/table.js
var InlineForeignKeys2 = Symbol.for("drizzle:SQLiteInlineForeignKeys");
var SQLiteTable = class extends Table {
  static [entityKind] = "SQLiteTable";
  /** @internal */
  static Symbol = Object.assign({}, Table.Symbol, {
    InlineForeignKeys: InlineForeignKeys2
  });
  /** @internal */
  [Table.Symbol.Columns];
  /** @internal */
  [InlineForeignKeys2] = [];
  /** @internal */
  [Table.Symbol.ExtraConfigBuilder] = void 0;
};
function sqliteTableBase(name, columns, extraConfig, schema, baseName = name) {
  const rawTable = new SQLiteTable(name, schema, baseName);
  const parsedColumns = typeof columns === "function" ? columns(getSQLiteColumnBuilders()) : columns;
  const builtColumns = Object.fromEntries(
    Object.entries(parsedColumns).map(([name2, colBuilderBase]) => {
      const colBuilder = colBuilderBase;
      colBuilder.setName(name2);
      const column = colBuilder.build(rawTable);
      rawTable[InlineForeignKeys2].push(...colBuilder.buildForeignKeys(column, rawTable));
      return [name2, column];
    })
  );
  const table = Object.assign(rawTable, builtColumns);
  table[Table.Symbol.Columns] = builtColumns;
  table[Table.Symbol.ExtraConfigColumns] = builtColumns;
  if (extraConfig) {
    table[SQLiteTable.Symbol.ExtraConfigBuilder] = extraConfig;
  }
  return table;
}
var sqliteTable = (name, columns, extraConfig) => {
  return sqliteTableBase(name, columns, extraConfig);
};

// node_modules/drizzle-orm/sqlite-core/utils.js
function extractUsedTable(table) {
  if (is(table, SQLiteTable)) {
    return [`${table[Table.Symbol.BaseName]}`];
  }
  if (is(table, Subquery)) {
    return table._.usedTables ?? [];
  }
  if (is(table, SQL)) {
    return table.usedTables ?? [];
  }
  return [];
}

// node_modules/drizzle-orm/sqlite-core/query-builders/delete.js
var SQLiteDeleteBase = class extends QueryPromise {
  constructor(table, session, dialect, withList) {
    super();
    this.table = table;
    this.session = session;
    this.dialect = dialect;
    this.config = { table, withList };
  }
  static [entityKind] = "SQLiteDelete";
  /** @internal */
  config;
  /**
   * Adds a `where` clause to the query.
   *
   * Calling this method will delete only those rows that fulfill a specified condition.
   *
   * See docs: {@link https://orm.drizzle.team/docs/delete}
   *
   * @param where the `where` clause.
   *
   * @example
   * You can use conditional operators and `sql function` to filter the rows to be deleted.
   *
   * ```ts
   * // Delete all cars with green color
   * db.delete(cars).where(eq(cars.color, 'green'));
   * // or
   * db.delete(cars).where(sql`${cars.color} = 'green'`)
   * ```
   *
   * You can logically combine conditional operators with `and()` and `or()` operators:
   *
   * ```ts
   * // Delete all BMW cars with a green color
   * db.delete(cars).where(and(eq(cars.color, 'green'), eq(cars.brand, 'BMW')));
   *
   * // Delete all cars with the green or blue color
   * db.delete(cars).where(or(eq(cars.color, 'green'), eq(cars.color, 'blue')));
   * ```
   */
  where(where) {
    this.config.where = where;
    return this;
  }
  orderBy(...columns) {
    if (typeof columns[0] === "function") {
      const orderBy = columns[0](
        new Proxy(
          this.config.table[Table.Symbol.Columns],
          new SelectionProxyHandler({ sqlAliasedBehavior: "alias", sqlBehavior: "sql" })
        )
      );
      const orderByArray = Array.isArray(orderBy) ? orderBy : [orderBy];
      this.config.orderBy = orderByArray;
    } else {
      const orderByArray = columns;
      this.config.orderBy = orderByArray;
    }
    return this;
  }
  limit(limit) {
    this.config.limit = limit;
    return this;
  }
  returning(fields = this.table[SQLiteTable.Symbol.Columns]) {
    this.config.returning = orderSelectedFields(fields);
    return this;
  }
  /** @internal */
  getSQL() {
    return this.dialect.buildDeleteQuery(this.config);
  }
  toSQL() {
    const { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());
    return rest;
  }
  /** @internal */
  _prepare(isOneTimeQuery = true) {
    return this.session[isOneTimeQuery ? "prepareOneTimeQuery" : "prepareQuery"](
      this.dialect.sqlToQuery(this.getSQL()),
      this.config.returning,
      this.config.returning ? "all" : "run",
      true,
      void 0,
      {
        type: "delete",
        tables: extractUsedTable(this.config.table)
      }
    );
  }
  prepare() {
    return this._prepare(false);
  }
  run = (placeholderValues) => {
    return this._prepare().run(placeholderValues);
  };
  all = (placeholderValues) => {
    return this._prepare().all(placeholderValues);
  };
  get = (placeholderValues) => {
    return this._prepare().get(placeholderValues);
  };
  values = (placeholderValues) => {
    return this._prepare().values(placeholderValues);
  };
  async execute(placeholderValues) {
    return this._prepare().execute(placeholderValues);
  }
  $dynamic() {
    return this;
  }
};

// node_modules/drizzle-orm/casing.js
function toSnakeCase(input) {
  const words = input.replace(/['\u2019]/g, "").match(/[\da-z]+|[A-Z]+(?![a-z])|[A-Z][\da-z]+/g) ?? [];
  return words.map((word) => word.toLowerCase()).join("_");
}
function toCamelCase(input) {
  const words = input.replace(/['\u2019]/g, "").match(/[\da-z]+|[A-Z]+(?![a-z])|[A-Z][\da-z]+/g) ?? [];
  return words.reduce((acc, word, i) => {
    const formattedWord = i === 0 ? word.toLowerCase() : `${word[0].toUpperCase()}${word.slice(1)}`;
    return acc + formattedWord;
  }, "");
}
function noopCase(input) {
  return input;
}
var CasingCache = class {
  static [entityKind] = "CasingCache";
  /** @internal */
  cache = {};
  cachedTables = {};
  convert;
  constructor(casing) {
    this.convert = casing === "snake_case" ? toSnakeCase : casing === "camelCase" ? toCamelCase : noopCase;
  }
  getColumnCasing(column) {
    if (!column.keyAsName) return column.name;
    const schema = column.table[Table.Symbol.Schema] ?? "public";
    const tableName = column.table[Table.Symbol.OriginalName];
    const key = `${schema}.${tableName}.${column.name}`;
    if (!this.cache[key]) {
      this.cacheTable(column.table);
    }
    return this.cache[key];
  }
  cacheTable(table) {
    const schema = table[Table.Symbol.Schema] ?? "public";
    const tableName = table[Table.Symbol.OriginalName];
    const tableKey = `${schema}.${tableName}`;
    if (!this.cachedTables[tableKey]) {
      for (const column of Object.values(table[Table.Symbol.Columns])) {
        const columnKey = `${tableKey}.${column.name}`;
        this.cache[columnKey] = this.convert(column.name);
      }
      this.cachedTables[tableKey] = true;
    }
  }
  clearCache() {
    this.cache = {};
    this.cachedTables = {};
  }
};

// node_modules/drizzle-orm/errors.js
var DrizzleError = class extends Error {
  static [entityKind] = "DrizzleError";
  constructor({ message, cause }) {
    super(message);
    this.name = "DrizzleError";
    this.cause = cause;
  }
};
var DrizzleQueryError = class _DrizzleQueryError extends Error {
  constructor(query2, params, cause) {
    super(`Failed query: ${query2}
params: ${params}`);
    this.query = query2;
    this.params = params;
    this.cause = cause;
    Error.captureStackTrace(this, _DrizzleQueryError);
    if (cause) this.cause = cause;
  }
};
var TransactionRollbackError = class extends DrizzleError {
  static [entityKind] = "TransactionRollbackError";
  constructor() {
    super({ message: "Rollback" });
  }
};

// node_modules/drizzle-orm/sqlite-core/view-base.js
var SQLiteViewBase = class extends View {
  static [entityKind] = "SQLiteViewBase";
};

// node_modules/drizzle-orm/sqlite-core/dialect.js
var SQLiteDialect = class {
  static [entityKind] = "SQLiteDialect";
  /** @internal */
  casing;
  constructor(config4) {
    this.casing = new CasingCache(config4?.casing);
  }
  escapeName(name) {
    return `"${name}"`;
  }
  escapeParam(_num) {
    return "?";
  }
  escapeString(str) {
    return `'${str.replace(/'/g, "''")}'`;
  }
  buildWithCTE(queries) {
    if (!queries?.length) return void 0;
    const withSqlChunks = [sql`with `];
    for (const [i, w] of queries.entries()) {
      withSqlChunks.push(sql`${sql.identifier(w._.alias)} as (${w._.sql})`);
      if (i < queries.length - 1) {
        withSqlChunks.push(sql`, `);
      }
    }
    withSqlChunks.push(sql` `);
    return sql.join(withSqlChunks);
  }
  buildDeleteQuery({ table, where, returning, withList, limit, orderBy }) {
    const withSql = this.buildWithCTE(withList);
    const returningSql = returning ? sql` returning ${this.buildSelection(returning, { isSingleTable: true })}` : void 0;
    const whereSql = where ? sql` where ${where}` : void 0;
    const orderBySql = this.buildOrderBy(orderBy);
    const limitSql = this.buildLimit(limit);
    return sql`${withSql}delete from ${table}${whereSql}${returningSql}${orderBySql}${limitSql}`;
  }
  buildUpdateSet(table, set) {
    const tableColumns = table[Table.Symbol.Columns];
    const columnNames = Object.keys(tableColumns).filter(
      (colName) => set[colName] !== void 0 || tableColumns[colName]?.onUpdateFn !== void 0
    );
    const setSize = columnNames.length;
    return sql.join(columnNames.flatMap((colName, i) => {
      const col = tableColumns[colName];
      const value = set[colName] ?? sql.param(col.onUpdateFn(), col);
      const res = sql`${sql.identifier(this.casing.getColumnCasing(col))} = ${value}`;
      if (i < setSize - 1) {
        return [res, sql.raw(", ")];
      }
      return [res];
    }));
  }
  buildUpdateQuery({ table, set, where, returning, withList, joins, from: from2, limit, orderBy }) {
    const withSql = this.buildWithCTE(withList);
    const setSql = this.buildUpdateSet(table, set);
    const fromSql = from2 && sql.join([sql.raw(" from "), this.buildFromTable(from2)]);
    const joinsSql = this.buildJoins(joins);
    const returningSql = returning ? sql` returning ${this.buildSelection(returning, { isSingleTable: true })}` : void 0;
    const whereSql = where ? sql` where ${where}` : void 0;
    const orderBySql = this.buildOrderBy(orderBy);
    const limitSql = this.buildLimit(limit);
    return sql`${withSql}update ${table} set ${setSql}${fromSql}${joinsSql}${whereSql}${returningSql}${orderBySql}${limitSql}`;
  }
  /**
   * Builds selection SQL with provided fields/expressions
   *
   * Examples:
   *
   * `select <selection> from`
   *
   * `insert ... returning <selection>`
   *
   * If `isSingleTable` is true, then columns won't be prefixed with table name
   */
  buildSelection(fields, { isSingleTable = false } = {}) {
    const columnsLen = fields.length;
    const chunks = fields.flatMap(({ field }, i) => {
      const chunk = [];
      if (is(field, SQL.Aliased) && field.isSelectionField) {
        chunk.push(sql.identifier(field.fieldAlias));
      } else if (is(field, SQL.Aliased) || is(field, SQL)) {
        const query2 = is(field, SQL.Aliased) ? field.sql : field;
        if (isSingleTable) {
          chunk.push(
            new SQL(
              query2.queryChunks.map((c) => {
                if (is(c, Column)) {
                  return sql.identifier(this.casing.getColumnCasing(c));
                }
                return c;
              })
            )
          );
        } else {
          chunk.push(query2);
        }
        if (is(field, SQL.Aliased)) {
          chunk.push(sql` as ${sql.identifier(field.fieldAlias)}`);
        }
      } else if (is(field, Column)) {
        const tableName = field.table[Table.Symbol.Name];
        if (field.columnType === "SQLiteNumericBigInt") {
          if (isSingleTable) {
            chunk.push(sql`cast(${sql.identifier(this.casing.getColumnCasing(field))} as text)`);
          } else {
            chunk.push(
              sql`cast(${sql.identifier(tableName)}.${sql.identifier(this.casing.getColumnCasing(field))} as text)`
            );
          }
        } else {
          if (isSingleTable) {
            chunk.push(sql.identifier(this.casing.getColumnCasing(field)));
          } else {
            chunk.push(sql`${sql.identifier(tableName)}.${sql.identifier(this.casing.getColumnCasing(field))}`);
          }
        }
      }
      if (i < columnsLen - 1) {
        chunk.push(sql`, `);
      }
      return chunk;
    });
    return sql.join(chunks);
  }
  buildJoins(joins) {
    if (!joins || joins.length === 0) {
      return void 0;
    }
    const joinsArray = [];
    if (joins) {
      for (const [index, joinMeta] of joins.entries()) {
        if (index === 0) {
          joinsArray.push(sql` `);
        }
        const table = joinMeta.table;
        const onSql = joinMeta.on ? sql` on ${joinMeta.on}` : void 0;
        if (is(table, SQLiteTable)) {
          const tableName = table[SQLiteTable.Symbol.Name];
          const tableSchema = table[SQLiteTable.Symbol.Schema];
          const origTableName = table[SQLiteTable.Symbol.OriginalName];
          const alias2 = tableName === origTableName ? void 0 : joinMeta.alias;
          joinsArray.push(
            sql`${sql.raw(joinMeta.joinType)} join ${tableSchema ? sql`${sql.identifier(tableSchema)}.` : void 0}${sql.identifier(origTableName)}${alias2 && sql` ${sql.identifier(alias2)}`}${onSql}`
          );
        } else {
          joinsArray.push(
            sql`${sql.raw(joinMeta.joinType)} join ${table}${onSql}`
          );
        }
        if (index < joins.length - 1) {
          joinsArray.push(sql` `);
        }
      }
    }
    return sql.join(joinsArray);
  }
  buildLimit(limit) {
    return typeof limit === "object" || typeof limit === "number" && limit >= 0 ? sql` limit ${limit}` : void 0;
  }
  buildOrderBy(orderBy) {
    const orderByList = [];
    if (orderBy) {
      for (const [index, orderByValue] of orderBy.entries()) {
        orderByList.push(orderByValue);
        if (index < orderBy.length - 1) {
          orderByList.push(sql`, `);
        }
      }
    }
    return orderByList.length > 0 ? sql` order by ${sql.join(orderByList)}` : void 0;
  }
  buildFromTable(table) {
    if (is(table, Table) && table[Table.Symbol.IsAlias]) {
      return sql`${sql`${sql.identifier(table[Table.Symbol.Schema] ?? "")}.`.if(table[Table.Symbol.Schema])}${sql.identifier(table[Table.Symbol.OriginalName])} ${sql.identifier(table[Table.Symbol.Name])}`;
    }
    return table;
  }
  buildSelectQuery({
    withList,
    fields,
    fieldsFlat,
    where,
    having,
    table,
    joins,
    orderBy,
    groupBy,
    limit,
    offset,
    distinct,
    setOperators
  }) {
    const fieldsList = fieldsFlat ?? orderSelectedFields(fields);
    for (const f of fieldsList) {
      if (is(f.field, Column) && getTableName(f.field.table) !== (is(table, Subquery) ? table._.alias : is(table, SQLiteViewBase) ? table[ViewBaseConfig].name : is(table, SQL) ? void 0 : getTableName(table)) && !((table2) => joins?.some(
        ({ alias: alias2 }) => alias2 === (table2[Table.Symbol.IsAlias] ? getTableName(table2) : table2[Table.Symbol.BaseName])
      ))(f.field.table)) {
        const tableName = getTableName(f.field.table);
        throw new Error(
          `Your "${f.path.join("->")}" field references a column "${tableName}"."${f.field.name}", but the table "${tableName}" is not part of the query! Did you forget to join it?`
        );
      }
    }
    const isSingleTable = !joins || joins.length === 0;
    const withSql = this.buildWithCTE(withList);
    const distinctSql = distinct ? sql` distinct` : void 0;
    const selection = this.buildSelection(fieldsList, { isSingleTable });
    const tableSql = this.buildFromTable(table);
    const joinsSql = this.buildJoins(joins);
    const whereSql = where ? sql` where ${where}` : void 0;
    const havingSql = having ? sql` having ${having}` : void 0;
    const groupByList = [];
    if (groupBy) {
      for (const [index, groupByValue] of groupBy.entries()) {
        groupByList.push(groupByValue);
        if (index < groupBy.length - 1) {
          groupByList.push(sql`, `);
        }
      }
    }
    const groupBySql = groupByList.length > 0 ? sql` group by ${sql.join(groupByList)}` : void 0;
    const orderBySql = this.buildOrderBy(orderBy);
    const limitSql = this.buildLimit(limit);
    const offsetSql = offset ? sql` offset ${offset}` : void 0;
    const finalQuery = sql`${withSql}select${distinctSql} ${selection} from ${tableSql}${joinsSql}${whereSql}${groupBySql}${havingSql}${orderBySql}${limitSql}${offsetSql}`;
    if (setOperators.length > 0) {
      return this.buildSetOperations(finalQuery, setOperators);
    }
    return finalQuery;
  }
  buildSetOperations(leftSelect, setOperators) {
    const [setOperator, ...rest] = setOperators;
    if (!setOperator) {
      throw new Error("Cannot pass undefined values to any set operator");
    }
    if (rest.length === 0) {
      return this.buildSetOperationQuery({ leftSelect, setOperator });
    }
    return this.buildSetOperations(
      this.buildSetOperationQuery({ leftSelect, setOperator }),
      rest
    );
  }
  buildSetOperationQuery({
    leftSelect,
    setOperator: { type, isAll, rightSelect, limit, orderBy, offset }
  }) {
    const leftChunk = sql`${leftSelect.getSQL()} `;
    const rightChunk = sql`${rightSelect.getSQL()}`;
    let orderBySql;
    if (orderBy && orderBy.length > 0) {
      const orderByValues = [];
      for (const singleOrderBy of orderBy) {
        if (is(singleOrderBy, SQLiteColumn)) {
          orderByValues.push(sql.identifier(singleOrderBy.name));
        } else if (is(singleOrderBy, SQL)) {
          for (let i = 0; i < singleOrderBy.queryChunks.length; i++) {
            const chunk = singleOrderBy.queryChunks[i];
            if (is(chunk, SQLiteColumn)) {
              singleOrderBy.queryChunks[i] = sql.identifier(this.casing.getColumnCasing(chunk));
            }
          }
          orderByValues.push(sql`${singleOrderBy}`);
        } else {
          orderByValues.push(sql`${singleOrderBy}`);
        }
      }
      orderBySql = sql` order by ${sql.join(orderByValues, sql`, `)}`;
    }
    const limitSql = typeof limit === "object" || typeof limit === "number" && limit >= 0 ? sql` limit ${limit}` : void 0;
    const operatorChunk = sql.raw(`${type} ${isAll ? "all " : ""}`);
    const offsetSql = offset ? sql` offset ${offset}` : void 0;
    return sql`${leftChunk}${operatorChunk}${rightChunk}${orderBySql}${limitSql}${offsetSql}`;
  }
  buildInsertQuery({ table, values: valuesOrSelect, onConflict, returning, withList, select }) {
    const valuesSqlList = [];
    const columns = table[Table.Symbol.Columns];
    const colEntries = Object.entries(columns).filter(
      ([_, col]) => !col.shouldDisableInsert()
    );
    const insertOrder = colEntries.map(([, column]) => sql.identifier(this.casing.getColumnCasing(column)));
    if (select) {
      const select2 = valuesOrSelect;
      if (is(select2, SQL)) {
        valuesSqlList.push(select2);
      } else {
        valuesSqlList.push(select2.getSQL());
      }
    } else {
      const values = valuesOrSelect;
      valuesSqlList.push(sql.raw("values "));
      for (const [valueIndex, value] of values.entries()) {
        const valueList = [];
        for (const [fieldName, col] of colEntries) {
          const colValue = value[fieldName];
          if (colValue === void 0 || is(colValue, Param) && colValue.value === void 0) {
            let defaultValue;
            if (col.default !== null && col.default !== void 0) {
              defaultValue = is(col.default, SQL) ? col.default : sql.param(col.default, col);
            } else if (col.defaultFn !== void 0) {
              const defaultFnResult = col.defaultFn();
              defaultValue = is(defaultFnResult, SQL) ? defaultFnResult : sql.param(defaultFnResult, col);
            } else if (!col.default && col.onUpdateFn !== void 0) {
              const onUpdateFnResult = col.onUpdateFn();
              defaultValue = is(onUpdateFnResult, SQL) ? onUpdateFnResult : sql.param(onUpdateFnResult, col);
            } else {
              defaultValue = sql`null`;
            }
            valueList.push(defaultValue);
          } else {
            valueList.push(colValue);
          }
        }
        valuesSqlList.push(valueList);
        if (valueIndex < values.length - 1) {
          valuesSqlList.push(sql`, `);
        }
      }
    }
    const withSql = this.buildWithCTE(withList);
    const valuesSql = sql.join(valuesSqlList);
    const returningSql = returning ? sql` returning ${this.buildSelection(returning, { isSingleTable: true })}` : void 0;
    const onConflictSql = onConflict?.length ? sql.join(onConflict) : void 0;
    return sql`${withSql}insert into ${table} ${insertOrder} ${valuesSql}${onConflictSql}${returningSql}`;
  }
  sqlToQuery(sql2, invokeSource) {
    return sql2.toQuery({
      casing: this.casing,
      escapeName: this.escapeName,
      escapeParam: this.escapeParam,
      escapeString: this.escapeString,
      invokeSource
    });
  }
  buildRelationalQuery({
    fullSchema,
    schema,
    tableNamesMap,
    table,
    tableConfig,
    queryConfig: config4,
    tableAlias,
    nestedQueryRelation,
    joinOn
  }) {
    let selection = [];
    let limit, offset, orderBy = [], where;
    const joins = [];
    if (config4 === true) {
      const selectionEntries = Object.entries(tableConfig.columns);
      selection = selectionEntries.map(([key, value]) => ({
        dbKey: value.name,
        tsKey: key,
        field: aliasedTableColumn(value, tableAlias),
        relationTableTsKey: void 0,
        isJson: false,
        selection: []
      }));
    } else {
      const aliasedColumns = Object.fromEntries(
        Object.entries(tableConfig.columns).map(([key, value]) => [key, aliasedTableColumn(value, tableAlias)])
      );
      if (config4.where) {
        const whereSql = typeof config4.where === "function" ? config4.where(aliasedColumns, getOperators()) : config4.where;
        where = whereSql && mapColumnsInSQLToAlias(whereSql, tableAlias);
      }
      const fieldsSelection = [];
      let selectedColumns = [];
      if (config4.columns) {
        let isIncludeMode = false;
        for (const [field, value] of Object.entries(config4.columns)) {
          if (value === void 0) {
            continue;
          }
          if (field in tableConfig.columns) {
            if (!isIncludeMode && value === true) {
              isIncludeMode = true;
            }
            selectedColumns.push(field);
          }
        }
        if (selectedColumns.length > 0) {
          selectedColumns = isIncludeMode ? selectedColumns.filter((c) => config4.columns?.[c] === true) : Object.keys(tableConfig.columns).filter((key) => !selectedColumns.includes(key));
        }
      } else {
        selectedColumns = Object.keys(tableConfig.columns);
      }
      for (const field of selectedColumns) {
        const column = tableConfig.columns[field];
        fieldsSelection.push({ tsKey: field, value: column });
      }
      let selectedRelations = [];
      if (config4.with) {
        selectedRelations = Object.entries(config4.with).filter((entry) => !!entry[1]).map(([tsKey, queryConfig]) => ({ tsKey, queryConfig, relation: tableConfig.relations[tsKey] }));
      }
      let extras;
      if (config4.extras) {
        extras = typeof config4.extras === "function" ? config4.extras(aliasedColumns, { sql }) : config4.extras;
        for (const [tsKey, value] of Object.entries(extras)) {
          fieldsSelection.push({
            tsKey,
            value: mapColumnsInAliasedSQLToAlias(value, tableAlias)
          });
        }
      }
      for (const { tsKey, value } of fieldsSelection) {
        selection.push({
          dbKey: is(value, SQL.Aliased) ? value.fieldAlias : tableConfig.columns[tsKey].name,
          tsKey,
          field: is(value, Column) ? aliasedTableColumn(value, tableAlias) : value,
          relationTableTsKey: void 0,
          isJson: false,
          selection: []
        });
      }
      let orderByOrig = typeof config4.orderBy === "function" ? config4.orderBy(aliasedColumns, getOrderByOperators()) : config4.orderBy ?? [];
      if (!Array.isArray(orderByOrig)) {
        orderByOrig = [orderByOrig];
      }
      orderBy = orderByOrig.map((orderByValue) => {
        if (is(orderByValue, Column)) {
          return aliasedTableColumn(orderByValue, tableAlias);
        }
        return mapColumnsInSQLToAlias(orderByValue, tableAlias);
      });
      limit = config4.limit;
      offset = config4.offset;
      for (const {
        tsKey: selectedRelationTsKey,
        queryConfig: selectedRelationConfigValue,
        relation
      } of selectedRelations) {
        const normalizedRelation = normalizeRelation(schema, tableNamesMap, relation);
        const relationTableName = getTableUniqueName(relation.referencedTable);
        const relationTableTsName = tableNamesMap[relationTableName];
        const relationTableAlias = `${tableAlias}_${selectedRelationTsKey}`;
        const joinOn2 = and(
          ...normalizedRelation.fields.map(
            (field2, i) => eq(
              aliasedTableColumn(normalizedRelation.references[i], relationTableAlias),
              aliasedTableColumn(field2, tableAlias)
            )
          )
        );
        const builtRelation = this.buildRelationalQuery({
          fullSchema,
          schema,
          tableNamesMap,
          table: fullSchema[relationTableTsName],
          tableConfig: schema[relationTableTsName],
          queryConfig: is(relation, One) ? selectedRelationConfigValue === true ? { limit: 1 } : { ...selectedRelationConfigValue, limit: 1 } : selectedRelationConfigValue,
          tableAlias: relationTableAlias,
          joinOn: joinOn2,
          nestedQueryRelation: relation
        });
        const field = sql`(${builtRelation.sql})`.as(selectedRelationTsKey);
        selection.push({
          dbKey: selectedRelationTsKey,
          tsKey: selectedRelationTsKey,
          field,
          relationTableTsKey: relationTableTsName,
          isJson: true,
          selection: builtRelation.selection
        });
      }
    }
    if (selection.length === 0) {
      throw new DrizzleError({
        message: `No fields selected for table "${tableConfig.tsName}" ("${tableAlias}"). You need to have at least one item in "columns", "with" or "extras". If you need to select all columns, omit the "columns" key or set it to undefined.`
      });
    }
    let result;
    where = and(joinOn, where);
    if (nestedQueryRelation) {
      let field = sql`json_array(${sql.join(
        selection.map(
          ({ field: field2 }) => is(field2, SQLiteColumn) ? sql.identifier(this.casing.getColumnCasing(field2)) : is(field2, SQL.Aliased) ? field2.sql : field2
        ),
        sql`, `
      )})`;
      if (is(nestedQueryRelation, Many)) {
        field = sql`coalesce(json_group_array(${field}), json_array())`;
      }
      const nestedSelection = [{
        dbKey: "data",
        tsKey: "data",
        field: field.as("data"),
        isJson: true,
        relationTableTsKey: tableConfig.tsName,
        selection
      }];
      const needsSubquery = limit !== void 0 || offset !== void 0 || orderBy.length > 0;
      if (needsSubquery) {
        result = this.buildSelectQuery({
          table: aliasedTable(table, tableAlias),
          fields: {},
          fieldsFlat: [
            {
              path: [],
              field: sql.raw("*")
            }
          ],
          where,
          limit,
          offset,
          orderBy,
          setOperators: []
        });
        where = void 0;
        limit = void 0;
        offset = void 0;
        orderBy = void 0;
      } else {
        result = aliasedTable(table, tableAlias);
      }
      result = this.buildSelectQuery({
        table: is(result, SQLiteTable) ? result : new Subquery(result, {}, tableAlias),
        fields: {},
        fieldsFlat: nestedSelection.map(({ field: field2 }) => ({
          path: [],
          field: is(field2, Column) ? aliasedTableColumn(field2, tableAlias) : field2
        })),
        joins,
        where,
        limit,
        offset,
        orderBy,
        setOperators: []
      });
    } else {
      result = this.buildSelectQuery({
        table: aliasedTable(table, tableAlias),
        fields: {},
        fieldsFlat: selection.map(({ field }) => ({
          path: [],
          field: is(field, Column) ? aliasedTableColumn(field, tableAlias) : field
        })),
        joins,
        where,
        limit,
        offset,
        orderBy,
        setOperators: []
      });
    }
    return {
      tableTsKey: tableConfig.tsName,
      sql: result,
      selection
    };
  }
};
var SQLiteSyncDialect = class extends SQLiteDialect {
  static [entityKind] = "SQLiteSyncDialect";
  migrate(migrations, session, config4) {
    const migrationsTable = config4 === void 0 ? "__drizzle_migrations" : typeof config4 === "string" ? "__drizzle_migrations" : config4.migrationsTable ?? "__drizzle_migrations";
    const migrationTableCreate = sql`
			CREATE TABLE IF NOT EXISTS ${sql.identifier(migrationsTable)} (
				id SERIAL PRIMARY KEY,
				hash text NOT NULL,
				created_at numeric
			)
		`;
    session.run(migrationTableCreate);
    const dbMigrations = session.values(
      sql`SELECT id, hash, created_at FROM ${sql.identifier(migrationsTable)} ORDER BY created_at DESC LIMIT 1`
    );
    const lastDbMigration = dbMigrations[0] ?? void 0;
    session.run(sql`BEGIN`);
    try {
      for (const migration of migrations) {
        if (!lastDbMigration || Number(lastDbMigration[2]) < migration.folderMillis) {
          for (const stmt of migration.sql) {
            session.run(sql.raw(stmt));
          }
          session.run(
            sql`INSERT INTO ${sql.identifier(migrationsTable)} ("hash", "created_at") VALUES(${migration.hash}, ${migration.folderMillis})`
          );
        }
      }
      session.run(sql`COMMIT`);
    } catch (e) {
      session.run(sql`ROLLBACK`);
      throw e;
    }
  }
};
var SQLiteAsyncDialect = class extends SQLiteDialect {
  static [entityKind] = "SQLiteAsyncDialect";
  async migrate(migrations, session, config4) {
    const migrationsTable = config4 === void 0 ? "__drizzle_migrations" : typeof config4 === "string" ? "__drizzle_migrations" : config4.migrationsTable ?? "__drizzle_migrations";
    const migrationTableCreate = sql`
			CREATE TABLE IF NOT EXISTS ${sql.identifier(migrationsTable)} (
				id SERIAL PRIMARY KEY,
				hash text NOT NULL,
				created_at numeric
			)
		`;
    await session.run(migrationTableCreate);
    const dbMigrations = await session.values(
      sql`SELECT id, hash, created_at FROM ${sql.identifier(migrationsTable)} ORDER BY created_at DESC LIMIT 1`
    );
    const lastDbMigration = dbMigrations[0] ?? void 0;
    await session.transaction(async (tx2) => {
      for (const migration of migrations) {
        if (!lastDbMigration || Number(lastDbMigration[2]) < migration.folderMillis) {
          for (const stmt of migration.sql) {
            await tx2.run(sql.raw(stmt));
          }
          await tx2.run(
            sql`INSERT INTO ${sql.identifier(migrationsTable)} ("hash", "created_at") VALUES(${migration.hash}, ${migration.folderMillis})`
          );
        }
      }
    });
  }
};

// node_modules/drizzle-orm/query-builders/query-builder.js
var TypedQueryBuilder = class {
  static [entityKind] = "TypedQueryBuilder";
  /** @internal */
  getSelectedFields() {
    return this._.selectedFields;
  }
};

// node_modules/drizzle-orm/sqlite-core/query-builders/select.js
var SQLiteSelectBuilder = class {
  static [entityKind] = "SQLiteSelectBuilder";
  fields;
  session;
  dialect;
  withList;
  distinct;
  constructor(config4) {
    this.fields = config4.fields;
    this.session = config4.session;
    this.dialect = config4.dialect;
    this.withList = config4.withList;
    this.distinct = config4.distinct;
  }
  from(source) {
    const isPartialSelect = !!this.fields;
    let fields;
    if (this.fields) {
      fields = this.fields;
    } else if (is(source, Subquery)) {
      fields = Object.fromEntries(
        Object.keys(source._.selectedFields).map((key) => [key, source[key]])
      );
    } else if (is(source, SQLiteViewBase)) {
      fields = source[ViewBaseConfig].selectedFields;
    } else if (is(source, SQL)) {
      fields = {};
    } else {
      fields = getTableColumns(source);
    }
    return new SQLiteSelectBase({
      table: source,
      fields,
      isPartialSelect,
      session: this.session,
      dialect: this.dialect,
      withList: this.withList,
      distinct: this.distinct
    });
  }
};
var SQLiteSelectQueryBuilderBase = class extends TypedQueryBuilder {
  static [entityKind] = "SQLiteSelectQueryBuilder";
  _;
  /** @internal */
  config;
  joinsNotNullableMap;
  tableName;
  isPartialSelect;
  session;
  dialect;
  cacheConfig = void 0;
  usedTables = /* @__PURE__ */ new Set();
  constructor({ table, fields, isPartialSelect, session, dialect, withList, distinct }) {
    super();
    this.config = {
      withList,
      table,
      fields: { ...fields },
      distinct,
      setOperators: []
    };
    this.isPartialSelect = isPartialSelect;
    this.session = session;
    this.dialect = dialect;
    this._ = {
      selectedFields: fields,
      config: this.config
    };
    this.tableName = getTableLikeName(table);
    this.joinsNotNullableMap = typeof this.tableName === "string" ? { [this.tableName]: true } : {};
    for (const item of extractUsedTable(table)) this.usedTables.add(item);
  }
  /** @internal */
  getUsedTables() {
    return [...this.usedTables];
  }
  createJoin(joinType) {
    return (table, on) => {
      const baseTableName = this.tableName;
      const tableName = getTableLikeName(table);
      for (const item of extractUsedTable(table)) this.usedTables.add(item);
      if (typeof tableName === "string" && this.config.joins?.some((join2) => join2.alias === tableName)) {
        throw new Error(`Alias "${tableName}" is already used in this query`);
      }
      if (!this.isPartialSelect) {
        if (Object.keys(this.joinsNotNullableMap).length === 1 && typeof baseTableName === "string") {
          this.config.fields = {
            [baseTableName]: this.config.fields
          };
        }
        if (typeof tableName === "string" && !is(table, SQL)) {
          const selection = is(table, Subquery) ? table._.selectedFields : is(table, View) ? table[ViewBaseConfig].selectedFields : table[Table.Symbol.Columns];
          this.config.fields[tableName] = selection;
        }
      }
      if (typeof on === "function") {
        on = on(
          new Proxy(
            this.config.fields,
            new SelectionProxyHandler({ sqlAliasedBehavior: "sql", sqlBehavior: "sql" })
          )
        );
      }
      if (!this.config.joins) {
        this.config.joins = [];
      }
      this.config.joins.push({ on, table, joinType, alias: tableName });
      if (typeof tableName === "string") {
        switch (joinType) {
          case "left": {
            this.joinsNotNullableMap[tableName] = false;
            break;
          }
          case "right": {
            this.joinsNotNullableMap = Object.fromEntries(
              Object.entries(this.joinsNotNullableMap).map(([key]) => [key, false])
            );
            this.joinsNotNullableMap[tableName] = true;
            break;
          }
          case "cross":
          case "inner": {
            this.joinsNotNullableMap[tableName] = true;
            break;
          }
          case "full": {
            this.joinsNotNullableMap = Object.fromEntries(
              Object.entries(this.joinsNotNullableMap).map(([key]) => [key, false])
            );
            this.joinsNotNullableMap[tableName] = false;
            break;
          }
        }
      }
      return this;
    };
  }
  /**
   * Executes a `left join` operation by adding another table to the current query.
   *
   * Calling this method associates each row of the table with the corresponding row from the joined table, if a match is found. If no matching row exists, it sets all columns of the joined table to null.
   *
   * See docs: {@link https://orm.drizzle.team/docs/joins#left-join}
   *
   * @param table the table to join.
   * @param on the `on` clause.
   *
   * @example
   *
   * ```ts
   * // Select all users and their pets
   * const usersWithPets: { user: User; pets: Pet | null; }[] = await db.select()
   *   .from(users)
   *   .leftJoin(pets, eq(users.id, pets.ownerId))
   *
   * // Select userId and petId
   * const usersIdsAndPetIds: { userId: number; petId: number | null; }[] = await db.select({
   *   userId: users.id,
   *   petId: pets.id,
   * })
   *   .from(users)
   *   .leftJoin(pets, eq(users.id, pets.ownerId))
   * ```
   */
  leftJoin = this.createJoin("left");
  /**
   * Executes a `right join` operation by adding another table to the current query.
   *
   * Calling this method associates each row of the joined table with the corresponding row from the main table, if a match is found. If no matching row exists, it sets all columns of the main table to null.
   *
   * See docs: {@link https://orm.drizzle.team/docs/joins#right-join}
   *
   * @param table the table to join.
   * @param on the `on` clause.
   *
   * @example
   *
   * ```ts
   * // Select all users and their pets
   * const usersWithPets: { user: User | null; pets: Pet; }[] = await db.select()
   *   .from(users)
   *   .rightJoin(pets, eq(users.id, pets.ownerId))
   *
   * // Select userId and petId
   * const usersIdsAndPetIds: { userId: number | null; petId: number; }[] = await db.select({
   *   userId: users.id,
   *   petId: pets.id,
   * })
   *   .from(users)
   *   .rightJoin(pets, eq(users.id, pets.ownerId))
   * ```
   */
  rightJoin = this.createJoin("right");
  /**
   * Executes an `inner join` operation, creating a new table by combining rows from two tables that have matching values.
   *
   * Calling this method retrieves rows that have corresponding entries in both joined tables. Rows without matching entries in either table are excluded, resulting in a table that includes only matching pairs.
   *
   * See docs: {@link https://orm.drizzle.team/docs/joins#inner-join}
   *
   * @param table the table to join.
   * @param on the `on` clause.
   *
   * @example
   *
   * ```ts
   * // Select all users and their pets
   * const usersWithPets: { user: User; pets: Pet; }[] = await db.select()
   *   .from(users)
   *   .innerJoin(pets, eq(users.id, pets.ownerId))
   *
   * // Select userId and petId
   * const usersIdsAndPetIds: { userId: number; petId: number; }[] = await db.select({
   *   userId: users.id,
   *   petId: pets.id,
   * })
   *   .from(users)
   *   .innerJoin(pets, eq(users.id, pets.ownerId))
   * ```
   */
  innerJoin = this.createJoin("inner");
  /**
   * Executes a `full join` operation by combining rows from two tables into a new table.
   *
   * Calling this method retrieves all rows from both main and joined tables, merging rows with matching values and filling in `null` for non-matching columns.
   *
   * See docs: {@link https://orm.drizzle.team/docs/joins#full-join}
   *
   * @param table the table to join.
   * @param on the `on` clause.
   *
   * @example
   *
   * ```ts
   * // Select all users and their pets
   * const usersWithPets: { user: User | null; pets: Pet | null; }[] = await db.select()
   *   .from(users)
   *   .fullJoin(pets, eq(users.id, pets.ownerId))
   *
   * // Select userId and petId
   * const usersIdsAndPetIds: { userId: number | null; petId: number | null; }[] = await db.select({
   *   userId: users.id,
   *   petId: pets.id,
   * })
   *   .from(users)
   *   .fullJoin(pets, eq(users.id, pets.ownerId))
   * ```
   */
  fullJoin = this.createJoin("full");
  /**
   * Executes a `cross join` operation by combining rows from two tables into a new table.
   *
   * Calling this method retrieves all rows from both main and joined tables, merging all rows from each table.
   *
   * See docs: {@link https://orm.drizzle.team/docs/joins#cross-join}
   *
   * @param table the table to join.
   *
   * @example
   *
   * ```ts
   * // Select all users, each user with every pet
   * const usersWithPets: { user: User; pets: Pet; }[] = await db.select()
   *   .from(users)
   *   .crossJoin(pets)
   *
   * // Select userId and petId
   * const usersIdsAndPetIds: { userId: number; petId: number; }[] = await db.select({
   *   userId: users.id,
   *   petId: pets.id,
   * })
   *   .from(users)
   *   .crossJoin(pets)
   * ```
   */
  crossJoin = this.createJoin("cross");
  createSetOperator(type, isAll) {
    return (rightSelection) => {
      const rightSelect = typeof rightSelection === "function" ? rightSelection(getSQLiteSetOperators()) : rightSelection;
      if (!haveSameKeys(this.getSelectedFields(), rightSelect.getSelectedFields())) {
        throw new Error(
          "Set operator error (union / intersect / except): selected fields are not the same or are in a different order"
        );
      }
      this.config.setOperators.push({ type, isAll, rightSelect });
      return this;
    };
  }
  /**
   * Adds `union` set operator to the query.
   *
   * Calling this method will combine the result sets of the `select` statements and remove any duplicate rows that appear across them.
   *
   * See docs: {@link https://orm.drizzle.team/docs/set-operations#union}
   *
   * @example
   *
   * ```ts
   * // Select all unique names from customers and users tables
   * await db.select({ name: users.name })
   *   .from(users)
   *   .union(
   *     db.select({ name: customers.name }).from(customers)
   *   );
   * // or
   * import { union } from 'drizzle-orm/sqlite-core'
   *
   * await union(
   *   db.select({ name: users.name }).from(users),
   *   db.select({ name: customers.name }).from(customers)
   * );
   * ```
   */
  union = this.createSetOperator("union", false);
  /**
   * Adds `union all` set operator to the query.
   *
   * Calling this method will combine the result-set of the `select` statements and keep all duplicate rows that appear across them.
   *
   * See docs: {@link https://orm.drizzle.team/docs/set-operations#union-all}
   *
   * @example
   *
   * ```ts
   * // Select all transaction ids from both online and in-store sales
   * await db.select({ transaction: onlineSales.transactionId })
   *   .from(onlineSales)
   *   .unionAll(
   *     db.select({ transaction: inStoreSales.transactionId }).from(inStoreSales)
   *   );
   * // or
   * import { unionAll } from 'drizzle-orm/sqlite-core'
   *
   * await unionAll(
   *   db.select({ transaction: onlineSales.transactionId }).from(onlineSales),
   *   db.select({ transaction: inStoreSales.transactionId }).from(inStoreSales)
   * );
   * ```
   */
  unionAll = this.createSetOperator("union", true);
  /**
   * Adds `intersect` set operator to the query.
   *
   * Calling this method will retain only the rows that are present in both result sets and eliminate duplicates.
   *
   * See docs: {@link https://orm.drizzle.team/docs/set-operations#intersect}
   *
   * @example
   *
   * ```ts
   * // Select course names that are offered in both departments A and B
   * await db.select({ courseName: depA.courseName })
   *   .from(depA)
   *   .intersect(
   *     db.select({ courseName: depB.courseName }).from(depB)
   *   );
   * // or
   * import { intersect } from 'drizzle-orm/sqlite-core'
   *
   * await intersect(
   *   db.select({ courseName: depA.courseName }).from(depA),
   *   db.select({ courseName: depB.courseName }).from(depB)
   * );
   * ```
   */
  intersect = this.createSetOperator("intersect", false);
  /**
   * Adds `except` set operator to the query.
   *
   * Calling this method will retrieve all unique rows from the left query, except for the rows that are present in the result set of the right query.
   *
   * See docs: {@link https://orm.drizzle.team/docs/set-operations#except}
   *
   * @example
   *
   * ```ts
   * // Select all courses offered in department A but not in department B
   * await db.select({ courseName: depA.courseName })
   *   .from(depA)
   *   .except(
   *     db.select({ courseName: depB.courseName }).from(depB)
   *   );
   * // or
   * import { except } from 'drizzle-orm/sqlite-core'
   *
   * await except(
   *   db.select({ courseName: depA.courseName }).from(depA),
   *   db.select({ courseName: depB.courseName }).from(depB)
   * );
   * ```
   */
  except = this.createSetOperator("except", false);
  /** @internal */
  addSetOperators(setOperators) {
    this.config.setOperators.push(...setOperators);
    return this;
  }
  /**
   * Adds a `where` clause to the query.
   *
   * Calling this method will select only those rows that fulfill a specified condition.
   *
   * See docs: {@link https://orm.drizzle.team/docs/select#filtering}
   *
   * @param where the `where` clause.
   *
   * @example
   * You can use conditional operators and `sql function` to filter the rows to be selected.
   *
   * ```ts
   * // Select all cars with green color
   * await db.select().from(cars).where(eq(cars.color, 'green'));
   * // or
   * await db.select().from(cars).where(sql`${cars.color} = 'green'`)
   * ```
   *
   * You can logically combine conditional operators with `and()` and `or()` operators:
   *
   * ```ts
   * // Select all BMW cars with a green color
   * await db.select().from(cars).where(and(eq(cars.color, 'green'), eq(cars.brand, 'BMW')));
   *
   * // Select all cars with the green or blue color
   * await db.select().from(cars).where(or(eq(cars.color, 'green'), eq(cars.color, 'blue')));
   * ```
   */
  where(where) {
    if (typeof where === "function") {
      where = where(
        new Proxy(
          this.config.fields,
          new SelectionProxyHandler({ sqlAliasedBehavior: "sql", sqlBehavior: "sql" })
        )
      );
    }
    this.config.where = where;
    return this;
  }
  /**
   * Adds a `having` clause to the query.
   *
   * Calling this method will select only those rows that fulfill a specified condition. It is typically used with aggregate functions to filter the aggregated data based on a specified condition.
   *
   * See docs: {@link https://orm.drizzle.team/docs/select#aggregations}
   *
   * @param having the `having` clause.
   *
   * @example
   *
   * ```ts
   * // Select all brands with more than one car
   * await db.select({
   * 	brand: cars.brand,
   * 	count: sql<number>`cast(count(${cars.id}) as int)`,
   * })
   *   .from(cars)
   *   .groupBy(cars.brand)
   *   .having(({ count }) => gt(count, 1));
   * ```
   */
  having(having) {
    if (typeof having === "function") {
      having = having(
        new Proxy(
          this.config.fields,
          new SelectionProxyHandler({ sqlAliasedBehavior: "sql", sqlBehavior: "sql" })
        )
      );
    }
    this.config.having = having;
    return this;
  }
  groupBy(...columns) {
    if (typeof columns[0] === "function") {
      const groupBy = columns[0](
        new Proxy(
          this.config.fields,
          new SelectionProxyHandler({ sqlAliasedBehavior: "alias", sqlBehavior: "sql" })
        )
      );
      this.config.groupBy = Array.isArray(groupBy) ? groupBy : [groupBy];
    } else {
      this.config.groupBy = columns;
    }
    return this;
  }
  orderBy(...columns) {
    if (typeof columns[0] === "function") {
      const orderBy = columns[0](
        new Proxy(
          this.config.fields,
          new SelectionProxyHandler({ sqlAliasedBehavior: "alias", sqlBehavior: "sql" })
        )
      );
      const orderByArray = Array.isArray(orderBy) ? orderBy : [orderBy];
      if (this.config.setOperators.length > 0) {
        this.config.setOperators.at(-1).orderBy = orderByArray;
      } else {
        this.config.orderBy = orderByArray;
      }
    } else {
      const orderByArray = columns;
      if (this.config.setOperators.length > 0) {
        this.config.setOperators.at(-1).orderBy = orderByArray;
      } else {
        this.config.orderBy = orderByArray;
      }
    }
    return this;
  }
  /**
   * Adds a `limit` clause to the query.
   *
   * Calling this method will set the maximum number of rows that will be returned by this query.
   *
   * See docs: {@link https://orm.drizzle.team/docs/select#limit--offset}
   *
   * @param limit the `limit` clause.
   *
   * @example
   *
   * ```ts
   * // Get the first 10 people from this query.
   * await db.select().from(people).limit(10);
   * ```
   */
  limit(limit) {
    if (this.config.setOperators.length > 0) {
      this.config.setOperators.at(-1).limit = limit;
    } else {
      this.config.limit = limit;
    }
    return this;
  }
  /**
   * Adds an `offset` clause to the query.
   *
   * Calling this method will skip a number of rows when returning results from this query.
   *
   * See docs: {@link https://orm.drizzle.team/docs/select#limit--offset}
   *
   * @param offset the `offset` clause.
   *
   * @example
   *
   * ```ts
   * // Get the 10th-20th people from this query.
   * await db.select().from(people).offset(10).limit(10);
   * ```
   */
  offset(offset) {
    if (this.config.setOperators.length > 0) {
      this.config.setOperators.at(-1).offset = offset;
    } else {
      this.config.offset = offset;
    }
    return this;
  }
  /** @internal */
  getSQL() {
    return this.dialect.buildSelectQuery(this.config);
  }
  toSQL() {
    const { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());
    return rest;
  }
  as(alias2) {
    const usedTables = [];
    usedTables.push(...extractUsedTable(this.config.table));
    if (this.config.joins) {
      for (const it of this.config.joins) usedTables.push(...extractUsedTable(it.table));
    }
    return new Proxy(
      new Subquery(this.getSQL(), this.config.fields, alias2, false, [...new Set(usedTables)]),
      new SelectionProxyHandler({ alias: alias2, sqlAliasedBehavior: "alias", sqlBehavior: "error" })
    );
  }
  /** @internal */
  getSelectedFields() {
    return new Proxy(
      this.config.fields,
      new SelectionProxyHandler({ alias: this.tableName, sqlAliasedBehavior: "alias", sqlBehavior: "error" })
    );
  }
  $dynamic() {
    return this;
  }
};
var SQLiteSelectBase = class extends SQLiteSelectQueryBuilderBase {
  static [entityKind] = "SQLiteSelect";
  /** @internal */
  _prepare(isOneTimeQuery = true) {
    if (!this.session) {
      throw new Error("Cannot execute a query on a query builder. Please use a database instance instead.");
    }
    const fieldsList = orderSelectedFields(this.config.fields);
    const query2 = this.session[isOneTimeQuery ? "prepareOneTimeQuery" : "prepareQuery"](
      this.dialect.sqlToQuery(this.getSQL()),
      fieldsList,
      "all",
      true,
      void 0,
      {
        type: "select",
        tables: [...this.usedTables]
      },
      this.cacheConfig
    );
    query2.joinsNotNullableMap = this.joinsNotNullableMap;
    return query2;
  }
  $withCache(config4) {
    this.cacheConfig = config4 === void 0 ? { config: {}, enable: true, autoInvalidate: true } : config4 === false ? { enable: false } : { enable: true, autoInvalidate: true, ...config4 };
    return this;
  }
  prepare() {
    return this._prepare(false);
  }
  run = (placeholderValues) => {
    return this._prepare().run(placeholderValues);
  };
  all = (placeholderValues) => {
    return this._prepare().all(placeholderValues);
  };
  get = (placeholderValues) => {
    return this._prepare().get(placeholderValues);
  };
  values = (placeholderValues) => {
    return this._prepare().values(placeholderValues);
  };
  async execute() {
    return this.all();
  }
};
applyMixins(SQLiteSelectBase, [QueryPromise]);
function createSetOperator(type, isAll) {
  return (leftSelect, rightSelect, ...restSelects) => {
    const setOperators = [rightSelect, ...restSelects].map((select) => ({
      type,
      isAll,
      rightSelect: select
    }));
    for (const setOperator of setOperators) {
      if (!haveSameKeys(leftSelect.getSelectedFields(), setOperator.rightSelect.getSelectedFields())) {
        throw new Error(
          "Set operator error (union / intersect / except): selected fields are not the same or are in a different order"
        );
      }
    }
    return leftSelect.addSetOperators(setOperators);
  };
}
var getSQLiteSetOperators = () => ({
  union,
  unionAll,
  intersect,
  except
});
var union = createSetOperator("union", false);
var unionAll = createSetOperator("union", true);
var intersect = createSetOperator("intersect", false);
var except = createSetOperator("except", false);

// node_modules/drizzle-orm/sqlite-core/query-builders/query-builder.js
var QueryBuilder = class {
  static [entityKind] = "SQLiteQueryBuilder";
  dialect;
  dialectConfig;
  constructor(dialect) {
    this.dialect = is(dialect, SQLiteDialect) ? dialect : void 0;
    this.dialectConfig = is(dialect, SQLiteDialect) ? void 0 : dialect;
  }
  $with = (alias2, selection) => {
    const queryBuilder = this;
    const as = (qb) => {
      if (typeof qb === "function") {
        qb = qb(queryBuilder);
      }
      return new Proxy(
        new WithSubquery(
          qb.getSQL(),
          selection ?? ("getSelectedFields" in qb ? qb.getSelectedFields() ?? {} : {}),
          alias2,
          true
        ),
        new SelectionProxyHandler({ alias: alias2, sqlAliasedBehavior: "alias", sqlBehavior: "error" })
      );
    };
    return { as };
  };
  with(...queries) {
    const self2 = this;
    function select(fields) {
      return new SQLiteSelectBuilder({
        fields: fields ?? void 0,
        session: void 0,
        dialect: self2.getDialect(),
        withList: queries
      });
    }
    function selectDistinct(fields) {
      return new SQLiteSelectBuilder({
        fields: fields ?? void 0,
        session: void 0,
        dialect: self2.getDialect(),
        withList: queries,
        distinct: true
      });
    }
    return { select, selectDistinct };
  }
  select(fields) {
    return new SQLiteSelectBuilder({ fields: fields ?? void 0, session: void 0, dialect: this.getDialect() });
  }
  selectDistinct(fields) {
    return new SQLiteSelectBuilder({
      fields: fields ?? void 0,
      session: void 0,
      dialect: this.getDialect(),
      distinct: true
    });
  }
  // Lazy load dialect to avoid circular dependency
  getDialect() {
    if (!this.dialect) {
      this.dialect = new SQLiteSyncDialect(this.dialectConfig);
    }
    return this.dialect;
  }
};

// node_modules/drizzle-orm/sqlite-core/query-builders/insert.js
var SQLiteInsertBuilder = class {
  constructor(table, session, dialect, withList) {
    this.table = table;
    this.session = session;
    this.dialect = dialect;
    this.withList = withList;
  }
  static [entityKind] = "SQLiteInsertBuilder";
  values(values) {
    values = Array.isArray(values) ? values : [values];
    if (values.length === 0) {
      throw new Error("values() must be called with at least one value");
    }
    const mappedValues = values.map((entry) => {
      const result = {};
      const cols = this.table[Table.Symbol.Columns];
      for (const colKey of Object.keys(entry)) {
        const colValue = entry[colKey];
        result[colKey] = is(colValue, SQL) ? colValue : new Param(colValue, cols[colKey]);
      }
      return result;
    });
    return new SQLiteInsertBase(this.table, mappedValues, this.session, this.dialect, this.withList);
  }
  select(selectQuery) {
    const select = typeof selectQuery === "function" ? selectQuery(new QueryBuilder()) : selectQuery;
    if (!is(select, SQL) && !haveSameKeys(this.table[Columns], select._.selectedFields)) {
      throw new Error(
        "Insert select error: selected fields are not the same or are in a different order compared to the table definition"
      );
    }
    return new SQLiteInsertBase(this.table, select, this.session, this.dialect, this.withList, true);
  }
};
var SQLiteInsertBase = class extends QueryPromise {
  constructor(table, values, session, dialect, withList, select) {
    super();
    this.session = session;
    this.dialect = dialect;
    this.config = { table, values, withList, select };
  }
  static [entityKind] = "SQLiteInsert";
  /** @internal */
  config;
  returning(fields = this.config.table[SQLiteTable.Symbol.Columns]) {
    this.config.returning = orderSelectedFields(fields);
    return this;
  }
  /**
   * Adds an `on conflict do nothing` clause to the query.
   *
   * Calling this method simply avoids inserting a row as its alternative action.
   *
   * See docs: {@link https://orm.drizzle.team/docs/insert#on-conflict-do-nothing}
   *
   * @param config The `target` and `where` clauses.
   *
   * @example
   * ```ts
   * // Insert one row and cancel the insert if there's a conflict
   * await db.insert(cars)
   *   .values({ id: 1, brand: 'BMW' })
   *   .onConflictDoNothing();
   *
   * // Explicitly specify conflict target
   * await db.insert(cars)
   *   .values({ id: 1, brand: 'BMW' })
   *   .onConflictDoNothing({ target: cars.id });
   * ```
   */
  onConflictDoNothing(config4 = {}) {
    if (!this.config.onConflict) this.config.onConflict = [];
    if (config4.target === void 0) {
      this.config.onConflict.push(sql` on conflict do nothing`);
    } else {
      const targetSql = Array.isArray(config4.target) ? sql`${config4.target}` : sql`${[config4.target]}`;
      const whereSql = config4.where ? sql` where ${config4.where}` : sql``;
      this.config.onConflict.push(sql` on conflict ${targetSql} do nothing${whereSql}`);
    }
    return this;
  }
  /**
   * Adds an `on conflict do update` clause to the query.
   *
   * Calling this method will update the existing row that conflicts with the row proposed for insertion as its alternative action.
   *
   * See docs: {@link https://orm.drizzle.team/docs/insert#upserts-and-conflicts}
   *
   * @param config The `target`, `set` and `where` clauses.
   *
   * @example
   * ```ts
   * // Update the row if there's a conflict
   * await db.insert(cars)
   *   .values({ id: 1, brand: 'BMW' })
   *   .onConflictDoUpdate({
   *     target: cars.id,
   *     set: { brand: 'Porsche' }
   *   });
   *
   * // Upsert with 'where' clause
   * await db.insert(cars)
   *   .values({ id: 1, brand: 'BMW' })
   *   .onConflictDoUpdate({
   *     target: cars.id,
   *     set: { brand: 'newBMW' },
   *     where: sql`${cars.createdAt} > '2023-01-01'::date`,
   *   });
   * ```
   */
  onConflictDoUpdate(config4) {
    if (config4.where && (config4.targetWhere || config4.setWhere)) {
      throw new Error(
        'You cannot use both "where" and "targetWhere"/"setWhere" at the same time - "where" is deprecated, use "targetWhere" or "setWhere" instead.'
      );
    }
    if (!this.config.onConflict) this.config.onConflict = [];
    const whereSql = config4.where ? sql` where ${config4.where}` : void 0;
    const targetWhereSql = config4.targetWhere ? sql` where ${config4.targetWhere}` : void 0;
    const setWhereSql = config4.setWhere ? sql` where ${config4.setWhere}` : void 0;
    const targetSql = Array.isArray(config4.target) ? sql`${config4.target}` : sql`${[config4.target]}`;
    const setSql = this.dialect.buildUpdateSet(this.config.table, mapUpdateSet(this.config.table, config4.set));
    this.config.onConflict.push(
      sql` on conflict ${targetSql}${targetWhereSql} do update set ${setSql}${whereSql}${setWhereSql}`
    );
    return this;
  }
  /** @internal */
  getSQL() {
    return this.dialect.buildInsertQuery(this.config);
  }
  toSQL() {
    const { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());
    return rest;
  }
  /** @internal */
  _prepare(isOneTimeQuery = true) {
    return this.session[isOneTimeQuery ? "prepareOneTimeQuery" : "prepareQuery"](
      this.dialect.sqlToQuery(this.getSQL()),
      this.config.returning,
      this.config.returning ? "all" : "run",
      true,
      void 0,
      {
        type: "insert",
        tables: extractUsedTable(this.config.table)
      }
    );
  }
  prepare() {
    return this._prepare(false);
  }
  run = (placeholderValues) => {
    return this._prepare().run(placeholderValues);
  };
  all = (placeholderValues) => {
    return this._prepare().all(placeholderValues);
  };
  get = (placeholderValues) => {
    return this._prepare().get(placeholderValues);
  };
  values = (placeholderValues) => {
    return this._prepare().values(placeholderValues);
  };
  async execute() {
    return this.config.returning ? this.all() : this.run();
  }
  $dynamic() {
    return this;
  }
};

// node_modules/drizzle-orm/sqlite-core/query-builders/update.js
var SQLiteUpdateBuilder = class {
  constructor(table, session, dialect, withList) {
    this.table = table;
    this.session = session;
    this.dialect = dialect;
    this.withList = withList;
  }
  static [entityKind] = "SQLiteUpdateBuilder";
  set(values) {
    return new SQLiteUpdateBase(
      this.table,
      mapUpdateSet(this.table, values),
      this.session,
      this.dialect,
      this.withList
    );
  }
};
var SQLiteUpdateBase = class extends QueryPromise {
  constructor(table, set, session, dialect, withList) {
    super();
    this.session = session;
    this.dialect = dialect;
    this.config = { set, table, withList, joins: [] };
  }
  static [entityKind] = "SQLiteUpdate";
  /** @internal */
  config;
  from(source) {
    this.config.from = source;
    return this;
  }
  createJoin(joinType) {
    return (table, on) => {
      const tableName = getTableLikeName(table);
      if (typeof tableName === "string" && this.config.joins.some((join2) => join2.alias === tableName)) {
        throw new Error(`Alias "${tableName}" is already used in this query`);
      }
      if (typeof on === "function") {
        const from2 = this.config.from ? is(table, SQLiteTable) ? table[Table.Symbol.Columns] : is(table, Subquery) ? table._.selectedFields : is(table, SQLiteViewBase) ? table[ViewBaseConfig].selectedFields : void 0 : void 0;
        on = on(
          new Proxy(
            this.config.table[Table.Symbol.Columns],
            new SelectionProxyHandler({ sqlAliasedBehavior: "sql", sqlBehavior: "sql" })
          ),
          from2 && new Proxy(
            from2,
            new SelectionProxyHandler({ sqlAliasedBehavior: "sql", sqlBehavior: "sql" })
          )
        );
      }
      this.config.joins.push({ on, table, joinType, alias: tableName });
      return this;
    };
  }
  leftJoin = this.createJoin("left");
  rightJoin = this.createJoin("right");
  innerJoin = this.createJoin("inner");
  fullJoin = this.createJoin("full");
  /**
   * Adds a 'where' clause to the query.
   *
   * Calling this method will update only those rows that fulfill a specified condition.
   *
   * See docs: {@link https://orm.drizzle.team/docs/update}
   *
   * @param where the 'where' clause.
   *
   * @example
   * You can use conditional operators and `sql function` to filter the rows to be updated.
   *
   * ```ts
   * // Update all cars with green color
   * db.update(cars).set({ color: 'red' })
   *   .where(eq(cars.color, 'green'));
   * // or
   * db.update(cars).set({ color: 'red' })
   *   .where(sql`${cars.color} = 'green'`)
   * ```
   *
   * You can logically combine conditional operators with `and()` and `or()` operators:
   *
   * ```ts
   * // Update all BMW cars with a green color
   * db.update(cars).set({ color: 'red' })
   *   .where(and(eq(cars.color, 'green'), eq(cars.brand, 'BMW')));
   *
   * // Update all cars with the green or blue color
   * db.update(cars).set({ color: 'red' })
   *   .where(or(eq(cars.color, 'green'), eq(cars.color, 'blue')));
   * ```
   */
  where(where) {
    this.config.where = where;
    return this;
  }
  orderBy(...columns) {
    if (typeof columns[0] === "function") {
      const orderBy = columns[0](
        new Proxy(
          this.config.table[Table.Symbol.Columns],
          new SelectionProxyHandler({ sqlAliasedBehavior: "alias", sqlBehavior: "sql" })
        )
      );
      const orderByArray = Array.isArray(orderBy) ? orderBy : [orderBy];
      this.config.orderBy = orderByArray;
    } else {
      const orderByArray = columns;
      this.config.orderBy = orderByArray;
    }
    return this;
  }
  limit(limit) {
    this.config.limit = limit;
    return this;
  }
  returning(fields = this.config.table[SQLiteTable.Symbol.Columns]) {
    this.config.returning = orderSelectedFields(fields);
    return this;
  }
  /** @internal */
  getSQL() {
    return this.dialect.buildUpdateQuery(this.config);
  }
  toSQL() {
    const { typings: _typings, ...rest } = this.dialect.sqlToQuery(this.getSQL());
    return rest;
  }
  /** @internal */
  _prepare(isOneTimeQuery = true) {
    return this.session[isOneTimeQuery ? "prepareOneTimeQuery" : "prepareQuery"](
      this.dialect.sqlToQuery(this.getSQL()),
      this.config.returning,
      this.config.returning ? "all" : "run",
      true,
      void 0,
      {
        type: "insert",
        tables: extractUsedTable(this.config.table)
      }
    );
  }
  prepare() {
    return this._prepare(false);
  }
  run = (placeholderValues) => {
    return this._prepare().run(placeholderValues);
  };
  all = (placeholderValues) => {
    return this._prepare().all(placeholderValues);
  };
  get = (placeholderValues) => {
    return this._prepare().get(placeholderValues);
  };
  values = (placeholderValues) => {
    return this._prepare().values(placeholderValues);
  };
  async execute() {
    return this.config.returning ? this.all() : this.run();
  }
  $dynamic() {
    return this;
  }
};

// node_modules/drizzle-orm/sqlite-core/query-builders/count.js
var SQLiteCountBuilder = class _SQLiteCountBuilder extends SQL {
  constructor(params) {
    super(_SQLiteCountBuilder.buildEmbeddedCount(params.source, params.filters).queryChunks);
    this.params = params;
    this.session = params.session;
    this.sql = _SQLiteCountBuilder.buildCount(
      params.source,
      params.filters
    );
  }
  sql;
  static [entityKind] = "SQLiteCountBuilderAsync";
  [Symbol.toStringTag] = "SQLiteCountBuilderAsync";
  session;
  static buildEmbeddedCount(source, filters) {
    return sql`(select count(*) from ${source}${sql.raw(" where ").if(filters)}${filters})`;
  }
  static buildCount(source, filters) {
    return sql`select count(*) from ${source}${sql.raw(" where ").if(filters)}${filters}`;
  }
  then(onfulfilled, onrejected) {
    return Promise.resolve(this.session.count(this.sql)).then(
      onfulfilled,
      onrejected
    );
  }
  catch(onRejected) {
    return this.then(void 0, onRejected);
  }
  finally(onFinally) {
    return this.then(
      (value) => {
        onFinally?.();
        return value;
      },
      (reason) => {
        onFinally?.();
        throw reason;
      }
    );
  }
};

// node_modules/drizzle-orm/sqlite-core/query-builders/query.js
var RelationalQueryBuilder = class {
  constructor(mode, fullSchema, schema, tableNamesMap, table, tableConfig, dialect, session) {
    this.mode = mode;
    this.fullSchema = fullSchema;
    this.schema = schema;
    this.tableNamesMap = tableNamesMap;
    this.table = table;
    this.tableConfig = tableConfig;
    this.dialect = dialect;
    this.session = session;
  }
  static [entityKind] = "SQLiteAsyncRelationalQueryBuilder";
  findMany(config4) {
    return this.mode === "sync" ? new SQLiteSyncRelationalQuery(
      this.fullSchema,
      this.schema,
      this.tableNamesMap,
      this.table,
      this.tableConfig,
      this.dialect,
      this.session,
      config4 ? config4 : {},
      "many"
    ) : new SQLiteRelationalQuery(
      this.fullSchema,
      this.schema,
      this.tableNamesMap,
      this.table,
      this.tableConfig,
      this.dialect,
      this.session,
      config4 ? config4 : {},
      "many"
    );
  }
  findFirst(config4) {
    return this.mode === "sync" ? new SQLiteSyncRelationalQuery(
      this.fullSchema,
      this.schema,
      this.tableNamesMap,
      this.table,
      this.tableConfig,
      this.dialect,
      this.session,
      config4 ? { ...config4, limit: 1 } : { limit: 1 },
      "first"
    ) : new SQLiteRelationalQuery(
      this.fullSchema,
      this.schema,
      this.tableNamesMap,
      this.table,
      this.tableConfig,
      this.dialect,
      this.session,
      config4 ? { ...config4, limit: 1 } : { limit: 1 },
      "first"
    );
  }
};
var SQLiteRelationalQuery = class extends QueryPromise {
  constructor(fullSchema, schema, tableNamesMap, table, tableConfig, dialect, session, config4, mode) {
    super();
    this.fullSchema = fullSchema;
    this.schema = schema;
    this.tableNamesMap = tableNamesMap;
    this.table = table;
    this.tableConfig = tableConfig;
    this.dialect = dialect;
    this.session = session;
    this.config = config4;
    this.mode = mode;
  }
  static [entityKind] = "SQLiteAsyncRelationalQuery";
  /** @internal */
  mode;
  /** @internal */
  getSQL() {
    return this.dialect.buildRelationalQuery({
      fullSchema: this.fullSchema,
      schema: this.schema,
      tableNamesMap: this.tableNamesMap,
      table: this.table,
      tableConfig: this.tableConfig,
      queryConfig: this.config,
      tableAlias: this.tableConfig.tsName
    }).sql;
  }
  /** @internal */
  _prepare(isOneTimeQuery = false) {
    const { query: query2, builtQuery } = this._toSQL();
    return this.session[isOneTimeQuery ? "prepareOneTimeQuery" : "prepareQuery"](
      builtQuery,
      void 0,
      this.mode === "first" ? "get" : "all",
      true,
      (rawRows, mapColumnValue) => {
        const rows = rawRows.map(
          (row) => mapRelationalRow(this.schema, this.tableConfig, row, query2.selection, mapColumnValue)
        );
        if (this.mode === "first") {
          return rows[0];
        }
        return rows;
      }
    );
  }
  prepare() {
    return this._prepare(false);
  }
  _toSQL() {
    const query2 = this.dialect.buildRelationalQuery({
      fullSchema: this.fullSchema,
      schema: this.schema,
      tableNamesMap: this.tableNamesMap,
      table: this.table,
      tableConfig: this.tableConfig,
      queryConfig: this.config,
      tableAlias: this.tableConfig.tsName
    });
    const builtQuery = this.dialect.sqlToQuery(query2.sql);
    return { query: query2, builtQuery };
  }
  toSQL() {
    return this._toSQL().builtQuery;
  }
  /** @internal */
  executeRaw() {
    if (this.mode === "first") {
      return this._prepare(false).get();
    }
    return this._prepare(false).all();
  }
  async execute() {
    return this.executeRaw();
  }
};
var SQLiteSyncRelationalQuery = class extends SQLiteRelationalQuery {
  static [entityKind] = "SQLiteSyncRelationalQuery";
  sync() {
    return this.executeRaw();
  }
};

// node_modules/drizzle-orm/sqlite-core/query-builders/raw.js
var SQLiteRaw = class extends QueryPromise {
  constructor(execute, getSQL, action, dialect, mapBatchResult) {
    super();
    this.execute = execute;
    this.getSQL = getSQL;
    this.dialect = dialect;
    this.mapBatchResult = mapBatchResult;
    this.config = { action };
  }
  static [entityKind] = "SQLiteRaw";
  /** @internal */
  config;
  getQuery() {
    return { ...this.dialect.sqlToQuery(this.getSQL()), method: this.config.action };
  }
  mapResult(result, isFromBatch) {
    return isFromBatch ? this.mapBatchResult(result) : result;
  }
  _prepare() {
    return this;
  }
  /** @internal */
  isResponseInArrayMode() {
    return false;
  }
};

// node_modules/drizzle-orm/sqlite-core/db.js
var BaseSQLiteDatabase = class {
  constructor(resultKind, dialect, session, schema) {
    this.resultKind = resultKind;
    this.dialect = dialect;
    this.session = session;
    this._ = schema ? {
      schema: schema.schema,
      fullSchema: schema.fullSchema,
      tableNamesMap: schema.tableNamesMap
    } : {
      schema: void 0,
      fullSchema: {},
      tableNamesMap: {}
    };
    this.query = {};
    const query2 = this.query;
    if (this._.schema) {
      for (const [tableName, columns] of Object.entries(this._.schema)) {
        query2[tableName] = new RelationalQueryBuilder(
          resultKind,
          schema.fullSchema,
          this._.schema,
          this._.tableNamesMap,
          schema.fullSchema[tableName],
          columns,
          dialect,
          session
        );
      }
    }
    this.$cache = { invalidate: async (_params) => {
    } };
  }
  static [entityKind] = "BaseSQLiteDatabase";
  query;
  /**
   * Creates a subquery that defines a temporary named result set as a CTE.
   *
   * It is useful for breaking down complex queries into simpler parts and for reusing the result set in subsequent parts of the query.
   *
   * See docs: {@link https://orm.drizzle.team/docs/select#with-clause}
   *
   * @param alias The alias for the subquery.
   *
   * Failure to provide an alias will result in a DrizzleTypeError, preventing the subquery from being referenced in other queries.
   *
   * @example
   *
   * ```ts
   * // Create a subquery with alias 'sq' and use it in the select query
   * const sq = db.$with('sq').as(db.select().from(users).where(eq(users.id, 42)));
   *
   * const result = await db.with(sq).select().from(sq);
   * ```
   *
   * To select arbitrary SQL values as fields in a CTE and reference them in other CTEs or in the main query, you need to add aliases to them:
   *
   * ```ts
   * // Select an arbitrary SQL value as a field in a CTE and reference it in the main query
   * const sq = db.$with('sq').as(db.select({
   *   name: sql<string>`upper(${users.name})`.as('name'),
   * })
   * .from(users));
   *
   * const result = await db.with(sq).select({ name: sq.name }).from(sq);
   * ```
   */
  $with = (alias2, selection) => {
    const self2 = this;
    const as = (qb) => {
      if (typeof qb === "function") {
        qb = qb(new QueryBuilder(self2.dialect));
      }
      return new Proxy(
        new WithSubquery(
          qb.getSQL(),
          selection ?? ("getSelectedFields" in qb ? qb.getSelectedFields() ?? {} : {}),
          alias2,
          true
        ),
        new SelectionProxyHandler({ alias: alias2, sqlAliasedBehavior: "alias", sqlBehavior: "error" })
      );
    };
    return { as };
  };
  $count(source, filters) {
    return new SQLiteCountBuilder({ source, filters, session: this.session });
  }
  /**
   * Incorporates a previously defined CTE (using `$with`) into the main query.
   *
   * This method allows the main query to reference a temporary named result set.
   *
   * See docs: {@link https://orm.drizzle.team/docs/select#with-clause}
   *
   * @param queries The CTEs to incorporate into the main query.
   *
   * @example
   *
   * ```ts
   * // Define a subquery 'sq' as a CTE using $with
   * const sq = db.$with('sq').as(db.select().from(users).where(eq(users.id, 42)));
   *
   * // Incorporate the CTE 'sq' into the main query and select from it
   * const result = await db.with(sq).select().from(sq);
   * ```
   */
  with(...queries) {
    const self2 = this;
    function select(fields) {
      return new SQLiteSelectBuilder({
        fields: fields ?? void 0,
        session: self2.session,
        dialect: self2.dialect,
        withList: queries
      });
    }
    function selectDistinct(fields) {
      return new SQLiteSelectBuilder({
        fields: fields ?? void 0,
        session: self2.session,
        dialect: self2.dialect,
        withList: queries,
        distinct: true
      });
    }
    function update(table) {
      return new SQLiteUpdateBuilder(table, self2.session, self2.dialect, queries);
    }
    function insert(into) {
      return new SQLiteInsertBuilder(into, self2.session, self2.dialect, queries);
    }
    function delete_(from2) {
      return new SQLiteDeleteBase(from2, self2.session, self2.dialect, queries);
    }
    return { select, selectDistinct, update, insert, delete: delete_ };
  }
  select(fields) {
    return new SQLiteSelectBuilder({ fields: fields ?? void 0, session: this.session, dialect: this.dialect });
  }
  selectDistinct(fields) {
    return new SQLiteSelectBuilder({
      fields: fields ?? void 0,
      session: this.session,
      dialect: this.dialect,
      distinct: true
    });
  }
  /**
   * Creates an update query.
   *
   * Calling this method without `.where()` clause will update all rows in a table. The `.where()` clause specifies which rows should be updated.
   *
   * Use `.set()` method to specify which values to update.
   *
   * See docs: {@link https://orm.drizzle.team/docs/update}
   *
   * @param table The table to update.
   *
   * @example
   *
   * ```ts
   * // Update all rows in the 'cars' table
   * await db.update(cars).set({ color: 'red' });
   *
   * // Update rows with filters and conditions
   * await db.update(cars).set({ color: 'red' }).where(eq(cars.brand, 'BMW'));
   *
   * // Update with returning clause
   * const updatedCar: Car[] = await db.update(cars)
   *   .set({ color: 'red' })
   *   .where(eq(cars.id, 1))
   *   .returning();
   * ```
   */
  update(table) {
    return new SQLiteUpdateBuilder(table, this.session, this.dialect);
  }
  $cache;
  /**
   * Creates an insert query.
   *
   * Calling this method will create new rows in a table. Use `.values()` method to specify which values to insert.
   *
   * See docs: {@link https://orm.drizzle.team/docs/insert}
   *
   * @param table The table to insert into.
   *
   * @example
   *
   * ```ts
   * // Insert one row
   * await db.insert(cars).values({ brand: 'BMW' });
   *
   * // Insert multiple rows
   * await db.insert(cars).values([{ brand: 'BMW' }, { brand: 'Porsche' }]);
   *
   * // Insert with returning clause
   * const insertedCar: Car[] = await db.insert(cars)
   *   .values({ brand: 'BMW' })
   *   .returning();
   * ```
   */
  insert(into) {
    return new SQLiteInsertBuilder(into, this.session, this.dialect);
  }
  /**
   * Creates a delete query.
   *
   * Calling this method without `.where()` clause will delete all rows in a table. The `.where()` clause specifies which rows should be deleted.
   *
   * See docs: {@link https://orm.drizzle.team/docs/delete}
   *
   * @param table The table to delete from.
   *
   * @example
   *
   * ```ts
   * // Delete all rows in the 'cars' table
   * await db.delete(cars);
   *
   * // Delete rows with filters and conditions
   * await db.delete(cars).where(eq(cars.color, 'green'));
   *
   * // Delete with returning clause
   * const deletedCar: Car[] = await db.delete(cars)
   *   .where(eq(cars.id, 1))
   *   .returning();
   * ```
   */
  delete(from2) {
    return new SQLiteDeleteBase(from2, this.session, this.dialect);
  }
  run(query2) {
    const sequel = typeof query2 === "string" ? sql.raw(query2) : query2.getSQL();
    if (this.resultKind === "async") {
      return new SQLiteRaw(
        async () => this.session.run(sequel),
        () => sequel,
        "run",
        this.dialect,
        this.session.extractRawRunValueFromBatchResult.bind(this.session)
      );
    }
    return this.session.run(sequel);
  }
  all(query2) {
    const sequel = typeof query2 === "string" ? sql.raw(query2) : query2.getSQL();
    if (this.resultKind === "async") {
      return new SQLiteRaw(
        async () => this.session.all(sequel),
        () => sequel,
        "all",
        this.dialect,
        this.session.extractRawAllValueFromBatchResult.bind(this.session)
      );
    }
    return this.session.all(sequel);
  }
  get(query2) {
    const sequel = typeof query2 === "string" ? sql.raw(query2) : query2.getSQL();
    if (this.resultKind === "async") {
      return new SQLiteRaw(
        async () => this.session.get(sequel),
        () => sequel,
        "get",
        this.dialect,
        this.session.extractRawGetValueFromBatchResult.bind(this.session)
      );
    }
    return this.session.get(sequel);
  }
  values(query2) {
    const sequel = typeof query2 === "string" ? sql.raw(query2) : query2.getSQL();
    if (this.resultKind === "async") {
      return new SQLiteRaw(
        async () => this.session.values(sequel),
        () => sequel,
        "values",
        this.dialect,
        this.session.extractRawValuesValueFromBatchResult.bind(this.session)
      );
    }
    return this.session.values(sequel);
  }
  transaction(transaction, config4) {
    return this.session.transaction(transaction, config4);
  }
};

// node_modules/drizzle-orm/cache/core/cache.js
var Cache = class {
  static [entityKind] = "Cache";
};
var NoopCache = class extends Cache {
  strategy() {
    return "all";
  }
  static [entityKind] = "NoopCache";
  async get(_key) {
    return void 0;
  }
  async put(_hashedQuery, _response, _tables, _config) {
  }
  async onMutate(_params) {
  }
};
async function hashQuery(sql2, params) {
  const dataToHash = `${sql2}-${JSON.stringify(params)}`;
  const encoder9 = new TextEncoder();
  const data = encoder9.encode(dataToHash);
  const hashBuffer = await crypto.subtle.digest("SHA-256", data);
  const hashArray = [...new Uint8Array(hashBuffer)];
  const hashHex = hashArray.map((b) => b.toString(16).padStart(2, "0")).join("");
  return hashHex;
}

// node_modules/drizzle-orm/sqlite-core/session.js
var ExecuteResultSync = class extends QueryPromise {
  constructor(resultCb) {
    super();
    this.resultCb = resultCb;
  }
  static [entityKind] = "ExecuteResultSync";
  async execute() {
    return this.resultCb();
  }
  sync() {
    return this.resultCb();
  }
};
var SQLitePreparedQuery = class {
  constructor(mode, executeMethod, query2, cache, queryMetadata, cacheConfig) {
    this.mode = mode;
    this.executeMethod = executeMethod;
    this.query = query2;
    this.cache = cache;
    this.queryMetadata = queryMetadata;
    this.cacheConfig = cacheConfig;
    if (cache && cache.strategy() === "all" && cacheConfig === void 0) {
      this.cacheConfig = { enable: true, autoInvalidate: true };
    }
    if (!this.cacheConfig?.enable) {
      this.cacheConfig = void 0;
    }
  }
  static [entityKind] = "PreparedQuery";
  /** @internal */
  joinsNotNullableMap;
  /** @internal */
  async queryWithCache(queryString, params, query2) {
    if (this.cache === void 0 || is(this.cache, NoopCache) || this.queryMetadata === void 0) {
      try {
        return await query2();
      } catch (e) {
        throw new DrizzleQueryError(queryString, params, e);
      }
    }
    if (this.cacheConfig && !this.cacheConfig.enable) {
      try {
        return await query2();
      } catch (e) {
        throw new DrizzleQueryError(queryString, params, e);
      }
    }
    if ((this.queryMetadata.type === "insert" || this.queryMetadata.type === "update" || this.queryMetadata.type === "delete") && this.queryMetadata.tables.length > 0) {
      try {
        const [res] = await Promise.all([
          query2(),
          this.cache.onMutate({ tables: this.queryMetadata.tables })
        ]);
        return res;
      } catch (e) {
        throw new DrizzleQueryError(queryString, params, e);
      }
    }
    if (!this.cacheConfig) {
      try {
        return await query2();
      } catch (e) {
        throw new DrizzleQueryError(queryString, params, e);
      }
    }
    if (this.queryMetadata.type === "select") {
      const fromCache = await this.cache.get(
        this.cacheConfig.tag ?? await hashQuery(queryString, params),
        this.queryMetadata.tables,
        this.cacheConfig.tag !== void 0,
        this.cacheConfig.autoInvalidate
      );
      if (fromCache === void 0) {
        let result;
        try {
          result = await query2();
        } catch (e) {
          throw new DrizzleQueryError(queryString, params, e);
        }
        await this.cache.put(
          this.cacheConfig.tag ?? await hashQuery(queryString, params),
          result,
          // make sure we send tables that were used in a query only if user wants to invalidate it on each write
          this.cacheConfig.autoInvalidate ? this.queryMetadata.tables : [],
          this.cacheConfig.tag !== void 0,
          this.cacheConfig.config
        );
        return result;
      }
      return fromCache;
    }
    try {
      return await query2();
    } catch (e) {
      throw new DrizzleQueryError(queryString, params, e);
    }
  }
  getQuery() {
    return this.query;
  }
  mapRunResult(result, _isFromBatch) {
    return result;
  }
  mapAllResult(_result, _isFromBatch) {
    throw new Error("Not implemented");
  }
  mapGetResult(_result, _isFromBatch) {
    throw new Error("Not implemented");
  }
  execute(placeholderValues) {
    if (this.mode === "async") {
      return this[this.executeMethod](placeholderValues);
    }
    return new ExecuteResultSync(() => this[this.executeMethod](placeholderValues));
  }
  mapResult(response, isFromBatch) {
    switch (this.executeMethod) {
      case "run": {
        return this.mapRunResult(response, isFromBatch);
      }
      case "all": {
        return this.mapAllResult(response, isFromBatch);
      }
      case "get": {
        return this.mapGetResult(response, isFromBatch);
      }
    }
  }
};
var SQLiteSession = class {
  constructor(dialect) {
    this.dialect = dialect;
  }
  static [entityKind] = "SQLiteSession";
  prepareOneTimeQuery(query2, fields, executeMethod, isResponseInArrayMode, customResultMapper, queryMetadata, cacheConfig) {
    return this.prepareQuery(
      query2,
      fields,
      executeMethod,
      isResponseInArrayMode,
      customResultMapper,
      queryMetadata,
      cacheConfig
    );
  }
  run(query2) {
    const staticQuery = this.dialect.sqlToQuery(query2);
    try {
      return this.prepareOneTimeQuery(staticQuery, void 0, "run", false).run();
    } catch (err) {
      throw new DrizzleError({ cause: err, message: `Failed to run the query '${staticQuery.sql}'` });
    }
  }
  /** @internal */
  extractRawRunValueFromBatchResult(result) {
    return result;
  }
  all(query2) {
    return this.prepareOneTimeQuery(this.dialect.sqlToQuery(query2), void 0, "run", false).all();
  }
  /** @internal */
  extractRawAllValueFromBatchResult(_result) {
    throw new Error("Not implemented");
  }
  get(query2) {
    return this.prepareOneTimeQuery(this.dialect.sqlToQuery(query2), void 0, "run", false).get();
  }
  /** @internal */
  extractRawGetValueFromBatchResult(_result) {
    throw new Error("Not implemented");
  }
  values(query2) {
    return this.prepareOneTimeQuery(this.dialect.sqlToQuery(query2), void 0, "run", false).values();
  }
  async count(sql2) {
    const result = await this.values(sql2);
    return result[0][0];
  }
  /** @internal */
  extractRawValuesValueFromBatchResult(_result) {
    throw new Error("Not implemented");
  }
};
var SQLiteTransaction = class extends BaseSQLiteDatabase {
  constructor(resultType, dialect, session, schema, nestedIndex = 0) {
    super(resultType, dialect, session, schema);
    this.schema = schema;
    this.nestedIndex = nestedIndex;
  }
  static [entityKind] = "SQLiteTransaction";
  rollback() {
    throw new TransactionRollbackError();
  }
};

// node_modules/drizzle-orm/d1/session.js
var SQLiteD1Session = class extends SQLiteSession {
  constructor(client, dialect, schema, options = {}) {
    super(dialect);
    this.client = client;
    this.schema = schema;
    this.options = options;
    this.logger = options.logger ?? new NoopLogger();
    this.cache = options.cache ?? new NoopCache();
  }
  static [entityKind] = "SQLiteD1Session";
  logger;
  cache;
  prepareQuery(query2, fields, executeMethod, isResponseInArrayMode, customResultMapper, queryMetadata, cacheConfig) {
    const stmt = this.client.prepare(query2.sql);
    return new D1PreparedQuery(
      stmt,
      query2,
      this.logger,
      this.cache,
      queryMetadata,
      cacheConfig,
      fields,
      executeMethod,
      isResponseInArrayMode,
      customResultMapper
    );
  }
  async batch(queries) {
    const preparedQueries = [];
    const builtQueries = [];
    for (const query2 of queries) {
      const preparedQuery = query2._prepare();
      const builtQuery = preparedQuery.getQuery();
      preparedQueries.push(preparedQuery);
      if (builtQuery.params.length > 0) {
        builtQueries.push(preparedQuery.stmt.bind(...builtQuery.params));
      } else {
        const builtQuery2 = preparedQuery.getQuery();
        builtQueries.push(
          this.client.prepare(builtQuery2.sql).bind(...builtQuery2.params)
        );
      }
    }
    const batchResults = await this.client.batch(builtQueries);
    return batchResults.map((result, i) => preparedQueries[i].mapResult(result, true));
  }
  extractRawAllValueFromBatchResult(result) {
    return result.results;
  }
  extractRawGetValueFromBatchResult(result) {
    return result.results[0];
  }
  extractRawValuesValueFromBatchResult(result) {
    return d1ToRawMapping(result.results);
  }
  async transaction(transaction, config4) {
    const tx2 = new D1Transaction("async", this.dialect, this, this.schema);
    await this.run(sql.raw(`begin${config4?.behavior ? " " + config4.behavior : ""}`));
    try {
      const result = await transaction(tx2);
      await this.run(sql`commit`);
      return result;
    } catch (err) {
      await this.run(sql`rollback`);
      throw err;
    }
  }
};
var D1Transaction = class _D1Transaction extends SQLiteTransaction {
  static [entityKind] = "D1Transaction";
  async transaction(transaction) {
    const savepointName = `sp${this.nestedIndex}`;
    const tx2 = new _D1Transaction("async", this.dialect, this.session, this.schema, this.nestedIndex + 1);
    await this.session.run(sql.raw(`savepoint ${savepointName}`));
    try {
      const result = await transaction(tx2);
      await this.session.run(sql.raw(`release savepoint ${savepointName}`));
      return result;
    } catch (err) {
      await this.session.run(sql.raw(`rollback to savepoint ${savepointName}`));
      throw err;
    }
  }
};
function d1ToRawMapping(results) {
  const rows = [];
  for (const row of results) {
    const entry = Object.keys(row).map((k) => row[k]);
    rows.push(entry);
  }
  return rows;
}
var D1PreparedQuery = class extends SQLitePreparedQuery {
  constructor(stmt, query2, logger6, cache, queryMetadata, cacheConfig, fields, executeMethod, _isResponseInArrayMode, customResultMapper) {
    super("async", executeMethod, query2, cache, queryMetadata, cacheConfig);
    this.logger = logger6;
    this._isResponseInArrayMode = _isResponseInArrayMode;
    this.customResultMapper = customResultMapper;
    this.fields = fields;
    this.stmt = stmt;
  }
  static [entityKind] = "D1PreparedQuery";
  /** @internal */
  customResultMapper;
  /** @internal */
  fields;
  /** @internal */
  stmt;
  async run(placeholderValues) {
    const params = fillPlaceholders(this.query.params, placeholderValues ?? {});
    this.logger.logQuery(this.query.sql, params);
    return await this.queryWithCache(this.query.sql, params, async () => {
      return this.stmt.bind(...params).run();
    });
  }
  async all(placeholderValues) {
    const { fields, query: query2, logger: logger6, stmt, customResultMapper } = this;
    if (!fields && !customResultMapper) {
      const params = fillPlaceholders(query2.params, placeholderValues ?? {});
      logger6.logQuery(query2.sql, params);
      return await this.queryWithCache(query2.sql, params, async () => {
        return stmt.bind(...params).all().then(({ results }) => this.mapAllResult(results));
      });
    }
    const rows = await this.values(placeholderValues);
    return this.mapAllResult(rows);
  }
  mapAllResult(rows, isFromBatch) {
    if (isFromBatch) {
      rows = d1ToRawMapping(rows.results);
    }
    if (!this.fields && !this.customResultMapper) {
      return rows;
    }
    if (this.customResultMapper) {
      return this.customResultMapper(rows);
    }
    return rows.map((row) => mapResultRow(this.fields, row, this.joinsNotNullableMap));
  }
  async get(placeholderValues) {
    const { fields, joinsNotNullableMap, query: query2, logger: logger6, stmt, customResultMapper } = this;
    if (!fields && !customResultMapper) {
      const params = fillPlaceholders(query2.params, placeholderValues ?? {});
      logger6.logQuery(query2.sql, params);
      return await this.queryWithCache(query2.sql, params, async () => {
        return stmt.bind(...params).all().then(({ results }) => results[0]);
      });
    }
    const rows = await this.values(placeholderValues);
    if (!rows[0]) {
      return void 0;
    }
    if (customResultMapper) {
      return customResultMapper(rows);
    }
    return mapResultRow(fields, rows[0], joinsNotNullableMap);
  }
  mapGetResult(result, isFromBatch) {
    if (isFromBatch) {
      result = d1ToRawMapping(result.results)[0];
    }
    if (!this.fields && !this.customResultMapper) {
      return result;
    }
    if (this.customResultMapper) {
      return this.customResultMapper([result]);
    }
    return mapResultRow(this.fields, result, this.joinsNotNullableMap);
  }
  async values(placeholderValues) {
    const params = fillPlaceholders(this.query.params, placeholderValues ?? {});
    this.logger.logQuery(this.query.sql, params);
    return await this.queryWithCache(this.query.sql, params, async () => {
      return this.stmt.bind(...params).raw();
    });
  }
  /** @internal */
  isResponseInArrayMode() {
    return this._isResponseInArrayMode;
  }
};

// node_modules/drizzle-orm/d1/driver.js
var DrizzleD1Database = class extends BaseSQLiteDatabase {
  static [entityKind] = "D1Database";
  async batch(batch) {
    return this.session.batch(batch);
  }
};
function drizzle(client, config4 = {}) {
  const dialect = new SQLiteAsyncDialect({ casing: config4.casing });
  let logger6;
  if (config4.logger === true) {
    logger6 = new DefaultLogger();
  } else if (config4.logger !== false) {
    logger6 = config4.logger;
  }
  let schema;
  if (config4.schema) {
    const tablesConfig = extractTablesRelationalConfig(
      config4.schema,
      createTableRelationsHelpers
    );
    schema = {
      fullSchema: config4.schema,
      schema: tablesConfig.tables,
      tableNamesMap: tablesConfig.tableNamesMap
    };
  }
  const session = new SQLiteD1Session(client, dialect, schema, { logger: logger6, cache: config4.cache });
  const db = new DrizzleD1Database("async", dialect, session, schema);
  db.$client = client;
  db.$cache = config4.cache;
  if (db.$cache) {
    db.$cache["invalidate"] = config4.cache?.onMutate;
  }
  return db;
}

// src/db/client.ts
function getDb(env) {
  return drizzle(env.DB);
}

// node_modules/zod/v3/external.js
var external_exports = {};
__export(external_exports, {
  BRAND: () => BRAND,
  DIRTY: () => DIRTY,
  EMPTY_PATH: () => EMPTY_PATH,
  INVALID: () => INVALID,
  NEVER: () => NEVER,
  OK: () => OK,
  ParseStatus: () => ParseStatus,
  Schema: () => ZodType,
  ZodAny: () => ZodAny,
  ZodArray: () => ZodArray,
  ZodBigInt: () => ZodBigInt,
  ZodBoolean: () => ZodBoolean,
  ZodBranded: () => ZodBranded,
  ZodCatch: () => ZodCatch,
  ZodDate: () => ZodDate,
  ZodDefault: () => ZodDefault,
  ZodDiscriminatedUnion: () => ZodDiscriminatedUnion,
  ZodEffects: () => ZodEffects,
  ZodEnum: () => ZodEnum,
  ZodError: () => ZodError,
  ZodFirstPartyTypeKind: () => ZodFirstPartyTypeKind,
  ZodFunction: () => ZodFunction,
  ZodIntersection: () => ZodIntersection,
  ZodIssueCode: () => ZodIssueCode,
  ZodLazy: () => ZodLazy,
  ZodLiteral: () => ZodLiteral,
  ZodMap: () => ZodMap,
  ZodNaN: () => ZodNaN,
  ZodNativeEnum: () => ZodNativeEnum,
  ZodNever: () => ZodNever,
  ZodNull: () => ZodNull,
  ZodNullable: () => ZodNullable,
  ZodNumber: () => ZodNumber,
  ZodObject: () => ZodObject,
  ZodOptional: () => ZodOptional,
  ZodParsedType: () => ZodParsedType,
  ZodPipeline: () => ZodPipeline,
  ZodPromise: () => ZodPromise,
  ZodReadonly: () => ZodReadonly,
  ZodRecord: () => ZodRecord,
  ZodSchema: () => ZodType,
  ZodSet: () => ZodSet,
  ZodString: () => ZodString,
  ZodSymbol: () => ZodSymbol,
  ZodTransformer: () => ZodEffects,
  ZodTuple: () => ZodTuple,
  ZodType: () => ZodType,
  ZodUndefined: () => ZodUndefined,
  ZodUnion: () => ZodUnion,
  ZodUnknown: () => ZodUnknown,
  ZodVoid: () => ZodVoid,
  addIssueToContext: () => addIssueToContext,
  any: () => anyType,
  array: () => arrayType,
  bigint: () => bigIntType,
  boolean: () => booleanType,
  coerce: () => coerce,
  custom: () => custom,
  date: () => dateType,
  datetimeRegex: () => datetimeRegex,
  defaultErrorMap: () => en_default,
  discriminatedUnion: () => discriminatedUnionType,
  effect: () => effectsType,
  enum: () => enumType,
  function: () => functionType,
  getErrorMap: () => getErrorMap,
  getParsedType: () => getParsedType,
  instanceof: () => instanceOfType,
  intersection: () => intersectionType,
  isAborted: () => isAborted,
  isAsync: () => isAsync,
  isDirty: () => isDirty,
  isValid: () => isValid,
  late: () => late,
  lazy: () => lazyType,
  literal: () => literalType,
  makeIssue: () => makeIssue,
  map: () => mapType,
  nan: () => nanType,
  nativeEnum: () => nativeEnumType,
  never: () => neverType,
  null: () => nullType,
  nullable: () => nullableType,
  number: () => numberType,
  object: () => objectType,
  objectUtil: () => objectUtil,
  oboolean: () => oboolean,
  onumber: () => onumber,
  optional: () => optionalType,
  ostring: () => ostring,
  pipeline: () => pipelineType,
  preprocess: () => preprocessType,
  promise: () => promiseType,
  quotelessJson: () => quotelessJson,
  record: () => recordType,
  set: () => setType,
  setErrorMap: () => setErrorMap,
  strictObject: () => strictObjectType,
  string: () => stringType,
  symbol: () => symbolType,
  transformer: () => effectsType,
  tuple: () => tupleType,
  undefined: () => undefinedType,
  union: () => unionType,
  unknown: () => unknownType,
  util: () => util,
  void: () => voidType
});

// node_modules/zod/v3/helpers/util.js
var util;
(function(util2) {
  util2.assertEqual = (_) => {
  };
  function assertIs(_arg) {
  }
  util2.assertIs = assertIs;
  function assertNever(_x) {
    throw new Error();
  }
  util2.assertNever = assertNever;
  util2.arrayToEnum = (items) => {
    const obj = {};
    for (const item of items) {
      obj[item] = item;
    }
    return obj;
  };
  util2.getValidEnumValues = (obj) => {
    const validKeys = util2.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== "number");
    const filtered = {};
    for (const k of validKeys) {
      filtered[k] = obj[k];
    }
    return util2.objectValues(filtered);
  };
  util2.objectValues = (obj) => {
    return util2.objectKeys(obj).map(function(e) {
      return obj[e];
    });
  };
  util2.objectKeys = typeof Object.keys === "function" ? (obj) => Object.keys(obj) : (object) => {
    const keys2 = [];
    for (const key in object) {
      if (Object.prototype.hasOwnProperty.call(object, key)) {
        keys2.push(key);
      }
    }
    return keys2;
  };
  util2.find = (arr, checker) => {
    for (const item of arr) {
      if (checker(item))
        return item;
    }
    return void 0;
  };
  util2.isInteger = typeof Number.isInteger === "function" ? (val) => Number.isInteger(val) : (val) => typeof val === "number" && Number.isFinite(val) && Math.floor(val) === val;
  function joinValues(array, separator = " | ") {
    return array.map((val) => typeof val === "string" ? `'${val}'` : val).join(separator);
  }
  util2.joinValues = joinValues;
  util2.jsonStringifyReplacer = (_, value) => {
    if (typeof value === "bigint") {
      return value.toString();
    }
    return value;
  };
})(util || (util = {}));
var objectUtil;
(function(objectUtil2) {
  objectUtil2.mergeShapes = (first2, second) => {
    return {
      ...first2,
      ...second
      // second overwrites first
    };
  };
})(objectUtil || (objectUtil = {}));
var ZodParsedType = util.arrayToEnum([
  "string",
  "nan",
  "number",
  "integer",
  "float",
  "boolean",
  "date",
  "bigint",
  "symbol",
  "function",
  "undefined",
  "null",
  "array",
  "object",
  "unknown",
  "promise",
  "void",
  "never",
  "map",
  "set"
]);
var getParsedType = (data) => {
  const t = typeof data;
  switch (t) {
    case "undefined":
      return ZodParsedType.undefined;
    case "string":
      return ZodParsedType.string;
    case "number":
      return Number.isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;
    case "boolean":
      return ZodParsedType.boolean;
    case "function":
      return ZodParsedType.function;
    case "bigint":
      return ZodParsedType.bigint;
    case "symbol":
      return ZodParsedType.symbol;
    case "object":
      if (Array.isArray(data)) {
        return ZodParsedType.array;
      }
      if (data === null) {
        return ZodParsedType.null;
      }
      if (data.then && typeof data.then === "function" && data.catch && typeof data.catch === "function") {
        return ZodParsedType.promise;
      }
      if (typeof Map !== "undefined" && data instanceof Map) {
        return ZodParsedType.map;
      }
      if (typeof Set !== "undefined" && data instanceof Set) {
        return ZodParsedType.set;
      }
      if (typeof Date !== "undefined" && data instanceof Date) {
        return ZodParsedType.date;
      }
      return ZodParsedType.object;
    default:
      return ZodParsedType.unknown;
  }
};

// node_modules/zod/v3/ZodError.js
var ZodIssueCode = util.arrayToEnum([
  "invalid_type",
  "invalid_literal",
  "custom",
  "invalid_union",
  "invalid_union_discriminator",
  "invalid_enum_value",
  "unrecognized_keys",
  "invalid_arguments",
  "invalid_return_type",
  "invalid_date",
  "invalid_string",
  "too_small",
  "too_big",
  "invalid_intersection_types",
  "not_multiple_of",
  "not_finite"
]);
var quotelessJson = (obj) => {
  const json = JSON.stringify(obj, null, 2);
  return json.replace(/"([^"]+)":/g, "$1:");
};
var ZodError = class _ZodError extends Error {
  get errors() {
    return this.issues;
  }
  constructor(issues) {
    super();
    this.issues = [];
    this.addIssue = (sub) => {
      this.issues = [...this.issues, sub];
    };
    this.addIssues = (subs = []) => {
      this.issues = [...this.issues, ...subs];
    };
    const actualProto = new.target.prototype;
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(this, actualProto);
    } else {
      this.__proto__ = actualProto;
    }
    this.name = "ZodError";
    this.issues = issues;
  }
  format(_mapper) {
    const mapper = _mapper || function(issue) {
      return issue.message;
    };
    const fieldErrors = { _errors: [] };
    const processError = (error) => {
      for (const issue of error.issues) {
        if (issue.code === "invalid_union") {
          issue.unionErrors.map(processError);
        } else if (issue.code === "invalid_return_type") {
          processError(issue.returnTypeError);
        } else if (issue.code === "invalid_arguments") {
          processError(issue.argumentsError);
        } else if (issue.path.length === 0) {
          fieldErrors._errors.push(mapper(issue));
        } else {
          let curr = fieldErrors;
          let i = 0;
          while (i < issue.path.length) {
            const el = issue.path[i];
            const terminal = i === issue.path.length - 1;
            if (!terminal) {
              curr[el] = curr[el] || { _errors: [] };
            } else {
              curr[el] = curr[el] || { _errors: [] };
              curr[el]._errors.push(mapper(issue));
            }
            curr = curr[el];
            i++;
          }
        }
      }
    };
    processError(this);
    return fieldErrors;
  }
  static assert(value) {
    if (!(value instanceof _ZodError)) {
      throw new Error(`Not a ZodError: ${value}`);
    }
  }
  toString() {
    return this.message;
  }
  get message() {
    return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);
  }
  get isEmpty() {
    return this.issues.length === 0;
  }
  flatten(mapper = (issue) => issue.message) {
    const fieldErrors = {};
    const formErrors = [];
    for (const sub of this.issues) {
      if (sub.path.length > 0) {
        const firstEl = sub.path[0];
        fieldErrors[firstEl] = fieldErrors[firstEl] || [];
        fieldErrors[firstEl].push(mapper(sub));
      } else {
        formErrors.push(mapper(sub));
      }
    }
    return { formErrors, fieldErrors };
  }
  get formErrors() {
    return this.flatten();
  }
};
ZodError.create = (issues) => {
  const error = new ZodError(issues);
  return error;
};

// node_modules/zod/v3/locales/en.js
var errorMap = (issue, _ctx) => {
  let message;
  switch (issue.code) {
    case ZodIssueCode.invalid_type:
      if (issue.received === ZodParsedType.undefined) {
        message = "Required";
      } else {
        message = `Expected ${issue.expected}, received ${issue.received}`;
      }
      break;
    case ZodIssueCode.invalid_literal:
      message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;
      break;
    case ZodIssueCode.unrecognized_keys:
      message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, ", ")}`;
      break;
    case ZodIssueCode.invalid_union:
      message = `Invalid input`;
      break;
    case ZodIssueCode.invalid_union_discriminator:
      message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;
      break;
    case ZodIssueCode.invalid_enum_value:
      message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;
      break;
    case ZodIssueCode.invalid_arguments:
      message = `Invalid function arguments`;
      break;
    case ZodIssueCode.invalid_return_type:
      message = `Invalid function return type`;
      break;
    case ZodIssueCode.invalid_date:
      message = `Invalid date`;
      break;
    case ZodIssueCode.invalid_string:
      if (typeof issue.validation === "object") {
        if ("includes" in issue.validation) {
          message = `Invalid input: must include "${issue.validation.includes}"`;
          if (typeof issue.validation.position === "number") {
            message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;
          }
        } else if ("startsWith" in issue.validation) {
          message = `Invalid input: must start with "${issue.validation.startsWith}"`;
        } else if ("endsWith" in issue.validation) {
          message = `Invalid input: must end with "${issue.validation.endsWith}"`;
        } else {
          util.assertNever(issue.validation);
        }
      } else if (issue.validation !== "regex") {
        message = `Invalid ${issue.validation}`;
      } else {
        message = "Invalid";
      }
      break;
    case ZodIssueCode.too_small:
      if (issue.type === "array")
        message = `Array must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
      else if (issue.type === "string")
        message = `String must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
      else if (issue.type === "number")
        message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;
      else if (issue.type === "bigint")
        message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;
      else if (issue.type === "date")
        message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;
      else
        message = "Invalid input";
      break;
    case ZodIssueCode.too_big:
      if (issue.type === "array")
        message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
      else if (issue.type === "string")
        message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
      else if (issue.type === "number")
        message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
      else if (issue.type === "bigint")
        message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
      else if (issue.type === "date")
        message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;
      else
        message = "Invalid input";
      break;
    case ZodIssueCode.custom:
      message = `Invalid input`;
      break;
    case ZodIssueCode.invalid_intersection_types:
      message = `Intersection results could not be merged`;
      break;
    case ZodIssueCode.not_multiple_of:
      message = `Number must be a multiple of ${issue.multipleOf}`;
      break;
    case ZodIssueCode.not_finite:
      message = "Number must be finite";
      break;
    default:
      message = _ctx.defaultError;
      util.assertNever(issue);
  }
  return { message };
};
var en_default = errorMap;

// node_modules/zod/v3/errors.js
var overrideErrorMap = en_default;
function setErrorMap(map3) {
  overrideErrorMap = map3;
}
function getErrorMap() {
  return overrideErrorMap;
}

// node_modules/zod/v3/helpers/parseUtil.js
var makeIssue = (params) => {
  const { data, path, errorMaps, issueData } = params;
  const fullPath = [...path, ...issueData.path || []];
  const fullIssue = {
    ...issueData,
    path: fullPath
  };
  if (issueData.message !== void 0) {
    return {
      ...issueData,
      path: fullPath,
      message: issueData.message
    };
  }
  let errorMessage = "";
  const maps = errorMaps.filter((m) => !!m).slice().reverse();
  for (const map3 of maps) {
    errorMessage = map3(fullIssue, { data, defaultError: errorMessage }).message;
  }
  return {
    ...issueData,
    path: fullPath,
    message: errorMessage
  };
};
var EMPTY_PATH = [];
function addIssueToContext(ctx, issueData) {
  const overrideMap = getErrorMap();
  const issue = makeIssue({
    issueData,
    data: ctx.data,
    path: ctx.path,
    errorMaps: [
      ctx.common.contextualErrorMap,
      // contextual error map is first priority
      ctx.schemaErrorMap,
      // then schema-bound map if available
      overrideMap,
      // then global override map
      overrideMap === en_default ? void 0 : en_default
      // then global default map
    ].filter((x) => !!x)
  });
  ctx.common.issues.push(issue);
}
var ParseStatus = class _ParseStatus {
  constructor() {
    this.value = "valid";
  }
  dirty() {
    if (this.value === "valid")
      this.value = "dirty";
  }
  abort() {
    if (this.value !== "aborted")
      this.value = "aborted";
  }
  static mergeArray(status, results) {
    const arrayValue = [];
    for (const s of results) {
      if (s.status === "aborted")
        return INVALID;
      if (s.status === "dirty")
        status.dirty();
      arrayValue.push(s.value);
    }
    return { status: status.value, value: arrayValue };
  }
  static async mergeObjectAsync(status, pairs) {
    const syncPairs = [];
    for (const pair of pairs) {
      const key = await pair.key;
      const value = await pair.value;
      syncPairs.push({
        key,
        value
      });
    }
    return _ParseStatus.mergeObjectSync(status, syncPairs);
  }
  static mergeObjectSync(status, pairs) {
    const finalObject = {};
    for (const pair of pairs) {
      const { key, value } = pair;
      if (key.status === "aborted")
        return INVALID;
      if (value.status === "aborted")
        return INVALID;
      if (key.status === "dirty")
        status.dirty();
      if (value.status === "dirty")
        status.dirty();
      if (key.value !== "__proto__" && (typeof value.value !== "undefined" || pair.alwaysSet)) {
        finalObject[key.value] = value.value;
      }
    }
    return { status: status.value, value: finalObject };
  }
};
var INVALID = Object.freeze({
  status: "aborted"
});
var DIRTY = (value) => ({ status: "dirty", value });
var OK = (value) => ({ status: "valid", value });
var isAborted = (x) => x.status === "aborted";
var isDirty = (x) => x.status === "dirty";
var isValid = (x) => x.status === "valid";
var isAsync = (x) => typeof Promise !== "undefined" && x instanceof Promise;

// node_modules/zod/v3/helpers/errorUtil.js
var errorUtil;
(function(errorUtil2) {
  errorUtil2.errToObj = (message) => typeof message === "string" ? { message } : message || {};
  errorUtil2.toString = (message) => typeof message === "string" ? message : message?.message;
})(errorUtil || (errorUtil = {}));

// node_modules/zod/v3/types.js
var ParseInputLazyPath = class {
  constructor(parent, value, path, key) {
    this._cachedPath = [];
    this.parent = parent;
    this.data = value;
    this._path = path;
    this._key = key;
  }
  get path() {
    if (!this._cachedPath.length) {
      if (Array.isArray(this._key)) {
        this._cachedPath.push(...this._path, ...this._key);
      } else {
        this._cachedPath.push(...this._path, this._key);
      }
    }
    return this._cachedPath;
  }
};
var handleResult = (ctx, result) => {
  if (isValid(result)) {
    return { success: true, data: result.value };
  } else {
    if (!ctx.common.issues.length) {
      throw new Error("Validation failed but no issues detected.");
    }
    return {
      success: false,
      get error() {
        if (this._error)
          return this._error;
        const error = new ZodError(ctx.common.issues);
        this._error = error;
        return this._error;
      }
    };
  }
};
function processCreateParams(params) {
  if (!params)
    return {};
  const { errorMap: errorMap2, invalid_type_error, required_error, description } = params;
  if (errorMap2 && (invalid_type_error || required_error)) {
    throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
  }
  if (errorMap2)
    return { errorMap: errorMap2, description };
  const customMap = (iss, ctx) => {
    const { message } = params;
    if (iss.code === "invalid_enum_value") {
      return { message: message ?? ctx.defaultError };
    }
    if (typeof ctx.data === "undefined") {
      return { message: message ?? required_error ?? ctx.defaultError };
    }
    if (iss.code !== "invalid_type")
      return { message: ctx.defaultError };
    return { message: message ?? invalid_type_error ?? ctx.defaultError };
  };
  return { errorMap: customMap, description };
}
var ZodType = class {
  get description() {
    return this._def.description;
  }
  _getType(input) {
    return getParsedType(input.data);
  }
  _getOrReturnCtx(input, ctx) {
    return ctx || {
      common: input.parent.common,
      data: input.data,
      parsedType: getParsedType(input.data),
      schemaErrorMap: this._def.errorMap,
      path: input.path,
      parent: input.parent
    };
  }
  _processInputParams(input) {
    return {
      status: new ParseStatus(),
      ctx: {
        common: input.parent.common,
        data: input.data,
        parsedType: getParsedType(input.data),
        schemaErrorMap: this._def.errorMap,
        path: input.path,
        parent: input.parent
      }
    };
  }
  _parseSync(input) {
    const result = this._parse(input);
    if (isAsync(result)) {
      throw new Error("Synchronous parse encountered promise.");
    }
    return result;
  }
  _parseAsync(input) {
    const result = this._parse(input);
    return Promise.resolve(result);
  }
  parse(data, params) {
    const result = this.safeParse(data, params);
    if (result.success)
      return result.data;
    throw result.error;
  }
  safeParse(data, params) {
    const ctx = {
      common: {
        issues: [],
        async: params?.async ?? false,
        contextualErrorMap: params?.errorMap
      },
      path: params?.path || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data,
      parsedType: getParsedType(data)
    };
    const result = this._parseSync({ data, path: ctx.path, parent: ctx });
    return handleResult(ctx, result);
  }
  "~validate"(data) {
    const ctx = {
      common: {
        issues: [],
        async: !!this["~standard"].async
      },
      path: [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data,
      parsedType: getParsedType(data)
    };
    if (!this["~standard"].async) {
      try {
        const result = this._parseSync({ data, path: [], parent: ctx });
        return isValid(result) ? {
          value: result.value
        } : {
          issues: ctx.common.issues
        };
      } catch (err) {
        if (err?.message?.toLowerCase()?.includes("encountered")) {
          this["~standard"].async = true;
        }
        ctx.common = {
          issues: [],
          async: true
        };
      }
    }
    return this._parseAsync({ data, path: [], parent: ctx }).then((result) => isValid(result) ? {
      value: result.value
    } : {
      issues: ctx.common.issues
    });
  }
  async parseAsync(data, params) {
    const result = await this.safeParseAsync(data, params);
    if (result.success)
      return result.data;
    throw result.error;
  }
  async safeParseAsync(data, params) {
    const ctx = {
      common: {
        issues: [],
        contextualErrorMap: params?.errorMap,
        async: true
      },
      path: params?.path || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data,
      parsedType: getParsedType(data)
    };
    const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });
    const result = await (isAsync(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));
    return handleResult(ctx, result);
  }
  refine(check, message) {
    const getIssueProperties = (val) => {
      if (typeof message === "string" || typeof message === "undefined") {
        return { message };
      } else if (typeof message === "function") {
        return message(val);
      } else {
        return message;
      }
    };
    return this._refinement((val, ctx) => {
      const result = check(val);
      const setError = () => ctx.addIssue({
        code: ZodIssueCode.custom,
        ...getIssueProperties(val)
      });
      if (typeof Promise !== "undefined" && result instanceof Promise) {
        return result.then((data) => {
          if (!data) {
            setError();
            return false;
          } else {
            return true;
          }
        });
      }
      if (!result) {
        setError();
        return false;
      } else {
        return true;
      }
    });
  }
  refinement(check, refinementData) {
    return this._refinement((val, ctx) => {
      if (!check(val)) {
        ctx.addIssue(typeof refinementData === "function" ? refinementData(val, ctx) : refinementData);
        return false;
      } else {
        return true;
      }
    });
  }
  _refinement(refinement) {
    return new ZodEffects({
      schema: this,
      typeName: ZodFirstPartyTypeKind.ZodEffects,
      effect: { type: "refinement", refinement }
    });
  }
  superRefine(refinement) {
    return this._refinement(refinement);
  }
  constructor(def) {
    this.spa = this.safeParseAsync;
    this._def = def;
    this.parse = this.parse.bind(this);
    this.safeParse = this.safeParse.bind(this);
    this.parseAsync = this.parseAsync.bind(this);
    this.safeParseAsync = this.safeParseAsync.bind(this);
    this.spa = this.spa.bind(this);
    this.refine = this.refine.bind(this);
    this.refinement = this.refinement.bind(this);
    this.superRefine = this.superRefine.bind(this);
    this.optional = this.optional.bind(this);
    this.nullable = this.nullable.bind(this);
    this.nullish = this.nullish.bind(this);
    this.array = this.array.bind(this);
    this.promise = this.promise.bind(this);
    this.or = this.or.bind(this);
    this.and = this.and.bind(this);
    this.transform = this.transform.bind(this);
    this.brand = this.brand.bind(this);
    this.default = this.default.bind(this);
    this.catch = this.catch.bind(this);
    this.describe = this.describe.bind(this);
    this.pipe = this.pipe.bind(this);
    this.readonly = this.readonly.bind(this);
    this.isNullable = this.isNullable.bind(this);
    this.isOptional = this.isOptional.bind(this);
    this["~standard"] = {
      version: 1,
      vendor: "zod",
      validate: (data) => this["~validate"](data)
    };
  }
  optional() {
    return ZodOptional.create(this, this._def);
  }
  nullable() {
    return ZodNullable.create(this, this._def);
  }
  nullish() {
    return this.nullable().optional();
  }
  array() {
    return ZodArray.create(this);
  }
  promise() {
    return ZodPromise.create(this, this._def);
  }
  or(option) {
    return ZodUnion.create([this, option], this._def);
  }
  and(incoming) {
    return ZodIntersection.create(this, incoming, this._def);
  }
  transform(transform) {
    return new ZodEffects({
      ...processCreateParams(this._def),
      schema: this,
      typeName: ZodFirstPartyTypeKind.ZodEffects,
      effect: { type: "transform", transform }
    });
  }
  default(def) {
    const defaultValueFunc = typeof def === "function" ? def : () => def;
    return new ZodDefault({
      ...processCreateParams(this._def),
      innerType: this,
      defaultValue: defaultValueFunc,
      typeName: ZodFirstPartyTypeKind.ZodDefault
    });
  }
  brand() {
    return new ZodBranded({
      typeName: ZodFirstPartyTypeKind.ZodBranded,
      type: this,
      ...processCreateParams(this._def)
    });
  }
  catch(def) {
    const catchValueFunc = typeof def === "function" ? def : () => def;
    return new ZodCatch({
      ...processCreateParams(this._def),
      innerType: this,
      catchValue: catchValueFunc,
      typeName: ZodFirstPartyTypeKind.ZodCatch
    });
  }
  describe(description) {
    const This = this.constructor;
    return new This({
      ...this._def,
      description
    });
  }
  pipe(target) {
    return ZodPipeline.create(this, target);
  }
  readonly() {
    return ZodReadonly.create(this);
  }
  isOptional() {
    return this.safeParse(void 0).success;
  }
  isNullable() {
    return this.safeParse(null).success;
  }
};
var cuidRegex = /^c[^\s-]{8,}$/i;
var cuid2Regex = /^[0-9a-z]+$/;
var ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/i;
var uuidRegex = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i;
var nanoidRegex = /^[a-z0-9_-]{21}$/i;
var jwtRegex = /^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/;
var durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/;
var emailRegex = /^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;
var _emojiRegex = `^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$`;
var emojiRegex;
var ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;
var ipv4CidrRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/;
var ipv6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;
var ipv6CidrRegex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;
var base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;
var base64urlRegex = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;
var dateRegexSource = `((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))`;
var dateRegex = new RegExp(`^${dateRegexSource}$`);
function timeRegexSource(args) {
  let secondsRegexSource = `[0-5]\\d`;
  if (args.precision) {
    secondsRegexSource = `${secondsRegexSource}\\.\\d{${args.precision}}`;
  } else if (args.precision == null) {
    secondsRegexSource = `${secondsRegexSource}(\\.\\d+)?`;
  }
  const secondsQuantifier = args.precision ? "+" : "?";
  return `([01]\\d|2[0-3]):[0-5]\\d(:${secondsRegexSource})${secondsQuantifier}`;
}
function timeRegex(args) {
  return new RegExp(`^${timeRegexSource(args)}$`);
}
function datetimeRegex(args) {
  let regex = `${dateRegexSource}T${timeRegexSource(args)}`;
  const opts = [];
  opts.push(args.local ? `Z?` : `Z`);
  if (args.offset)
    opts.push(`([+-]\\d{2}:?\\d{2})`);
  regex = `${regex}(${opts.join("|")})`;
  return new RegExp(`^${regex}$`);
}
function isValidIP(ip, version2) {
  if ((version2 === "v4" || !version2) && ipv4Regex.test(ip)) {
    return true;
  }
  if ((version2 === "v6" || !version2) && ipv6Regex.test(ip)) {
    return true;
  }
  return false;
}
function isValidJWT(jwt, alg) {
  if (!jwtRegex.test(jwt))
    return false;
  try {
    const [header] = jwt.split(".");
    if (!header)
      return false;
    const base64 = header.replace(/-/g, "+").replace(/_/g, "/").padEnd(header.length + (4 - header.length % 4) % 4, "=");
    const decoded = JSON.parse(atob(base64));
    if (typeof decoded !== "object" || decoded === null)
      return false;
    if ("typ" in decoded && decoded?.typ !== "JWT")
      return false;
    if (!decoded.alg)
      return false;
    if (alg && decoded.alg !== alg)
      return false;
    return true;
  } catch {
    return false;
  }
}
function isValidCidr(ip, version2) {
  if ((version2 === "v4" || !version2) && ipv4CidrRegex.test(ip)) {
    return true;
  }
  if ((version2 === "v6" || !version2) && ipv6CidrRegex.test(ip)) {
    return true;
  }
  return false;
}
var ZodString = class _ZodString extends ZodType {
  _parse(input) {
    if (this._def.coerce) {
      input.data = String(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.string) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.string,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    const status = new ParseStatus();
    let ctx = void 0;
    for (const check of this._def.checks) {
      if (check.kind === "min") {
        if (input.data.length < check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            minimum: check.value,
            type: "string",
            inclusive: true,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        if (input.data.length > check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            maximum: check.value,
            type: "string",
            inclusive: true,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "length") {
        const tooBig = input.data.length > check.value;
        const tooSmall = input.data.length < check.value;
        if (tooBig || tooSmall) {
          ctx = this._getOrReturnCtx(input, ctx);
          if (tooBig) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_big,
              maximum: check.value,
              type: "string",
              inclusive: true,
              exact: true,
              message: check.message
            });
          } else if (tooSmall) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_small,
              minimum: check.value,
              type: "string",
              inclusive: true,
              exact: true,
              message: check.message
            });
          }
          status.dirty();
        }
      } else if (check.kind === "email") {
        if (!emailRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "email",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "emoji") {
        if (!emojiRegex) {
          emojiRegex = new RegExp(_emojiRegex, "u");
        }
        if (!emojiRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "emoji",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "uuid") {
        if (!uuidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "uuid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "nanoid") {
        if (!nanoidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "nanoid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "cuid") {
        if (!cuidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "cuid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "cuid2") {
        if (!cuid2Regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "cuid2",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "ulid") {
        if (!ulidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "ulid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "url") {
        try {
          new URL(input.data);
        } catch {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "url",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "regex") {
        check.regex.lastIndex = 0;
        const testResult = check.regex.test(input.data);
        if (!testResult) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "regex",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "trim") {
        input.data = input.data.trim();
      } else if (check.kind === "includes") {
        if (!input.data.includes(check.value, check.position)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: { includes: check.value, position: check.position },
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "toLowerCase") {
        input.data = input.data.toLowerCase();
      } else if (check.kind === "toUpperCase") {
        input.data = input.data.toUpperCase();
      } else if (check.kind === "startsWith") {
        if (!input.data.startsWith(check.value)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: { startsWith: check.value },
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "endsWith") {
        if (!input.data.endsWith(check.value)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: { endsWith: check.value },
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "datetime") {
        const regex = datetimeRegex(check);
        if (!regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: "datetime",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "date") {
        const regex = dateRegex;
        if (!regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: "date",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "time") {
        const regex = timeRegex(check);
        if (!regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: "time",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "duration") {
        if (!durationRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "duration",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "ip") {
        if (!isValidIP(input.data, check.version)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "ip",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "jwt") {
        if (!isValidJWT(input.data, check.alg)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "jwt",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "cidr") {
        if (!isValidCidr(input.data, check.version)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "cidr",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "base64") {
        if (!base64Regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "base64",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "base64url") {
        if (!base64urlRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "base64url",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return { status: status.value, value: input.data };
  }
  _regex(regex, validation, message) {
    return this.refinement((data) => regex.test(data), {
      validation,
      code: ZodIssueCode.invalid_string,
      ...errorUtil.errToObj(message)
    });
  }
  _addCheck(check) {
    return new _ZodString({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  email(message) {
    return this._addCheck({ kind: "email", ...errorUtil.errToObj(message) });
  }
  url(message) {
    return this._addCheck({ kind: "url", ...errorUtil.errToObj(message) });
  }
  emoji(message) {
    return this._addCheck({ kind: "emoji", ...errorUtil.errToObj(message) });
  }
  uuid(message) {
    return this._addCheck({ kind: "uuid", ...errorUtil.errToObj(message) });
  }
  nanoid(message) {
    return this._addCheck({ kind: "nanoid", ...errorUtil.errToObj(message) });
  }
  cuid(message) {
    return this._addCheck({ kind: "cuid", ...errorUtil.errToObj(message) });
  }
  cuid2(message) {
    return this._addCheck({ kind: "cuid2", ...errorUtil.errToObj(message) });
  }
  ulid(message) {
    return this._addCheck({ kind: "ulid", ...errorUtil.errToObj(message) });
  }
  base64(message) {
    return this._addCheck({ kind: "base64", ...errorUtil.errToObj(message) });
  }
  base64url(message) {
    return this._addCheck({
      kind: "base64url",
      ...errorUtil.errToObj(message)
    });
  }
  jwt(options) {
    return this._addCheck({ kind: "jwt", ...errorUtil.errToObj(options) });
  }
  ip(options) {
    return this._addCheck({ kind: "ip", ...errorUtil.errToObj(options) });
  }
  cidr(options) {
    return this._addCheck({ kind: "cidr", ...errorUtil.errToObj(options) });
  }
  datetime(options) {
    if (typeof options === "string") {
      return this._addCheck({
        kind: "datetime",
        precision: null,
        offset: false,
        local: false,
        message: options
      });
    }
    return this._addCheck({
      kind: "datetime",
      precision: typeof options?.precision === "undefined" ? null : options?.precision,
      offset: options?.offset ?? false,
      local: options?.local ?? false,
      ...errorUtil.errToObj(options?.message)
    });
  }
  date(message) {
    return this._addCheck({ kind: "date", message });
  }
  time(options) {
    if (typeof options === "string") {
      return this._addCheck({
        kind: "time",
        precision: null,
        message: options
      });
    }
    return this._addCheck({
      kind: "time",
      precision: typeof options?.precision === "undefined" ? null : options?.precision,
      ...errorUtil.errToObj(options?.message)
    });
  }
  duration(message) {
    return this._addCheck({ kind: "duration", ...errorUtil.errToObj(message) });
  }
  regex(regex, message) {
    return this._addCheck({
      kind: "regex",
      regex,
      ...errorUtil.errToObj(message)
    });
  }
  includes(value, options) {
    return this._addCheck({
      kind: "includes",
      value,
      position: options?.position,
      ...errorUtil.errToObj(options?.message)
    });
  }
  startsWith(value, message) {
    return this._addCheck({
      kind: "startsWith",
      value,
      ...errorUtil.errToObj(message)
    });
  }
  endsWith(value, message) {
    return this._addCheck({
      kind: "endsWith",
      value,
      ...errorUtil.errToObj(message)
    });
  }
  min(minLength, message) {
    return this._addCheck({
      kind: "min",
      value: minLength,
      ...errorUtil.errToObj(message)
    });
  }
  max(maxLength, message) {
    return this._addCheck({
      kind: "max",
      value: maxLength,
      ...errorUtil.errToObj(message)
    });
  }
  length(len, message) {
    return this._addCheck({
      kind: "length",
      value: len,
      ...errorUtil.errToObj(message)
    });
  }
  /**
   * Equivalent to `.min(1)`
   */
  nonempty(message) {
    return this.min(1, errorUtil.errToObj(message));
  }
  trim() {
    return new _ZodString({
      ...this._def,
      checks: [...this._def.checks, { kind: "trim" }]
    });
  }
  toLowerCase() {
    return new _ZodString({
      ...this._def,
      checks: [...this._def.checks, { kind: "toLowerCase" }]
    });
  }
  toUpperCase() {
    return new _ZodString({
      ...this._def,
      checks: [...this._def.checks, { kind: "toUpperCase" }]
    });
  }
  get isDatetime() {
    return !!this._def.checks.find((ch) => ch.kind === "datetime");
  }
  get isDate() {
    return !!this._def.checks.find((ch) => ch.kind === "date");
  }
  get isTime() {
    return !!this._def.checks.find((ch) => ch.kind === "time");
  }
  get isDuration() {
    return !!this._def.checks.find((ch) => ch.kind === "duration");
  }
  get isEmail() {
    return !!this._def.checks.find((ch) => ch.kind === "email");
  }
  get isURL() {
    return !!this._def.checks.find((ch) => ch.kind === "url");
  }
  get isEmoji() {
    return !!this._def.checks.find((ch) => ch.kind === "emoji");
  }
  get isUUID() {
    return !!this._def.checks.find((ch) => ch.kind === "uuid");
  }
  get isNANOID() {
    return !!this._def.checks.find((ch) => ch.kind === "nanoid");
  }
  get isCUID() {
    return !!this._def.checks.find((ch) => ch.kind === "cuid");
  }
  get isCUID2() {
    return !!this._def.checks.find((ch) => ch.kind === "cuid2");
  }
  get isULID() {
    return !!this._def.checks.find((ch) => ch.kind === "ulid");
  }
  get isIP() {
    return !!this._def.checks.find((ch) => ch.kind === "ip");
  }
  get isCIDR() {
    return !!this._def.checks.find((ch) => ch.kind === "cidr");
  }
  get isBase64() {
    return !!this._def.checks.find((ch) => ch.kind === "base64");
  }
  get isBase64url() {
    return !!this._def.checks.find((ch) => ch.kind === "base64url");
  }
  get minLength() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min;
  }
  get maxLength() {
    let max2 = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max2 === null || ch.value < max2)
          max2 = ch.value;
      }
    }
    return max2;
  }
};
ZodString.create = (params) => {
  return new ZodString({
    checks: [],
    typeName: ZodFirstPartyTypeKind.ZodString,
    coerce: params?.coerce ?? false,
    ...processCreateParams(params)
  });
};
function floatSafeRemainder(val, step) {
  const valDecCount = (val.toString().split(".")[1] || "").length;
  const stepDecCount = (step.toString().split(".")[1] || "").length;
  const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
  const valInt = Number.parseInt(val.toFixed(decCount).replace(".", ""));
  const stepInt = Number.parseInt(step.toFixed(decCount).replace(".", ""));
  return valInt % stepInt / 10 ** decCount;
}
var ZodNumber = class _ZodNumber extends ZodType {
  constructor() {
    super(...arguments);
    this.min = this.gte;
    this.max = this.lte;
    this.step = this.multipleOf;
  }
  _parse(input) {
    if (this._def.coerce) {
      input.data = Number(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.number) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.number,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    let ctx = void 0;
    const status = new ParseStatus();
    for (const check of this._def.checks) {
      if (check.kind === "int") {
        if (!util.isInteger(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: "integer",
            received: "float",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "min") {
        const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
        if (tooSmall) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            minimum: check.value,
            type: "number",
            inclusive: check.inclusive,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
        if (tooBig) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            maximum: check.value,
            type: "number",
            inclusive: check.inclusive,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "multipleOf") {
        if (floatSafeRemainder(input.data, check.value) !== 0) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.not_multiple_of,
            multipleOf: check.value,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "finite") {
        if (!Number.isFinite(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.not_finite,
            message: check.message
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return { status: status.value, value: input.data };
  }
  gte(value, message) {
    return this.setLimit("min", value, true, errorUtil.toString(message));
  }
  gt(value, message) {
    return this.setLimit("min", value, false, errorUtil.toString(message));
  }
  lte(value, message) {
    return this.setLimit("max", value, true, errorUtil.toString(message));
  }
  lt(value, message) {
    return this.setLimit("max", value, false, errorUtil.toString(message));
  }
  setLimit(kind, value, inclusive, message) {
    return new _ZodNumber({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind,
          value,
          inclusive,
          message: errorUtil.toString(message)
        }
      ]
    });
  }
  _addCheck(check) {
    return new _ZodNumber({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  int(message) {
    return this._addCheck({
      kind: "int",
      message: errorUtil.toString(message)
    });
  }
  positive(message) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  negative(message) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  nonpositive(message) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  nonnegative(message) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  multipleOf(value, message) {
    return this._addCheck({
      kind: "multipleOf",
      value,
      message: errorUtil.toString(message)
    });
  }
  finite(message) {
    return this._addCheck({
      kind: "finite",
      message: errorUtil.toString(message)
    });
  }
  safe(message) {
    return this._addCheck({
      kind: "min",
      inclusive: true,
      value: Number.MIN_SAFE_INTEGER,
      message: errorUtil.toString(message)
    })._addCheck({
      kind: "max",
      inclusive: true,
      value: Number.MAX_SAFE_INTEGER,
      message: errorUtil.toString(message)
    });
  }
  get minValue() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min;
  }
  get maxValue() {
    let max2 = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max2 === null || ch.value < max2)
          max2 = ch.value;
      }
    }
    return max2;
  }
  get isInt() {
    return !!this._def.checks.find((ch) => ch.kind === "int" || ch.kind === "multipleOf" && util.isInteger(ch.value));
  }
  get isFinite() {
    let max2 = null;
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "finite" || ch.kind === "int" || ch.kind === "multipleOf") {
        return true;
      } else if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      } else if (ch.kind === "max") {
        if (max2 === null || ch.value < max2)
          max2 = ch.value;
      }
    }
    return Number.isFinite(min) && Number.isFinite(max2);
  }
};
ZodNumber.create = (params) => {
  return new ZodNumber({
    checks: [],
    typeName: ZodFirstPartyTypeKind.ZodNumber,
    coerce: params?.coerce || false,
    ...processCreateParams(params)
  });
};
var ZodBigInt = class _ZodBigInt extends ZodType {
  constructor() {
    super(...arguments);
    this.min = this.gte;
    this.max = this.lte;
  }
  _parse(input) {
    if (this._def.coerce) {
      try {
        input.data = BigInt(input.data);
      } catch {
        return this._getInvalidInput(input);
      }
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.bigint) {
      return this._getInvalidInput(input);
    }
    let ctx = void 0;
    const status = new ParseStatus();
    for (const check of this._def.checks) {
      if (check.kind === "min") {
        const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
        if (tooSmall) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            type: "bigint",
            minimum: check.value,
            inclusive: check.inclusive,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
        if (tooBig) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            type: "bigint",
            maximum: check.value,
            inclusive: check.inclusive,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "multipleOf") {
        if (input.data % check.value !== BigInt(0)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.not_multiple_of,
            multipleOf: check.value,
            message: check.message
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return { status: status.value, value: input.data };
  }
  _getInvalidInput(input) {
    const ctx = this._getOrReturnCtx(input);
    addIssueToContext(ctx, {
      code: ZodIssueCode.invalid_type,
      expected: ZodParsedType.bigint,
      received: ctx.parsedType
    });
    return INVALID;
  }
  gte(value, message) {
    return this.setLimit("min", value, true, errorUtil.toString(message));
  }
  gt(value, message) {
    return this.setLimit("min", value, false, errorUtil.toString(message));
  }
  lte(value, message) {
    return this.setLimit("max", value, true, errorUtil.toString(message));
  }
  lt(value, message) {
    return this.setLimit("max", value, false, errorUtil.toString(message));
  }
  setLimit(kind, value, inclusive, message) {
    return new _ZodBigInt({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind,
          value,
          inclusive,
          message: errorUtil.toString(message)
        }
      ]
    });
  }
  _addCheck(check) {
    return new _ZodBigInt({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  positive(message) {
    return this._addCheck({
      kind: "min",
      value: BigInt(0),
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  negative(message) {
    return this._addCheck({
      kind: "max",
      value: BigInt(0),
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  nonpositive(message) {
    return this._addCheck({
      kind: "max",
      value: BigInt(0),
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  nonnegative(message) {
    return this._addCheck({
      kind: "min",
      value: BigInt(0),
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  multipleOf(value, message) {
    return this._addCheck({
      kind: "multipleOf",
      value,
      message: errorUtil.toString(message)
    });
  }
  get minValue() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min;
  }
  get maxValue() {
    let max2 = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max2 === null || ch.value < max2)
          max2 = ch.value;
      }
    }
    return max2;
  }
};
ZodBigInt.create = (params) => {
  return new ZodBigInt({
    checks: [],
    typeName: ZodFirstPartyTypeKind.ZodBigInt,
    coerce: params?.coerce ?? false,
    ...processCreateParams(params)
  });
};
var ZodBoolean = class extends ZodType {
  _parse(input) {
    if (this._def.coerce) {
      input.data = Boolean(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.boolean) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.boolean,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodBoolean.create = (params) => {
  return new ZodBoolean({
    typeName: ZodFirstPartyTypeKind.ZodBoolean,
    coerce: params?.coerce || false,
    ...processCreateParams(params)
  });
};
var ZodDate = class _ZodDate extends ZodType {
  _parse(input) {
    if (this._def.coerce) {
      input.data = new Date(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.date) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.date,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    if (Number.isNaN(input.data.getTime())) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_date
      });
      return INVALID;
    }
    const status = new ParseStatus();
    let ctx = void 0;
    for (const check of this._def.checks) {
      if (check.kind === "min") {
        if (input.data.getTime() < check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            message: check.message,
            inclusive: true,
            exact: false,
            minimum: check.value,
            type: "date"
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        if (input.data.getTime() > check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            message: check.message,
            inclusive: true,
            exact: false,
            maximum: check.value,
            type: "date"
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return {
      status: status.value,
      value: new Date(input.data.getTime())
    };
  }
  _addCheck(check) {
    return new _ZodDate({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  min(minDate, message) {
    return this._addCheck({
      kind: "min",
      value: minDate.getTime(),
      message: errorUtil.toString(message)
    });
  }
  max(maxDate, message) {
    return this._addCheck({
      kind: "max",
      value: maxDate.getTime(),
      message: errorUtil.toString(message)
    });
  }
  get minDate() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min != null ? new Date(min) : null;
  }
  get maxDate() {
    let max2 = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max2 === null || ch.value < max2)
          max2 = ch.value;
      }
    }
    return max2 != null ? new Date(max2) : null;
  }
};
ZodDate.create = (params) => {
  return new ZodDate({
    checks: [],
    coerce: params?.coerce || false,
    typeName: ZodFirstPartyTypeKind.ZodDate,
    ...processCreateParams(params)
  });
};
var ZodSymbol = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.symbol) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.symbol,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodSymbol.create = (params) => {
  return new ZodSymbol({
    typeName: ZodFirstPartyTypeKind.ZodSymbol,
    ...processCreateParams(params)
  });
};
var ZodUndefined = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.undefined) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.undefined,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodUndefined.create = (params) => {
  return new ZodUndefined({
    typeName: ZodFirstPartyTypeKind.ZodUndefined,
    ...processCreateParams(params)
  });
};
var ZodNull = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.null) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.null,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodNull.create = (params) => {
  return new ZodNull({
    typeName: ZodFirstPartyTypeKind.ZodNull,
    ...processCreateParams(params)
  });
};
var ZodAny = class extends ZodType {
  constructor() {
    super(...arguments);
    this._any = true;
  }
  _parse(input) {
    return OK(input.data);
  }
};
ZodAny.create = (params) => {
  return new ZodAny({
    typeName: ZodFirstPartyTypeKind.ZodAny,
    ...processCreateParams(params)
  });
};
var ZodUnknown = class extends ZodType {
  constructor() {
    super(...arguments);
    this._unknown = true;
  }
  _parse(input) {
    return OK(input.data);
  }
};
ZodUnknown.create = (params) => {
  return new ZodUnknown({
    typeName: ZodFirstPartyTypeKind.ZodUnknown,
    ...processCreateParams(params)
  });
};
var ZodNever = class extends ZodType {
  _parse(input) {
    const ctx = this._getOrReturnCtx(input);
    addIssueToContext(ctx, {
      code: ZodIssueCode.invalid_type,
      expected: ZodParsedType.never,
      received: ctx.parsedType
    });
    return INVALID;
  }
};
ZodNever.create = (params) => {
  return new ZodNever({
    typeName: ZodFirstPartyTypeKind.ZodNever,
    ...processCreateParams(params)
  });
};
var ZodVoid = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.undefined) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.void,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodVoid.create = (params) => {
  return new ZodVoid({
    typeName: ZodFirstPartyTypeKind.ZodVoid,
    ...processCreateParams(params)
  });
};
var ZodArray = class _ZodArray extends ZodType {
  _parse(input) {
    const { ctx, status } = this._processInputParams(input);
    const def = this._def;
    if (ctx.parsedType !== ZodParsedType.array) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.array,
        received: ctx.parsedType
      });
      return INVALID;
    }
    if (def.exactLength !== null) {
      const tooBig = ctx.data.length > def.exactLength.value;
      const tooSmall = ctx.data.length < def.exactLength.value;
      if (tooBig || tooSmall) {
        addIssueToContext(ctx, {
          code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,
          minimum: tooSmall ? def.exactLength.value : void 0,
          maximum: tooBig ? def.exactLength.value : void 0,
          type: "array",
          inclusive: true,
          exact: true,
          message: def.exactLength.message
        });
        status.dirty();
      }
    }
    if (def.minLength !== null) {
      if (ctx.data.length < def.minLength.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_small,
          minimum: def.minLength.value,
          type: "array",
          inclusive: true,
          exact: false,
          message: def.minLength.message
        });
        status.dirty();
      }
    }
    if (def.maxLength !== null) {
      if (ctx.data.length > def.maxLength.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_big,
          maximum: def.maxLength.value,
          type: "array",
          inclusive: true,
          exact: false,
          message: def.maxLength.message
        });
        status.dirty();
      }
    }
    if (ctx.common.async) {
      return Promise.all([...ctx.data].map((item, i) => {
        return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));
      })).then((result2) => {
        return ParseStatus.mergeArray(status, result2);
      });
    }
    const result = [...ctx.data].map((item, i) => {
      return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));
    });
    return ParseStatus.mergeArray(status, result);
  }
  get element() {
    return this._def.type;
  }
  min(minLength, message) {
    return new _ZodArray({
      ...this._def,
      minLength: { value: minLength, message: errorUtil.toString(message) }
    });
  }
  max(maxLength, message) {
    return new _ZodArray({
      ...this._def,
      maxLength: { value: maxLength, message: errorUtil.toString(message) }
    });
  }
  length(len, message) {
    return new _ZodArray({
      ...this._def,
      exactLength: { value: len, message: errorUtil.toString(message) }
    });
  }
  nonempty(message) {
    return this.min(1, message);
  }
};
ZodArray.create = (schema, params) => {
  return new ZodArray({
    type: schema,
    minLength: null,
    maxLength: null,
    exactLength: null,
    typeName: ZodFirstPartyTypeKind.ZodArray,
    ...processCreateParams(params)
  });
};
function deepPartialify(schema) {
  if (schema instanceof ZodObject) {
    const newShape = {};
    for (const key in schema.shape) {
      const fieldSchema = schema.shape[key];
      newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
    }
    return new ZodObject({
      ...schema._def,
      shape: () => newShape
    });
  } else if (schema instanceof ZodArray) {
    return new ZodArray({
      ...schema._def,
      type: deepPartialify(schema.element)
    });
  } else if (schema instanceof ZodOptional) {
    return ZodOptional.create(deepPartialify(schema.unwrap()));
  } else if (schema instanceof ZodNullable) {
    return ZodNullable.create(deepPartialify(schema.unwrap()));
  } else if (schema instanceof ZodTuple) {
    return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));
  } else {
    return schema;
  }
}
var ZodObject = class _ZodObject extends ZodType {
  constructor() {
    super(...arguments);
    this._cached = null;
    this.nonstrict = this.passthrough;
    this.augment = this.extend;
  }
  _getCached() {
    if (this._cached !== null)
      return this._cached;
    const shape = this._def.shape();
    const keys2 = util.objectKeys(shape);
    this._cached = { shape, keys: keys2 };
    return this._cached;
  }
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.object) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.object,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    const { status, ctx } = this._processInputParams(input);
    const { shape, keys: shapeKeys } = this._getCached();
    const extraKeys = [];
    if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === "strip")) {
      for (const key in ctx.data) {
        if (!shapeKeys.includes(key)) {
          extraKeys.push(key);
        }
      }
    }
    const pairs = [];
    for (const key of shapeKeys) {
      const keyValidator = shape[key];
      const value = ctx.data[key];
      pairs.push({
        key: { status: "valid", value: key },
        value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
        alwaysSet: key in ctx.data
      });
    }
    if (this._def.catchall instanceof ZodNever) {
      const unknownKeys = this._def.unknownKeys;
      if (unknownKeys === "passthrough") {
        for (const key of extraKeys) {
          pairs.push({
            key: { status: "valid", value: key },
            value: { status: "valid", value: ctx.data[key] }
          });
        }
      } else if (unknownKeys === "strict") {
        if (extraKeys.length > 0) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.unrecognized_keys,
            keys: extraKeys
          });
          status.dirty();
        }
      } else if (unknownKeys === "strip") {
      } else {
        throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
      }
    } else {
      const catchall = this._def.catchall;
      for (const key of extraKeys) {
        const value = ctx.data[key];
        pairs.push({
          key: { status: "valid", value: key },
          value: catchall._parse(
            new ParseInputLazyPath(ctx, value, ctx.path, key)
            //, ctx.child(key), value, getParsedType(value)
          ),
          alwaysSet: key in ctx.data
        });
      }
    }
    if (ctx.common.async) {
      return Promise.resolve().then(async () => {
        const syncPairs = [];
        for (const pair of pairs) {
          const key = await pair.key;
          const value = await pair.value;
          syncPairs.push({
            key,
            value,
            alwaysSet: pair.alwaysSet
          });
        }
        return syncPairs;
      }).then((syncPairs) => {
        return ParseStatus.mergeObjectSync(status, syncPairs);
      });
    } else {
      return ParseStatus.mergeObjectSync(status, pairs);
    }
  }
  get shape() {
    return this._def.shape();
  }
  strict(message) {
    errorUtil.errToObj;
    return new _ZodObject({
      ...this._def,
      unknownKeys: "strict",
      ...message !== void 0 ? {
        errorMap: (issue, ctx) => {
          const defaultError = this._def.errorMap?.(issue, ctx).message ?? ctx.defaultError;
          if (issue.code === "unrecognized_keys")
            return {
              message: errorUtil.errToObj(message).message ?? defaultError
            };
          return {
            message: defaultError
          };
        }
      } : {}
    });
  }
  strip() {
    return new _ZodObject({
      ...this._def,
      unknownKeys: "strip"
    });
  }
  passthrough() {
    return new _ZodObject({
      ...this._def,
      unknownKeys: "passthrough"
    });
  }
  // const AugmentFactory =
  //   <Def extends ZodObjectDef>(def: Def) =>
  //   <Augmentation extends ZodRawShape>(
  //     augmentation: Augmentation
  //   ): ZodObject<
  //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
  //     Def["unknownKeys"],
  //     Def["catchall"]
  //   > => {
  //     return new ZodObject({
  //       ...def,
  //       shape: () => ({
  //         ...def.shape(),
  //         ...augmentation,
  //       }),
  //     }) as any;
  //   };
  extend(augmentation) {
    return new _ZodObject({
      ...this._def,
      shape: () => ({
        ...this._def.shape(),
        ...augmentation
      })
    });
  }
  /**
   * Prior to zod@1.0.12 there was a bug in the
   * inferred type of merged objects. Please
   * upgrade if you are experiencing issues.
   */
  merge(merging) {
    const merged = new _ZodObject({
      unknownKeys: merging._def.unknownKeys,
      catchall: merging._def.catchall,
      shape: () => ({
        ...this._def.shape(),
        ...merging._def.shape()
      }),
      typeName: ZodFirstPartyTypeKind.ZodObject
    });
    return merged;
  }
  // merge<
  //   Incoming extends AnyZodObject,
  //   Augmentation extends Incoming["shape"],
  //   NewOutput extends {
  //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
  //       ? Augmentation[k]["_output"]
  //       : k extends keyof Output
  //       ? Output[k]
  //       : never;
  //   },
  //   NewInput extends {
  //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
  //       ? Augmentation[k]["_input"]
  //       : k extends keyof Input
  //       ? Input[k]
  //       : never;
  //   }
  // >(
  //   merging: Incoming
  // ): ZodObject<
  //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
  //   Incoming["_def"]["unknownKeys"],
  //   Incoming["_def"]["catchall"],
  //   NewOutput,
  //   NewInput
  // > {
  //   const merged: any = new ZodObject({
  //     unknownKeys: merging._def.unknownKeys,
  //     catchall: merging._def.catchall,
  //     shape: () =>
  //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
  //     typeName: ZodFirstPartyTypeKind.ZodObject,
  //   }) as any;
  //   return merged;
  // }
  setKey(key, schema) {
    return this.augment({ [key]: schema });
  }
  // merge<Incoming extends AnyZodObject>(
  //   merging: Incoming
  // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
  // ZodObject<
  //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
  //   Incoming["_def"]["unknownKeys"],
  //   Incoming["_def"]["catchall"]
  // > {
  //   // const mergedShape = objectUtil.mergeShapes(
  //   //   this._def.shape(),
  //   //   merging._def.shape()
  //   // );
  //   const merged: any = new ZodObject({
  //     unknownKeys: merging._def.unknownKeys,
  //     catchall: merging._def.catchall,
  //     shape: () =>
  //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
  //     typeName: ZodFirstPartyTypeKind.ZodObject,
  //   }) as any;
  //   return merged;
  // }
  catchall(index) {
    return new _ZodObject({
      ...this._def,
      catchall: index
    });
  }
  pick(mask) {
    const shape = {};
    for (const key of util.objectKeys(mask)) {
      if (mask[key] && this.shape[key]) {
        shape[key] = this.shape[key];
      }
    }
    return new _ZodObject({
      ...this._def,
      shape: () => shape
    });
  }
  omit(mask) {
    const shape = {};
    for (const key of util.objectKeys(this.shape)) {
      if (!mask[key]) {
        shape[key] = this.shape[key];
      }
    }
    return new _ZodObject({
      ...this._def,
      shape: () => shape
    });
  }
  /**
   * @deprecated
   */
  deepPartial() {
    return deepPartialify(this);
  }
  partial(mask) {
    const newShape = {};
    for (const key of util.objectKeys(this.shape)) {
      const fieldSchema = this.shape[key];
      if (mask && !mask[key]) {
        newShape[key] = fieldSchema;
      } else {
        newShape[key] = fieldSchema.optional();
      }
    }
    return new _ZodObject({
      ...this._def,
      shape: () => newShape
    });
  }
  required(mask) {
    const newShape = {};
    for (const key of util.objectKeys(this.shape)) {
      if (mask && !mask[key]) {
        newShape[key] = this.shape[key];
      } else {
        const fieldSchema = this.shape[key];
        let newField = fieldSchema;
        while (newField instanceof ZodOptional) {
          newField = newField._def.innerType;
        }
        newShape[key] = newField;
      }
    }
    return new _ZodObject({
      ...this._def,
      shape: () => newShape
    });
  }
  keyof() {
    return createZodEnum(util.objectKeys(this.shape));
  }
};
ZodObject.create = (shape, params) => {
  return new ZodObject({
    shape: () => shape,
    unknownKeys: "strip",
    catchall: ZodNever.create(),
    typeName: ZodFirstPartyTypeKind.ZodObject,
    ...processCreateParams(params)
  });
};
ZodObject.strictCreate = (shape, params) => {
  return new ZodObject({
    shape: () => shape,
    unknownKeys: "strict",
    catchall: ZodNever.create(),
    typeName: ZodFirstPartyTypeKind.ZodObject,
    ...processCreateParams(params)
  });
};
ZodObject.lazycreate = (shape, params) => {
  return new ZodObject({
    shape,
    unknownKeys: "strip",
    catchall: ZodNever.create(),
    typeName: ZodFirstPartyTypeKind.ZodObject,
    ...processCreateParams(params)
  });
};
var ZodUnion = class extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const options = this._def.options;
    function handleResults(results) {
      for (const result of results) {
        if (result.result.status === "valid") {
          return result.result;
        }
      }
      for (const result of results) {
        if (result.result.status === "dirty") {
          ctx.common.issues.push(...result.ctx.common.issues);
          return result.result;
        }
      }
      const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_union,
        unionErrors
      });
      return INVALID;
    }
    if (ctx.common.async) {
      return Promise.all(options.map(async (option) => {
        const childCtx = {
          ...ctx,
          common: {
            ...ctx.common,
            issues: []
          },
          parent: null
        };
        return {
          result: await option._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: childCtx
          }),
          ctx: childCtx
        };
      })).then(handleResults);
    } else {
      let dirty = void 0;
      const issues = [];
      for (const option of options) {
        const childCtx = {
          ...ctx,
          common: {
            ...ctx.common,
            issues: []
          },
          parent: null
        };
        const result = option._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: childCtx
        });
        if (result.status === "valid") {
          return result;
        } else if (result.status === "dirty" && !dirty) {
          dirty = { result, ctx: childCtx };
        }
        if (childCtx.common.issues.length) {
          issues.push(childCtx.common.issues);
        }
      }
      if (dirty) {
        ctx.common.issues.push(...dirty.ctx.common.issues);
        return dirty.result;
      }
      const unionErrors = issues.map((issues2) => new ZodError(issues2));
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_union,
        unionErrors
      });
      return INVALID;
    }
  }
  get options() {
    return this._def.options;
  }
};
ZodUnion.create = (types2, params) => {
  return new ZodUnion({
    options: types2,
    typeName: ZodFirstPartyTypeKind.ZodUnion,
    ...processCreateParams(params)
  });
};
var getDiscriminator = (type) => {
  if (type instanceof ZodLazy) {
    return getDiscriminator(type.schema);
  } else if (type instanceof ZodEffects) {
    return getDiscriminator(type.innerType());
  } else if (type instanceof ZodLiteral) {
    return [type.value];
  } else if (type instanceof ZodEnum) {
    return type.options;
  } else if (type instanceof ZodNativeEnum) {
    return util.objectValues(type.enum);
  } else if (type instanceof ZodDefault) {
    return getDiscriminator(type._def.innerType);
  } else if (type instanceof ZodUndefined) {
    return [void 0];
  } else if (type instanceof ZodNull) {
    return [null];
  } else if (type instanceof ZodOptional) {
    return [void 0, ...getDiscriminator(type.unwrap())];
  } else if (type instanceof ZodNullable) {
    return [null, ...getDiscriminator(type.unwrap())];
  } else if (type instanceof ZodBranded) {
    return getDiscriminator(type.unwrap());
  } else if (type instanceof ZodReadonly) {
    return getDiscriminator(type.unwrap());
  } else if (type instanceof ZodCatch) {
    return getDiscriminator(type._def.innerType);
  } else {
    return [];
  }
};
var ZodDiscriminatedUnion = class _ZodDiscriminatedUnion extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.object) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.object,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const discriminator = this.discriminator;
    const discriminatorValue = ctx.data[discriminator];
    const option = this.optionsMap.get(discriminatorValue);
    if (!option) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_union_discriminator,
        options: Array.from(this.optionsMap.keys()),
        path: [discriminator]
      });
      return INVALID;
    }
    if (ctx.common.async) {
      return option._parseAsync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      });
    } else {
      return option._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      });
    }
  }
  get discriminator() {
    return this._def.discriminator;
  }
  get options() {
    return this._def.options;
  }
  get optionsMap() {
    return this._def.optionsMap;
  }
  /**
   * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
   * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
   * have a different value for each object in the union.
   * @param discriminator the name of the discriminator property
   * @param types an array of object schemas
   * @param params
   */
  static create(discriminator, options, params) {
    const optionsMap = /* @__PURE__ */ new Map();
    for (const type of options) {
      const discriminatorValues = getDiscriminator(type.shape[discriminator]);
      if (!discriminatorValues.length) {
        throw new Error(`A discriminator value for key \`${discriminator}\` could not be extracted from all schema options`);
      }
      for (const value of discriminatorValues) {
        if (optionsMap.has(value)) {
          throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);
        }
        optionsMap.set(value, type);
      }
    }
    return new _ZodDiscriminatedUnion({
      typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
      discriminator,
      options,
      optionsMap,
      ...processCreateParams(params)
    });
  }
};
function mergeValues(a, b) {
  const aType = getParsedType(a);
  const bType = getParsedType(b);
  if (a === b) {
    return { valid: true, data: a };
  } else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {
    const bKeys = util.objectKeys(b);
    const sharedKeys = util.objectKeys(a).filter((key) => bKeys.indexOf(key) !== -1);
    const newObj = { ...a, ...b };
    for (const key of sharedKeys) {
      const sharedValue = mergeValues(a[key], b[key]);
      if (!sharedValue.valid) {
        return { valid: false };
      }
      newObj[key] = sharedValue.data;
    }
    return { valid: true, data: newObj };
  } else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {
    if (a.length !== b.length) {
      return { valid: false };
    }
    const newArray = [];
    for (let index = 0; index < a.length; index++) {
      const itemA = a[index];
      const itemB = b[index];
      const sharedValue = mergeValues(itemA, itemB);
      if (!sharedValue.valid) {
        return { valid: false };
      }
      newArray.push(sharedValue.data);
    }
    return { valid: true, data: newArray };
  } else if (aType === ZodParsedType.date && bType === ZodParsedType.date && +a === +b) {
    return { valid: true, data: a };
  } else {
    return { valid: false };
  }
}
var ZodIntersection = class extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    const handleParsed = (parsedLeft, parsedRight) => {
      if (isAborted(parsedLeft) || isAborted(parsedRight)) {
        return INVALID;
      }
      const merged = mergeValues(parsedLeft.value, parsedRight.value);
      if (!merged.valid) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_intersection_types
        });
        return INVALID;
      }
      if (isDirty(parsedLeft) || isDirty(parsedRight)) {
        status.dirty();
      }
      return { status: status.value, value: merged.data };
    };
    if (ctx.common.async) {
      return Promise.all([
        this._def.left._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        }),
        this._def.right._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        })
      ]).then(([left, right]) => handleParsed(left, right));
    } else {
      return handleParsed(this._def.left._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      }), this._def.right._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      }));
    }
  }
};
ZodIntersection.create = (left, right, params) => {
  return new ZodIntersection({
    left,
    right,
    typeName: ZodFirstPartyTypeKind.ZodIntersection,
    ...processCreateParams(params)
  });
};
var ZodTuple = class _ZodTuple extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.array) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.array,
        received: ctx.parsedType
      });
      return INVALID;
    }
    if (ctx.data.length < this._def.items.length) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.too_small,
        minimum: this._def.items.length,
        inclusive: true,
        exact: false,
        type: "array"
      });
      return INVALID;
    }
    const rest = this._def.rest;
    if (!rest && ctx.data.length > this._def.items.length) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.too_big,
        maximum: this._def.items.length,
        inclusive: true,
        exact: false,
        type: "array"
      });
      status.dirty();
    }
    const items = [...ctx.data].map((item, itemIndex) => {
      const schema = this._def.items[itemIndex] || this._def.rest;
      if (!schema)
        return null;
      return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
    }).filter((x) => !!x);
    if (ctx.common.async) {
      return Promise.all(items).then((results) => {
        return ParseStatus.mergeArray(status, results);
      });
    } else {
      return ParseStatus.mergeArray(status, items);
    }
  }
  get items() {
    return this._def.items;
  }
  rest(rest) {
    return new _ZodTuple({
      ...this._def,
      rest
    });
  }
};
ZodTuple.create = (schemas, params) => {
  if (!Array.isArray(schemas)) {
    throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
  }
  return new ZodTuple({
    items: schemas,
    typeName: ZodFirstPartyTypeKind.ZodTuple,
    rest: null,
    ...processCreateParams(params)
  });
};
var ZodRecord = class _ZodRecord extends ZodType {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.object) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.object,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const pairs = [];
    const keyType = this._def.keyType;
    const valueType = this._def.valueType;
    for (const key in ctx.data) {
      pairs.push({
        key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),
        value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),
        alwaysSet: key in ctx.data
      });
    }
    if (ctx.common.async) {
      return ParseStatus.mergeObjectAsync(status, pairs);
    } else {
      return ParseStatus.mergeObjectSync(status, pairs);
    }
  }
  get element() {
    return this._def.valueType;
  }
  static create(first2, second, third) {
    if (second instanceof ZodType) {
      return new _ZodRecord({
        keyType: first2,
        valueType: second,
        typeName: ZodFirstPartyTypeKind.ZodRecord,
        ...processCreateParams(third)
      });
    }
    return new _ZodRecord({
      keyType: ZodString.create(),
      valueType: first2,
      typeName: ZodFirstPartyTypeKind.ZodRecord,
      ...processCreateParams(second)
    });
  }
};
var ZodMap = class extends ZodType {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.map) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.map,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const keyType = this._def.keyType;
    const valueType = this._def.valueType;
    const pairs = [...ctx.data.entries()].map(([key, value], index) => {
      return {
        key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, "key"])),
        value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, "value"]))
      };
    });
    if (ctx.common.async) {
      const finalMap = /* @__PURE__ */ new Map();
      return Promise.resolve().then(async () => {
        for (const pair of pairs) {
          const key = await pair.key;
          const value = await pair.value;
          if (key.status === "aborted" || value.status === "aborted") {
            return INVALID;
          }
          if (key.status === "dirty" || value.status === "dirty") {
            status.dirty();
          }
          finalMap.set(key.value, value.value);
        }
        return { status: status.value, value: finalMap };
      });
    } else {
      const finalMap = /* @__PURE__ */ new Map();
      for (const pair of pairs) {
        const key = pair.key;
        const value = pair.value;
        if (key.status === "aborted" || value.status === "aborted") {
          return INVALID;
        }
        if (key.status === "dirty" || value.status === "dirty") {
          status.dirty();
        }
        finalMap.set(key.value, value.value);
      }
      return { status: status.value, value: finalMap };
    }
  }
};
ZodMap.create = (keyType, valueType, params) => {
  return new ZodMap({
    valueType,
    keyType,
    typeName: ZodFirstPartyTypeKind.ZodMap,
    ...processCreateParams(params)
  });
};
var ZodSet = class _ZodSet extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.set) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.set,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const def = this._def;
    if (def.minSize !== null) {
      if (ctx.data.size < def.minSize.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_small,
          minimum: def.minSize.value,
          type: "set",
          inclusive: true,
          exact: false,
          message: def.minSize.message
        });
        status.dirty();
      }
    }
    if (def.maxSize !== null) {
      if (ctx.data.size > def.maxSize.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_big,
          maximum: def.maxSize.value,
          type: "set",
          inclusive: true,
          exact: false,
          message: def.maxSize.message
        });
        status.dirty();
      }
    }
    const valueType = this._def.valueType;
    function finalizeSet(elements2) {
      const parsedSet = /* @__PURE__ */ new Set();
      for (const element of elements2) {
        if (element.status === "aborted")
          return INVALID;
        if (element.status === "dirty")
          status.dirty();
        parsedSet.add(element.value);
      }
      return { status: status.value, value: parsedSet };
    }
    const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));
    if (ctx.common.async) {
      return Promise.all(elements).then((elements2) => finalizeSet(elements2));
    } else {
      return finalizeSet(elements);
    }
  }
  min(minSize, message) {
    return new _ZodSet({
      ...this._def,
      minSize: { value: minSize, message: errorUtil.toString(message) }
    });
  }
  max(maxSize, message) {
    return new _ZodSet({
      ...this._def,
      maxSize: { value: maxSize, message: errorUtil.toString(message) }
    });
  }
  size(size, message) {
    return this.min(size, message).max(size, message);
  }
  nonempty(message) {
    return this.min(1, message);
  }
};
ZodSet.create = (valueType, params) => {
  return new ZodSet({
    valueType,
    minSize: null,
    maxSize: null,
    typeName: ZodFirstPartyTypeKind.ZodSet,
    ...processCreateParams(params)
  });
};
var ZodFunction = class _ZodFunction extends ZodType {
  constructor() {
    super(...arguments);
    this.validate = this.implement;
  }
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.function) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.function,
        received: ctx.parsedType
      });
      return INVALID;
    }
    function makeArgsIssue(args, error) {
      return makeIssue({
        data: args,
        path: ctx.path,
        errorMaps: [ctx.common.contextualErrorMap, ctx.schemaErrorMap, getErrorMap(), en_default].filter((x) => !!x),
        issueData: {
          code: ZodIssueCode.invalid_arguments,
          argumentsError: error
        }
      });
    }
    function makeReturnsIssue(returns, error) {
      return makeIssue({
        data: returns,
        path: ctx.path,
        errorMaps: [ctx.common.contextualErrorMap, ctx.schemaErrorMap, getErrorMap(), en_default].filter((x) => !!x),
        issueData: {
          code: ZodIssueCode.invalid_return_type,
          returnTypeError: error
        }
      });
    }
    const params = { errorMap: ctx.common.contextualErrorMap };
    const fn = ctx.data;
    if (this._def.returns instanceof ZodPromise) {
      const me = this;
      return OK(async function(...args) {
        const error = new ZodError([]);
        const parsedArgs = await me._def.args.parseAsync(args, params).catch((e) => {
          error.addIssue(makeArgsIssue(args, e));
          throw error;
        });
        const result = await Reflect.apply(fn, this, parsedArgs);
        const parsedReturns = await me._def.returns._def.type.parseAsync(result, params).catch((e) => {
          error.addIssue(makeReturnsIssue(result, e));
          throw error;
        });
        return parsedReturns;
      });
    } else {
      const me = this;
      return OK(function(...args) {
        const parsedArgs = me._def.args.safeParse(args, params);
        if (!parsedArgs.success) {
          throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);
        }
        const result = Reflect.apply(fn, this, parsedArgs.data);
        const parsedReturns = me._def.returns.safeParse(result, params);
        if (!parsedReturns.success) {
          throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);
        }
        return parsedReturns.data;
      });
    }
  }
  parameters() {
    return this._def.args;
  }
  returnType() {
    return this._def.returns;
  }
  args(...items) {
    return new _ZodFunction({
      ...this._def,
      args: ZodTuple.create(items).rest(ZodUnknown.create())
    });
  }
  returns(returnType) {
    return new _ZodFunction({
      ...this._def,
      returns: returnType
    });
  }
  implement(func) {
    const validatedFunc = this.parse(func);
    return validatedFunc;
  }
  strictImplement(func) {
    const validatedFunc = this.parse(func);
    return validatedFunc;
  }
  static create(args, returns, params) {
    return new _ZodFunction({
      args: args ? args : ZodTuple.create([]).rest(ZodUnknown.create()),
      returns: returns || ZodUnknown.create(),
      typeName: ZodFirstPartyTypeKind.ZodFunction,
      ...processCreateParams(params)
    });
  }
};
var ZodLazy = class extends ZodType {
  get schema() {
    return this._def.getter();
  }
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const lazySchema = this._def.getter();
    return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });
  }
};
ZodLazy.create = (getter, params) => {
  return new ZodLazy({
    getter,
    typeName: ZodFirstPartyTypeKind.ZodLazy,
    ...processCreateParams(params)
  });
};
var ZodLiteral = class extends ZodType {
  _parse(input) {
    if (input.data !== this._def.value) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        received: ctx.data,
        code: ZodIssueCode.invalid_literal,
        expected: this._def.value
      });
      return INVALID;
    }
    return { status: "valid", value: input.data };
  }
  get value() {
    return this._def.value;
  }
};
ZodLiteral.create = (value, params) => {
  return new ZodLiteral({
    value,
    typeName: ZodFirstPartyTypeKind.ZodLiteral,
    ...processCreateParams(params)
  });
};
function createZodEnum(values, params) {
  return new ZodEnum({
    values,
    typeName: ZodFirstPartyTypeKind.ZodEnum,
    ...processCreateParams(params)
  });
}
var ZodEnum = class _ZodEnum extends ZodType {
  _parse(input) {
    if (typeof input.data !== "string") {
      const ctx = this._getOrReturnCtx(input);
      const expectedValues = this._def.values;
      addIssueToContext(ctx, {
        expected: util.joinValues(expectedValues),
        received: ctx.parsedType,
        code: ZodIssueCode.invalid_type
      });
      return INVALID;
    }
    if (!this._cache) {
      this._cache = new Set(this._def.values);
    }
    if (!this._cache.has(input.data)) {
      const ctx = this._getOrReturnCtx(input);
      const expectedValues = this._def.values;
      addIssueToContext(ctx, {
        received: ctx.data,
        code: ZodIssueCode.invalid_enum_value,
        options: expectedValues
      });
      return INVALID;
    }
    return OK(input.data);
  }
  get options() {
    return this._def.values;
  }
  get enum() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
  get Values() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
  get Enum() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
  extract(values, newDef = this._def) {
    return _ZodEnum.create(values, {
      ...this._def,
      ...newDef
    });
  }
  exclude(values, newDef = this._def) {
    return _ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), {
      ...this._def,
      ...newDef
    });
  }
};
ZodEnum.create = createZodEnum;
var ZodNativeEnum = class extends ZodType {
  _parse(input) {
    const nativeEnumValues = util.getValidEnumValues(this._def.values);
    const ctx = this._getOrReturnCtx(input);
    if (ctx.parsedType !== ZodParsedType.string && ctx.parsedType !== ZodParsedType.number) {
      const expectedValues = util.objectValues(nativeEnumValues);
      addIssueToContext(ctx, {
        expected: util.joinValues(expectedValues),
        received: ctx.parsedType,
        code: ZodIssueCode.invalid_type
      });
      return INVALID;
    }
    if (!this._cache) {
      this._cache = new Set(util.getValidEnumValues(this._def.values));
    }
    if (!this._cache.has(input.data)) {
      const expectedValues = util.objectValues(nativeEnumValues);
      addIssueToContext(ctx, {
        received: ctx.data,
        code: ZodIssueCode.invalid_enum_value,
        options: expectedValues
      });
      return INVALID;
    }
    return OK(input.data);
  }
  get enum() {
    return this._def.values;
  }
};
ZodNativeEnum.create = (values, params) => {
  return new ZodNativeEnum({
    values,
    typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
    ...processCreateParams(params)
  });
};
var ZodPromise = class extends ZodType {
  unwrap() {
    return this._def.type;
  }
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.promise && ctx.common.async === false) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.promise,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const promisified = ctx.parsedType === ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);
    return OK(promisified.then((data) => {
      return this._def.type.parseAsync(data, {
        path: ctx.path,
        errorMap: ctx.common.contextualErrorMap
      });
    }));
  }
};
ZodPromise.create = (schema, params) => {
  return new ZodPromise({
    type: schema,
    typeName: ZodFirstPartyTypeKind.ZodPromise,
    ...processCreateParams(params)
  });
};
var ZodEffects = class extends ZodType {
  innerType() {
    return this._def.schema;
  }
  sourceType() {
    return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
  }
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    const effect = this._def.effect || null;
    const checkCtx = {
      addIssue: (arg) => {
        addIssueToContext(ctx, arg);
        if (arg.fatal) {
          status.abort();
        } else {
          status.dirty();
        }
      },
      get path() {
        return ctx.path;
      }
    };
    checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
    if (effect.type === "preprocess") {
      const processed = effect.transform(ctx.data, checkCtx);
      if (ctx.common.async) {
        return Promise.resolve(processed).then(async (processed2) => {
          if (status.value === "aborted")
            return INVALID;
          const result = await this._def.schema._parseAsync({
            data: processed2,
            path: ctx.path,
            parent: ctx
          });
          if (result.status === "aborted")
            return INVALID;
          if (result.status === "dirty")
            return DIRTY(result.value);
          if (status.value === "dirty")
            return DIRTY(result.value);
          return result;
        });
      } else {
        if (status.value === "aborted")
          return INVALID;
        const result = this._def.schema._parseSync({
          data: processed,
          path: ctx.path,
          parent: ctx
        });
        if (result.status === "aborted")
          return INVALID;
        if (result.status === "dirty")
          return DIRTY(result.value);
        if (status.value === "dirty")
          return DIRTY(result.value);
        return result;
      }
    }
    if (effect.type === "refinement") {
      const executeRefinement = (acc) => {
        const result = effect.refinement(acc, checkCtx);
        if (ctx.common.async) {
          return Promise.resolve(result);
        }
        if (result instanceof Promise) {
          throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
        }
        return acc;
      };
      if (ctx.common.async === false) {
        const inner = this._def.schema._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (inner.status === "aborted")
          return INVALID;
        if (inner.status === "dirty")
          status.dirty();
        executeRefinement(inner.value);
        return { status: status.value, value: inner.value };
      } else {
        return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => {
          if (inner.status === "aborted")
            return INVALID;
          if (inner.status === "dirty")
            status.dirty();
          return executeRefinement(inner.value).then(() => {
            return { status: status.value, value: inner.value };
          });
        });
      }
    }
    if (effect.type === "transform") {
      if (ctx.common.async === false) {
        const base = this._def.schema._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (!isValid(base))
          return INVALID;
        const result = effect.transform(base.value, checkCtx);
        if (result instanceof Promise) {
          throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
        }
        return { status: status.value, value: result };
      } else {
        return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base) => {
          if (!isValid(base))
            return INVALID;
          return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({
            status: status.value,
            value: result
          }));
        });
      }
    }
    util.assertNever(effect);
  }
};
ZodEffects.create = (schema, effect, params) => {
  return new ZodEffects({
    schema,
    typeName: ZodFirstPartyTypeKind.ZodEffects,
    effect,
    ...processCreateParams(params)
  });
};
ZodEffects.createWithPreprocess = (preprocess, schema, params) => {
  return new ZodEffects({
    schema,
    effect: { type: "preprocess", transform: preprocess },
    typeName: ZodFirstPartyTypeKind.ZodEffects,
    ...processCreateParams(params)
  });
};
var ZodOptional = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType === ZodParsedType.undefined) {
      return OK(void 0);
    }
    return this._def.innerType._parse(input);
  }
  unwrap() {
    return this._def.innerType;
  }
};
ZodOptional.create = (type, params) => {
  return new ZodOptional({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodOptional,
    ...processCreateParams(params)
  });
};
var ZodNullable = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType === ZodParsedType.null) {
      return OK(null);
    }
    return this._def.innerType._parse(input);
  }
  unwrap() {
    return this._def.innerType;
  }
};
ZodNullable.create = (type, params) => {
  return new ZodNullable({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodNullable,
    ...processCreateParams(params)
  });
};
var ZodDefault = class extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    let data = ctx.data;
    if (ctx.parsedType === ZodParsedType.undefined) {
      data = this._def.defaultValue();
    }
    return this._def.innerType._parse({
      data,
      path: ctx.path,
      parent: ctx
    });
  }
  removeDefault() {
    return this._def.innerType;
  }
};
ZodDefault.create = (type, params) => {
  return new ZodDefault({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodDefault,
    defaultValue: typeof params.default === "function" ? params.default : () => params.default,
    ...processCreateParams(params)
  });
};
var ZodCatch = class extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const newCtx = {
      ...ctx,
      common: {
        ...ctx.common,
        issues: []
      }
    };
    const result = this._def.innerType._parse({
      data: newCtx.data,
      path: newCtx.path,
      parent: {
        ...newCtx
      }
    });
    if (isAsync(result)) {
      return result.then((result2) => {
        return {
          status: "valid",
          value: result2.status === "valid" ? result2.value : this._def.catchValue({
            get error() {
              return new ZodError(newCtx.common.issues);
            },
            input: newCtx.data
          })
        };
      });
    } else {
      return {
        status: "valid",
        value: result.status === "valid" ? result.value : this._def.catchValue({
          get error() {
            return new ZodError(newCtx.common.issues);
          },
          input: newCtx.data
        })
      };
    }
  }
  removeCatch() {
    return this._def.innerType;
  }
};
ZodCatch.create = (type, params) => {
  return new ZodCatch({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodCatch,
    catchValue: typeof params.catch === "function" ? params.catch : () => params.catch,
    ...processCreateParams(params)
  });
};
var ZodNaN = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.nan) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.nan,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return { status: "valid", value: input.data };
  }
};
ZodNaN.create = (params) => {
  return new ZodNaN({
    typeName: ZodFirstPartyTypeKind.ZodNaN,
    ...processCreateParams(params)
  });
};
var BRAND = Symbol("zod_brand");
var ZodBranded = class extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const data = ctx.data;
    return this._def.type._parse({
      data,
      path: ctx.path,
      parent: ctx
    });
  }
  unwrap() {
    return this._def.type;
  }
};
var ZodPipeline = class _ZodPipeline extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.common.async) {
      const handleAsync = async () => {
        const inResult = await this._def.in._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (inResult.status === "aborted")
          return INVALID;
        if (inResult.status === "dirty") {
          status.dirty();
          return DIRTY(inResult.value);
        } else {
          return this._def.out._parseAsync({
            data: inResult.value,
            path: ctx.path,
            parent: ctx
          });
        }
      };
      return handleAsync();
    } else {
      const inResult = this._def.in._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      });
      if (inResult.status === "aborted")
        return INVALID;
      if (inResult.status === "dirty") {
        status.dirty();
        return {
          status: "dirty",
          value: inResult.value
        };
      } else {
        return this._def.out._parseSync({
          data: inResult.value,
          path: ctx.path,
          parent: ctx
        });
      }
    }
  }
  static create(a, b) {
    return new _ZodPipeline({
      in: a,
      out: b,
      typeName: ZodFirstPartyTypeKind.ZodPipeline
    });
  }
};
var ZodReadonly = class extends ZodType {
  _parse(input) {
    const result = this._def.innerType._parse(input);
    const freeze = (data) => {
      if (isValid(data)) {
        data.value = Object.freeze(data.value);
      }
      return data;
    };
    return isAsync(result) ? result.then((data) => freeze(data)) : freeze(result);
  }
  unwrap() {
    return this._def.innerType;
  }
};
ZodReadonly.create = (type, params) => {
  return new ZodReadonly({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodReadonly,
    ...processCreateParams(params)
  });
};
function cleanParams(params, data) {
  const p = typeof params === "function" ? params(data) : typeof params === "string" ? { message: params } : params;
  const p2 = typeof p === "string" ? { message: p } : p;
  return p2;
}
function custom(check, _params = {}, fatal) {
  if (check)
    return ZodAny.create().superRefine((data, ctx) => {
      const r = check(data);
      if (r instanceof Promise) {
        return r.then((r2) => {
          if (!r2) {
            const params = cleanParams(_params, data);
            const _fatal = params.fatal ?? fatal ?? true;
            ctx.addIssue({ code: "custom", ...params, fatal: _fatal });
          }
        });
      }
      if (!r) {
        const params = cleanParams(_params, data);
        const _fatal = params.fatal ?? fatal ?? true;
        ctx.addIssue({ code: "custom", ...params, fatal: _fatal });
      }
      return;
    });
  return ZodAny.create();
}
var late = {
  object: ZodObject.lazycreate
};
var ZodFirstPartyTypeKind;
(function(ZodFirstPartyTypeKind2) {
  ZodFirstPartyTypeKind2["ZodString"] = "ZodString";
  ZodFirstPartyTypeKind2["ZodNumber"] = "ZodNumber";
  ZodFirstPartyTypeKind2["ZodNaN"] = "ZodNaN";
  ZodFirstPartyTypeKind2["ZodBigInt"] = "ZodBigInt";
  ZodFirstPartyTypeKind2["ZodBoolean"] = "ZodBoolean";
  ZodFirstPartyTypeKind2["ZodDate"] = "ZodDate";
  ZodFirstPartyTypeKind2["ZodSymbol"] = "ZodSymbol";
  ZodFirstPartyTypeKind2["ZodUndefined"] = "ZodUndefined";
  ZodFirstPartyTypeKind2["ZodNull"] = "ZodNull";
  ZodFirstPartyTypeKind2["ZodAny"] = "ZodAny";
  ZodFirstPartyTypeKind2["ZodUnknown"] = "ZodUnknown";
  ZodFirstPartyTypeKind2["ZodNever"] = "ZodNever";
  ZodFirstPartyTypeKind2["ZodVoid"] = "ZodVoid";
  ZodFirstPartyTypeKind2["ZodArray"] = "ZodArray";
  ZodFirstPartyTypeKind2["ZodObject"] = "ZodObject";
  ZodFirstPartyTypeKind2["ZodUnion"] = "ZodUnion";
  ZodFirstPartyTypeKind2["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
  ZodFirstPartyTypeKind2["ZodIntersection"] = "ZodIntersection";
  ZodFirstPartyTypeKind2["ZodTuple"] = "ZodTuple";
  ZodFirstPartyTypeKind2["ZodRecord"] = "ZodRecord";
  ZodFirstPartyTypeKind2["ZodMap"] = "ZodMap";
  ZodFirstPartyTypeKind2["ZodSet"] = "ZodSet";
  ZodFirstPartyTypeKind2["ZodFunction"] = "ZodFunction";
  ZodFirstPartyTypeKind2["ZodLazy"] = "ZodLazy";
  ZodFirstPartyTypeKind2["ZodLiteral"] = "ZodLiteral";
  ZodFirstPartyTypeKind2["ZodEnum"] = "ZodEnum";
  ZodFirstPartyTypeKind2["ZodEffects"] = "ZodEffects";
  ZodFirstPartyTypeKind2["ZodNativeEnum"] = "ZodNativeEnum";
  ZodFirstPartyTypeKind2["ZodOptional"] = "ZodOptional";
  ZodFirstPartyTypeKind2["ZodNullable"] = "ZodNullable";
  ZodFirstPartyTypeKind2["ZodDefault"] = "ZodDefault";
  ZodFirstPartyTypeKind2["ZodCatch"] = "ZodCatch";
  ZodFirstPartyTypeKind2["ZodPromise"] = "ZodPromise";
  ZodFirstPartyTypeKind2["ZodBranded"] = "ZodBranded";
  ZodFirstPartyTypeKind2["ZodPipeline"] = "ZodPipeline";
  ZodFirstPartyTypeKind2["ZodReadonly"] = "ZodReadonly";
})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));
var instanceOfType = (cls, params = {
  message: `Input not instance of ${cls.name}`
}) => custom((data) => data instanceof cls, params);
var stringType = ZodString.create;
var numberType = ZodNumber.create;
var nanType = ZodNaN.create;
var bigIntType = ZodBigInt.create;
var booleanType = ZodBoolean.create;
var dateType = ZodDate.create;
var symbolType = ZodSymbol.create;
var undefinedType = ZodUndefined.create;
var nullType = ZodNull.create;
var anyType = ZodAny.create;
var unknownType = ZodUnknown.create;
var neverType = ZodNever.create;
var voidType = ZodVoid.create;
var arrayType = ZodArray.create;
var objectType = ZodObject.create;
var strictObjectType = ZodObject.strictCreate;
var unionType = ZodUnion.create;
var discriminatedUnionType = ZodDiscriminatedUnion.create;
var intersectionType = ZodIntersection.create;
var tupleType = ZodTuple.create;
var recordType = ZodRecord.create;
var mapType = ZodMap.create;
var setType = ZodSet.create;
var functionType = ZodFunction.create;
var lazyType = ZodLazy.create;
var literalType = ZodLiteral.create;
var enumType = ZodEnum.create;
var nativeEnumType = ZodNativeEnum.create;
var promiseType = ZodPromise.create;
var effectsType = ZodEffects.create;
var optionalType = ZodOptional.create;
var nullableType = ZodNullable.create;
var preprocessType = ZodEffects.createWithPreprocess;
var pipelineType = ZodPipeline.create;
var ostring = () => stringType().optional();
var onumber = () => numberType().optional();
var oboolean = () => booleanType().optional();
var coerce = {
  string: (arg) => ZodString.create({ ...arg, coerce: true }),
  number: (arg) => ZodNumber.create({ ...arg, coerce: true }),
  boolean: (arg) => ZodBoolean.create({
    ...arg,
    coerce: true
  }),
  bigint: (arg) => ZodBigInt.create({ ...arg, coerce: true }),
  date: (arg) => ZodDate.create({ ...arg, coerce: true })
};
var NEVER = INVALID;

// src/utils/validators.ts
var VoiceProcessSchema = external_exports.object({
  audio_data: external_exports.string().min(1),
  user_id: external_exports.string().min(1),
  format: external_exports.enum(["mp3", "wav", "webm"]).optional().default("webm")
});
var VoiceConfirmSchema = external_exports.object({
  audio_data: external_exports.string().min(1),
  user_id: external_exports.string().min(1),
  transaction_id: external_exports.string().uuid().optional(),
  transaction_ids: external_exports.array(external_exports.string().uuid()).optional()
}).refine((d) => !!d.transaction_id || d.transaction_ids && d.transaction_ids.length > 0, {
  message: "transaction_id or transaction_ids required"
});
var ExecuteTxSchema = external_exports.object({
  transaction_id: external_exports.string().uuid(),
  signed_extrinsic: external_exports.string().regex(/^[0-9a-fA-F]+$/),
  chain: external_exports.enum(["polkadot", "asset-hub-polkadot", "moonbeam"]).optional(),
  token: external_exports.string().optional(),
  min_receive: external_exports.string().optional(),
  slippage_bps: external_exports.number().int().min(0).max(1e4).optional()
});
var WalletConnectSchema = external_exports.object({
  wallet_address: external_exports.string().min(1),
  signature: external_exports.string().min(1),
  message: external_exports.string().min(1)
});
var WalletBalanceSchema = external_exports.object({
  wallet_address: external_exports.string().min(1),
  token_symbols: external_exports.string().optional()
  // CSV of symbols
});

// src/utils/base64.ts
function base64ToUint8Array(base64) {
  const binary = atob(base64);
  const len = binary.length;
  const bytes2 = new Uint8Array(len);
  for (let i = 0; i < len; i++) bytes2[i] = binary.charCodeAt(i);
  return bytes2;
}
function uint8ArrayToBase64(bytes2) {
  let binary = "";
  for (let i = 0; i < bytes2.byteLength; i++) binary += String.fromCharCode(bytes2[i]);
  return btoa(binary);
}
function arrayBufferToBase64(buf) {
  return uint8ArrayToBase64(new Uint8Array(buf));
}

// src/integrations/elevenlabs.ts
async function speechToText(env, audioBase64, format) {
  const audioBytes = base64ToUint8Array(audioBase64);
  const res = await fetch("https://api.elevenlabs.io/v1/speech-to-text", {
    method: "POST",
    headers: {
      "xi-api-key": env.ELEVENLABS_API_KEY,
      "Content-Type": "application/octet-stream"
    },
    body: audioBytes
  });
  if (!res.ok) throw new Error(`STT failed: ${res.status}`);
  const data = await res.json();
  return data.text ?? "";
}
async function textToSpeech(env, text2) {
  const voiceId = env.ELEVENLABS_VOICE_ID || "21m00Tcm4TlvDq8ikWAM";
  const res = await fetch(`https://api.elevenlabs.io/v1/text-to-speech/${voiceId}`, {
    method: "POST",
    headers: {
      "xi-api-key": env.ELEVENLABS_API_KEY,
      "Content-Type": "application/json",
      "Accept": "audio/mpeg"
    },
    body: JSON.stringify({ text: text2, model_id: "eleven_multilingual_v2" })
  });
  if (!res.ok) throw new Error(`TTS failed: ${res.status}`);
  return await res.arrayBuffer();
}

// src/utils/crypto.ts
async function encryptAesGcm(keyBase64, data) {
  if (!keyBase64) {
    return { iv: "", ciphertext: arrayBufferToBase64(data) };
  }
  const keyRaw = base64ToUint8Array(keyBase64);
  const cryptoKey = await crypto.subtle.importKey("raw", keyRaw, "AES-GCM", false, ["encrypt"]);
  const iv = crypto.getRandomValues(new Uint8Array(12));
  const encrypted = await crypto.subtle.encrypt({ name: "AES-GCM", iv }, cryptoKey, data);
  return { iv: uint8ArrayToBase64(iv), ciphertext: arrayBufferToBase64(encrypted) };
}

// node_modules/uuid/dist/esm-browser/rng.js
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues) {
    getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);
    if (!getRandomValues) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
  }
  return getRandomValues(rnds8);
}

// node_modules/uuid/dist/esm-browser/stringify.js
var byteToHex = [];
for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 256).toString(16).slice(1));
}
function unsafeStringify(arr, offset = 0) {
  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];
}

// node_modules/uuid/dist/esm-browser/native.js
var randomUUID = typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);
var native_default = {
  randomUUID
};

// node_modules/uuid/dist/esm-browser/v4.js
function v4(options, buf, offset) {
  if (native_default.randomUUID && !buf && !options) {
    return native_default.randomUUID();
  }
  options = options || {};
  const rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return unsafeStringify(rnds);
}
var v4_default = v4;

// src/db/schema.ts
var users = sqliteTable("users", {
  id: text("id").primaryKey(),
  walletAddress: text("wallet_address").notNull().unique(),
  createdAt: integer("created_at", { mode: "timestamp_ms" }).notNull().default(sql`(unixepoch() * 1000)`),
  lastActive: integer("last_active", { mode: "timestamp_ms" }).notNull().default(sql`(unixepoch() * 1000)`)
});
var transactions = sqliteTable("transactions", {
  id: text("id").primaryKey(),
  userId: text("user_id").references(() => users.id),
  voiceCommand: text("voice_command").notNull(),
  parsedIntent: text("parsed_intent").notNull(),
  recipientAddress: text("recipient_address").notNull(),
  amount: text("amount").notNull(),
  tokenSymbol: text("token_symbol").notNull(),
  transactionHash: text("transaction_hash"),
  status: text("status").notNull(),
  createdAt: integer("created_at", { mode: "timestamp_ms" }).notNull().default(sql`(unixepoch() * 1000)`),
  confirmedAt: integer("confirmed_at", { mode: "timestamp_ms" })
});
var voiceSessions = sqliteTable("voice_sessions", {
  id: text("id").primaryKey(),
  userId: text("user_id").references(() => users.id),
  audioUrl: text("audio_url"),
  transcription: text("transcription"),
  responseAudioUrl: text("response_audio_url"),
  responseText: text("response_text"),
  createdAt: integer("created_at", { mode: "timestamp_ms" }).notNull().default(sql`(unixepoch() * 1000)`)
});

// src/utils/intent.ts
var IntentItemSchema = external_exports.object({
  action: external_exports.literal("transfer"),
  amount: external_exports.string(),
  token: external_exports.string(),
  recipient: external_exports.string(),
  origin_chain: external_exports.string(),
  destination_chain: external_exports.string()
});
var IntentSchema = external_exports.object({
  type: external_exports.enum(["single", "batch"]).default("single"),
  language: external_exports.string().optional().default("en"),
  items: external_exports.array(IntentItemSchema).min(1),
  schedule: external_exports.string().nullable().optional().default(null),
  condition: external_exports.string().nullable().optional().default(null)
});

// src/integrations/prices.ts
var COINGECKO_IDS = {
  DOT: "polkadot",
  USDT: "tether",
  GLMR: "moonbeam"
};
async function fetchUsdPrices(symbols) {
  const ids = symbols.map((s) => COINGECKO_IDS[s.toUpperCase()]).filter(Boolean);
  if (!ids.length) return {};
  const url = `https://api.coingecko.com/api/v3/simple/price?ids=${encodeURIComponent(ids.join(","))}&vs_currencies=usd`;
  const res = await fetch(url);
  if (!res.ok) throw new Error(`Price API error: ${res.status}`);
  const data = await res.json();
  const out = {};
  for (const sym of symbols) {
    const id = COINGECKO_IDS[sym.toUpperCase()];
    if (id && data[id]?.usd != null) out[sym.toUpperCase()] = Number(data[id].usd);
  }
  return out;
}
function convertAmount(amount, fromPriceUsd, toPriceUsd) {
  if (!fromPriceUsd || !toPriceUsd) return 0;
  const usd = amount * fromPriceUsd;
  return usd / toPriceUsd;
}

// src/integrations/tokens.ts
var TOKENS = {
  DOT: { symbol: "DOT", chain: "polkadot", isNative: true, decimals: 10 },
  USDT: { symbol: "USDT", chain: "asset-hub-polkadot", isNative: false, assetId: 1984, decimals: 6 },
  GLMR: { symbol: "GLMR", chain: "moonbeam", isNative: true, decimals: 18 }
};
function getTokenInfo(symbol) {
  const s = symbol.toUpperCase();
  return TOKENS[s];
}
function getChainNativeSymbol(chain2) {
  if (chain2 === "moonbeam") return "GLMR";
  return "DOT";
}
function getChainNativeTokenInfo(chain2) {
  const sym = getChainNativeSymbol(chain2);
  return TOKENS[sym];
}

// src/integrations/perplexity.ts
var SYSTEM_PROMPT = `You are a transaction intent parser for a voice-controlled Polkadot payments system.
Return ONLY JSON matching this schema:
{
  "type": "single" | "batch",
  "language": string,
  "items": [
    {
      "action": "transfer",
      "amount": string,           // human units as string or prefixed with $ for USD e.g. "$10"
      "token": string,            // e.g., DOT, USDT, GLMR
      "recipient": string,        // address or contact name
      "origin_chain": string,     // e.g., polkadot, asset-hub-polkadot, moonbeam
      "destination_chain": string // same as above; if single-chain, equal to origin_chain
    }
  ],
  "schedule": string | null,      // ISO8601 or natural language time, or null
  "condition": string | null      // Conditional clause if any
}`;
async function parseIntentWithPerplexity(env, transcription) {
  if (!env.PERPLEXITY_API_KEY) {
    throw new Error("PERPLEXITY_API_KEY not configured");
  }
  const model = env.PERPLEXITY_MODEL || "sonar-small-online";
  const res = await fetch("https://api.perplexity.ai/chat/completions", {
    method: "POST",
    headers: {
      "Authorization": `Bearer ${env.PERPLEXITY_API_KEY}`,
      "Content-Type": "application/json"
    },
    body: JSON.stringify({
      model,
      messages: [
        { role: "system", content: SYSTEM_PROMPT },
        { role: "user", content: transcription }
      ],
      temperature: 0,
      response_format: { type: "json_object" }
    })
  });
  if (!res.ok) {
    const t = await res.text();
    throw new Error(`Perplexity API error: ${res.status} ${t}`);
  }
  const data = await res.json();
  const content = data.choices?.[0]?.message?.content;
  const parsed = typeof content === "string" ? JSON.parse(content) : content;
  const intent = IntentSchema.parse(parsed);
  const symbols = Array.from(new Set(intent.items.map((i) => i.token.toUpperCase())));
  const prices2 = await fetchUsdPrices(symbols);
  intent.items = intent.items.map((it) => {
    const token = it.token.toUpperCase();
    const info6 = getTokenInfo(token);
    let amount = it.amount;
    if (amount.trim().startsWith("$")) {
      const usd = Number(amount.replace(/[^0-9.]/g, "")) || 0;
      const p = prices2[token] || 0;
      const tokenAmount = p ? usd / p : 0;
      amount = String(tokenAmount);
    }
    return {
      ...it,
      token,
      origin_chain: normalizeChain(it.origin_chain, token),
      destination_chain: normalizeChain(it.destination_chain || it.origin_chain, token),
      amount
    };
  });
  return intent;
}
function normalizeChain(chain2, token) {
  const c = (chain2 || "").toLowerCase();
  if (c.includes("polkadot") || token.toUpperCase() === "DOT") return "polkadot";
  if (c.includes("asset") || c.includes("statemint") || token.toUpperCase() === "USDT") return "asset-hub-polkadot";
  if (c.includes("moonbeam") || token.toUpperCase() === "GLMR") return "moonbeam";
  return c || "polkadot";
}

// node_modules/@polkadot/x-global/index.js
function evaluateThis(fn) {
  return fn("return this");
}
var xglobal = typeof globalThis !== "undefined" ? globalThis : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : evaluateThis(Function);
function extractGlobal(name, fallback) {
  return typeof xglobal[name] === "undefined" ? fallback : xglobal[name];
}

// node_modules/@polkadot/api/node_modules/@polkadot/x-textencoder/fallback.js
var TextEncoder2 = class {
  encode(value) {
    const count = value.length;
    const u8a = new Uint8Array(count);
    for (let i = 0; i < count; i++) {
      u8a[i] = value.charCodeAt(i);
    }
    return u8a;
  }
};

// node_modules/@polkadot/api/node_modules/@polkadot/x-textencoder/browser.js
var TextEncoder3 = /* @__PURE__ */ extractGlobal("TextEncoder", TextEncoder2);

// node_modules/@polkadot/api/node_modules/@polkadot/util/is/function.js
function isFunction(value) {
  return typeof value === "function";
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/array/chunk.js
function arrayChunk(array, chunkSize) {
  const outputSize = Math.ceil(array.length / chunkSize);
  if (outputSize === 1) {
    return [array];
  }
  const output = Array(outputSize);
  for (let i = 0; i < outputSize; i++) {
    const offset = i * chunkSize;
    output[i] = array.slice(offset, offset + chunkSize);
  }
  return output;
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/array/flatten.js
function arrayFlatten(arrays) {
  const num = arrays.length;
  if (num === 0) {
    return [];
  } else if (num === 1) {
    return arrays[0];
  }
  let size = 0;
  for (let i2 = 0; i2 < num; i2++) {
    size += arrays[i2].length;
  }
  const output = new Array(size);
  let i = -1;
  for (let j = 0; j < num; j++) {
    const a = arrays[j];
    for (let e = 0, count = a.length; e < count; e++) {
      output[++i] = a[e];
    }
  }
  return output;
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/assert.js
function assert(condition, message) {
  if (!condition) {
    throw new Error(isFunction(message) ? message() : message);
  }
}
function assertReturn(value, message) {
  assert(value !== void 0 && value !== null, message);
  return value;
}

// node_modules/@polkadot/x-bigint/index.js
function invalidFallback() {
  return Number.NaN;
}
var BigInt2 = /* @__PURE__ */ extractGlobal("BigInt", invalidFallback);

// node_modules/@polkadot/api/node_modules/@polkadot/util/hex/toU8a.js
var CHR = "0123456789abcdef";
var U8 = new Uint8Array(256);
var U16 = new Uint8Array(256 * 256);
for (let i = 0, count = CHR.length; i < count; i++) {
  U8[CHR[i].charCodeAt(0) | 0] = i | 0;
  if (i > 9) {
    U8[CHR[i].toUpperCase().charCodeAt(0) | 0] = i | 0;
  }
}
for (let i = 0; i < 256; i++) {
  const s = i << 8;
  for (let j = 0; j < 256; j++) {
    U16[s | j] = U8[i] << 4 | U8[j];
  }
}
function hexToU8a(value, bitLength = -1) {
  if (!value) {
    return new Uint8Array();
  }
  let s = value.startsWith("0x") ? 2 : 0;
  const decLength = Math.ceil((value.length - s) / 2);
  const endLength = Math.ceil(bitLength === -1 ? decLength : bitLength / 8);
  const result = new Uint8Array(endLength);
  const offset = endLength > decLength ? endLength - decLength : 0;
  for (let i = offset; i < endLength; i++, s += 2) {
    result[i] = U16[value.charCodeAt(s) << 8 | value.charCodeAt(s + 1)];
  }
  return result;
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/bn/bn.js
var import_bn = __toESM(require_bn(), 1);

// node_modules/@polkadot/api/node_modules/@polkadot/util/is/bn.js
function isBn(value) {
  return import_bn.default.isBN(value);
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/is/hex.js
var REGEX_HEX_PREFIXED = /^0x[\da-fA-F]+$/;
function isHex(value, bitLength = -1, ignoreLength) {
  return typeof value === "string" && (value === "0x" || REGEX_HEX_PREFIXED.test(value)) && (bitLength === -1 ? ignoreLength || value.length % 2 === 0 : value.length === 2 + Math.ceil(bitLength / 4));
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/is/object.js
function isObject(value) {
  return !!value && typeof value === "object";
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/is/helpers.js
function isOnObject(...fns) {
  return (value) => isObject(value) && fns.every((f) => isFunction(value[f]));
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/has.js
var hasBigInt = typeof BigInt2 === "function" && typeof BigInt2.asIntN === "function";
var hasBuffer = typeof xglobal.Buffer === "function" && typeof xglobal.Buffer.isBuffer === "function";
var hasProcess = typeof xglobal.process === "object";

// node_modules/@polkadot/api/node_modules/@polkadot/util/is/buffer.js
function isBuffer(value) {
  return hasBuffer && !!value && isFunction(value.readDoubleLE) && xglobal.Buffer.isBuffer(value);
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/is/u8a.js
function isU8a(value) {
  return (value && value.constructor) === Uint8Array || value instanceof Uint8Array;
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/string/toU8a.js
var encoder = new TextEncoder3();
function stringToU8a(value) {
  return value ? encoder.encode(value.toString()) : new Uint8Array();
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/u8a/toU8a.js
function u8aToU8a(value, strict = false) {
  if (strict && (value === null || value === void 0)) {
    throw new Error("u8aToU8a: Expected non-null, non-undefined value");
  }
  return isU8a(value) ? isBuffer(value) ? new Uint8Array(value) : value : isHex(value) ? hexToU8a(value) : Array.isArray(value) ? new Uint8Array(value) : stringToU8a(value);
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/u8a/concat.js
function u8aConcatStrict(u8as, length = 0) {
  const count = u8as.length;
  let offset = 0;
  if (!length) {
    for (let i = 0; i < count; i++) {
      length += u8as[i].length;
    }
  }
  const result = new Uint8Array(length);
  for (let i = 0; i < count; i++) {
    result.set(u8as[i], offset);
    offset += u8as[i].length;
  }
  return result;
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/u8a/eq.js
function u8aEq(a, b) {
  const u8aa = u8aToU8a(a);
  const u8ab = u8aToU8a(b);
  if (u8aa.length === u8ab.length) {
    const dvA = new DataView(u8aa.buffer, u8aa.byteOffset);
    const dvB = new DataView(u8ab.buffer, u8ab.byteOffset);
    const mod2 = u8aa.length % 4 | 0;
    const length = u8aa.length - mod2 | 0;
    for (let i = 0; i < length; i += 4) {
      if (dvA.getUint32(i) !== dvB.getUint32(i)) {
        return false;
      }
    }
    for (let i = length, count = u8aa.length; i < count; i++) {
      if (u8aa[i] !== u8ab[i]) {
        return false;
      }
    }
    return true;
  }
  return false;
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/u8a/toBn.js
function u8aToBn(value, { isLe = true, isNegative = false } = {}) {
  if (!isLe) {
    value = value.slice().reverse();
  }
  const count = value.length;
  if (isNegative && count && value[count - 1] & 128) {
    switch (count) {
      case 0:
        return new import_bn.default(0);
      case 1:
        return new import_bn.default((value[0] ^ 255) * -1 - 1);
      case 2:
        return new import_bn.default((value[0] + (value[1] << 8) ^ 65535) * -1 - 1);
      case 3:
        return new import_bn.default((value[0] + (value[1] << 8) + (value[2] << 16) ^ 16777215) * -1 - 1);
      case 4:
        return new import_bn.default((value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) * -1 - 1);
      case 5:
        return new import_bn.default(((value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) + (value[4] ^ 255) * 4294967296) * -1 - 1);
      case 6:
        return new import_bn.default(((value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) + (value[4] + (value[5] << 8) ^ 65535) * 4294967296) * -1 - 1);
      default:
        return new import_bn.default(value, "le").fromTwos(count * 8);
    }
  }
  switch (count) {
    case 0:
      return new import_bn.default(0);
    case 1:
      return new import_bn.default(value[0]);
    case 2:
      return new import_bn.default(value[0] + (value[1] << 8));
    case 3:
      return new import_bn.default(value[0] + (value[1] << 8) + (value[2] << 16));
    case 4:
      return new import_bn.default(value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216);
    case 5:
      return new import_bn.default(value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] + (value[4] << 8)) * 16777216);
    case 6:
      return new import_bn.default(value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] + (value[4] << 8) + (value[5] << 16)) * 16777216);
    default:
      return new import_bn.default(value, "le");
  }
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/u8a/toHex.js
var U82 = new Array(256);
var U162 = new Array(256 * 256);
for (let n = 0; n < 256; n++) {
  U82[n] = n.toString(16).padStart(2, "0");
}
for (let i = 0; i < 256; i++) {
  const s = i << 8;
  for (let j = 0; j < 256; j++) {
    U162[s | j] = U82[i] + U82[j];
  }
}
function hex(value, result) {
  const mod2 = value.length % 2 | 0;
  const length = value.length - mod2 | 0;
  for (let i = 0; i < length; i += 2) {
    result += U162[value[i] << 8 | value[i + 1]];
  }
  if (mod2) {
    result += U82[value[length] | 0];
  }
  return result;
}
function u8aToHex(value, bitLength = -1, isPrefixed = true) {
  const empty2 = isPrefixed ? "0x" : "";
  if (!value?.length) {
    return empty2;
  } else if (bitLength > 0) {
    const length = Math.ceil(bitLength / 8);
    if (value.length > length) {
      return `${hex(value.subarray(0, length / 2), empty2)}\u2026${hex(value.subarray(value.length - length / 2), "")}`;
    }
  }
  return hex(value, empty2);
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/bn/consts.js
var BN_ZERO = /* @__PURE__ */ new import_bn.default(0);
var BN_BILLION = /* @__PURE__ */ new import_bn.default(1e9);
var BN_QUINTILL = BN_BILLION.mul(BN_BILLION);
var BN_MAX_INTEGER = /* @__PURE__ */ new import_bn.default(Number.MAX_SAFE_INTEGER);

// node_modules/@polkadot/api/node_modules/@polkadot/util/compact/fromU8a.js
function compactFromU8a(input) {
  const u8a = u8aToU8a(input);
  switch (u8a[0] & 3) {
    case 0:
      return [1, new import_bn.default(u8a[0] >>> 2)];
    case 1:
      return [2, new import_bn.default(u8a[0] + (u8a[1] << 8) >>> 2)];
    case 2:
      return [4, new import_bn.default(u8a[0] + (u8a[1] << 8) + (u8a[2] << 16) + u8a[3] * 16777216 >>> 2)];
    default: {
      const offset = (u8a[0] >>> 2) + 5;
      switch (offset) {
        case 5:
          return [5, new import_bn.default(u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + u8a[4] * 16777216)];
        case 6:
          return [6, new import_bn.default(u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + (u8a[4] + (u8a[5] << 8)) * 16777216)];
        case 7:
          return [7, new import_bn.default(u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + (u8a[4] + (u8a[5] << 8) + (u8a[6] << 16)) * 16777216)];
        default:
          return [offset, u8aToBn(u8a.subarray(1, offset))];
      }
    }
  }
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/compact/stripLength.js
function compactStripLength(input) {
  const [offset, length] = compactFromU8a(input);
  const total = offset + length.toNumber();
  return [
    total,
    input.subarray(offset, total)
  ];
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/format/formatDate.js
function zeroPad(value) {
  return value.toString().padStart(2, "0");
}
function formatDate(date) {
  const year = date.getFullYear().toString();
  const month = zeroPad(date.getMonth() + 1);
  const day = zeroPad(date.getDate());
  const hour = zeroPad(date.getHours());
  const minute = zeroPad(date.getMinutes());
  const second = zeroPad(date.getSeconds());
  return `${year}-${month}-${day} ${hour}:${minute}:${second}`;
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/is/string.js
function isString(value) {
  return typeof value === "string" || value instanceof String;
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/is/compact.js
var isCompact = /* @__PURE__ */ isOnObject("toBigInt", "toBn", "toNumber", "unwrap");

// node_modules/@polkadot/api/node_modules/@polkadot/util/is/number.js
function isNumber(value) {
  return typeof value === "number";
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/is/undefined.js
function isUndefined(value) {
  return value === void 0;
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/lazy.js
function lazyMethod(result, item, creator, getName, index = 0) {
  const name = getName ? getName(item, index) : item.toString();
  let value;
  Object.defineProperty(result, name, {
    // This allows for re-configuration with the embedded defineProperty below
    // and ensures that on tested browsers and Node, it _will_ be redefined
    // and thus short-circuited for future access
    configurable: true,
    enumerable: true,
    // Use a function here, we don't want to capture the outer this, i.e.
    // don't use arrow functions in this context since we have a this inside
    get: function() {
      if (value === void 0) {
        value = creator(item, index, this);
        try {
          Object.defineProperty(this, name, { value });
        } catch {
        }
      }
      return value;
    }
  });
}
function lazyMethods(result, items, creator, getName) {
  for (let i = 0, count = items.length; i < count; i++) {
    lazyMethod(result, items[i], creator, getName, i);
  }
  return result;
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/noop.js
function identity(value) {
  return value;
}
function noop() {
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/logger.js
var logTo = {
  debug: "log",
  error: "error",
  log: "log",
  warn: "warn"
};
function formatOther(value) {
  if (value && isObject(value) && value.constructor === Object) {
    const result = {};
    for (const [k, v] of Object.entries(value)) {
      result[k] = loggerFormat(v);
    }
    return result;
  }
  return value;
}
function loggerFormat(value) {
  if (Array.isArray(value)) {
    return value.map(loggerFormat);
  } else if (isBn(value)) {
    return value.toString();
  } else if (isU8a(value) || isBuffer(value)) {
    return u8aToHex(u8aToU8a(value));
  }
  return formatOther(value);
}
function formatWithLength(maxLength) {
  return (v) => {
    if (maxLength <= 0) {
      return v;
    }
    const r = `${v}`;
    return r.length < maxLength ? v : `${r.substring(0, maxLength)} ...`;
  };
}
function apply(log, type, values, maxSize = -1) {
  if (values.length === 1 && isFunction(values[0])) {
    const fnResult = values[0]();
    return apply(log, type, Array.isArray(fnResult) ? fnResult : [fnResult], maxSize);
  }
  console[logTo[log]](formatDate(/* @__PURE__ */ new Date()), type, ...values.map(loggerFormat).map(formatWithLength(maxSize)));
}
function isDebugOn(e, type) {
  return !!e && (e === "*" || type === e || e.endsWith("*") && type.startsWith(e.slice(0, -1)));
}
function isDebugOff(e, type) {
  return !!e && (e.startsWith("-") && (type === e.slice(1) || e.endsWith("*") && type.startsWith(e.slice(1, -1))));
}
function getDebugFlag(env, type) {
  let flag = false;
  for (const e of env) {
    if (isDebugOn(e, type)) {
      flag = true;
    } else if (isDebugOff(e, type)) {
      flag = false;
    }
  }
  return flag;
}
function parseEnv(type) {
  const maxSize = parseInt(xglobal.process?.env?.["DEBUG_MAX"] || "-1", 10);
  return [
    getDebugFlag((xglobal.process?.env?.["DEBUG"] || "").toLowerCase().split(","), type),
    isNaN(maxSize) ? -1 : maxSize
  ];
}
function logger(origin) {
  const type = `${origin.toUpperCase()}:`.padStart(16);
  const [isDebug, maxSize] = parseEnv(origin.toLowerCase());
  return {
    debug: isDebug ? (...values) => apply("debug", type, values, maxSize) : noop,
    error: (...values) => apply("error", type, values),
    log: (...values) => apply("log", type, values),
    noop,
    warn: (...values) => apply("warn", type, values)
  };
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/nextTick.js
function nextTick(onExec, onError) {
  setTimeout(() => {
    Promise.resolve().then(() => {
      onExec();
    }).catch((error) => {
      if (onError) {
        onError(error);
      } else {
        console.error(error);
      }
    });
  }, 0);
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/object/clear.js
function objectClear(value) {
  const keys2 = Object.keys(value);
  for (let i = 0, count = keys2.length; i < count; i++) {
    delete value[keys2[i]];
  }
  return value;
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/object/spread.js
function objectSpread(dest, ...sources) {
  const filterProps = /* @__PURE__ */ new Set(["__proto__", "constructor", "prototype"]);
  for (let i = 0, count = sources.length; i < count; i++) {
    const src = sources[i];
    if (src) {
      if (typeof src.entries === "function") {
        for (const [key, value] of src.entries()) {
          if (!filterProps.has(key)) {
            dest[key] = value;
          }
        }
      } else {
        const sanitizedSrc = /* @__PURE__ */ Object.create(null);
        for (const [key, value] of Object.entries(src)) {
          if (!filterProps.has(key)) {
            sanitizedSrc[key] = value;
          }
        }
        Object.assign(dest, sanitizedSrc);
      }
    }
  }
  return dest;
}

// node_modules/@polkadot/api/node_modules/@polkadot/util/string/camelCase.js
var CC_TO_UP = new Array(256);
var CC_TO_LO = new Array(256);
for (let i = 0, count = CC_TO_UP.length; i < count; i++) {
  CC_TO_LO[i] = String.fromCharCode(i).toLowerCase();
  CC_TO_UP[i] = String.fromCharCode(i).toUpperCase();
}
function formatAllCaps(w) {
  return w.slice(0, w.length - 1).toLowerCase() + CC_TO_UP[w.charCodeAt(w.length - 1)];
}
function converter(format) {
  return (value) => {
    const parts = value.replace(/[-_., ]+/g, " ").trim().split(" ");
    let result = "";
    for (let i = 0, count = parts.length; i < count; i++) {
      const w = parts[i];
      result += format(/^[\dA-Z]+$/.test(w) ? w.toLowerCase() : w.replace(/^[\dA-Z]{2,}[^a-z]/, formatAllCaps), i);
    }
    return result;
  };
}
var stringCamelCase = /* @__PURE__ */ converter((w, i) => (i ? CC_TO_UP[w.charCodeAt(0)] : CC_TO_LO[w.charCodeAt(0)]) + w.slice(1));

// node_modules/@polkadot/api/node_modules/@polkadot/util/string/lowerFirst.js
function converter2(map3) {
  return (value) => value ? map3[value.charCodeAt(0)] + value.slice(1) : "";
}
var stringUpperFirst = /* @__PURE__ */ converter2(CC_TO_UP);

// node_modules/@polkadot/api/packageInfo.js
var packageInfo = { name: "@polkadot/api", path: import.meta && import.meta.url ? new URL(import.meta.url).pathname.substring(0, new URL(import.meta.url).pathname.lastIndexOf("/") + 1) : "auto", type: "esm", version: "14.3.1" };

// node_modules/@polkadot/x-textdecoder/node_modules/@polkadot/x-global/index.js
function evaluateThis2(fn) {
  return fn("return this");
}
var xglobal2 = typeof globalThis !== "undefined" ? globalThis : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : evaluateThis2(Function);
function extractGlobal2(name, fallback) {
  return typeof xglobal2[name] === "undefined" ? fallback : xglobal2[name];
}

// node_modules/@polkadot/x-textdecoder/fallback.js
var TextDecoder2 = class {
  __encoding;
  constructor(encoding) {
    this.__encoding = encoding;
  }
  decode(value) {
    let result = "";
    for (let i = 0, count = value.length; i < count; i++) {
      result += String.fromCharCode(value[i]);
    }
    return result;
  }
};

// node_modules/@polkadot/x-textdecoder/browser.js
var TextDecoder3 = /* @__PURE__ */ extractGlobal2("TextDecoder", TextDecoder2);

// node_modules/@polkadot/x-textencoder/node_modules/@polkadot/x-global/index.js
function evaluateThis3(fn) {
  return fn("return this");
}
var xglobal3 = typeof globalThis !== "undefined" ? globalThis : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : evaluateThis3(Function);
function extractGlobal3(name, fallback) {
  return typeof xglobal3[name] === "undefined" ? fallback : xglobal3[name];
}

// node_modules/@polkadot/x-textencoder/fallback.js
var TextEncoder4 = class {
  encode(value) {
    const count = value.length;
    const u8a = new Uint8Array(count);
    for (let i = 0; i < count; i++) {
      u8a[i] = value.charCodeAt(i);
    }
    return u8a;
  }
};

// node_modules/@polkadot/x-textencoder/browser.js
var TextEncoder5 = /* @__PURE__ */ extractGlobal3("TextEncoder", TextEncoder4);

// node_modules/@polkadot/util/string/toU8a.js
var encoder2 = new TextEncoder5();
function stringToU8a2(value) {
  return value ? encoder2.encode(value.toString()) : new Uint8Array();
}

// node_modules/@polkadot/util/u8a/toString.js
var decoder = new TextDecoder3("utf-8");
function u8aToString(value) {
  return value ? decoder.decode(value) : "";
}

// node_modules/@polkadot/x-randomvalues/node_modules/@polkadot/x-global/index.js
function evaluateThis4(fn) {
  return fn("return this");
}
var xglobal4 = typeof globalThis !== "undefined" ? globalThis : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : evaluateThis4(Function);

// node_modules/@polkadot/x-randomvalues/browser.js
var crypto2 = xglobal4.crypto;
function getRandomValues2(arr) {
  return crypto2.getRandomValues(arr);
}

// node_modules/@polkadot/wasm-bridge/wbg.js
var DEFAULT_CRYPTO = { getRandomValues: getRandomValues2 };
var DEFAULT_SELF = { crypto: DEFAULT_CRYPTO };
var Wbg = class {
  __internal__bridge;
  constructor(bridge2) {
    this.__internal__bridge = bridge2;
  }
  /** @internal */
  abort = () => {
    throw new Error("abort");
  };
  /** @internal */
  __wbindgen_is_undefined = (idx) => {
    return this.__internal__bridge.getObject(idx) === void 0;
  };
  /** @internal */
  __wbindgen_throw = (ptr, len) => {
    throw new Error(this.__internal__bridge.getString(ptr, len));
  };
  /** @internal */
  __wbg_self_1b7a39e3a92c949c = () => {
    return this.__internal__bridge.addObject(DEFAULT_SELF);
  };
  /** @internal */
  __wbg_require_604837428532a733 = (ptr, len) => {
    throw new Error(`Unable to require ${this.__internal__bridge.getString(ptr, len)}`);
  };
  /** @internal */
  __wbg_crypto_968f1772287e2df0 = (_idx) => {
    return this.__internal__bridge.addObject(DEFAULT_CRYPTO);
  };
  /** @internal */
  __wbg_getRandomValues_a3d34b4fee3c2869 = (_idx) => {
    return this.__internal__bridge.addObject(DEFAULT_CRYPTO.getRandomValues);
  };
  /** @internal */
  __wbg_getRandomValues_f5e14ab7ac8e995d = (_arg0, ptr, len) => {
    DEFAULT_CRYPTO.getRandomValues(this.__internal__bridge.getU8a(ptr, len));
  };
  /** @internal */
  __wbg_randomFillSync_d5bd2d655fdf256a = (_idx, _ptr, _len) => {
    throw new Error("randomFillsync is not available");
  };
  /** @internal */
  __wbindgen_object_drop_ref = (idx) => {
    this.__internal__bridge.takeObject(idx);
  };
};

// node_modules/@polkadot/wasm-bridge/bridge.js
var Bridge = class {
  __internal__createWasm;
  __internal__heap;
  __internal__wbg;
  __internal__cachegetInt32;
  __internal__cachegetUint8;
  __internal__heapNext;
  __internal__wasm;
  __internal__wasmError;
  __internal__wasmPromise;
  __internal__type;
  constructor(createWasm2) {
    this.__internal__createWasm = createWasm2;
    this.__internal__cachegetInt32 = null;
    this.__internal__cachegetUint8 = null;
    this.__internal__heap = new Array(32).fill(void 0).concat(void 0, null, true, false);
    this.__internal__heapNext = this.__internal__heap.length;
    this.__internal__type = "none";
    this.__internal__wasm = null;
    this.__internal__wasmError = null;
    this.__internal__wasmPromise = null;
    this.__internal__wbg = { ...new Wbg(this) };
  }
  /** @description Returns the init error */
  get error() {
    return this.__internal__wasmError;
  }
  /** @description Returns the init type */
  get type() {
    return this.__internal__type;
  }
  /** @description Returns the created wasm interface */
  get wasm() {
    return this.__internal__wasm;
  }
  /** @description Performs the wasm initialization */
  async init(createWasm2) {
    if (!this.__internal__wasmPromise || createWasm2) {
      this.__internal__wasmPromise = (createWasm2 || this.__internal__createWasm)(this.__internal__wbg);
    }
    const { error, type, wasm } = await this.__internal__wasmPromise;
    this.__internal__type = type;
    this.__internal__wasm = wasm;
    this.__internal__wasmError = error;
    return this.__internal__wasm;
  }
  /**
   * @internal
   * @description Gets an object from the heap
   */
  getObject(idx) {
    return this.__internal__heap[idx];
  }
  /**
   * @internal
   * @description Removes an object from the heap
   */
  dropObject(idx) {
    if (idx < 36) {
      return;
    }
    this.__internal__heap[idx] = this.__internal__heapNext;
    this.__internal__heapNext = idx;
  }
  /**
   * @internal
   * @description Retrieves and removes an object to the heap
   */
  takeObject(idx) {
    const ret = this.getObject(idx);
    this.dropObject(idx);
    return ret;
  }
  /**
   * @internal
   * @description Adds an object to the heap
   */
  addObject(obj) {
    if (this.__internal__heapNext === this.__internal__heap.length) {
      this.__internal__heap.push(this.__internal__heap.length + 1);
    }
    const idx = this.__internal__heapNext;
    this.__internal__heapNext = this.__internal__heap[idx];
    this.__internal__heap[idx] = obj;
    return idx;
  }
  /**
   * @internal
   * @description Retrieve an Int32 in the WASM interface
   */
  getInt32() {
    if (this.__internal__cachegetInt32 === null || this.__internal__cachegetInt32.buffer !== this.__internal__wasm.memory.buffer) {
      this.__internal__cachegetInt32 = new Int32Array(this.__internal__wasm.memory.buffer);
    }
    return this.__internal__cachegetInt32;
  }
  /**
   * @internal
   * @description Retrieve an Uint8Array in the WASM interface
   */
  getUint8() {
    if (this.__internal__cachegetUint8 === null || this.__internal__cachegetUint8.buffer !== this.__internal__wasm.memory.buffer) {
      this.__internal__cachegetUint8 = new Uint8Array(this.__internal__wasm.memory.buffer);
    }
    return this.__internal__cachegetUint8;
  }
  /**
   * @internal
   * @description Retrieves an Uint8Array in the WASM interface
   */
  getU8a(ptr, len) {
    return this.getUint8().subarray(ptr / 1, ptr / 1 + len);
  }
  /**
   * @internal
   * @description Retrieves a string in the WASM interface
   */
  getString(ptr, len) {
    return u8aToString(this.getU8a(ptr, len));
  }
  /**
   * @internal
   * @description Allocates an Uint8Array in the WASM interface
   */
  allocU8a(arg) {
    const ptr = this.__internal__wasm.__wbindgen_malloc(arg.length * 1);
    this.getUint8().set(arg, ptr / 1);
    return [ptr, arg.length];
  }
  /**
   * @internal
   * @description Allocates a string in the WASM interface
   */
  allocString(arg) {
    return this.allocU8a(stringToU8a2(arg));
  }
  /**
   * @internal
   * @description Retrieves an Uint8Array from the WASM interface
   */
  resultU8a() {
    const r0 = this.getInt32()[8 / 4 + 0];
    const r1 = this.getInt32()[8 / 4 + 1];
    const ret = this.getU8a(r0, r1).slice();
    this.__internal__wasm.__wbindgen_free(r0, r1 * 1);
    return ret;
  }
  /**
   * @internal
   * @description Retrieve a string from the WASM interface
   */
  resultString() {
    return u8aToString(this.resultU8a());
  }
};

// node_modules/@polkadot/wasm-bridge/init.js
function createWasmFn(root, wasmBytes2, asmFn) {
  return async (wbg) => {
    const result = {
      error: null,
      type: "none",
      wasm: null
    };
    try {
      if (!wasmBytes2?.length) {
        throw new Error("No WebAssembly provided for initialization");
      } else if (typeof WebAssembly !== "object" || typeof WebAssembly.instantiate !== "function") {
        throw new Error("WebAssembly is not available in your environment");
      }
      const source = await WebAssembly.instantiate(wasmBytes2, { wbg });
      result.wasm = source.instance.exports;
      result.type = "wasm";
    } catch (error) {
      if (typeof asmFn === "function") {
        result.wasm = asmFn(wbg);
        result.type = "asm";
      } else {
        result.error = `FATAL: Unable to initialize @polkadot/wasm-${root}:: ${error.message}`;
        console.error(result.error);
      }
    }
    return result;
  };
}

// node_modules/@polkadot/wasm-util/base64.js
var CHR2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
var map = new Array(256);
for (let i = 0, count = CHR2.length; i < count; i++) {
  map[CHR2.charCodeAt(i)] = i;
}
function base64Decode(data, out) {
  let byte = 0;
  let bits2 = 0;
  let pos = -1;
  for (let i = 0, last2 = out.length - 1; pos !== last2; i++) {
    byte = byte << 6 | map[data.charCodeAt(i)];
    if ((bits2 += 6) >= 8) {
      out[++pos] = byte >>> (bits2 -= 8) & 255;
    }
  }
  return out;
}

// node_modules/@polkadot/wasm-util/fflate.js
var u8 = Uint8Array;
var u16 = Uint16Array;
var u32 = Uint32Array;
var clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
var fleb = new u8([
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  1,
  1,
  1,
  1,
  2,
  2,
  2,
  2,
  3,
  3,
  3,
  3,
  4,
  4,
  4,
  4,
  5,
  5,
  5,
  5,
  0,
  /* unused */
  0,
  0,
  /* impossible */
  0
]);
var fdeb = new u8([
  0,
  0,
  0,
  0,
  1,
  1,
  2,
  2,
  3,
  3,
  4,
  4,
  5,
  5,
  6,
  6,
  7,
  7,
  8,
  8,
  9,
  9,
  10,
  10,
  11,
  11,
  12,
  12,
  13,
  13,
  /* unused */
  0,
  0
]);
var freb = (eb, start) => {
  const b = new u16(31);
  for (let i = 0; i < 31; ++i) {
    b[i] = start += 1 << eb[i - 1];
  }
  const r = new u32(b[30]);
  for (let i = 1; i < 30; ++i) {
    for (let j = b[i]; j < b[i + 1]; ++j) {
      r[j] = j - b[i] << 5 | i;
    }
  }
  return [b, r];
};
var [fl, revfl] = freb(fleb, 2);
fl[28] = 258, revfl[258] = 28;
var [fd] = freb(fdeb, 0);
var rev = new u16(32768);
for (let i = 0; i < 32768; ++i) {
  let x = (i & 43690) >>> 1 | (i & 21845) << 1;
  x = (x & 52428) >>> 2 | (x & 13107) << 2;
  x = (x & 61680) >>> 4 | (x & 3855) << 4;
  rev[i] = ((x & 65280) >>> 8 | (x & 255) << 8) >>> 1;
}
var hMap = (cd, mb, r) => {
  const s = cd.length;
  let i = 0;
  const l13 = new u16(mb);
  for (; i < s; ++i) {
    if (cd[i])
      ++l13[cd[i] - 1];
  }
  const le = new u16(mb);
  for (i = 1; i < mb; ++i) {
    le[i] = le[i - 1] + l13[i - 1] << 1;
  }
  let co;
  if (r) {
    co = new u16(1 << mb);
    const rvb = 15 - mb;
    for (i = 0; i < s; ++i) {
      if (cd[i]) {
        const sv = i << 4 | cd[i];
        const r2 = mb - cd[i];
        let v = le[cd[i] - 1]++ << r2;
        for (const m = v | (1 << r2) - 1; v <= m; ++v) {
          co[rev[v] >> rvb] = sv;
        }
      }
    }
  } else {
    co = new u16(s);
    for (i = 0; i < s; ++i) {
      if (cd[i]) {
        co[i] = rev[le[cd[i] - 1]++] >> 15 - cd[i];
      }
    }
  }
  return co;
};
var flt = new u8(288);
for (let i = 0; i < 144; ++i)
  flt[i] = 8;
for (let i = 144; i < 256; ++i)
  flt[i] = 9;
for (let i = 256; i < 280; ++i)
  flt[i] = 7;
for (let i = 280; i < 288; ++i)
  flt[i] = 8;
var fdt = new u8(32);
for (let i = 0; i < 32; ++i)
  fdt[i] = 5;
var flrm = hMap(flt, 9, 1);
var fdrm = hMap(fdt, 5, 1);
var bits = (d, p, m) => {
  const o = p >>> 3;
  return (d[o] | d[o + 1] << 8) >>> (p & 7) & m;
};
var bits16 = (d, p) => {
  const o = p >>> 3;
  return (d[o] | d[o + 1] << 8 | d[o + 2] << 16) >>> (p & 7);
};
var shft = (p) => (p >>> 3) + (p & 7 && 1);
var slc = (v, s, e) => {
  if (s == null || s < 0)
    s = 0;
  if (e == null || e > v.length)
    e = v.length;
  const n = new (v instanceof u16 ? u16 : v instanceof u32 ? u32 : u8)(e - s);
  n.set(v.subarray(s, e));
  return n;
};
var max = (a) => {
  let m = a[0];
  for (let i = 1, count = a.length; i < count; ++i) {
    if (a[i] > m)
      m = a[i];
  }
  return m;
};
var inflt = (dat, buf, st) => {
  const noSt = !st || st.i;
  if (!st)
    st = {};
  const sl = dat.length;
  const noBuf = !buf || !noSt;
  if (!buf)
    buf = new u8(sl * 3);
  const cbuf = (l13) => {
    let bl = buf.length;
    if (l13 > bl) {
      const nbuf = new u8(Math.max(bl << 1, l13));
      nbuf.set(buf);
      buf = nbuf;
    }
  };
  let final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;
  if (final && !lm)
    return buf;
  const tbts = sl << 3;
  do {
    if (!lm) {
      st.f = final = bits(dat, pos, 1);
      const type = bits(dat, pos + 1, 3);
      pos += 3;
      if (!type) {
        const s = shft(pos) + 4, l13 = dat[s - 4] | dat[s - 3] << 8, t = s + l13;
        if (t > sl) {
          if (noSt)
            throw "unexpected EOF";
          break;
        }
        if (noBuf)
          cbuf(bt + l13);
        buf.set(dat.subarray(s, t), bt);
        st.b = bt += l13, st.p = pos = t << 3;
        continue;
      } else if (type == 1)
        lm = flrm, dm = fdrm, lbt = 9, dbt = 5;
      else if (type == 2) {
        const hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;
        const tl = hLit + bits(dat, pos + 5, 31) + 1;
        pos += 14;
        const ldt = new u8(tl);
        const clt = new u8(19);
        for (let i = 0; i < hcLen; ++i) {
          clt[clim[i]] = bits(dat, pos + i * 3, 7);
        }
        pos += hcLen * 3;
        const clb = max(clt), clbmsk = (1 << clb) - 1;
        if (!noSt && pos + tl * (clb + 7) > tbts)
          break;
        const clm = hMap(clt, clb, 1);
        for (let i = 0; i < tl; ) {
          const r = clm[bits(dat, pos, clbmsk)];
          pos += r & 15;
          const s = r >>> 4;
          if (s < 16) {
            ldt[i++] = s;
          } else {
            let c = 0, n = 0;
            if (s == 16)
              n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];
            else if (s == 17)
              n = 3 + bits(dat, pos, 7), pos += 3;
            else if (s == 18)
              n = 11 + bits(dat, pos, 127), pos += 7;
            while (n--)
              ldt[i++] = c;
          }
        }
        const lt2 = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);
        lbt = max(lt2);
        dbt = max(dt);
        lm = hMap(lt2, lbt, 1);
        dm = hMap(dt, dbt, 1);
      } else
        throw "invalid block type";
      if (pos > tbts)
        throw "unexpected EOF";
    }
    if (noBuf)
      cbuf(bt + 131072);
    const lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;
    const mxa = lbt + dbt + 18;
    while (noSt || pos + mxa < tbts) {
      const c = lm[bits16(dat, pos) & lms], sym = c >>> 4;
      pos += c & 15;
      if (pos > tbts)
        throw "unexpected EOF";
      if (!c)
        throw "invalid length/literal";
      if (sym < 256)
        buf[bt++] = sym;
      else if (sym == 256) {
        lm = void 0;
        break;
      } else {
        let add2 = sym - 254;
        if (sym > 264) {
          const i = sym - 257, b = fleb[i];
          add2 = bits(dat, pos, (1 << b) - 1) + fl[i];
          pos += b;
        }
        const d = dm[bits16(dat, pos) & dms], dsym = d >>> 4;
        if (!d)
          throw "invalid distance";
        pos += d & 15;
        let dt = fd[dsym];
        if (dsym > 3) {
          const b = fdeb[dsym];
          dt += bits16(dat, pos) & (1 << b) - 1, pos += b;
        }
        if (pos > tbts)
          throw "unexpected EOF";
        if (noBuf)
          cbuf(bt + 131072);
        const end = bt + add2;
        for (; bt < end; bt += 4) {
          buf[bt] = buf[bt - dt];
          buf[bt + 1] = buf[bt + 1 - dt];
          buf[bt + 2] = buf[bt + 2 - dt];
          buf[bt + 3] = buf[bt + 3 - dt];
        }
        bt = end;
      }
    }
    st.l = lm, st.p = pos, st.b = bt;
    if (lm)
      final = 1, st.m = lbt, st.d = dm, st.n = dbt;
  } while (!final);
  return bt == buf.length ? buf : slc(buf, 0, bt);
};
var zlv = (d) => {
  if ((d[0] & 15) != 8 || d[0] >>> 4 > 7 || (d[0] << 8 | d[1]) % 31)
    throw "invalid zlib data";
  if (d[1] & 32)
    throw "invalid zlib data: preset dictionaries not supported";
};
function unzlibSync(data, out) {
  return inflt((zlv(data), data.subarray(2, -4)), out);
}

// node_modules/@polkadot/wasm-crypto-wasm/bundle.js
var import_bytes = __toESM(require_bytes(), 1);
var wasmBytes = /* @__PURE__ */ unzlibSync(base64Decode(import_bytes.bytes, new Uint8Array(import_bytes.lenIn)), new Uint8Array(import_bytes.lenOut));

// node_modules/@polkadot/wasm-crypto-init/wasm.js
var createWasm = /* @__PURE__ */ createWasmFn("crypto", wasmBytes, null);

// node_modules/@polkadot/wasm-crypto/init.js
var bridge = new Bridge(createWasm);
async function initBridge(createWasm2) {
  return bridge.init(createWasm2);
}

// node_modules/@polkadot/wasm-crypto/bundle.js
function withWasm(fn) {
  return (...params) => {
    if (!bridge.wasm) {
      throw new Error("The WASM interface has not been initialized. Ensure that you wait for the initialization Promise with waitReady() from @polkadot/wasm-crypto (or cryptoWaitReady() from @polkadot/util-crypto) before attempting to use WASM-only interfaces.");
    }
    return fn(bridge.wasm, ...params);
  };
}
var secp256k1Expand = /* @__PURE__ */ withWasm((wasm, pubkey) => {
  wasm.ext_secp_pub_expand(8, ...bridge.allocU8a(pubkey));
  return bridge.resultU8a();
});
var blake2b = /* @__PURE__ */ withWasm((wasm, data, key, size) => {
  wasm.ext_blake2b(8, ...bridge.allocU8a(data), ...bridge.allocU8a(key), size);
  return bridge.resultU8a();
});
var keccak256 = /* @__PURE__ */ withWasm((wasm, data) => {
  wasm.ext_keccak256(8, ...bridge.allocU8a(data));
  return bridge.resultU8a();
});
var keccak512 = /* @__PURE__ */ withWasm((wasm, data) => {
  wasm.ext_keccak512(8, ...bridge.allocU8a(data));
  return bridge.resultU8a();
});
var twox = /* @__PURE__ */ withWasm((wasm, data, rounds) => {
  wasm.ext_twox(8, ...bridge.allocU8a(data), rounds);
  return bridge.resultU8a();
});
function isReady() {
  return !!bridge.wasm;
}
async function waitReady() {
  try {
    const wasm = await initBridge();
    return !!wasm;
  } catch {
    return false;
  }
}

// node_modules/@scure/base/lib/esm/index.js
function isBytes(a) {
  return a instanceof Uint8Array || ArrayBuffer.isView(a) && a.constructor.name === "Uint8Array";
}
function isArrayOf(isString7, arr) {
  if (!Array.isArray(arr))
    return false;
  if (arr.length === 0)
    return true;
  if (isString7) {
    return arr.every((item) => typeof item === "string");
  } else {
    return arr.every((item) => Number.isSafeInteger(item));
  }
}
function astr(label, input) {
  if (typeof input !== "string")
    throw new Error(`${label}: string expected`);
  return true;
}
function anumber(n) {
  if (!Number.isSafeInteger(n))
    throw new Error(`invalid integer: ${n}`);
}
function aArr(input) {
  if (!Array.isArray(input))
    throw new Error("array expected");
}
function astrArr(label, input) {
  if (!isArrayOf(true, input))
    throw new Error(`${label}: array of strings expected`);
}
function anumArr(label, input) {
  if (!isArrayOf(false, input))
    throw new Error(`${label}: array of numbers expected`);
}
// @__NO_SIDE_EFFECTS__
function chain(...args) {
  const id = (a) => a;
  const wrap = (a, b) => (c) => a(b(c));
  const encode = args.map((x) => x.encode).reduceRight(wrap, id);
  const decode2 = args.map((x) => x.decode).reduce(wrap, id);
  return { encode, decode: decode2 };
}
// @__NO_SIDE_EFFECTS__
function alphabet(letters) {
  const lettersA = typeof letters === "string" ? letters.split("") : letters;
  const len = lettersA.length;
  astrArr("alphabet", lettersA);
  const indexes3 = new Map(lettersA.map((l13, i) => [l13, i]));
  return {
    encode: (digits) => {
      aArr(digits);
      return digits.map((i) => {
        if (!Number.isSafeInteger(i) || i < 0 || i >= len)
          throw new Error(`alphabet.encode: digit index outside alphabet "${i}". Allowed: ${letters}`);
        return lettersA[i];
      });
    },
    decode: (input) => {
      aArr(input);
      return input.map((letter) => {
        astr("alphabet.decode", letter);
        const i = indexes3.get(letter);
        if (i === void 0)
          throw new Error(`Unknown letter: "${letter}". Allowed: ${letters}`);
        return i;
      });
    }
  };
}
// @__NO_SIDE_EFFECTS__
function join(separator = "") {
  astr("join", separator);
  return {
    encode: (from2) => {
      astrArr("join.decode", from2);
      return from2.join(separator);
    },
    decode: (to) => {
      astr("join.decode", to);
      return to.split(separator);
    }
  };
}
function convertRadix(data, from2, to) {
  if (from2 < 2)
    throw new Error(`convertRadix: invalid from=${from2}, base cannot be less than 2`);
  if (to < 2)
    throw new Error(`convertRadix: invalid to=${to}, base cannot be less than 2`);
  aArr(data);
  if (!data.length)
    return [];
  let pos = 0;
  const res = [];
  const digits = Array.from(data, (d) => {
    anumber(d);
    if (d < 0 || d >= from2)
      throw new Error(`invalid integer: ${d}`);
    return d;
  });
  const dlen = digits.length;
  while (true) {
    let carry = 0;
    let done = true;
    for (let i = pos; i < dlen; i++) {
      const digit = digits[i];
      const fromCarry = from2 * carry;
      const digitBase = fromCarry + digit;
      if (!Number.isSafeInteger(digitBase) || fromCarry / from2 !== carry || digitBase - digit !== fromCarry) {
        throw new Error("convertRadix: carry overflow");
      }
      const div = digitBase / to;
      carry = digitBase % to;
      const rounded = Math.floor(div);
      digits[i] = rounded;
      if (!Number.isSafeInteger(rounded) || rounded * to + carry !== digitBase)
        throw new Error("convertRadix: carry overflow");
      if (!done)
        continue;
      else if (!rounded)
        pos = i;
      else
        done = false;
    }
    res.push(carry);
    if (done)
      break;
  }
  for (let i = 0; i < data.length - 1 && data[i] === 0; i++)
    res.push(0);
  return res.reverse();
}
// @__NO_SIDE_EFFECTS__
function radix(num) {
  anumber(num);
  const _256 = 2 ** 8;
  return {
    encode: (bytes2) => {
      if (!isBytes(bytes2))
        throw new Error("radix.encode input should be Uint8Array");
      return convertRadix(Array.from(bytes2), _256, num);
    },
    decode: (digits) => {
      anumArr("radix.decode", digits);
      return Uint8Array.from(convertRadix(digits, num, _256));
    }
  };
}
var genBase58 = /* @__NO_SIDE_EFFECTS__ */ (abc) => /* @__PURE__ */ chain(/* @__PURE__ */ radix(58), /* @__PURE__ */ alphabet(abc), /* @__PURE__ */ join(""));
var base58 = /* @__PURE__ */ genBase58("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");

// node_modules/@noble/hashes/esm/crypto.js
var crypto3 = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : void 0;

// node_modules/@noble/hashes/esm/utils.js
function isBytes2(a) {
  return a instanceof Uint8Array || ArrayBuffer.isView(a) && a.constructor.name === "Uint8Array";
}
function anumber2(n) {
  if (!Number.isSafeInteger(n) || n < 0)
    throw new Error("positive integer expected, got " + n);
}
function abytes(b, ...lengths) {
  if (!isBytes2(b))
    throw new Error("Uint8Array expected");
  if (lengths.length > 0 && !lengths.includes(b.length))
    throw new Error("Uint8Array expected of length " + lengths + ", got length=" + b.length);
}
function ahash(h) {
  if (typeof h !== "function" || typeof h.create !== "function")
    throw new Error("Hash should be wrapped by utils.createHasher");
  anumber2(h.outputLen);
  anumber2(h.blockLen);
}
function aexists(instance, checkFinished = true) {
  if (instance.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (checkFinished && instance.finished)
    throw new Error("Hash#digest() has already been called");
}
function aoutput(out, instance) {
  abytes(out);
  const min = instance.outputLen;
  if (out.length < min) {
    throw new Error("digestInto() expects output buffer of length at least " + min);
  }
}
function u322(arr) {
  return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
}
function clean(...arrays) {
  for (let i = 0; i < arrays.length; i++) {
    arrays[i].fill(0);
  }
}
function createView(arr) {
  return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
}
function rotr(word, shift) {
  return word << 32 - shift | word >>> shift;
}
var isLE = /* @__PURE__ */ (() => new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68)();
function byteSwap(word) {
  return word << 24 & 4278190080 | word << 8 & 16711680 | word >>> 8 & 65280 | word >>> 24 & 255;
}
var swap8IfBE = isLE ? (n) => n : (n) => byteSwap(n);
function byteSwap32(arr) {
  for (let i = 0; i < arr.length; i++) {
    arr[i] = byteSwap(arr[i]);
  }
  return arr;
}
var swap32IfBE = isLE ? (u) => u : byteSwap32;
var hasHexBuiltin = /* @__PURE__ */ (() => (
  // @ts-ignore
  typeof Uint8Array.from([]).toHex === "function" && typeof Uint8Array.fromHex === "function"
))();
var hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, "0"));
function bytesToHex(bytes2) {
  abytes(bytes2);
  if (hasHexBuiltin)
    return bytes2.toHex();
  let hex8 = "";
  for (let i = 0; i < bytes2.length; i++) {
    hex8 += hexes[bytes2[i]];
  }
  return hex8;
}
var asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };
function asciiToBase16(ch) {
  if (ch >= asciis._0 && ch <= asciis._9)
    return ch - asciis._0;
  if (ch >= asciis.A && ch <= asciis.F)
    return ch - (asciis.A - 10);
  if (ch >= asciis.a && ch <= asciis.f)
    return ch - (asciis.a - 10);
  return;
}
function hexToBytes(hex8) {
  if (typeof hex8 !== "string")
    throw new Error("hex string expected, got " + typeof hex8);
  if (hasHexBuiltin)
    return Uint8Array.fromHex(hex8);
  const hl = hex8.length;
  const al = hl / 2;
  if (hl % 2)
    throw new Error("hex string expected, got unpadded hex of length " + hl);
  const array = new Uint8Array(al);
  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {
    const n1 = asciiToBase16(hex8.charCodeAt(hi));
    const n2 = asciiToBase16(hex8.charCodeAt(hi + 1));
    if (n1 === void 0 || n2 === void 0) {
      const char = hex8[hi] + hex8[hi + 1];
      throw new Error('hex string expected, got non-hex character "' + char + '" at index ' + hi);
    }
    array[ai] = n1 * 16 + n2;
  }
  return array;
}
function utf8ToBytes(str) {
  if (typeof str !== "string")
    throw new Error("string expected");
  return new Uint8Array(new TextEncoder().encode(str));
}
function toBytes(data) {
  if (typeof data === "string")
    data = utf8ToBytes(data);
  abytes(data);
  return data;
}
function concatBytes(...arrays) {
  let sum = 0;
  for (let i = 0; i < arrays.length; i++) {
    const a = arrays[i];
    abytes(a);
    sum += a.length;
  }
  const res = new Uint8Array(sum);
  for (let i = 0, pad = 0; i < arrays.length; i++) {
    const a = arrays[i];
    res.set(a, pad);
    pad += a.length;
  }
  return res;
}
var Hash = class {
};
function createHasher(hashCons) {
  const hashC = (msg) => hashCons().update(toBytes(msg)).digest();
  const tmp = hashCons();
  hashC.outputLen = tmp.outputLen;
  hashC.blockLen = tmp.blockLen;
  hashC.create = () => hashCons();
  return hashC;
}
function createOptHasher(hashCons) {
  const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
  const tmp = hashCons({});
  hashC.outputLen = tmp.outputLen;
  hashC.blockLen = tmp.blockLen;
  hashC.create = (opts) => hashCons(opts);
  return hashC;
}
function randomBytes(bytesLength = 32) {
  if (crypto3 && typeof crypto3.getRandomValues === "function") {
    return crypto3.getRandomValues(new Uint8Array(bytesLength));
  }
  if (crypto3 && typeof crypto3.randomBytes === "function") {
    return Uint8Array.from(crypto3.randomBytes(bytesLength));
  }
  throw new Error("crypto.getRandomValues must be defined");
}

// node_modules/@noble/hashes/esm/_blake.js
var BSIGMA = /* @__PURE__ */ Uint8Array.from([
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  14,
  10,
  4,
  8,
  9,
  15,
  13,
  6,
  1,
  12,
  0,
  2,
  11,
  7,
  5,
  3,
  11,
  8,
  12,
  0,
  5,
  2,
  15,
  13,
  10,
  14,
  3,
  6,
  7,
  1,
  9,
  4,
  7,
  9,
  3,
  1,
  13,
  12,
  11,
  14,
  2,
  6,
  5,
  10,
  4,
  0,
  15,
  8,
  9,
  0,
  5,
  7,
  2,
  4,
  10,
  15,
  14,
  1,
  11,
  12,
  6,
  8,
  3,
  13,
  2,
  12,
  6,
  10,
  0,
  11,
  8,
  3,
  4,
  13,
  7,
  5,
  15,
  14,
  1,
  9,
  12,
  5,
  1,
  15,
  14,
  13,
  4,
  10,
  0,
  7,
  6,
  3,
  9,
  2,
  8,
  11,
  13,
  11,
  7,
  14,
  12,
  1,
  3,
  9,
  5,
  0,
  15,
  4,
  8,
  6,
  2,
  10,
  6,
  15,
  14,
  9,
  11,
  3,
  0,
  8,
  12,
  2,
  13,
  7,
  1,
  4,
  10,
  5,
  10,
  2,
  8,
  4,
  7,
  6,
  1,
  5,
  15,
  11,
  9,
  14,
  3,
  12,
  13,
  0,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  14,
  10,
  4,
  8,
  9,
  15,
  13,
  6,
  1,
  12,
  0,
  2,
  11,
  7,
  5,
  3,
  // Blake1, unused in others
  11,
  8,
  12,
  0,
  5,
  2,
  15,
  13,
  10,
  14,
  3,
  6,
  7,
  1,
  9,
  4,
  7,
  9,
  3,
  1,
  13,
  12,
  11,
  14,
  2,
  6,
  5,
  10,
  4,
  0,
  15,
  8,
  9,
  0,
  5,
  7,
  2,
  4,
  10,
  15,
  14,
  1,
  11,
  12,
  6,
  8,
  3,
  13,
  2,
  12,
  6,
  10,
  0,
  11,
  8,
  3,
  4,
  13,
  7,
  5,
  15,
  14,
  1,
  9
]);

// node_modules/@noble/hashes/esm/_md.js
function setBigUint64(view, byteOffset, value, isLE2) {
  if (typeof view.setBigUint64 === "function")
    return view.setBigUint64(byteOffset, value, isLE2);
  const _32n3 = BigInt(32);
  const _u32_max = BigInt(4294967295);
  const wh = Number(value >> _32n3 & _u32_max);
  const wl = Number(value & _u32_max);
  const h = isLE2 ? 4 : 0;
  const l13 = isLE2 ? 0 : 4;
  view.setUint32(byteOffset + h, wh, isLE2);
  view.setUint32(byteOffset + l13, wl, isLE2);
}
function Chi(a, b, c) {
  return a & b ^ ~a & c;
}
function Maj(a, b, c) {
  return a & b ^ a & c ^ b & c;
}
var HashMD = class extends Hash {
  constructor(blockLen, outputLen, padOffset, isLE2) {
    super();
    this.finished = false;
    this.length = 0;
    this.pos = 0;
    this.destroyed = false;
    this.blockLen = blockLen;
    this.outputLen = outputLen;
    this.padOffset = padOffset;
    this.isLE = isLE2;
    this.buffer = new Uint8Array(blockLen);
    this.view = createView(this.buffer);
  }
  update(data) {
    aexists(this);
    data = toBytes(data);
    abytes(data);
    const { view, buffer, blockLen } = this;
    const len = data.length;
    for (let pos = 0; pos < len; ) {
      const take2 = Math.min(blockLen - this.pos, len - pos);
      if (take2 === blockLen) {
        const dataView = createView(data);
        for (; blockLen <= len - pos; pos += blockLen)
          this.process(dataView, pos);
        continue;
      }
      buffer.set(data.subarray(pos, pos + take2), this.pos);
      this.pos += take2;
      pos += take2;
      if (this.pos === blockLen) {
        this.process(view, 0);
        this.pos = 0;
      }
    }
    this.length += data.length;
    this.roundClean();
    return this;
  }
  digestInto(out) {
    aexists(this);
    aoutput(out, this);
    this.finished = true;
    const { buffer, view, blockLen, isLE: isLE2 } = this;
    let { pos } = this;
    buffer[pos++] = 128;
    clean(this.buffer.subarray(pos));
    if (this.padOffset > blockLen - pos) {
      this.process(view, 0);
      pos = 0;
    }
    for (let i = pos; i < blockLen; i++)
      buffer[i] = 0;
    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE2);
    this.process(view, 0);
    const oview = createView(out);
    const len = this.outputLen;
    if (len % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const outLen = len / 4;
    const state = this.get();
    if (outLen > state.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let i = 0; i < outLen; i++)
      oview.setUint32(4 * i, state[i], isLE2);
  }
  digest() {
    const { buffer, outputLen } = this;
    this.digestInto(buffer);
    const res = buffer.slice(0, outputLen);
    this.destroy();
    return res;
  }
  _cloneInto(to) {
    to || (to = new this.constructor());
    to.set(...this.get());
    const { blockLen, buffer, length, finished, destroyed, pos } = this;
    to.destroyed = destroyed;
    to.finished = finished;
    to.length = length;
    to.pos = pos;
    if (length % blockLen)
      to.buffer.set(buffer);
    return to;
  }
  clone() {
    return this._cloneInto();
  }
};
var SHA256_IV = /* @__PURE__ */ Uint32Array.from([
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
]);

// node_modules/@noble/hashes/esm/_u64.js
var U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);
var _32n = /* @__PURE__ */ BigInt(32);
function fromBig(n, le = false) {
  if (le)
    return { h: Number(n & U32_MASK64), l: Number(n >> _32n & U32_MASK64) };
  return { h: Number(n >> _32n & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };
}
function split(lst, le = false) {
  const len = lst.length;
  let Ah = new Uint32Array(len);
  let Al = new Uint32Array(len);
  for (let i = 0; i < len; i++) {
    const { h, l: l13 } = fromBig(lst[i], le);
    [Ah[i], Al[i]] = [h, l13];
  }
  return [Ah, Al];
}
var rotrSH = (h, l13, s) => h >>> s | l13 << 32 - s;
var rotrSL = (h, l13, s) => h << 32 - s | l13 >>> s;
var rotrBH = (h, l13, s) => h << 64 - s | l13 >>> s - 32;
var rotrBL = (h, l13, s) => h >>> s - 32 | l13 << 64 - s;
var rotr32H = (_h, l13) => l13;
var rotr32L = (h, _l) => h;
var rotlSH = (h, l13, s) => h << s | l13 >>> 32 - s;
var rotlSL = (h, l13, s) => l13 << s | h >>> 32 - s;
var rotlBH = (h, l13, s) => l13 << s - 32 | h >>> 64 - s;
var rotlBL = (h, l13, s) => h << s - 32 | l13 >>> 64 - s;
function add(Ah, Al, Bh, Bl) {
  const l13 = (Al >>> 0) + (Bl >>> 0);
  return { h: Ah + Bh + (l13 / 2 ** 32 | 0) | 0, l: l13 | 0 };
}
var add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
var add3H = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;

// node_modules/@noble/hashes/esm/blake2.js
var B2B_IV = /* @__PURE__ */ Uint32Array.from([
  4089235720,
  1779033703,
  2227873595,
  3144134277,
  4271175723,
  1013904242,
  1595750129,
  2773480762,
  2917565137,
  1359893119,
  725511199,
  2600822924,
  4215389547,
  528734635,
  327033209,
  1541459225
]);
var BBUF = /* @__PURE__ */ new Uint32Array(32);
function G1b(a, b, c, d, msg, x) {
  const Xl = msg[x], Xh = msg[x + 1];
  let Al = BBUF[2 * a], Ah = BBUF[2 * a + 1];
  let Bl = BBUF[2 * b], Bh = BBUF[2 * b + 1];
  let Cl = BBUF[2 * c], Ch = BBUF[2 * c + 1];
  let Dl = BBUF[2 * d], Dh = BBUF[2 * d + 1];
  let ll = add3L(Al, Bl, Xl);
  Ah = add3H(ll, Ah, Bh, Xh);
  Al = ll | 0;
  ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });
  ({ Dh, Dl } = { Dh: rotr32H(Dh, Dl), Dl: rotr32L(Dh, Dl) });
  ({ h: Ch, l: Cl } = add(Ch, Cl, Dh, Dl));
  ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });
  ({ Bh, Bl } = { Bh: rotrSH(Bh, Bl, 24), Bl: rotrSL(Bh, Bl, 24) });
  BBUF[2 * a] = Al, BBUF[2 * a + 1] = Ah;
  BBUF[2 * b] = Bl, BBUF[2 * b + 1] = Bh;
  BBUF[2 * c] = Cl, BBUF[2 * c + 1] = Ch;
  BBUF[2 * d] = Dl, BBUF[2 * d + 1] = Dh;
}
function G2b(a, b, c, d, msg, x) {
  const Xl = msg[x], Xh = msg[x + 1];
  let Al = BBUF[2 * a], Ah = BBUF[2 * a + 1];
  let Bl = BBUF[2 * b], Bh = BBUF[2 * b + 1];
  let Cl = BBUF[2 * c], Ch = BBUF[2 * c + 1];
  let Dl = BBUF[2 * d], Dh = BBUF[2 * d + 1];
  let ll = add3L(Al, Bl, Xl);
  Ah = add3H(ll, Ah, Bh, Xh);
  Al = ll | 0;
  ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });
  ({ Dh, Dl } = { Dh: rotrSH(Dh, Dl, 16), Dl: rotrSL(Dh, Dl, 16) });
  ({ h: Ch, l: Cl } = add(Ch, Cl, Dh, Dl));
  ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });
  ({ Bh, Bl } = { Bh: rotrBH(Bh, Bl, 63), Bl: rotrBL(Bh, Bl, 63) });
  BBUF[2 * a] = Al, BBUF[2 * a + 1] = Ah;
  BBUF[2 * b] = Bl, BBUF[2 * b + 1] = Bh;
  BBUF[2 * c] = Cl, BBUF[2 * c + 1] = Ch;
  BBUF[2 * d] = Dl, BBUF[2 * d + 1] = Dh;
}
function checkBlake2Opts(outputLen, opts = {}, keyLen, saltLen, persLen) {
  anumber2(keyLen);
  if (outputLen < 0 || outputLen > keyLen)
    throw new Error("outputLen bigger than keyLen");
  const { key, salt, personalization } = opts;
  if (key !== void 0 && (key.length < 1 || key.length > keyLen))
    throw new Error("key length must be undefined or 1.." + keyLen);
  if (salt !== void 0 && salt.length !== saltLen)
    throw new Error("salt must be undefined or " + saltLen);
  if (personalization !== void 0 && personalization.length !== persLen)
    throw new Error("personalization must be undefined or " + persLen);
}
var BLAKE2 = class extends Hash {
  constructor(blockLen, outputLen) {
    super();
    this.finished = false;
    this.destroyed = false;
    this.length = 0;
    this.pos = 0;
    anumber2(blockLen);
    anumber2(outputLen);
    this.blockLen = blockLen;
    this.outputLen = outputLen;
    this.buffer = new Uint8Array(blockLen);
    this.buffer32 = u322(this.buffer);
  }
  update(data) {
    aexists(this);
    data = toBytes(data);
    abytes(data);
    const { blockLen, buffer, buffer32 } = this;
    const len = data.length;
    const offset = data.byteOffset;
    const buf = data.buffer;
    for (let pos = 0; pos < len; ) {
      if (this.pos === blockLen) {
        swap32IfBE(buffer32);
        this.compress(buffer32, 0, false);
        swap32IfBE(buffer32);
        this.pos = 0;
      }
      const take2 = Math.min(blockLen - this.pos, len - pos);
      const dataOffset = offset + pos;
      if (take2 === blockLen && !(dataOffset % 4) && pos + take2 < len) {
        const data32 = new Uint32Array(buf, dataOffset, Math.floor((len - pos) / 4));
        swap32IfBE(data32);
        for (let pos32 = 0; pos + blockLen < len; pos32 += buffer32.length, pos += blockLen) {
          this.length += blockLen;
          this.compress(data32, pos32, false);
        }
        swap32IfBE(data32);
        continue;
      }
      buffer.set(data.subarray(pos, pos + take2), this.pos);
      this.pos += take2;
      this.length += take2;
      pos += take2;
    }
    return this;
  }
  digestInto(out) {
    aexists(this);
    aoutput(out, this);
    const { pos, buffer32 } = this;
    this.finished = true;
    clean(this.buffer.subarray(pos));
    swap32IfBE(buffer32);
    this.compress(buffer32, 0, true);
    swap32IfBE(buffer32);
    const out32 = u322(out);
    this.get().forEach((v, i) => out32[i] = swap8IfBE(v));
  }
  digest() {
    const { buffer, outputLen } = this;
    this.digestInto(buffer);
    const res = buffer.slice(0, outputLen);
    this.destroy();
    return res;
  }
  _cloneInto(to) {
    const { buffer, length, finished, destroyed, outputLen, pos } = this;
    to || (to = new this.constructor({ dkLen: outputLen }));
    to.set(...this.get());
    to.buffer.set(buffer);
    to.destroyed = destroyed;
    to.finished = finished;
    to.length = length;
    to.pos = pos;
    to.outputLen = outputLen;
    return to;
  }
  clone() {
    return this._cloneInto();
  }
};
var BLAKE2b = class extends BLAKE2 {
  constructor(opts = {}) {
    const olen = opts.dkLen === void 0 ? 64 : opts.dkLen;
    super(128, olen);
    this.v0l = B2B_IV[0] | 0;
    this.v0h = B2B_IV[1] | 0;
    this.v1l = B2B_IV[2] | 0;
    this.v1h = B2B_IV[3] | 0;
    this.v2l = B2B_IV[4] | 0;
    this.v2h = B2B_IV[5] | 0;
    this.v3l = B2B_IV[6] | 0;
    this.v3h = B2B_IV[7] | 0;
    this.v4l = B2B_IV[8] | 0;
    this.v4h = B2B_IV[9] | 0;
    this.v5l = B2B_IV[10] | 0;
    this.v5h = B2B_IV[11] | 0;
    this.v6l = B2B_IV[12] | 0;
    this.v6h = B2B_IV[13] | 0;
    this.v7l = B2B_IV[14] | 0;
    this.v7h = B2B_IV[15] | 0;
    checkBlake2Opts(olen, opts, 64, 16, 16);
    let { key, personalization, salt } = opts;
    let keyLength = 0;
    if (key !== void 0) {
      key = toBytes(key);
      keyLength = key.length;
    }
    this.v0l ^= this.outputLen | keyLength << 8 | 1 << 16 | 1 << 24;
    if (salt !== void 0) {
      salt = toBytes(salt);
      const slt = u322(salt);
      this.v4l ^= swap8IfBE(slt[0]);
      this.v4h ^= swap8IfBE(slt[1]);
      this.v5l ^= swap8IfBE(slt[2]);
      this.v5h ^= swap8IfBE(slt[3]);
    }
    if (personalization !== void 0) {
      personalization = toBytes(personalization);
      const pers = u322(personalization);
      this.v6l ^= swap8IfBE(pers[0]);
      this.v6h ^= swap8IfBE(pers[1]);
      this.v7l ^= swap8IfBE(pers[2]);
      this.v7h ^= swap8IfBE(pers[3]);
    }
    if (key !== void 0) {
      const tmp = new Uint8Array(this.blockLen);
      tmp.set(key);
      this.update(tmp);
    }
  }
  // prettier-ignore
  get() {
    let { v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h } = this;
    return [v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h];
  }
  // prettier-ignore
  set(v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h) {
    this.v0l = v0l | 0;
    this.v0h = v0h | 0;
    this.v1l = v1l | 0;
    this.v1h = v1h | 0;
    this.v2l = v2l | 0;
    this.v2h = v2h | 0;
    this.v3l = v3l | 0;
    this.v3h = v3h | 0;
    this.v4l = v4l | 0;
    this.v4h = v4h | 0;
    this.v5l = v5l | 0;
    this.v5h = v5h | 0;
    this.v6l = v6l | 0;
    this.v6h = v6h | 0;
    this.v7l = v7l | 0;
    this.v7h = v7h | 0;
  }
  compress(msg, offset, isLast) {
    this.get().forEach((v, i) => BBUF[i] = v);
    BBUF.set(B2B_IV, 16);
    let { h, l: l13 } = fromBig(BigInt(this.length));
    BBUF[24] = B2B_IV[8] ^ l13;
    BBUF[25] = B2B_IV[9] ^ h;
    if (isLast) {
      BBUF[28] = ~BBUF[28];
      BBUF[29] = ~BBUF[29];
    }
    let j = 0;
    const s = BSIGMA;
    for (let i = 0; i < 12; i++) {
      G1b(0, 4, 8, 12, msg, offset + 2 * s[j++]);
      G2b(0, 4, 8, 12, msg, offset + 2 * s[j++]);
      G1b(1, 5, 9, 13, msg, offset + 2 * s[j++]);
      G2b(1, 5, 9, 13, msg, offset + 2 * s[j++]);
      G1b(2, 6, 10, 14, msg, offset + 2 * s[j++]);
      G2b(2, 6, 10, 14, msg, offset + 2 * s[j++]);
      G1b(3, 7, 11, 15, msg, offset + 2 * s[j++]);
      G2b(3, 7, 11, 15, msg, offset + 2 * s[j++]);
      G1b(0, 5, 10, 15, msg, offset + 2 * s[j++]);
      G2b(0, 5, 10, 15, msg, offset + 2 * s[j++]);
      G1b(1, 6, 11, 12, msg, offset + 2 * s[j++]);
      G2b(1, 6, 11, 12, msg, offset + 2 * s[j++]);
      G1b(2, 7, 8, 13, msg, offset + 2 * s[j++]);
      G2b(2, 7, 8, 13, msg, offset + 2 * s[j++]);
      G1b(3, 4, 9, 14, msg, offset + 2 * s[j++]);
      G2b(3, 4, 9, 14, msg, offset + 2 * s[j++]);
    }
    this.v0l ^= BBUF[0] ^ BBUF[16];
    this.v0h ^= BBUF[1] ^ BBUF[17];
    this.v1l ^= BBUF[2] ^ BBUF[18];
    this.v1h ^= BBUF[3] ^ BBUF[19];
    this.v2l ^= BBUF[4] ^ BBUF[20];
    this.v2h ^= BBUF[5] ^ BBUF[21];
    this.v3l ^= BBUF[6] ^ BBUF[22];
    this.v3h ^= BBUF[7] ^ BBUF[23];
    this.v4l ^= BBUF[8] ^ BBUF[24];
    this.v4h ^= BBUF[9] ^ BBUF[25];
    this.v5l ^= BBUF[10] ^ BBUF[26];
    this.v5h ^= BBUF[11] ^ BBUF[27];
    this.v6l ^= BBUF[12] ^ BBUF[28];
    this.v6h ^= BBUF[13] ^ BBUF[29];
    this.v7l ^= BBUF[14] ^ BBUF[30];
    this.v7h ^= BBUF[15] ^ BBUF[31];
    clean(BBUF);
  }
  destroy() {
    this.destroyed = true;
    clean(this.buffer32);
    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
var blake2b2 = /* @__PURE__ */ createOptHasher((opts) => new BLAKE2b(opts));

// node_modules/@noble/hashes/esm/blake2b.js
var blake2b3 = blake2b2;

// node_modules/@substrate/ss58-registry/esm/index.js
var esm_default = [
  {
    "prefix": 0,
    "network": "polkadot",
    "displayName": "Polkadot Relay Chain",
    "symbols": [
      "DOT"
    ],
    "decimals": [
      10
    ],
    "standardAccount": "*25519",
    "website": "https://polkadot.network"
  },
  {
    "prefix": 1,
    "network": "BareSr25519",
    "displayName": "Bare 32-bit Schnorr/Ristretto (S/R 25519) public key.",
    "symbols": [],
    "decimals": [],
    "standardAccount": "Sr25519",
    "website": null
  },
  {
    "prefix": 2,
    "network": "kusama",
    "displayName": "Kusama Relay Chain",
    "symbols": [
      "KSM"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://kusama.network"
  },
  {
    "prefix": 3,
    "network": "BareEd25519",
    "displayName": "Bare 32-bit Ed25519 public key.",
    "symbols": [],
    "decimals": [],
    "standardAccount": "Ed25519",
    "website": null
  },
  {
    "prefix": 4,
    "network": "katalchain",
    "displayName": "Katal Chain",
    "symbols": [],
    "decimals": [],
    "standardAccount": "*25519",
    "website": null
  },
  {
    "prefix": 5,
    "network": "astar",
    "displayName": "Astar Network",
    "symbols": [
      "ASTR"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://astar.network"
  },
  {
    "prefix": 6,
    "network": "bifrost",
    "displayName": "Bifrost",
    "symbols": [
      "BNC"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://bifrost.finance/"
  },
  {
    "prefix": 7,
    "network": "edgeware",
    "displayName": "Edgeware",
    "symbols": [
      "EDG"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://edgewa.re"
  },
  {
    "prefix": 8,
    "network": "karura",
    "displayName": "Karura",
    "symbols": [
      "KAR"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://karura.network/"
  },
  {
    "prefix": 9,
    "network": "reynolds",
    "displayName": "Laminar Reynolds Canary",
    "symbols": [
      "REY"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "http://laminar.network/"
  },
  {
    "prefix": 10,
    "network": "acala",
    "displayName": "Acala",
    "symbols": [
      "ACA"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://acala.network/"
  },
  {
    "prefix": 11,
    "network": "laminar",
    "displayName": "Laminar",
    "symbols": [
      "LAMI"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "http://laminar.network/"
  },
  {
    "prefix": 12,
    "network": "polymesh",
    "displayName": "Polymesh",
    "symbols": [
      "POLYX"
    ],
    "decimals": [
      6
    ],
    "standardAccount": "*25519",
    "website": "https://polymath.network/"
  },
  {
    "prefix": 13,
    "network": "integritee",
    "displayName": "Integritee",
    "symbols": [
      "TEER"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://integritee.network"
  },
  {
    "prefix": 14,
    "network": "totem",
    "displayName": "Totem",
    "symbols": [
      "TOTEM"
    ],
    "decimals": [
      0
    ],
    "standardAccount": "*25519",
    "website": "https://totemaccounting.com"
  },
  {
    "prefix": 15,
    "network": "synesthesia",
    "displayName": "Synesthesia",
    "symbols": [
      "SYN"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://synesthesia.network/"
  },
  {
    "prefix": 16,
    "network": "kulupu",
    "displayName": "Kulupu",
    "symbols": [
      "KLP"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://kulupu.network/"
  },
  {
    "prefix": 17,
    "network": "dark",
    "displayName": "Dark Mainnet",
    "symbols": [],
    "decimals": [],
    "standardAccount": "*25519",
    "website": null
  },
  {
    "prefix": 18,
    "network": "darwinia",
    "displayName": "Darwinia Network",
    "symbols": [
      "RING"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "secp256k1",
    "website": "https://darwinia.network"
  },
  {
    "prefix": 19,
    "network": "watr",
    "displayName": "Watr Protocol",
    "symbols": [
      "WATR"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://www.watr.org"
  },
  {
    "prefix": 20,
    "network": "stafi",
    "displayName": "Stafi",
    "symbols": [
      "FIS"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://stafi.io"
  },
  {
    "prefix": 21,
    "network": "karmachain",
    "displayName": "Karmacoin",
    "symbols": [
      "KCOIN"
    ],
    "decimals": [
      6
    ],
    "standardAccount": "*25519",
    "website": "https://karmaco.in"
  },
  {
    "prefix": 22,
    "network": "dock-pos-mainnet",
    "displayName": "Dock Mainnet",
    "symbols": [
      "DCK"
    ],
    "decimals": [
      6
    ],
    "standardAccount": "*25519",
    "website": "https://dock.io"
  },
  {
    "prefix": 23,
    "network": "shift",
    "displayName": "ShiftNrg",
    "symbols": [],
    "decimals": [],
    "standardAccount": "*25519",
    "website": null
  },
  {
    "prefix": 24,
    "network": "zero",
    "displayName": "ZERO",
    "symbols": [
      "ZERO"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://zero.io"
  },
  {
    "prefix": 25,
    "network": "zero-alphaville",
    "displayName": "ZERO Alphaville",
    "symbols": [
      "ZERO"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://zero.io"
  },
  {
    "prefix": 26,
    "network": "jupiter",
    "displayName": "Jupiter",
    "symbols": [
      "jDOT"
    ],
    "decimals": [
      10
    ],
    "standardAccount": "*25519",
    "website": "https://jupiter.patract.io"
  },
  {
    "prefix": 27,
    "network": "kabocha",
    "displayName": "Kabocha",
    "symbols": [
      "KAB"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://kabocha.network"
  },
  {
    "prefix": 28,
    "network": "subsocial",
    "displayName": "Subsocial",
    "symbols": [],
    "decimals": [],
    "standardAccount": "*25519",
    "website": null
  },
  {
    "prefix": 29,
    "network": "cord",
    "displayName": "CORD Network",
    "symbols": [
      "DHI",
      "WAY"
    ],
    "decimals": [
      12,
      12
    ],
    "standardAccount": "*25519",
    "website": "https://cord.network/"
  },
  {
    "prefix": 30,
    "network": "phala",
    "displayName": "Phala Network",
    "symbols": [
      "PHA"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://phala.network"
  },
  {
    "prefix": 31,
    "network": "litentry",
    "displayName": "Litentry Network",
    "symbols": [
      "LIT"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://litentry.com/"
  },
  {
    "prefix": 32,
    "network": "robonomics",
    "displayName": "Robonomics",
    "symbols": [
      "XRT"
    ],
    "decimals": [
      9
    ],
    "standardAccount": "*25519",
    "website": "https://robonomics.network"
  },
  {
    "prefix": 33,
    "network": "datahighway",
    "displayName": "DataHighway",
    "symbols": [],
    "decimals": [],
    "standardAccount": "*25519",
    "website": null
  },
  {
    "prefix": 34,
    "network": "ares",
    "displayName": "Ares Protocol",
    "symbols": [
      "ARES"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://www.aresprotocol.com/"
  },
  {
    "prefix": 35,
    "network": "vln",
    "displayName": "Valiu Liquidity Network",
    "symbols": [
      "USDv"
    ],
    "decimals": [
      15
    ],
    "standardAccount": "*25519",
    "website": "https://valiu.com/"
  },
  {
    "prefix": 36,
    "network": "centrifuge",
    "displayName": "Centrifuge Chain",
    "symbols": [
      "CFG"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://centrifuge.io/"
  },
  {
    "prefix": 37,
    "network": "nodle",
    "displayName": "Nodle Chain",
    "symbols": [
      "NODL"
    ],
    "decimals": [
      11
    ],
    "standardAccount": "*25519",
    "website": "https://nodle.io/"
  },
  {
    "prefix": 38,
    "network": "kilt",
    "displayName": "KILT Spiritnet",
    "symbols": [
      "KILT"
    ],
    "decimals": [
      15
    ],
    "standardAccount": "*25519",
    "website": "https://kilt.io/"
  },
  {
    "prefix": 39,
    "network": "mathchain",
    "displayName": "MathChain mainnet",
    "symbols": [
      "MATH"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://mathwallet.org"
  },
  {
    "prefix": 40,
    "network": "mathchain-testnet",
    "displayName": "MathChain testnet",
    "symbols": [
      "MATH"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://mathwallet.org"
  },
  {
    "prefix": 41,
    "network": "polimec",
    "displayName": "Polimec Protocol",
    "symbols": [
      "PLMC"
    ],
    "decimals": [
      10
    ],
    "standardAccount": "*25519",
    "website": "https://www.polimec.org/"
  },
  {
    "prefix": 42,
    "network": "substrate",
    "displayName": "Substrate",
    "symbols": [],
    "decimals": [],
    "standardAccount": "*25519",
    "website": "https://substrate.io/"
  },
  {
    "prefix": 43,
    "network": "BareSecp256k1",
    "displayName": "Bare 32-bit ECDSA SECP-256k1 public key.",
    "symbols": [],
    "decimals": [],
    "standardAccount": "secp256k1",
    "website": null
  },
  {
    "prefix": 44,
    "network": "chainx",
    "displayName": "ChainX",
    "symbols": [
      "PCX"
    ],
    "decimals": [
      8
    ],
    "standardAccount": "*25519",
    "website": "https://chainx.org/"
  },
  {
    "prefix": 45,
    "network": "uniarts",
    "displayName": "UniArts Network",
    "symbols": [
      "UART",
      "UINK"
    ],
    "decimals": [
      12,
      12
    ],
    "standardAccount": "*25519",
    "website": "https://uniarts.me"
  },
  {
    "prefix": 46,
    "network": "reserved46",
    "displayName": "This prefix is reserved.",
    "symbols": [],
    "decimals": [],
    "standardAccount": null,
    "website": null
  },
  {
    "prefix": 47,
    "network": "reserved47",
    "displayName": "This prefix is reserved.",
    "symbols": [],
    "decimals": [],
    "standardAccount": null,
    "website": null
  },
  {
    "prefix": 48,
    "network": "neatcoin",
    "displayName": "Neatcoin Mainnet",
    "symbols": [
      "NEAT"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://neatcoin.org"
  },
  {
    "prefix": 49,
    "network": "picasso",
    "displayName": "Picasso",
    "symbols": [
      "PICA"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://picasso.composable.finance"
  },
  {
    "prefix": 50,
    "network": "composable",
    "displayName": "Composable Finance",
    "symbols": [
      "LAYR"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://composable.finance"
  },
  {
    "prefix": 51,
    "network": "oak",
    "displayName": "OAK Network",
    "symbols": [
      "OAK",
      "TUR"
    ],
    "decimals": [
      10,
      10
    ],
    "standardAccount": "*25519",
    "website": "https://oak.tech"
  },
  {
    "prefix": 52,
    "network": "KICO",
    "displayName": "KICO",
    "symbols": [
      "KICO"
    ],
    "decimals": [
      14
    ],
    "standardAccount": "*25519",
    "website": "https://dico.io"
  },
  {
    "prefix": 53,
    "network": "DICO",
    "displayName": "DICO",
    "symbols": [
      "DICO"
    ],
    "decimals": [
      14
    ],
    "standardAccount": "*25519",
    "website": "https://dico.io"
  },
  {
    "prefix": 54,
    "network": "cere",
    "displayName": "Cere Network",
    "symbols": [
      "CERE"
    ],
    "decimals": [
      10
    ],
    "standardAccount": "*25519",
    "website": "https://cere.network"
  },
  {
    "prefix": 55,
    "network": "xxnetwork",
    "displayName": "xx network",
    "symbols": [
      "XX"
    ],
    "decimals": [
      9
    ],
    "standardAccount": "*25519",
    "website": "https://xx.network"
  },
  {
    "prefix": 56,
    "network": "pendulum",
    "displayName": "Pendulum chain",
    "symbols": [
      "PEN"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://pendulumchain.org/"
  },
  {
    "prefix": 57,
    "network": "amplitude",
    "displayName": "Amplitude chain",
    "symbols": [
      "AMPE"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://pendulumchain.org/"
  },
  {
    "prefix": 58,
    "network": "eternal-civilization",
    "displayName": "Eternal Civilization",
    "symbols": [
      "ECC"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "http://www.ysknfr.cn/"
  },
  {
    "prefix": 63,
    "network": "hydradx",
    "displayName": "Hydration",
    "symbols": [
      "HDX"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://hydration.net"
  },
  {
    "prefix": 65,
    "network": "aventus",
    "displayName": "Aventus Mainnet",
    "symbols": [
      "AVT"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://aventus.io"
  },
  {
    "prefix": 66,
    "network": "crust",
    "displayName": "Crust Network",
    "symbols": [
      "CRU"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://crust.network"
  },
  {
    "prefix": 67,
    "network": "genshiro",
    "displayName": "Genshiro Network",
    "symbols": [
      "GENS",
      "EQD",
      "LPT0"
    ],
    "decimals": [
      9,
      9,
      9
    ],
    "standardAccount": "*25519",
    "website": "https://genshiro.equilibrium.io"
  },
  {
    "prefix": 68,
    "network": "equilibrium",
    "displayName": "Equilibrium Network",
    "symbols": [
      "EQ"
    ],
    "decimals": [
      9
    ],
    "standardAccount": "*25519",
    "website": "https://equilibrium.io"
  },
  {
    "prefix": 69,
    "network": "sora",
    "displayName": "SORA Network",
    "symbols": [
      "XOR"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://sora.org"
  },
  {
    "prefix": 71,
    "network": "p3d",
    "displayName": "3DP network",
    "symbols": [
      "P3D"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://3dpass.org"
  },
  {
    "prefix": 72,
    "network": "p3dt",
    "displayName": "3DP test network",
    "symbols": [
      "P3Dt"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://3dpass.org"
  },
  {
    "prefix": 73,
    "network": "zeitgeist",
    "displayName": "Zeitgeist",
    "symbols": [
      "ZTG"
    ],
    "decimals": [
      10
    ],
    "standardAccount": "*25519",
    "website": "https://zeitgeist.pm"
  },
  {
    "prefix": 77,
    "network": "manta",
    "displayName": "Manta network",
    "symbols": [
      "MANTA"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://manta.network"
  },
  {
    "prefix": 78,
    "network": "calamari",
    "displayName": "Calamari: Manta Canary Network",
    "symbols": [
      "KMA"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://manta.network"
  },
  {
    "prefix": 81,
    "network": "sora_dot_para",
    "displayName": "SORA Polkadot Parachain",
    "symbols": [
      "XOR"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://sora.org"
  },
  {
    "prefix": 88,
    "network": "polkadex",
    "displayName": "Polkadex Mainnet",
    "symbols": [
      "PDEX"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://polkadex.trade"
  },
  {
    "prefix": 89,
    "network": "polkadexparachain",
    "displayName": "Polkadex Parachain",
    "symbols": [
      "PDEX"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://polkadex.trade"
  },
  {
    "prefix": 90,
    "network": "frequency",
    "displayName": "Frequency",
    "symbols": [
      "FRQCY"
    ],
    "decimals": [
      8
    ],
    "standardAccount": "*25519",
    "website": "https://www.frequency.xyz"
  },
  {
    "prefix": 92,
    "network": "anmol",
    "displayName": "Anmol Network",
    "symbols": [
      "ANML"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://anmol.network/"
  },
  {
    "prefix": 93,
    "network": "fragnova",
    "displayName": "Fragnova Network",
    "symbols": [
      "NOVA"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://fragnova.com"
  },
  {
    "prefix": 98,
    "network": "polkasmith",
    "displayName": "PolkaSmith Canary Network",
    "symbols": [
      "PKS"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://polkafoundry.com"
  },
  {
    "prefix": 99,
    "network": "polkafoundry",
    "displayName": "PolkaFoundry Network",
    "symbols": [
      "PKF"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://polkafoundry.com"
  },
  {
    "prefix": 100,
    "network": "ibtida",
    "displayName": "Anmol Network Ibtida Canary network",
    "symbols": [
      "IANML"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://anmol.network/"
  },
  {
    "prefix": 101,
    "network": "origintrail-parachain",
    "displayName": "OriginTrail Parachain",
    "symbols": [
      "OTP"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://parachain.origintrail.io/"
  },
  {
    "prefix": 105,
    "network": "pontem-network",
    "displayName": "Pontem Network",
    "symbols": [
      "PONT"
    ],
    "decimals": [
      10
    ],
    "standardAccount": "*25519",
    "website": "https://pontem.network"
  },
  {
    "prefix": 110,
    "network": "heiko",
    "displayName": "Heiko",
    "symbols": [
      "HKO"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://parallel.fi/"
  },
  {
    "prefix": 113,
    "network": "integritee-incognito",
    "displayName": "Integritee Incognito",
    "symbols": [],
    "decimals": [],
    "standardAccount": "*25519",
    "website": "https://integritee.network"
  },
  {
    "prefix": 117,
    "network": "tinker",
    "displayName": "Tinker",
    "symbols": [
      "TNKR"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://invarch.network"
  },
  {
    "prefix": 126,
    "network": "joystream",
    "displayName": "Joystream",
    "symbols": [
      "JOY"
    ],
    "decimals": [
      10
    ],
    "standardAccount": "*25519",
    "website": "https://www.joystream.org"
  },
  {
    "prefix": 128,
    "network": "clover",
    "displayName": "Clover Finance",
    "symbols": [
      "CLV"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://clover.finance"
  },
  {
    "prefix": 129,
    "network": "dorafactory-polkadot",
    "displayName": "Dorafactory Polkadot Network",
    "symbols": [
      "DORA"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://dorafactory.org"
  },
  {
    "prefix": 131,
    "network": "litmus",
    "displayName": "Litmus Network",
    "symbols": [
      "LIT"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://litentry.com/"
  },
  {
    "prefix": 136,
    "network": "altair",
    "displayName": "Altair",
    "symbols": [
      "AIR"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://centrifuge.io/"
  },
  {
    "prefix": 137,
    "network": "vara",
    "displayName": "Vara Network",
    "symbols": [
      "VARA"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://vara.network/"
  },
  {
    "prefix": 172,
    "network": "parallel",
    "displayName": "Parallel",
    "symbols": [
      "PARA"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://parallel.fi/"
  },
  {
    "prefix": 252,
    "network": "social-network",
    "displayName": "Social Network",
    "symbols": [
      "NET"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://social.network"
  },
  {
    "prefix": 255,
    "network": "quartz_mainnet",
    "displayName": "QUARTZ by UNIQUE",
    "symbols": [
      "QTZ"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://unique.network"
  },
  {
    "prefix": 268,
    "network": "pioneer_network",
    "displayName": "Pioneer Network by Bit.Country",
    "symbols": [
      "NEER"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://bit.country"
  },
  {
    "prefix": 420,
    "network": "sora_kusama_para",
    "displayName": "SORA Kusama Parachain",
    "symbols": [
      "XOR"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://sora.org"
  },
  {
    "prefix": 440,
    "network": "allfeat_network",
    "displayName": "Allfeat Network",
    "symbols": [
      "AFT"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://allfeat.network"
  },
  {
    "prefix": 666,
    "network": "metaquity_network",
    "displayName": "Metaquity Network",
    "symbols": [
      "MQTY"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://metaquity.xyz/"
  },
  {
    "prefix": 777,
    "network": "curio",
    "displayName": "Curio",
    "symbols": [
      "CGT"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://parachain.capitaldex.exchange/"
  },
  {
    "prefix": 789,
    "network": "geek",
    "displayName": "GEEK Network",
    "symbols": [
      "GEEK"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://geek.gl"
  },
  {
    "prefix": 995,
    "network": "ternoa",
    "displayName": "Ternoa",
    "symbols": [
      "CAPS"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://www.ternoa.network"
  },
  {
    "prefix": 1110,
    "network": "efinity",
    "displayName": "Efinity",
    "symbols": [
      "EFI"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://efinity.io/"
  },
  {
    "prefix": 1221,
    "network": "peaq",
    "displayName": "Peaq Network",
    "symbols": [
      "PEAQ"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "Sr25519",
    "website": "https://www.peaq.network/"
  },
  {
    "prefix": 1222,
    "network": "krest",
    "displayName": "Krest Network",
    "symbols": [
      "KREST"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "Sr25519",
    "website": "https://www.peaq.network/"
  },
  {
    "prefix": 1284,
    "network": "moonbeam",
    "displayName": "Moonbeam",
    "symbols": [
      "GLMR"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "secp256k1",
    "website": "https://moonbeam.network"
  },
  {
    "prefix": 1285,
    "network": "moonriver",
    "displayName": "Moonriver",
    "symbols": [
      "MOVR"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "secp256k1",
    "website": "https://moonbeam.network"
  },
  {
    "prefix": 1328,
    "network": "ajuna",
    "displayName": "Ajuna Network",
    "symbols": [
      "AJUN"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://ajuna.io"
  },
  {
    "prefix": 1337,
    "network": "bajun",
    "displayName": "Bajun Network",
    "symbols": [
      "BAJU"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://ajuna.io"
  },
  {
    "prefix": 1516,
    "network": "societal",
    "displayName": "Societal",
    "symbols": [
      "SCTL"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://www.sctl.xyz"
  },
  {
    "prefix": 1985,
    "network": "seals",
    "displayName": "Seals Network",
    "symbols": [
      "SEAL"
    ],
    "decimals": [
      9
    ],
    "standardAccount": "*25519",
    "website": "https://seals.app"
  },
  {
    "prefix": 2007,
    "network": "kapex",
    "displayName": "Kapex",
    "symbols": [
      "KAPEX"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://totemaccounting.com"
  },
  {
    "prefix": 2009,
    "network": "cloudwalk_mainnet",
    "displayName": "CloudWalk Network Mainnet",
    "symbols": [
      "CWN"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://explorer.mainnet.cloudwalk.io"
  },
  {
    "prefix": 2021,
    "network": "logion",
    "displayName": "logion network",
    "symbols": [
      "LGNT"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://logion.network"
  },
  {
    "prefix": 2024,
    "network": "vow-chain",
    "displayName": "Enigmatic Smile",
    "symbols": [
      "VOW"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://www.vow.foundation/"
  },
  {
    "prefix": 2032,
    "network": "interlay",
    "displayName": "Interlay",
    "symbols": [
      "INTR"
    ],
    "decimals": [
      10
    ],
    "standardAccount": "*25519",
    "website": "https://interlay.io/"
  },
  {
    "prefix": 2092,
    "network": "kintsugi",
    "displayName": "Kintsugi",
    "symbols": [
      "KINT"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://interlay.io/"
  },
  {
    "prefix": 2106,
    "network": "bitgreen",
    "displayName": "Bitgreen",
    "symbols": [
      "BBB"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://bitgreen.org/"
  },
  {
    "prefix": 2112,
    "network": "chainflip",
    "displayName": "Chainflip",
    "symbols": [
      "FLIP"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://chainflip.io/"
  },
  {
    "prefix": 2199,
    "network": "moonsama",
    "displayName": "Moonsama",
    "symbols": [
      "SAMA"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "secp256k1",
    "website": "https://moonsama.com"
  },
  {
    "prefix": 2206,
    "network": "ICE",
    "displayName": "ICE Network",
    "symbols": [
      "ICY"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://icenetwork.io"
  },
  {
    "prefix": 2207,
    "network": "SNOW",
    "displayName": "SNOW: ICE Canary Network",
    "symbols": [
      "ICZ"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://icenetwork.io"
  },
  {
    "prefix": 2254,
    "network": "subspace_testnet",
    "displayName": "Subspace testnet",
    "symbols": [
      "tSSC"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://subspace.network"
  },
  {
    "prefix": 3333,
    "network": "peerplays",
    "displayName": "Peerplays",
    "symbols": [
      "PPY"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "secp256k1",
    "website": "https://www.peerplays.com/"
  },
  {
    "prefix": 4450,
    "network": "g1",
    "displayName": "\u011E1",
    "symbols": [
      "G1"
    ],
    "decimals": [
      2
    ],
    "standardAccount": "*25519",
    "website": "https://duniter.org"
  },
  {
    "prefix": 5234,
    "network": "humanode",
    "displayName": "Humanode Network",
    "symbols": [
      "HMND"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://humanode.io"
  },
  {
    "prefix": 5845,
    "network": "tangle",
    "displayName": "Tangle Network",
    "symbols": [
      "TNT"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://www.tangle.tools/"
  },
  {
    "prefix": 6094,
    "network": "autonomys",
    "displayName": "Autonomys",
    "symbols": [
      "AI3"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://autonomys.xyz"
  },
  {
    "prefix": 7007,
    "network": "tidefi",
    "displayName": "Tidefi",
    "symbols": [
      "TDFY"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://tidefi.com"
  },
  {
    "prefix": 7013,
    "network": "gm",
    "displayName": "GM",
    "symbols": [
      "FREN",
      "GM",
      "GN"
    ],
    "decimals": [
      12,
      0,
      0
    ],
    "standardAccount": "*25519",
    "website": "https://gmordie.com"
  },
  {
    "prefix": 7306,
    "network": "krigan",
    "displayName": "Krigan Network",
    "symbols": [
      "KRGN"
    ],
    "decimals": [
      9
    ],
    "standardAccount": "*25519",
    "website": "https://krigan.network"
  },
  {
    "prefix": 7391,
    "network": "unique_mainnet",
    "displayName": "Unique Network",
    "symbols": [
      "UNQ"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://unique.network"
  },
  {
    "prefix": 8866,
    "network": "golden_gate",
    "displayName": "Golden Gate",
    "symbols": [
      "GGX"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://ggxchain.io/"
  },
  {
    "prefix": 8883,
    "network": "sapphire_mainnet",
    "displayName": "Sapphire by Unique",
    "symbols": [
      "QTZ"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://unique.network"
  },
  {
    "prefix": 8886,
    "network": "golden_gate_sydney",
    "displayName": "Golden Gate Sydney",
    "symbols": [
      "GGXT"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://ggxchain.io/"
  },
  {
    "prefix": 9072,
    "network": "hashed",
    "displayName": "Hashed Network",
    "symbols": [
      "HASH"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://hashed.network"
  },
  {
    "prefix": 9807,
    "network": "dentnet",
    "displayName": "DENTNet",
    "symbols": [
      "DENTX"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://www.dentnet.io"
  },
  {
    "prefix": 9935,
    "network": "t3rn",
    "displayName": "t3rn",
    "symbols": [
      "TRN"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://t3rn.io/"
  },
  {
    "prefix": 10041,
    "network": "basilisk",
    "displayName": "Basilisk",
    "symbols": [
      "BSX"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://bsx.fi"
  },
  {
    "prefix": 11330,
    "network": "cess-testnet",
    "displayName": "CESS Testnet",
    "symbols": [
      "TCESS"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://cess.cloud"
  },
  {
    "prefix": 11331,
    "network": "cess",
    "displayName": "CESS",
    "symbols": [
      "CESS"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://cess.cloud"
  },
  {
    "prefix": 11486,
    "network": "luhn",
    "displayName": "Luhn Network",
    "symbols": [
      "LUHN"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://luhn.network"
  },
  {
    "prefix": 11820,
    "network": "contextfree",
    "displayName": "Automata ContextFree",
    "symbols": [
      "CTX"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://ata.network"
  },
  {
    "prefix": 12155,
    "network": "impact",
    "displayName": "Impact Protocol Network",
    "symbols": [
      "BSTY"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://impactprotocol.network/"
  },
  {
    "prefix": 12191,
    "network": "nftmart",
    "displayName": "NFTMart",
    "symbols": [
      "NMT"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://nftmart.io"
  },
  {
    "prefix": 12850,
    "network": "analog-timechain",
    "displayName": "Analog Timechain",
    "symbols": [
      "ANLOG"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://analog.one"
  },
  {
    "prefix": 13116,
    "network": "bittensor",
    "displayName": "Bittensor",
    "symbols": [
      "TAO"
    ],
    "decimals": [
      9
    ],
    "standardAccount": "*25519",
    "website": "https://bittensor.com"
  },
  {
    "prefix": 14697,
    "network": "goro",
    "displayName": "GORO Network",
    "symbols": [
      "GORO"
    ],
    "decimals": [
      9
    ],
    "standardAccount": "*25519",
    "website": "https://goro.network"
  },
  {
    "prefix": 14998,
    "network": "mosaic-chain",
    "displayName": "Mosaic Chain",
    "symbols": [
      "MOS"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "*25519",
    "website": "https://mosaicchain.io"
  },
  {
    "prefix": 29972,
    "network": "mythos",
    "displayName": "Mythos",
    "symbols": [
      "MYTH"
    ],
    "decimals": [
      18
    ],
    "standardAccount": "secp256k1",
    "website": "https://mythos.foundation"
  },
  {
    "prefix": 8888,
    "network": "xcavate",
    "displayName": "Xcavate Protocol",
    "symbols": [
      "XCAV"
    ],
    "decimals": [
      12
    ],
    "standardAccount": "*25519",
    "website": "https://xcavate.io/"
  }
];

// node_modules/@polkadot/networks/defaults/genesis.js
var knownGenesis = {
  acala: [
    "0xfc41b9bd8ef8fe53d58c7ea67c794c7ec9a73daf05e6d54b14ff6342c99ba64c"
  ],
  ajuna: [
    "0xe358eb1d11b31255a286c12e44fe6780b7edb171d657905a97e39f71d9c6c3ee"
  ],
  "aleph-node": [
    "0x70255b4d28de0fc4e1a193d7e175ad1ccef431598211c55538f1018651a0344e"
  ],
  astar: [
    "0x9eb76c5184c4ab8679d2d5d819fdf90b9c001403e9e17da2e14b6d8aec4029c6"
  ],
  basilisk: [
    "0xa85cfb9b9fd4d622a5b28289a02347af987d8f73fa3108450e2b4a11c1ce5755"
  ],
  bifrost: [
    "0x262e1b2ad728475fd6fe88e62d34c200abe6fd693931ddad144059b1eb884e5b"
  ],
  "bifrost-kusama": [
    "0x9f28c6a68e0fc9646eff64935684f6eeeece527e37bbe1f213d22caa1d9d6bed"
  ],
  bittensor: [
    "0x2f0555cc76fc2840a25a6ea3b9637146806f1f44b090c175ffde2a7e5ab36c03"
  ],
  centrifuge: [
    "0xb3db41421702df9a7fcac62b53ffeac85f7853cc4e689e0b93aeb3db18c09d82",
    "0x67dddf2673b69e5f875f6f25277495834398eafd67f492e09f3f3345e003d1b5"
  ],
  cere: [
    "0x81443836a9a24caaa23f1241897d1235717535711d1d3fe24eae4fdc942c092c"
  ],
  composable: [
    "0xdaab8df776eb52ec604a5df5d388bb62a050a0aaec4556a64265b9d42755552d"
  ],
  creditcoin3: [
    "0x4436a7d64e363df85e065a894721002a86643283f9707338bf195d360ba2ee71",
    // cc3 mainnet
    "0xfc4ec97a1c1f119c4353aecb4a17c7c0cf7b40d5d660143d8bad9117e9866572",
    // cc3 testnet/drynet
    "0xfc9df99a665f964aed6649f275055e54df5e3420489538ed31d7788f53d11ef6"
    // cc3 devnet
  ],
  darwinia: [
    "0xe71578b37a7c799b0ab4ee87ffa6f059a6b98f71f06fb8c84a8d88013a548ad6"
  ],
  "dock-mainnet": [
    "0x6bfe24dca2a3be10f22212678ac13a6446ec764103c0f3471c71609eac384aae",
    "0xf73467c6544aa68df2ee546b135f955c46b90fa627e9b5d7935f41061bb8a5a9"
  ],
  edgeware: [
    "0x742a2ca70c2fda6cee4f8df98d64c4c670a052d9568058982dad9d5a7a135c5b"
  ],
  encointer: [
    "0x7dd99936c1e9e6d1ce7d90eb6f33bea8393b4bf87677d675aa63c9cb3e8c5b5b"
  ],
  enjin: [
    "0xd8761d3c88f26dc12875c00d3165f7d67243d56fc85b4cf19937601a7916e5a9"
  ],
  equilibrium: [
    "0x6f1a800de3daff7f5e037ddf66ab22ce03ab91874debeddb1086f5f7dbd48925"
  ],
  frequency: [
    "0x4a587bf17a404e3572747add7aab7bbe56e805a5479c6c436f07f36fcc8d3ae1"
  ],
  genshiro: [
    "0x9b8cefc0eb5c568b527998bdd76c184e2b76ae561be76e4667072230217ea243"
  ],
  hydradx: [
    "0xafdc188f45c71dacbaa0b62e16a91f726c7b8699a9748cdf715459de6b7f366d",
    // Hydration | HydraDX Parachain
    "0xd2a620c27ec5cbc5621ff9a522689895074f7cca0d08e7134a7804e1a3ba86fc",
    // Snakenet Gen3-1
    "0x10af6e84234477d84dc572bac0789813b254aa490767ed06fb9591191d1073f9",
    // Snakenet Gen3
    "0x3d75507dd46301767e601265791da1d9cb47b6ebc94e87347b635e5bf58bd047",
    // Snakenet Gen2
    "0x0ed32bfcab4a83517fac88f2aa7cbc2f88d3ab93be9a12b6188a036bf8a943c2"
    // Snakenet Gen1
  ],
  integritee: [
    "0xcdedc8eadbfa209d3f207bba541e57c3c58a667b05a2e1d1e86353c9000758da",
    // on Kusama
    "0xe13e7af377c64e83f95e0d70d5e5c3c01d697a84538776c5b9bbe0e7d7b6034c"
    // on Polkadot
  ],
  "interlay-parachain": [
    "0xbf88efe70e9e0e916416e8bed61f2b45717f517d7f3523e33c7b001e5ffcbc72"
  ],
  karura: [
    "0xbaf5aabe40646d11f0ee8abbdc64f4a4b7674925cba08e4a05ff9ebed6e2126b"
  ],
  khala: [
    "0xd43540ba6d3eb4897c28a77d48cb5b729fea37603cbbfc7a86a73b72adb3be8d"
  ],
  kulupu: [
    "0xf7a99d3cb92853d00d5275c971c132c074636256583fee53b3bbe60d7b8769ba"
  ],
  kusama: [
    "0xb0a8d493285c2df73290dfb7e61f870f17b41801197a149ca93654499ea3dafe",
    // Kusama CC3,
    "0xe3777fa922cafbff200cadeaea1a76bd7898ad5b89f7848999058b50e715f636",
    // Kusama CC2
    "0x3fd7b9eb6a00376e5be61f01abb429ffb0b104be05eaff4d458da48fcd425baf"
    // Kusama CC1
  ],
  liberland: [
    "0x6bd89e052d67a45bb60a9a23e8581053d5e0d619f15cb9865946937e690c42d6"
  ],
  matrixchain: [
    "0x3af4ff48ec76d2efc8476730f423ac07e25ad48f5f4c9dc39c778b164d808615"
  ],
  nodle: [
    "0x97da7ede98d7bad4e36b4d734b6055425a3be036da2a332ea5a7037656427a21"
  ],
  origintrail: [
    "0xe7e0962324a3b86c83404dbea483f25fb5dab4c224791c81b756cfc948006174"
  ],
  p3d: [
    "0x6c5894837ad89b6d92b114a2fb3eafa8fe3d26a54848e3447015442cd6ef4e66"
  ],
  parallel: [
    "0xe61a41c53f5dcd0beb09df93b34402aada44cb05117b71059cce40a2723a4e97"
  ],
  peaq: [
    "0xd2a5d385932d1f650dae03ef8e2748983779ee342c614f80854d32b8cd8fa48c"
  ],
  pendulum: [
    "0x5d3c298622d5634ed019bf61ea4b71655030015bde9beb0d6a24743714462c86"
  ],
  phala: [
    "0x1bb969d85965e4bb5a651abbedf21a54b6b31a21f66b5401cc3f1e286268d736"
  ],
  picasso: [
    "0x6811a339673c9daa897944dcdac99c6e2939cc88245ed21951a0a3c9a2be75bc",
    "0xe8e7f0f4c4f5a00720b4821dbfddefea7490bcf0b19009961cc46957984e2c1c"
  ],
  polimec: [
    "0x7eb9354488318e7549c722669dcbdcdc526f1fef1420e7944667212f3601fdbd"
  ],
  polkadex: [
    "0x3920bcb4960a1eef5580cd5367ff3f430eef052774f78468852f7b9cb39f8a3c"
  ],
  polkadot: [
    "0x91b171bb158e2d3848fa23a9f1c25182fb8e20313b2c1eb49219da7a70ce90c3"
  ],
  polymesh: [
    "0x6fbd74e5e1d0a61d52ccfe9d4adaed16dd3a7caa37c6bc4d0c2fa12e8b2f4063"
  ],
  quartz: [
    "0xcd4d732201ebe5d6b014edda071c4203e16867305332301dc8d092044b28e554"
  ],
  rococo: [
    "0x6408de7737c59c238890533af25896a2c20608d8b380bb01029acb392781063e",
    "0xaaf2cd1b74b5f726895921259421b534124726263982522174147046b8827897",
    "0x037f5f3c8e67b314062025fc886fcd6238ea25a4a9b45dce8d246815c9ebe770",
    "0xc196f81260cf1686172b47a79cf002120735d7cb0eb1474e8adce56618456fff",
    "0xf6e9983c37baf68846fedafe21e56718790e39fb1c582abc408b81bc7b208f9a",
    "0x5fce687da39305dfe682b117f0820b319348e8bb37eb16cf34acbf6a202de9d9",
    "0xe7c3d5edde7db964317cd9b51a3a059d7cd99f81bdbce14990047354334c9779",
    "0x1611e1dbf0405379b861e2e27daa90f480b2e6d3682414a80835a52e8cb8a215",
    "0x343442f12fa715489a8714e79a7b264ea88c0d5b8c66b684a7788a516032f6b9",
    "0x78bcd530c6b3a068bc17473cf5d2aff9c287102bed9af3ae3c41c33b9d6c6147",
    "0x47381ee0697153d64404fc578392c8fd5cba9073391908f46c888498415647bd",
    "0x19c0e4fa8ab75f5ac7865e0b8f74ff91eb9a100d336f423cd013a8befba40299"
  ],
  sora: [
    "0x7e4e32d0feafd4f9c9414b0be86373f9a1efa904809b683453a9af6856d38ad5"
  ],
  stafi: [
    "0x290a4149f09ea0e402c74c1c7e96ae4239588577fe78932f94f5404c68243d80"
  ],
  statemine: [
    "0x48239ef607d7928874027a43a67689209727dfb3d3dc5e5b03a39bdc2eda771a"
  ],
  statemint: [
    "0x68d56f15f85d3136970ec16946040bc1752654e906147f7e43e9d539d7c3de2f"
  ],
  subsocial: [
    "0x0bd72c1c305172e1275278aaeb3f161e02eccb7a819e63f62d47bd53a28189f8"
  ],
  ternoa: [
    "0x6859c81ca95ef624c9dfe4dc6e3381c33e5d6509e35e147092bfbc780f777c4e"
  ],
  unique: [
    "0x84322d9cddbf35088f1e54e9a85c967a41a56a4f43445768125e61af166c7d31"
  ],
  vara: [
    "0xfe1b4c55fd4d668101126434206571a7838a8b6b93a6d1b95d607e78e6c53763"
  ],
  vtb: [
    "0x286bc8414c7000ce1d6ee6a834e29a54c1784814b76243eb77ed0b2c5573c60f",
    "0x7483b89572fb2bd687c7b9a93b242d0b237f9aba463aba07ec24503931038aaa"
  ],
  westend: [
    "0xe143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e"
  ],
  xxnetwork: [
    "0x50dd5d206917bf10502c68fb4d18a59fc8aa31586f4e8856b493e43544aa82aa"
  ],
  zeitgeist: [
    "0x1bf2a2ecb4a868de66ea8610f2ce7c8c43706561b6476031315f6640fe38e060"
  ]
};

// node_modules/@polkadot/networks/defaults/icons.js
var knownIcon = {
  centrifuge: "polkadot",
  kusama: "polkadot",
  polkadot: "polkadot",
  sora: "polkadot",
  statemine: "polkadot",
  statemint: "polkadot",
  westmint: "polkadot"
};

// node_modules/@polkadot/networks/defaults/ledger.js
var knownLedger = {
  acala: 787,
  ajuna: 354,
  "aleph-node": 643,
  astar: 810,
  bifrost: 788,
  "bifrost-kusama": 788,
  bittensor: 354,
  centrifuge: 747,
  composable: 354,
  creditcoin3: 354,
  darwinia: 354,
  "dock-mainnet": 594,
  edgeware: 523,
  encointer: 434,
  enjin: 1155,
  equilibrium: 99999997,
  frequency: 2091,
  genshiro: 99999996,
  hydradx: 354,
  integritee: 2015,
  "interlay-parachain": 354,
  karura: 686,
  khala: 434,
  kusama: 434,
  liberland: 767,
  matrixchain: 1155,
  nodle: 1003,
  origintrail: 354,
  parallel: 354,
  peaq: 3338,
  pendulum: 354,
  phala: 354,
  picasso: 434,
  polimec: 3344,
  polkadex: 799,
  polkadot: 354,
  polymesh: 595,
  quartz: 631,
  sora: 617,
  stafi: 907,
  statemine: 434,
  // common-good on Kusama, shares derivation
  statemint: 354,
  // common-good on Polkadot, shares derivation
  ternoa: 995,
  unique: 661,
  vara: 4976,
  vtb: 694,
  xxnetwork: 1955,
  zeitgeist: 354
};

// node_modules/@polkadot/networks/defaults/testnets.js
var knownTestnet = {
  "": true,
  // this is the default non-network entry
  "cess-testnet": true,
  "dock-testnet": true,
  jupiter: true,
  "mathchain-testnet": true,
  p3dt: true,
  subspace_testnet: true,
  "zero-alphaville": true
};

// node_modules/@polkadot/networks/interfaces.js
var UNSORTED = [0, 2, 42];
var TESTNETS = ["testnet"];
function toExpanded(o) {
  const network = o.network || "";
  const nameParts = network.replace(/_/g, "-").split("-");
  const n = o;
  n.slip44 = knownLedger[network];
  n.hasLedgerSupport = !!n.slip44;
  n.genesisHash = knownGenesis[network] || [];
  n.icon = knownIcon[network] || "substrate";
  n.isTestnet = !!knownTestnet[network] || TESTNETS.includes(nameParts[nameParts.length - 1]);
  n.isIgnored = n.isTestnet || !(o.standardAccount && o.decimals?.length && o.symbols?.length) && o.prefix !== 42;
  return n;
}
function filterSelectable({ genesisHash, prefix: prefix2 }) {
  return !!genesisHash.length || prefix2 === 42;
}
function filterAvailable(n) {
  return !n.isIgnored && !!n.network;
}
function sortNetworks(a, b) {
  const isUnSortedA = UNSORTED.includes(a.prefix);
  const isUnSortedB = UNSORTED.includes(b.prefix);
  return isUnSortedA === isUnSortedB ? isUnSortedA ? 0 : a.displayName.localeCompare(b.displayName) : isUnSortedA ? -1 : 1;
}
var allNetworks = esm_default.map(toExpanded);
var availableNetworks = allNetworks.filter(filterAvailable).sort(sortNetworks);
var selectableNetworks = availableNetworks.filter(filterSelectable);

// node_modules/@noble/hashes/esm/sha2.js
var SHA256_K = /* @__PURE__ */ Uint32Array.from([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]);
var SHA256_W = /* @__PURE__ */ new Uint32Array(64);
var SHA256 = class extends HashMD {
  constructor(outputLen = 32) {
    super(64, outputLen, 8, false);
    this.A = SHA256_IV[0] | 0;
    this.B = SHA256_IV[1] | 0;
    this.C = SHA256_IV[2] | 0;
    this.D = SHA256_IV[3] | 0;
    this.E = SHA256_IV[4] | 0;
    this.F = SHA256_IV[5] | 0;
    this.G = SHA256_IV[6] | 0;
    this.H = SHA256_IV[7] | 0;
  }
  get() {
    const { A, B, C, D, E, F, G, H } = this;
    return [A, B, C, D, E, F, G, H];
  }
  // prettier-ignore
  set(A, B, C, D, E, F, G, H) {
    this.A = A | 0;
    this.B = B | 0;
    this.C = C | 0;
    this.D = D | 0;
    this.E = E | 0;
    this.F = F | 0;
    this.G = G | 0;
    this.H = H | 0;
  }
  process(view, offset) {
    for (let i = 0; i < 16; i++, offset += 4)
      SHA256_W[i] = view.getUint32(offset, false);
    for (let i = 16; i < 64; i++) {
      const W15 = SHA256_W[i - 15];
      const W2 = SHA256_W[i - 2];
      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ W15 >>> 3;
      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ W2 >>> 10;
      SHA256_W[i] = s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16] | 0;
    }
    let { A, B, C, D, E, F, G, H } = this;
    for (let i = 0; i < 64; i++) {
      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);
      const T1 = H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i] | 0;
      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);
      const T2 = sigma0 + Maj(A, B, C) | 0;
      H = G;
      G = F;
      F = E;
      E = D + T1 | 0;
      D = C;
      C = B;
      B = A;
      A = T1 + T2 | 0;
    }
    A = A + this.A | 0;
    B = B + this.B | 0;
    C = C + this.C | 0;
    D = D + this.D | 0;
    E = E + this.E | 0;
    F = F + this.F | 0;
    G = G + this.G | 0;
    H = H + this.H | 0;
    this.set(A, B, C, D, E, F, G, H);
  }
  roundClean() {
    clean(SHA256_W);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0);
    clean(this.buffer);
  }
};
var sha256 = /* @__PURE__ */ createHasher(() => new SHA256());

// node_modules/@noble/hashes/esm/hmac.js
var HMAC = class extends Hash {
  constructor(hash, _key) {
    super();
    this.finished = false;
    this.destroyed = false;
    ahash(hash);
    const key = toBytes(_key);
    this.iHash = hash.create();
    if (typeof this.iHash.update !== "function")
      throw new Error("Expected instance of class which extends utils.Hash");
    this.blockLen = this.iHash.blockLen;
    this.outputLen = this.iHash.outputLen;
    const blockLen = this.blockLen;
    const pad = new Uint8Array(blockLen);
    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);
    for (let i = 0; i < pad.length; i++)
      pad[i] ^= 54;
    this.iHash.update(pad);
    this.oHash = hash.create();
    for (let i = 0; i < pad.length; i++)
      pad[i] ^= 54 ^ 92;
    this.oHash.update(pad);
    clean(pad);
  }
  update(buf) {
    aexists(this);
    this.iHash.update(buf);
    return this;
  }
  digestInto(out) {
    aexists(this);
    abytes(out, this.outputLen);
    this.finished = true;
    this.iHash.digestInto(out);
    this.oHash.update(out);
    this.oHash.digestInto(out);
    this.destroy();
  }
  digest() {
    const out = new Uint8Array(this.oHash.outputLen);
    this.digestInto(out);
    return out;
  }
  _cloneInto(to) {
    to || (to = Object.create(Object.getPrototypeOf(this), {}));
    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;
    to = to;
    to.finished = finished;
    to.destroyed = destroyed;
    to.blockLen = blockLen;
    to.outputLen = outputLen;
    to.oHash = oHash._cloneInto(to.oHash);
    to.iHash = iHash._cloneInto(to.iHash);
    return to;
  }
  clone() {
    return this._cloneInto();
  }
  destroy() {
    this.destroyed = true;
    this.oHash.destroy();
    this.iHash.destroy();
  }
};
var hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();
hmac.create = (hash, key) => new HMAC(hash, key);

// node_modules/@noble/curves/esm/utils.js
var _0n = /* @__PURE__ */ BigInt(0);
var _1n = /* @__PURE__ */ BigInt(1);
function _abool2(value, title = "") {
  if (typeof value !== "boolean") {
    const prefix2 = title && `"${title}"`;
    throw new Error(prefix2 + "expected boolean, got type=" + typeof value);
  }
  return value;
}
function _abytes2(value, length, title = "") {
  const bytes2 = isBytes2(value);
  const len = value?.length;
  const needsLen = length !== void 0;
  if (!bytes2 || needsLen && len !== length) {
    const prefix2 = title && `"${title}" `;
    const ofLen = needsLen ? ` of length ${length}` : "";
    const got = bytes2 ? `length=${len}` : `type=${typeof value}`;
    throw new Error(prefix2 + "expected Uint8Array" + ofLen + ", got " + got);
  }
  return value;
}
function numberToHexUnpadded(num) {
  const hex8 = num.toString(16);
  return hex8.length & 1 ? "0" + hex8 : hex8;
}
function hexToNumber(hex8) {
  if (typeof hex8 !== "string")
    throw new Error("hex string expected, got " + typeof hex8);
  return hex8 === "" ? _0n : BigInt("0x" + hex8);
}
function bytesToNumberBE(bytes2) {
  return hexToNumber(bytesToHex(bytes2));
}
function bytesToNumberLE(bytes2) {
  abytes(bytes2);
  return hexToNumber(bytesToHex(Uint8Array.from(bytes2).reverse()));
}
function numberToBytesBE(n, len) {
  return hexToBytes(n.toString(16).padStart(len * 2, "0"));
}
function numberToBytesLE(n, len) {
  return numberToBytesBE(n, len).reverse();
}
function ensureBytes(title, hex8, expectedLength) {
  let res;
  if (typeof hex8 === "string") {
    try {
      res = hexToBytes(hex8);
    } catch (e) {
      throw new Error(title + " must be hex string or Uint8Array, cause: " + e);
    }
  } else if (isBytes2(hex8)) {
    res = Uint8Array.from(hex8);
  } else {
    throw new Error(title + " must be hex string or Uint8Array");
  }
  const len = res.length;
  if (typeof expectedLength === "number" && len !== expectedLength)
    throw new Error(title + " of length " + expectedLength + " expected, got " + len);
  return res;
}
var isPosBig = (n) => typeof n === "bigint" && _0n <= n;
function inRange(n, min, max2) {
  return isPosBig(n) && isPosBig(min) && isPosBig(max2) && min <= n && n < max2;
}
function aInRange(title, n, min, max2) {
  if (!inRange(n, min, max2))
    throw new Error("expected valid " + title + ": " + min + " <= n < " + max2 + ", got " + n);
}
function bitLen(n) {
  let len;
  for (len = 0; n > _0n; n >>= _1n, len += 1)
    ;
  return len;
}
var bitMask = (n) => (_1n << BigInt(n)) - _1n;
function createHmacDrbg(hashLen, qByteLen, hmacFn) {
  if (typeof hashLen !== "number" || hashLen < 2)
    throw new Error("hashLen must be a number");
  if (typeof qByteLen !== "number" || qByteLen < 2)
    throw new Error("qByteLen must be a number");
  if (typeof hmacFn !== "function")
    throw new Error("hmacFn must be a function");
  const u8n = (len) => new Uint8Array(len);
  const u8of = (byte) => Uint8Array.of(byte);
  let v = u8n(hashLen);
  let k = u8n(hashLen);
  let i = 0;
  const reset = () => {
    v.fill(1);
    k.fill(0);
    i = 0;
  };
  const h = (...b) => hmacFn(k, v, ...b);
  const reseed = (seed = u8n(0)) => {
    k = h(u8of(0), seed);
    v = h();
    if (seed.length === 0)
      return;
    k = h(u8of(1), seed);
    v = h();
  };
  const gen2 = () => {
    if (i++ >= 1e3)
      throw new Error("drbg: tried 1000 values");
    let len = 0;
    const out = [];
    while (len < qByteLen) {
      v = h();
      const sl = v.slice();
      out.push(sl);
      len += v.length;
    }
    return concatBytes(...out);
  };
  const genUntil = (seed, pred) => {
    reset();
    reseed(seed);
    let res = void 0;
    while (!(res = pred(gen2())))
      reseed();
    reset();
    return res;
  };
  return genUntil;
}
function _validateObject(object, fields, optFields = {}) {
  if (!object || typeof object !== "object")
    throw new Error("expected valid options object");
  function checkField(fieldName, expectedType, isOpt) {
    const val = object[fieldName];
    if (isOpt && val === void 0)
      return;
    const current = typeof val;
    if (current !== expectedType || val === null)
      throw new Error(`param "${fieldName}" is invalid: expected ${expectedType}, got ${current}`);
  }
  Object.entries(fields).forEach(([k, v]) => checkField(k, v, false));
  Object.entries(optFields).forEach(([k, v]) => checkField(k, v, true));
}
function memoized(fn) {
  const map3 = /* @__PURE__ */ new WeakMap();
  return (arg, ...args) => {
    const val = map3.get(arg);
    if (val !== void 0)
      return val;
    const computed = fn(arg, ...args);
    map3.set(arg, computed);
    return computed;
  };
}

// node_modules/@noble/curves/esm/abstract/modular.js
var _0n2 = BigInt(0);
var _1n2 = BigInt(1);
var _2n = /* @__PURE__ */ BigInt(2);
var _3n = /* @__PURE__ */ BigInt(3);
var _4n = /* @__PURE__ */ BigInt(4);
var _5n = /* @__PURE__ */ BigInt(5);
var _7n = /* @__PURE__ */ BigInt(7);
var _8n = /* @__PURE__ */ BigInt(8);
var _9n = /* @__PURE__ */ BigInt(9);
var _16n = /* @__PURE__ */ BigInt(16);
function mod(a, b) {
  const result = a % b;
  return result >= _0n2 ? result : b + result;
}
function pow2(x, power, modulo) {
  let res = x;
  while (power-- > _0n2) {
    res *= res;
    res %= modulo;
  }
  return res;
}
function invert(number, modulo) {
  if (number === _0n2)
    throw new Error("invert: expected non-zero number");
  if (modulo <= _0n2)
    throw new Error("invert: expected positive modulus, got " + modulo);
  let a = mod(number, modulo);
  let b = modulo;
  let x = _0n2, y = _1n2, u = _1n2, v = _0n2;
  while (a !== _0n2) {
    const q = b / a;
    const r = b % a;
    const m = x - u * q;
    const n = y - v * q;
    b = a, a = r, x = u, y = v, u = m, v = n;
  }
  const gcd = b;
  if (gcd !== _1n2)
    throw new Error("invert: does not exist");
  return mod(x, modulo);
}
function assertIsSquare(Fp, root, n) {
  if (!Fp.eql(Fp.sqr(root), n))
    throw new Error("Cannot find square root");
}
function sqrt3mod4(Fp, n) {
  const p1div4 = (Fp.ORDER + _1n2) / _4n;
  const root = Fp.pow(n, p1div4);
  assertIsSquare(Fp, root, n);
  return root;
}
function sqrt5mod8(Fp, n) {
  const p5div8 = (Fp.ORDER - _5n) / _8n;
  const n2 = Fp.mul(n, _2n);
  const v = Fp.pow(n2, p5div8);
  const nv = Fp.mul(n, v);
  const i = Fp.mul(Fp.mul(nv, _2n), v);
  const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));
  assertIsSquare(Fp, root, n);
  return root;
}
function sqrt9mod16(P) {
  const Fp_ = Field(P);
  const tn = tonelliShanks(P);
  const c1 = tn(Fp_, Fp_.neg(Fp_.ONE));
  const c2 = tn(Fp_, c1);
  const c3 = tn(Fp_, Fp_.neg(c1));
  const c4 = (P + _7n) / _16n;
  return (Fp, n) => {
    let tv1 = Fp.pow(n, c4);
    let tv2 = Fp.mul(tv1, c1);
    const tv3 = Fp.mul(tv1, c2);
    const tv4 = Fp.mul(tv1, c3);
    const e1 = Fp.eql(Fp.sqr(tv2), n);
    const e2 = Fp.eql(Fp.sqr(tv3), n);
    tv1 = Fp.cmov(tv1, tv2, e1);
    tv2 = Fp.cmov(tv4, tv3, e2);
    const e3 = Fp.eql(Fp.sqr(tv2), n);
    const root = Fp.cmov(tv1, tv2, e3);
    assertIsSquare(Fp, root, n);
    return root;
  };
}
function tonelliShanks(P) {
  if (P < _3n)
    throw new Error("sqrt is not defined for small field");
  let Q = P - _1n2;
  let S = 0;
  while (Q % _2n === _0n2) {
    Q /= _2n;
    S++;
  }
  let Z = _2n;
  const _Fp = Field(P);
  while (FpLegendre(_Fp, Z) === 1) {
    if (Z++ > 1e3)
      throw new Error("Cannot find square root: probably non-prime P");
  }
  if (S === 1)
    return sqrt3mod4;
  let cc = _Fp.pow(Z, Q);
  const Q1div2 = (Q + _1n2) / _2n;
  return function tonelliSlow(Fp, n) {
    if (Fp.is0(n))
      return n;
    if (FpLegendre(Fp, n) !== 1)
      throw new Error("Cannot find square root");
    let M = S;
    let c = Fp.mul(Fp.ONE, cc);
    let t = Fp.pow(n, Q);
    let R = Fp.pow(n, Q1div2);
    while (!Fp.eql(t, Fp.ONE)) {
      if (Fp.is0(t))
        return Fp.ZERO;
      let i = 1;
      let t_tmp = Fp.sqr(t);
      while (!Fp.eql(t_tmp, Fp.ONE)) {
        i++;
        t_tmp = Fp.sqr(t_tmp);
        if (i === M)
          throw new Error("Cannot find square root");
      }
      const exponent = _1n2 << BigInt(M - i - 1);
      const b = Fp.pow(c, exponent);
      M = i;
      c = Fp.sqr(b);
      t = Fp.mul(t, c);
      R = Fp.mul(R, b);
    }
    return R;
  };
}
function FpSqrt(P) {
  if (P % _4n === _3n)
    return sqrt3mod4;
  if (P % _8n === _5n)
    return sqrt5mod8;
  if (P % _16n === _9n)
    return sqrt9mod16(P);
  return tonelliShanks(P);
}
var FIELD_FIELDS = [
  "create",
  "isValid",
  "is0",
  "neg",
  "inv",
  "sqrt",
  "sqr",
  "eql",
  "add",
  "sub",
  "mul",
  "pow",
  "div",
  "addN",
  "subN",
  "mulN",
  "sqrN"
];
function validateField(field) {
  const initial = {
    ORDER: "bigint",
    MASK: "bigint",
    BYTES: "number",
    BITS: "number"
  };
  const opts = FIELD_FIELDS.reduce((map3, val) => {
    map3[val] = "function";
    return map3;
  }, initial);
  _validateObject(field, opts);
  return field;
}
function FpPow(Fp, num, power) {
  if (power < _0n2)
    throw new Error("invalid exponent, negatives unsupported");
  if (power === _0n2)
    return Fp.ONE;
  if (power === _1n2)
    return num;
  let p = Fp.ONE;
  let d = num;
  while (power > _0n2) {
    if (power & _1n2)
      p = Fp.mul(p, d);
    d = Fp.sqr(d);
    power >>= _1n2;
  }
  return p;
}
function FpInvertBatch(Fp, nums, passZero = false) {
  const inverted = new Array(nums.length).fill(passZero ? Fp.ZERO : void 0);
  const multipliedAcc = nums.reduce((acc, num, i) => {
    if (Fp.is0(num))
      return acc;
    inverted[i] = acc;
    return Fp.mul(acc, num);
  }, Fp.ONE);
  const invertedAcc = Fp.inv(multipliedAcc);
  nums.reduceRight((acc, num, i) => {
    if (Fp.is0(num))
      return acc;
    inverted[i] = Fp.mul(acc, inverted[i]);
    return Fp.mul(acc, num);
  }, invertedAcc);
  return inverted;
}
function FpLegendre(Fp, n) {
  const p1mod2 = (Fp.ORDER - _1n2) / _2n;
  const powered = Fp.pow(n, p1mod2);
  const yes = Fp.eql(powered, Fp.ONE);
  const zero = Fp.eql(powered, Fp.ZERO);
  const no = Fp.eql(powered, Fp.neg(Fp.ONE));
  if (!yes && !zero && !no)
    throw new Error("invalid Legendre symbol result");
  return yes ? 1 : zero ? 0 : -1;
}
function nLength(n, nBitLength) {
  if (nBitLength !== void 0)
    anumber2(nBitLength);
  const _nBitLength = nBitLength !== void 0 ? nBitLength : n.toString(2).length;
  const nByteLength = Math.ceil(_nBitLength / 8);
  return { nBitLength: _nBitLength, nByteLength };
}
function Field(ORDER, bitLenOrOpts, isLE2 = false, opts = {}) {
  if (ORDER <= _0n2)
    throw new Error("invalid field: expected ORDER > 0, got " + ORDER);
  let _nbitLength = void 0;
  let _sqrt = void 0;
  let modFromBytes = false;
  let allowedLengths = void 0;
  if (typeof bitLenOrOpts === "object" && bitLenOrOpts != null) {
    if (opts.sqrt || isLE2)
      throw new Error("cannot specify opts in two arguments");
    const _opts = bitLenOrOpts;
    if (_opts.BITS)
      _nbitLength = _opts.BITS;
    if (_opts.sqrt)
      _sqrt = _opts.sqrt;
    if (typeof _opts.isLE === "boolean")
      isLE2 = _opts.isLE;
    if (typeof _opts.modFromBytes === "boolean")
      modFromBytes = _opts.modFromBytes;
    allowedLengths = _opts.allowedLengths;
  } else {
    if (typeof bitLenOrOpts === "number")
      _nbitLength = bitLenOrOpts;
    if (opts.sqrt)
      _sqrt = opts.sqrt;
  }
  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, _nbitLength);
  if (BYTES > 2048)
    throw new Error("invalid field: expected ORDER of <= 2048 bytes");
  let sqrtP;
  const f = Object.freeze({
    ORDER,
    isLE: isLE2,
    BITS,
    BYTES,
    MASK: bitMask(BITS),
    ZERO: _0n2,
    ONE: _1n2,
    allowedLengths,
    create: (num) => mod(num, ORDER),
    isValid: (num) => {
      if (typeof num !== "bigint")
        throw new Error("invalid field element: expected bigint, got " + typeof num);
      return _0n2 <= num && num < ORDER;
    },
    is0: (num) => num === _0n2,
    // is valid and invertible
    isValidNot0: (num) => !f.is0(num) && f.isValid(num),
    isOdd: (num) => (num & _1n2) === _1n2,
    neg: (num) => mod(-num, ORDER),
    eql: (lhs, rhs) => lhs === rhs,
    sqr: (num) => mod(num * num, ORDER),
    add: (lhs, rhs) => mod(lhs + rhs, ORDER),
    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),
    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),
    pow: (num, power) => FpPow(f, num, power),
    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),
    // Same as above, but doesn't normalize
    sqrN: (num) => num * num,
    addN: (lhs, rhs) => lhs + rhs,
    subN: (lhs, rhs) => lhs - rhs,
    mulN: (lhs, rhs) => lhs * rhs,
    inv: (num) => invert(num, ORDER),
    sqrt: _sqrt || ((n) => {
      if (!sqrtP)
        sqrtP = FpSqrt(ORDER);
      return sqrtP(f, n);
    }),
    toBytes: (num) => isLE2 ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES),
    fromBytes: (bytes2, skipValidation = true) => {
      if (allowedLengths) {
        if (!allowedLengths.includes(bytes2.length) || bytes2.length > BYTES) {
          throw new Error("Field.fromBytes: expected " + allowedLengths + " bytes, got " + bytes2.length);
        }
        const padded = new Uint8Array(BYTES);
        padded.set(bytes2, isLE2 ? 0 : padded.length - bytes2.length);
        bytes2 = padded;
      }
      if (bytes2.length !== BYTES)
        throw new Error("Field.fromBytes: expected " + BYTES + " bytes, got " + bytes2.length);
      let scalar = isLE2 ? bytesToNumberLE(bytes2) : bytesToNumberBE(bytes2);
      if (modFromBytes)
        scalar = mod(scalar, ORDER);
      if (!skipValidation) {
        if (!f.isValid(scalar))
          throw new Error("invalid field element: outside of range 0..ORDER");
      }
      return scalar;
    },
    // TODO: we don't need it here, move out to separate fn
    invertBatch: (lst) => FpInvertBatch(f, lst),
    // We can't move this out because Fp6, Fp12 implement it
    // and it's unclear what to return in there.
    cmov: (a, b, c) => c ? b : a
  });
  return Object.freeze(f);
}
function getFieldBytesLength(fieldOrder) {
  if (typeof fieldOrder !== "bigint")
    throw new Error("field order must be bigint");
  const bitLength = fieldOrder.toString(2).length;
  return Math.ceil(bitLength / 8);
}
function getMinHashLength(fieldOrder) {
  const length = getFieldBytesLength(fieldOrder);
  return length + Math.ceil(length / 2);
}
function mapHashToField(key, fieldOrder, isLE2 = false) {
  const len = key.length;
  const fieldLen = getFieldBytesLength(fieldOrder);
  const minLen = getMinHashLength(fieldOrder);
  if (len < 16 || len < minLen || len > 1024)
    throw new Error("expected " + minLen + "-1024 bytes of input, got " + len);
  const num = isLE2 ? bytesToNumberLE(key) : bytesToNumberBE(key);
  const reduced = mod(num, fieldOrder - _1n2) + _1n2;
  return isLE2 ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);
}

// node_modules/@noble/curves/esm/abstract/curve.js
var _0n3 = BigInt(0);
var _1n3 = BigInt(1);
function negateCt(condition, item) {
  const neg = item.negate();
  return condition ? neg : item;
}
function normalizeZ(c, points) {
  const invertedZs = FpInvertBatch(c.Fp, points.map((p) => p.Z));
  return points.map((p, i) => c.fromAffine(p.toAffine(invertedZs[i])));
}
function validateW(W, bits2) {
  if (!Number.isSafeInteger(W) || W <= 0 || W > bits2)
    throw new Error("invalid window size, expected [1.." + bits2 + "], got W=" + W);
}
function calcWOpts(W, scalarBits) {
  validateW(W, scalarBits);
  const windows = Math.ceil(scalarBits / W) + 1;
  const windowSize = 2 ** (W - 1);
  const maxNumber = 2 ** W;
  const mask = bitMask(W);
  const shiftBy = BigInt(W);
  return { windows, windowSize, mask, maxNumber, shiftBy };
}
function calcOffsets(n, window2, wOpts) {
  const { windowSize, mask, maxNumber, shiftBy } = wOpts;
  let wbits = Number(n & mask);
  let nextN = n >> shiftBy;
  if (wbits > windowSize) {
    wbits -= maxNumber;
    nextN += _1n3;
  }
  const offsetStart = window2 * windowSize;
  const offset = offsetStart + Math.abs(wbits) - 1;
  const isZero = wbits === 0;
  const isNeg = wbits < 0;
  const isNegF = window2 % 2 !== 0;
  const offsetF = offsetStart;
  return { nextN, offset, isZero, isNeg, isNegF, offsetF };
}
function validateMSMPoints(points, c) {
  if (!Array.isArray(points))
    throw new Error("array expected");
  points.forEach((p, i) => {
    if (!(p instanceof c))
      throw new Error("invalid point at index " + i);
  });
}
function validateMSMScalars(scalars, field) {
  if (!Array.isArray(scalars))
    throw new Error("array of scalars expected");
  scalars.forEach((s, i) => {
    if (!field.isValid(s))
      throw new Error("invalid scalar at index " + i);
  });
}
var pointPrecomputes = /* @__PURE__ */ new WeakMap();
var pointWindowSizes = /* @__PURE__ */ new WeakMap();
function getW(P) {
  return pointWindowSizes.get(P) || 1;
}
function assert0(n) {
  if (n !== _0n3)
    throw new Error("invalid wNAF");
}
var wNAF = class {
  // Parametrized with a given Point class (not individual point)
  constructor(Point, bits2) {
    this.BASE = Point.BASE;
    this.ZERO = Point.ZERO;
    this.Fn = Point.Fn;
    this.bits = bits2;
  }
  // non-const time multiplication ladder
  _unsafeLadder(elm, n, p = this.ZERO) {
    let d = elm;
    while (n > _0n3) {
      if (n & _1n3)
        p = p.add(d);
      d = d.double();
      n >>= _1n3;
    }
    return p;
  }
  /**
   * Creates a wNAF precomputation window. Used for caching.
   * Default window size is set by `utils.precompute()` and is equal to 8.
   * Number of precomputed points depends on the curve size:
   * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
   * - 𝑊 is the window size
   * - 𝑛 is the bitlength of the curve order.
   * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
   * @param point Point instance
   * @param W window size
   * @returns precomputed point tables flattened to a single array
   */
  precomputeWindow(point, W) {
    const { windows, windowSize } = calcWOpts(W, this.bits);
    const points = [];
    let p = point;
    let base = p;
    for (let window2 = 0; window2 < windows; window2++) {
      base = p;
      points.push(base);
      for (let i = 1; i < windowSize; i++) {
        base = base.add(p);
        points.push(base);
      }
      p = base.double();
    }
    return points;
  }
  /**
   * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
   * More compact implementation:
   * https://github.com/paulmillr/noble-secp256k1/blob/47cb1669b6e506ad66b35fe7d76132ae97465da2/index.ts#L502-L541
   * @returns real and fake (for const-time) points
   */
  wNAF(W, precomputes, n) {
    if (!this.Fn.isValid(n))
      throw new Error("invalid scalar");
    let p = this.ZERO;
    let f = this.BASE;
    const wo = calcWOpts(W, this.bits);
    for (let window2 = 0; window2 < wo.windows; window2++) {
      const { nextN, offset, isZero, isNeg, isNegF, offsetF } = calcOffsets(n, window2, wo);
      n = nextN;
      if (isZero) {
        f = f.add(negateCt(isNegF, precomputes[offsetF]));
      } else {
        p = p.add(negateCt(isNeg, precomputes[offset]));
      }
    }
    assert0(n);
    return { p, f };
  }
  /**
   * Implements ec unsafe (non const-time) multiplication using precomputed tables and w-ary non-adjacent form.
   * @param acc accumulator point to add result of multiplication
   * @returns point
   */
  wNAFUnsafe(W, precomputes, n, acc = this.ZERO) {
    const wo = calcWOpts(W, this.bits);
    for (let window2 = 0; window2 < wo.windows; window2++) {
      if (n === _0n3)
        break;
      const { nextN, offset, isZero, isNeg } = calcOffsets(n, window2, wo);
      n = nextN;
      if (isZero) {
        continue;
      } else {
        const item = precomputes[offset];
        acc = acc.add(isNeg ? item.negate() : item);
      }
    }
    assert0(n);
    return acc;
  }
  getPrecomputes(W, point, transform) {
    let comp = pointPrecomputes.get(point);
    if (!comp) {
      comp = this.precomputeWindow(point, W);
      if (W !== 1) {
        if (typeof transform === "function")
          comp = transform(comp);
        pointPrecomputes.set(point, comp);
      }
    }
    return comp;
  }
  cached(point, scalar, transform) {
    const W = getW(point);
    return this.wNAF(W, this.getPrecomputes(W, point, transform), scalar);
  }
  unsafe(point, scalar, transform, prev) {
    const W = getW(point);
    if (W === 1)
      return this._unsafeLadder(point, scalar, prev);
    return this.wNAFUnsafe(W, this.getPrecomputes(W, point, transform), scalar, prev);
  }
  // We calculate precomputes for elliptic curve point multiplication
  // using windowed method. This specifies window size and
  // stores precomputed values. Usually only base point would be precomputed.
  createCache(P, W) {
    validateW(W, this.bits);
    pointWindowSizes.set(P, W);
    pointPrecomputes.delete(P);
  }
  hasCache(elm) {
    return getW(elm) !== 1;
  }
};
function mulEndoUnsafe(Point, point, k1, k2) {
  let acc = point;
  let p1 = Point.ZERO;
  let p2 = Point.ZERO;
  while (k1 > _0n3 || k2 > _0n3) {
    if (k1 & _1n3)
      p1 = p1.add(acc);
    if (k2 & _1n3)
      p2 = p2.add(acc);
    acc = acc.double();
    k1 >>= _1n3;
    k2 >>= _1n3;
  }
  return { p1, p2 };
}
function pippenger(c, fieldN, points, scalars) {
  validateMSMPoints(points, c);
  validateMSMScalars(scalars, fieldN);
  const plength = points.length;
  const slength = scalars.length;
  if (plength !== slength)
    throw new Error("arrays of points and scalars must have equal length");
  const zero = c.ZERO;
  const wbits = bitLen(BigInt(plength));
  let windowSize = 1;
  if (wbits > 12)
    windowSize = wbits - 3;
  else if (wbits > 4)
    windowSize = wbits - 2;
  else if (wbits > 0)
    windowSize = 2;
  const MASK = bitMask(windowSize);
  const buckets = new Array(Number(MASK) + 1).fill(zero);
  const lastBits = Math.floor((fieldN.BITS - 1) / windowSize) * windowSize;
  let sum = zero;
  for (let i = lastBits; i >= 0; i -= windowSize) {
    buckets.fill(zero);
    for (let j = 0; j < slength; j++) {
      const scalar = scalars[j];
      const wbits2 = Number(scalar >> BigInt(i) & MASK);
      buckets[wbits2] = buckets[wbits2].add(points[j]);
    }
    let resI = zero;
    for (let j = buckets.length - 1, sumI = zero; j > 0; j--) {
      sumI = sumI.add(buckets[j]);
      resI = resI.add(sumI);
    }
    sum = sum.add(resI);
    if (i !== 0)
      for (let j = 0; j < windowSize; j++)
        sum = sum.double();
  }
  return sum;
}
function createField(order, field, isLE2) {
  if (field) {
    if (field.ORDER !== order)
      throw new Error("Field.ORDER must match order: Fp == p, Fn == n");
    validateField(field);
    return field;
  } else {
    return Field(order, { isLE: isLE2 });
  }
}
function _createCurveFields(type, CURVE, curveOpts = {}, FpFnLE) {
  if (FpFnLE === void 0)
    FpFnLE = type === "edwards";
  if (!CURVE || typeof CURVE !== "object")
    throw new Error(`expected valid ${type} CURVE object`);
  for (const p of ["p", "n", "h"]) {
    const val = CURVE[p];
    if (!(typeof val === "bigint" && val > _0n3))
      throw new Error(`CURVE.${p} must be positive bigint`);
  }
  const Fp = createField(CURVE.p, curveOpts.Fp, FpFnLE);
  const Fn = createField(CURVE.n, curveOpts.Fn, FpFnLE);
  const _b = type === "weierstrass" ? "b" : "d";
  const params = ["Gx", "Gy", "a", _b];
  for (const p of params) {
    if (!Fp.isValid(CURVE[p]))
      throw new Error(`CURVE.${p} must be valid field element of CURVE.Fp`);
  }
  CURVE = Object.freeze(Object.assign({}, CURVE));
  return { CURVE, Fp, Fn };
}

// node_modules/@noble/curves/esm/abstract/weierstrass.js
var divNearest = (num, den) => (num + (num >= 0 ? den : -den) / _2n2) / den;
function _splitEndoScalar(k, basis, n) {
  const [[a1, b1], [a2, b2]] = basis;
  const c1 = divNearest(b2 * k, n);
  const c2 = divNearest(-b1 * k, n);
  let k1 = k - c1 * a1 - c2 * a2;
  let k2 = -c1 * b1 - c2 * b2;
  const k1neg = k1 < _0n4;
  const k2neg = k2 < _0n4;
  if (k1neg)
    k1 = -k1;
  if (k2neg)
    k2 = -k2;
  const MAX_NUM = bitMask(Math.ceil(bitLen(n) / 2)) + _1n4;
  if (k1 < _0n4 || k1 >= MAX_NUM || k2 < _0n4 || k2 >= MAX_NUM) {
    throw new Error("splitScalar (endomorphism): failed, k=" + k);
  }
  return { k1neg, k1, k2neg, k2 };
}
function validateSigFormat(format) {
  if (!["compact", "recovered", "der"].includes(format))
    throw new Error('Signature format must be "compact", "recovered", or "der"');
  return format;
}
function validateSigOpts(opts, def) {
  const optsn = {};
  for (let optName of Object.keys(def)) {
    optsn[optName] = opts[optName] === void 0 ? def[optName] : opts[optName];
  }
  _abool2(optsn.lowS, "lowS");
  _abool2(optsn.prehash, "prehash");
  if (optsn.format !== void 0)
    validateSigFormat(optsn.format);
  return optsn;
}
var DERErr = class extends Error {
  constructor(m = "") {
    super(m);
  }
};
var DER = {
  // asn.1 DER encoding utils
  Err: DERErr,
  // Basic building block is TLV (Tag-Length-Value)
  _tlv: {
    encode: (tag, data) => {
      const { Err: E } = DER;
      if (tag < 0 || tag > 256)
        throw new E("tlv.encode: wrong tag");
      if (data.length & 1)
        throw new E("tlv.encode: unpadded data");
      const dataLen = data.length / 2;
      const len = numberToHexUnpadded(dataLen);
      if (len.length / 2 & 128)
        throw new E("tlv.encode: long form length too big");
      const lenLen = dataLen > 127 ? numberToHexUnpadded(len.length / 2 | 128) : "";
      const t = numberToHexUnpadded(tag);
      return t + lenLen + len + data;
    },
    // v - value, l - left bytes (unparsed)
    decode(tag, data) {
      const { Err: E } = DER;
      let pos = 0;
      if (tag < 0 || tag > 256)
        throw new E("tlv.encode: wrong tag");
      if (data.length < 2 || data[pos++] !== tag)
        throw new E("tlv.decode: wrong tlv");
      const first2 = data[pos++];
      const isLong = !!(first2 & 128);
      let length = 0;
      if (!isLong)
        length = first2;
      else {
        const lenLen = first2 & 127;
        if (!lenLen)
          throw new E("tlv.decode(long): indefinite length not supported");
        if (lenLen > 4)
          throw new E("tlv.decode(long): byte length is too big");
        const lengthBytes = data.subarray(pos, pos + lenLen);
        if (lengthBytes.length !== lenLen)
          throw new E("tlv.decode: length bytes not complete");
        if (lengthBytes[0] === 0)
          throw new E("tlv.decode(long): zero leftmost byte");
        for (const b of lengthBytes)
          length = length << 8 | b;
        pos += lenLen;
        if (length < 128)
          throw new E("tlv.decode(long): not minimal encoding");
      }
      const v = data.subarray(pos, pos + length);
      if (v.length !== length)
        throw new E("tlv.decode: wrong value length");
      return { v, l: data.subarray(pos + length) };
    }
  },
  // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,
  // since we always use positive integers here. It must always be empty:
  // - add zero byte if exists
  // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)
  _int: {
    encode(num) {
      const { Err: E } = DER;
      if (num < _0n4)
        throw new E("integer: negative integers are not allowed");
      let hex8 = numberToHexUnpadded(num);
      if (Number.parseInt(hex8[0], 16) & 8)
        hex8 = "00" + hex8;
      if (hex8.length & 1)
        throw new E("unexpected DER parsing assertion: unpadded hex");
      return hex8;
    },
    decode(data) {
      const { Err: E } = DER;
      if (data[0] & 128)
        throw new E("invalid signature integer: negative");
      if (data[0] === 0 && !(data[1] & 128))
        throw new E("invalid signature integer: unnecessary leading zero");
      return bytesToNumberBE(data);
    }
  },
  toSig(hex8) {
    const { Err: E, _int: int, _tlv: tlv } = DER;
    const data = ensureBytes("signature", hex8);
    const { v: seqBytes, l: seqLeftBytes } = tlv.decode(48, data);
    if (seqLeftBytes.length)
      throw new E("invalid signature: left bytes after parsing");
    const { v: rBytes, l: rLeftBytes } = tlv.decode(2, seqBytes);
    const { v: sBytes, l: sLeftBytes } = tlv.decode(2, rLeftBytes);
    if (sLeftBytes.length)
      throw new E("invalid signature: left bytes after parsing");
    return { r: int.decode(rBytes), s: int.decode(sBytes) };
  },
  hexFromSig(sig2) {
    const { _tlv: tlv, _int: int } = DER;
    const rs = tlv.encode(2, int.encode(sig2.r));
    const ss = tlv.encode(2, int.encode(sig2.s));
    const seq = rs + ss;
    return tlv.encode(48, seq);
  }
};
var _0n4 = BigInt(0);
var _1n4 = BigInt(1);
var _2n2 = BigInt(2);
var _3n2 = BigInt(3);
var _4n2 = BigInt(4);
function _normFnElement(Fn, key) {
  const { BYTES: expected } = Fn;
  let num;
  if (typeof key === "bigint") {
    num = key;
  } else {
    let bytes2 = ensureBytes("private key", key);
    try {
      num = Fn.fromBytes(bytes2);
    } catch (error) {
      throw new Error(`invalid private key: expected ui8a of size ${expected}, got ${typeof key}`);
    }
  }
  if (!Fn.isValidNot0(num))
    throw new Error("invalid private key: out of range [1..N-1]");
  return num;
}
function weierstrassN(params, extraOpts = {}) {
  const validated = _createCurveFields("weierstrass", params, extraOpts);
  const { Fp, Fn } = validated;
  let CURVE = validated.CURVE;
  const { h: cofactor, n: CURVE_ORDER } = CURVE;
  _validateObject(extraOpts, {}, {
    allowInfinityPoint: "boolean",
    clearCofactor: "function",
    isTorsionFree: "function",
    fromBytes: "function",
    toBytes: "function",
    endo: "object",
    wrapPrivateKey: "boolean"
  });
  const { endo } = extraOpts;
  if (endo) {
    if (!Fp.is0(CURVE.a) || typeof endo.beta !== "bigint" || !Array.isArray(endo.basises)) {
      throw new Error('invalid endo: expected "beta": bigint and "basises": array');
    }
  }
  const lengths = getWLengths(Fp, Fn);
  function assertCompressionIsSupported() {
    if (!Fp.isOdd)
      throw new Error("compression is not supported: Field does not have .isOdd()");
  }
  function pointToBytes(_c, point, isCompressed) {
    const { x, y } = point.toAffine();
    const bx = Fp.toBytes(x);
    _abool2(isCompressed, "isCompressed");
    if (isCompressed) {
      assertCompressionIsSupported();
      const hasEvenY = !Fp.isOdd(y);
      return concatBytes(pprefix(hasEvenY), bx);
    } else {
      return concatBytes(Uint8Array.of(4), bx, Fp.toBytes(y));
    }
  }
  function pointFromBytes(bytes2) {
    _abytes2(bytes2, void 0, "Point");
    const { publicKey: comp, publicKeyUncompressed: uncomp } = lengths;
    const length = bytes2.length;
    const head = bytes2[0];
    const tail = bytes2.subarray(1);
    if (length === comp && (head === 2 || head === 3)) {
      const x = Fp.fromBytes(tail);
      if (!Fp.isValid(x))
        throw new Error("bad point: is not on curve, wrong x");
      const y2 = weierstrassEquation(x);
      let y;
      try {
        y = Fp.sqrt(y2);
      } catch (sqrtError) {
        const err = sqrtError instanceof Error ? ": " + sqrtError.message : "";
        throw new Error("bad point: is not on curve, sqrt error" + err);
      }
      assertCompressionIsSupported();
      const isYOdd = Fp.isOdd(y);
      const isHeadOdd = (head & 1) === 1;
      if (isHeadOdd !== isYOdd)
        y = Fp.neg(y);
      return { x, y };
    } else if (length === uncomp && head === 4) {
      const L = Fp.BYTES;
      const x = Fp.fromBytes(tail.subarray(0, L));
      const y = Fp.fromBytes(tail.subarray(L, L * 2));
      if (!isValidXY(x, y))
        throw new Error("bad point: is not on curve");
      return { x, y };
    } else {
      throw new Error(`bad point: got length ${length}, expected compressed=${comp} or uncompressed=${uncomp}`);
    }
  }
  const encodePoint = extraOpts.toBytes || pointToBytes;
  const decodePoint = extraOpts.fromBytes || pointFromBytes;
  function weierstrassEquation(x) {
    const x2 = Fp.sqr(x);
    const x3 = Fp.mul(x2, x);
    return Fp.add(Fp.add(x3, Fp.mul(x, CURVE.a)), CURVE.b);
  }
  function isValidXY(x, y) {
    const left = Fp.sqr(y);
    const right = weierstrassEquation(x);
    return Fp.eql(left, right);
  }
  if (!isValidXY(CURVE.Gx, CURVE.Gy))
    throw new Error("bad curve params: generator point");
  const _4a3 = Fp.mul(Fp.pow(CURVE.a, _3n2), _4n2);
  const _27b2 = Fp.mul(Fp.sqr(CURVE.b), BigInt(27));
  if (Fp.is0(Fp.add(_4a3, _27b2)))
    throw new Error("bad curve params: a or b");
  function acoord(title, n, banZero = false) {
    if (!Fp.isValid(n) || banZero && Fp.is0(n))
      throw new Error(`bad point coordinate ${title}`);
    return n;
  }
  function aprjpoint(other) {
    if (!(other instanceof Point))
      throw new Error("ProjectivePoint expected");
  }
  function splitEndoScalarN(k) {
    if (!endo || !endo.basises)
      throw new Error("no endo");
    return _splitEndoScalar(k, endo.basises, Fn.ORDER);
  }
  const toAffineMemo = memoized((p, iz) => {
    const { X, Y, Z } = p;
    if (Fp.eql(Z, Fp.ONE))
      return { x: X, y: Y };
    const is0 = p.is0();
    if (iz == null)
      iz = is0 ? Fp.ONE : Fp.inv(Z);
    const x = Fp.mul(X, iz);
    const y = Fp.mul(Y, iz);
    const zz = Fp.mul(Z, iz);
    if (is0)
      return { x: Fp.ZERO, y: Fp.ZERO };
    if (!Fp.eql(zz, Fp.ONE))
      throw new Error("invZ was invalid");
    return { x, y };
  });
  const assertValidMemo = memoized((p) => {
    if (p.is0()) {
      if (extraOpts.allowInfinityPoint && !Fp.is0(p.Y))
        return;
      throw new Error("bad point: ZERO");
    }
    const { x, y } = p.toAffine();
    if (!Fp.isValid(x) || !Fp.isValid(y))
      throw new Error("bad point: x or y not field elements");
    if (!isValidXY(x, y))
      throw new Error("bad point: equation left != right");
    if (!p.isTorsionFree())
      throw new Error("bad point: not in prime-order subgroup");
    return true;
  });
  function finishEndo(endoBeta, k1p, k2p, k1neg, k2neg) {
    k2p = new Point(Fp.mul(k2p.X, endoBeta), k2p.Y, k2p.Z);
    k1p = negateCt(k1neg, k1p);
    k2p = negateCt(k2neg, k2p);
    return k1p.add(k2p);
  }
  class Point {
    /** Does NOT validate if the point is valid. Use `.assertValidity()`. */
    constructor(X, Y, Z) {
      this.X = acoord("x", X);
      this.Y = acoord("y", Y, true);
      this.Z = acoord("z", Z);
      Object.freeze(this);
    }
    static CURVE() {
      return CURVE;
    }
    /** Does NOT validate if the point is valid. Use `.assertValidity()`. */
    static fromAffine(p) {
      const { x, y } = p || {};
      if (!p || !Fp.isValid(x) || !Fp.isValid(y))
        throw new Error("invalid affine point");
      if (p instanceof Point)
        throw new Error("projective point not allowed");
      if (Fp.is0(x) && Fp.is0(y))
        return Point.ZERO;
      return new Point(x, y, Fp.ONE);
    }
    static fromBytes(bytes2) {
      const P = Point.fromAffine(decodePoint(_abytes2(bytes2, void 0, "point")));
      P.assertValidity();
      return P;
    }
    static fromHex(hex8) {
      return Point.fromBytes(ensureBytes("pointHex", hex8));
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    /**
     *
     * @param windowSize
     * @param isLazy true will defer table computation until the first multiplication
     * @returns
     */
    precompute(windowSize = 8, isLazy = true) {
      wnaf.createCache(this, windowSize);
      if (!isLazy)
        this.multiply(_3n2);
      return this;
    }
    // TODO: return `this`
    /** A point on curve is valid if it conforms to equation. */
    assertValidity() {
      assertValidMemo(this);
    }
    hasEvenY() {
      const { y } = this.toAffine();
      if (!Fp.isOdd)
        throw new Error("Field doesn't support isOdd");
      return !Fp.isOdd(y);
    }
    /** Compare one point to another. */
    equals(other) {
      aprjpoint(other);
      const { X: X1, Y: Y1, Z: Z1 } = this;
      const { X: X2, Y: Y2, Z: Z2 } = other;
      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));
      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));
      return U1 && U2;
    }
    /** Flips point to one corresponding to (x, -y) in Affine coordinates. */
    negate() {
      return new Point(this.X, Fp.neg(this.Y), this.Z);
    }
    // Renes-Costello-Batina exception-free doubling formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 3
    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
    double() {
      const { a, b } = CURVE;
      const b3 = Fp.mul(b, _3n2);
      const { X: X1, Y: Y1, Z: Z1 } = this;
      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO;
      let t0 = Fp.mul(X1, X1);
      let t1 = Fp.mul(Y1, Y1);
      let t2 = Fp.mul(Z1, Z1);
      let t3 = Fp.mul(X1, Y1);
      t3 = Fp.add(t3, t3);
      Z3 = Fp.mul(X1, Z1);
      Z3 = Fp.add(Z3, Z3);
      X3 = Fp.mul(a, Z3);
      Y3 = Fp.mul(b3, t2);
      Y3 = Fp.add(X3, Y3);
      X3 = Fp.sub(t1, Y3);
      Y3 = Fp.add(t1, Y3);
      Y3 = Fp.mul(X3, Y3);
      X3 = Fp.mul(t3, X3);
      Z3 = Fp.mul(b3, Z3);
      t2 = Fp.mul(a, t2);
      t3 = Fp.sub(t0, t2);
      t3 = Fp.mul(a, t3);
      t3 = Fp.add(t3, Z3);
      Z3 = Fp.add(t0, t0);
      t0 = Fp.add(Z3, t0);
      t0 = Fp.add(t0, t2);
      t0 = Fp.mul(t0, t3);
      Y3 = Fp.add(Y3, t0);
      t2 = Fp.mul(Y1, Z1);
      t2 = Fp.add(t2, t2);
      t0 = Fp.mul(t2, t3);
      X3 = Fp.sub(X3, t0);
      Z3 = Fp.mul(t2, t1);
      Z3 = Fp.add(Z3, Z3);
      Z3 = Fp.add(Z3, Z3);
      return new Point(X3, Y3, Z3);
    }
    // Renes-Costello-Batina exception-free addition formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 1
    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
    add(other) {
      aprjpoint(other);
      const { X: X1, Y: Y1, Z: Z1 } = this;
      const { X: X2, Y: Y2, Z: Z2 } = other;
      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO;
      const a = CURVE.a;
      const b3 = Fp.mul(CURVE.b, _3n2);
      let t0 = Fp.mul(X1, X2);
      let t1 = Fp.mul(Y1, Y2);
      let t2 = Fp.mul(Z1, Z2);
      let t3 = Fp.add(X1, Y1);
      let t4 = Fp.add(X2, Y2);
      t3 = Fp.mul(t3, t4);
      t4 = Fp.add(t0, t1);
      t3 = Fp.sub(t3, t4);
      t4 = Fp.add(X1, Z1);
      let t5 = Fp.add(X2, Z2);
      t4 = Fp.mul(t4, t5);
      t5 = Fp.add(t0, t2);
      t4 = Fp.sub(t4, t5);
      t5 = Fp.add(Y1, Z1);
      X3 = Fp.add(Y2, Z2);
      t5 = Fp.mul(t5, X3);
      X3 = Fp.add(t1, t2);
      t5 = Fp.sub(t5, X3);
      Z3 = Fp.mul(a, t4);
      X3 = Fp.mul(b3, t2);
      Z3 = Fp.add(X3, Z3);
      X3 = Fp.sub(t1, Z3);
      Z3 = Fp.add(t1, Z3);
      Y3 = Fp.mul(X3, Z3);
      t1 = Fp.add(t0, t0);
      t1 = Fp.add(t1, t0);
      t2 = Fp.mul(a, t2);
      t4 = Fp.mul(b3, t4);
      t1 = Fp.add(t1, t2);
      t2 = Fp.sub(t0, t2);
      t2 = Fp.mul(a, t2);
      t4 = Fp.add(t4, t2);
      t0 = Fp.mul(t1, t4);
      Y3 = Fp.add(Y3, t0);
      t0 = Fp.mul(t5, t4);
      X3 = Fp.mul(t3, X3);
      X3 = Fp.sub(X3, t0);
      t0 = Fp.mul(t3, t1);
      Z3 = Fp.mul(t5, Z3);
      Z3 = Fp.add(Z3, t0);
      return new Point(X3, Y3, Z3);
    }
    subtract(other) {
      return this.add(other.negate());
    }
    is0() {
      return this.equals(Point.ZERO);
    }
    /**
     * Constant time multiplication.
     * Uses wNAF method. Windowed method may be 10% faster,
     * but takes 2x longer to generate and consumes 2x memory.
     * Uses precomputes when available.
     * Uses endomorphism for Koblitz curves.
     * @param scalar by which the point would be multiplied
     * @returns New point
     */
    multiply(scalar) {
      const { endo: endo2 } = extraOpts;
      if (!Fn.isValidNot0(scalar))
        throw new Error("invalid scalar: out of range");
      let point, fake;
      const mul = (n) => wnaf.cached(this, n, (p) => normalizeZ(Point, p));
      if (endo2) {
        const { k1neg, k1, k2neg, k2 } = splitEndoScalarN(scalar);
        const { p: k1p, f: k1f } = mul(k1);
        const { p: k2p, f: k2f } = mul(k2);
        fake = k1f.add(k2f);
        point = finishEndo(endo2.beta, k1p, k2p, k1neg, k2neg);
      } else {
        const { p, f } = mul(scalar);
        point = p;
        fake = f;
      }
      return normalizeZ(Point, [point, fake])[0];
    }
    /**
     * Non-constant-time multiplication. Uses double-and-add algorithm.
     * It's faster, but should only be used when you don't care about
     * an exposed secret key e.g. sig verification, which works over *public* keys.
     */
    multiplyUnsafe(sc) {
      const { endo: endo2 } = extraOpts;
      const p = this;
      if (!Fn.isValid(sc))
        throw new Error("invalid scalar: out of range");
      if (sc === _0n4 || p.is0())
        return Point.ZERO;
      if (sc === _1n4)
        return p;
      if (wnaf.hasCache(this))
        return this.multiply(sc);
      if (endo2) {
        const { k1neg, k1, k2neg, k2 } = splitEndoScalarN(sc);
        const { p1, p2 } = mulEndoUnsafe(Point, p, k1, k2);
        return finishEndo(endo2.beta, p1, p2, k1neg, k2neg);
      } else {
        return wnaf.unsafe(p, sc);
      }
    }
    multiplyAndAddUnsafe(Q, a, b) {
      const sum = this.multiplyUnsafe(a).add(Q.multiplyUnsafe(b));
      return sum.is0() ? void 0 : sum;
    }
    /**
     * Converts Projective point to affine (x, y) coordinates.
     * @param invertedZ Z^-1 (inverted zero) - optional, precomputation is useful for invertBatch
     */
    toAffine(invertedZ) {
      return toAffineMemo(this, invertedZ);
    }
    /**
     * Checks whether Point is free of torsion elements (is in prime subgroup).
     * Always torsion-free for cofactor=1 curves.
     */
    isTorsionFree() {
      const { isTorsionFree } = extraOpts;
      if (cofactor === _1n4)
        return true;
      if (isTorsionFree)
        return isTorsionFree(Point, this);
      return wnaf.unsafe(this, CURVE_ORDER).is0();
    }
    clearCofactor() {
      const { clearCofactor } = extraOpts;
      if (cofactor === _1n4)
        return this;
      if (clearCofactor)
        return clearCofactor(Point, this);
      return this.multiplyUnsafe(cofactor);
    }
    isSmallOrder() {
      return this.multiplyUnsafe(cofactor).is0();
    }
    toBytes(isCompressed = true) {
      _abool2(isCompressed, "isCompressed");
      this.assertValidity();
      return encodePoint(Point, this, isCompressed);
    }
    toHex(isCompressed = true) {
      return bytesToHex(this.toBytes(isCompressed));
    }
    toString() {
      return `<Point ${this.is0() ? "ZERO" : this.toHex()}>`;
    }
    // TODO: remove
    get px() {
      return this.X;
    }
    get py() {
      return this.X;
    }
    get pz() {
      return this.Z;
    }
    toRawBytes(isCompressed = true) {
      return this.toBytes(isCompressed);
    }
    _setWindowSize(windowSize) {
      this.precompute(windowSize);
    }
    static normalizeZ(points) {
      return normalizeZ(Point, points);
    }
    static msm(points, scalars) {
      return pippenger(Point, Fn, points, scalars);
    }
    static fromPrivateKey(privateKey) {
      return Point.BASE.multiply(_normFnElement(Fn, privateKey));
    }
  }
  Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);
  Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);
  Point.Fp = Fp;
  Point.Fn = Fn;
  const bits2 = Fn.BITS;
  const wnaf = new wNAF(Point, extraOpts.endo ? Math.ceil(bits2 / 2) : bits2);
  Point.BASE.precompute(8);
  return Point;
}
function pprefix(hasEvenY) {
  return Uint8Array.of(hasEvenY ? 2 : 3);
}
function getWLengths(Fp, Fn) {
  return {
    secretKey: Fn.BYTES,
    publicKey: 1 + Fp.BYTES,
    publicKeyUncompressed: 1 + 2 * Fp.BYTES,
    publicKeyHasPrefix: true,
    signature: 2 * Fn.BYTES
  };
}
function ecdh(Point, ecdhOpts = {}) {
  const { Fn } = Point;
  const randomBytes_ = ecdhOpts.randomBytes || randomBytes;
  const lengths = Object.assign(getWLengths(Point.Fp, Fn), { seed: getMinHashLength(Fn.ORDER) });
  function isValidSecretKey(secretKey) {
    try {
      return !!_normFnElement(Fn, secretKey);
    } catch (error) {
      return false;
    }
  }
  function isValidPublicKey(publicKey, isCompressed) {
    const { publicKey: comp, publicKeyUncompressed } = lengths;
    try {
      const l13 = publicKey.length;
      if (isCompressed === true && l13 !== comp)
        return false;
      if (isCompressed === false && l13 !== publicKeyUncompressed)
        return false;
      return !!Point.fromBytes(publicKey);
    } catch (error) {
      return false;
    }
  }
  function randomSecretKey(seed = randomBytes_(lengths.seed)) {
    return mapHashToField(_abytes2(seed, lengths.seed, "seed"), Fn.ORDER);
  }
  function getPublicKey(secretKey, isCompressed = true) {
    return Point.BASE.multiply(_normFnElement(Fn, secretKey)).toBytes(isCompressed);
  }
  function keygen(seed) {
    const secretKey = randomSecretKey(seed);
    return { secretKey, publicKey: getPublicKey(secretKey) };
  }
  function isProbPub(item) {
    if (typeof item === "bigint")
      return false;
    if (item instanceof Point)
      return true;
    const { secretKey, publicKey, publicKeyUncompressed } = lengths;
    if (Fn.allowedLengths || secretKey === publicKey)
      return void 0;
    const l13 = ensureBytes("key", item).length;
    return l13 === publicKey || l13 === publicKeyUncompressed;
  }
  function getSharedSecret(secretKeyA, publicKeyB, isCompressed = true) {
    if (isProbPub(secretKeyA) === true)
      throw new Error("first arg must be private key");
    if (isProbPub(publicKeyB) === false)
      throw new Error("second arg must be public key");
    const s = _normFnElement(Fn, secretKeyA);
    const b = Point.fromHex(publicKeyB);
    return b.multiply(s).toBytes(isCompressed);
  }
  const utils = {
    isValidSecretKey,
    isValidPublicKey,
    randomSecretKey,
    // TODO: remove
    isValidPrivateKey: isValidSecretKey,
    randomPrivateKey: randomSecretKey,
    normPrivateKeyToScalar: (key) => _normFnElement(Fn, key),
    precompute(windowSize = 8, point = Point.BASE) {
      return point.precompute(windowSize, false);
    }
  };
  return Object.freeze({ getPublicKey, getSharedSecret, keygen, Point, utils, lengths });
}
function ecdsa(Point, hash, ecdsaOpts = {}) {
  ahash(hash);
  _validateObject(ecdsaOpts, {}, {
    hmac: "function",
    lowS: "boolean",
    randomBytes: "function",
    bits2int: "function",
    bits2int_modN: "function"
  });
  const randomBytes2 = ecdsaOpts.randomBytes || randomBytes;
  const hmac2 = ecdsaOpts.hmac || ((key, ...msgs) => hmac(hash, key, concatBytes(...msgs)));
  const { Fp, Fn } = Point;
  const { ORDER: CURVE_ORDER, BITS: fnBits } = Fn;
  const { keygen, getPublicKey, getSharedSecret, utils, lengths } = ecdh(Point, ecdsaOpts);
  const defaultSigOpts = {
    prehash: false,
    lowS: typeof ecdsaOpts.lowS === "boolean" ? ecdsaOpts.lowS : false,
    format: void 0,
    //'compact' as ECDSASigFormat,
    extraEntropy: false
  };
  const defaultSigOpts_format = "compact";
  function isBiggerThanHalfOrder(number) {
    const HALF = CURVE_ORDER >> _1n4;
    return number > HALF;
  }
  function validateRS(title, num) {
    if (!Fn.isValidNot0(num))
      throw new Error(`invalid signature ${title}: out of range 1..Point.Fn.ORDER`);
    return num;
  }
  function validateSigLength(bytes2, format) {
    validateSigFormat(format);
    const size = lengths.signature;
    const sizer = format === "compact" ? size : format === "recovered" ? size + 1 : void 0;
    return _abytes2(bytes2, sizer, `${format} signature`);
  }
  class Signature {
    constructor(r, s, recovery) {
      this.r = validateRS("r", r);
      this.s = validateRS("s", s);
      if (recovery != null)
        this.recovery = recovery;
      Object.freeze(this);
    }
    static fromBytes(bytes2, format = defaultSigOpts_format) {
      validateSigLength(bytes2, format);
      let recid;
      if (format === "der") {
        const { r: r2, s: s2 } = DER.toSig(_abytes2(bytes2));
        return new Signature(r2, s2);
      }
      if (format === "recovered") {
        recid = bytes2[0];
        format = "compact";
        bytes2 = bytes2.subarray(1);
      }
      const L = Fn.BYTES;
      const r = bytes2.subarray(0, L);
      const s = bytes2.subarray(L, L * 2);
      return new Signature(Fn.fromBytes(r), Fn.fromBytes(s), recid);
    }
    static fromHex(hex8, format) {
      return this.fromBytes(hexToBytes(hex8), format);
    }
    addRecoveryBit(recovery) {
      return new Signature(this.r, this.s, recovery);
    }
    recoverPublicKey(messageHash) {
      const FIELD_ORDER = Fp.ORDER;
      const { r, s, recovery: rec } = this;
      if (rec == null || ![0, 1, 2, 3].includes(rec))
        throw new Error("recovery id invalid");
      const hasCofactor = CURVE_ORDER * _2n2 < FIELD_ORDER;
      if (hasCofactor && rec > 1)
        throw new Error("recovery id is ambiguous for h>1 curve");
      const radj = rec === 2 || rec === 3 ? r + CURVE_ORDER : r;
      if (!Fp.isValid(radj))
        throw new Error("recovery id 2 or 3 invalid");
      const x = Fp.toBytes(radj);
      const R = Point.fromBytes(concatBytes(pprefix((rec & 1) === 0), x));
      const ir = Fn.inv(radj);
      const h = bits2int_modN(ensureBytes("msgHash", messageHash));
      const u1 = Fn.create(-h * ir);
      const u2 = Fn.create(s * ir);
      const Q = Point.BASE.multiplyUnsafe(u1).add(R.multiplyUnsafe(u2));
      if (Q.is0())
        throw new Error("point at infinify");
      Q.assertValidity();
      return Q;
    }
    // Signatures should be low-s, to prevent malleability.
    hasHighS() {
      return isBiggerThanHalfOrder(this.s);
    }
    toBytes(format = defaultSigOpts_format) {
      validateSigFormat(format);
      if (format === "der")
        return hexToBytes(DER.hexFromSig(this));
      const r = Fn.toBytes(this.r);
      const s = Fn.toBytes(this.s);
      if (format === "recovered") {
        if (this.recovery == null)
          throw new Error("recovery bit must be present");
        return concatBytes(Uint8Array.of(this.recovery), r, s);
      }
      return concatBytes(r, s);
    }
    toHex(format) {
      return bytesToHex(this.toBytes(format));
    }
    // TODO: remove
    assertValidity() {
    }
    static fromCompact(hex8) {
      return Signature.fromBytes(ensureBytes("sig", hex8), "compact");
    }
    static fromDER(hex8) {
      return Signature.fromBytes(ensureBytes("sig", hex8), "der");
    }
    normalizeS() {
      return this.hasHighS() ? new Signature(this.r, Fn.neg(this.s), this.recovery) : this;
    }
    toDERRawBytes() {
      return this.toBytes("der");
    }
    toDERHex() {
      return bytesToHex(this.toBytes("der"));
    }
    toCompactRawBytes() {
      return this.toBytes("compact");
    }
    toCompactHex() {
      return bytesToHex(this.toBytes("compact"));
    }
  }
  const bits2int = ecdsaOpts.bits2int || function bits2int_def(bytes2) {
    if (bytes2.length > 8192)
      throw new Error("input is too large");
    const num = bytesToNumberBE(bytes2);
    const delta = bytes2.length * 8 - fnBits;
    return delta > 0 ? num >> BigInt(delta) : num;
  };
  const bits2int_modN = ecdsaOpts.bits2int_modN || function bits2int_modN_def(bytes2) {
    return Fn.create(bits2int(bytes2));
  };
  const ORDER_MASK = bitMask(fnBits);
  function int2octets(num) {
    aInRange("num < 2^" + fnBits, num, _0n4, ORDER_MASK);
    return Fn.toBytes(num);
  }
  function validateMsgAndHash(message, prehash) {
    _abytes2(message, void 0, "message");
    return prehash ? _abytes2(hash(message), void 0, "prehashed message") : message;
  }
  function prepSig(message, privateKey, opts) {
    if (["recovered", "canonical"].some((k) => k in opts))
      throw new Error("sign() legacy options not supported");
    const { lowS, prehash, extraEntropy } = validateSigOpts(opts, defaultSigOpts);
    message = validateMsgAndHash(message, prehash);
    const h1int = bits2int_modN(message);
    const d = _normFnElement(Fn, privateKey);
    const seedArgs = [int2octets(d), int2octets(h1int)];
    if (extraEntropy != null && extraEntropy !== false) {
      const e = extraEntropy === true ? randomBytes2(lengths.secretKey) : extraEntropy;
      seedArgs.push(ensureBytes("extraEntropy", e));
    }
    const seed = concatBytes(...seedArgs);
    const m = h1int;
    function k2sig(kBytes) {
      const k = bits2int(kBytes);
      if (!Fn.isValidNot0(k))
        return;
      const ik = Fn.inv(k);
      const q = Point.BASE.multiply(k).toAffine();
      const r = Fn.create(q.x);
      if (r === _0n4)
        return;
      const s = Fn.create(ik * Fn.create(m + r * d));
      if (s === _0n4)
        return;
      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n4);
      let normS = s;
      if (lowS && isBiggerThanHalfOrder(s)) {
        normS = Fn.neg(s);
        recovery ^= 1;
      }
      return new Signature(r, normS, recovery);
    }
    return { seed, k2sig };
  }
  function sign2(message, secretKey, opts = {}) {
    message = ensureBytes("message", message);
    const { seed, k2sig } = prepSig(message, secretKey, opts);
    const drbg = createHmacDrbg(hash.outputLen, Fn.BYTES, hmac2);
    const sig2 = drbg(seed, k2sig);
    return sig2;
  }
  function tryParsingSig(sg) {
    let sig2 = void 0;
    const isHex9 = typeof sg === "string" || isBytes2(sg);
    const isObj = !isHex9 && sg !== null && typeof sg === "object" && typeof sg.r === "bigint" && typeof sg.s === "bigint";
    if (!isHex9 && !isObj)
      throw new Error("invalid signature, expected Uint8Array, hex string or Signature instance");
    if (isObj) {
      sig2 = new Signature(sg.r, sg.s);
    } else if (isHex9) {
      try {
        sig2 = Signature.fromBytes(ensureBytes("sig", sg), "der");
      } catch (derError) {
        if (!(derError instanceof DER.Err))
          throw derError;
      }
      if (!sig2) {
        try {
          sig2 = Signature.fromBytes(ensureBytes("sig", sg), "compact");
        } catch (error) {
          return false;
        }
      }
    }
    if (!sig2)
      return false;
    return sig2;
  }
  function verify(signature, message, publicKey, opts = {}) {
    const { lowS, prehash, format } = validateSigOpts(opts, defaultSigOpts);
    publicKey = ensureBytes("publicKey", publicKey);
    message = validateMsgAndHash(ensureBytes("message", message), prehash);
    if ("strict" in opts)
      throw new Error("options.strict was renamed to lowS");
    const sig2 = format === void 0 ? tryParsingSig(signature) : Signature.fromBytes(ensureBytes("sig", signature), format);
    if (sig2 === false)
      return false;
    try {
      const P = Point.fromBytes(publicKey);
      if (lowS && sig2.hasHighS())
        return false;
      const { r, s } = sig2;
      const h = bits2int_modN(message);
      const is2 = Fn.inv(s);
      const u1 = Fn.create(h * is2);
      const u2 = Fn.create(r * is2);
      const R = Point.BASE.multiplyUnsafe(u1).add(P.multiplyUnsafe(u2));
      if (R.is0())
        return false;
      const v = Fn.create(R.x);
      return v === r;
    } catch (e) {
      return false;
    }
  }
  function recoverPublicKey(signature, message, opts = {}) {
    const { prehash } = validateSigOpts(opts, defaultSigOpts);
    message = validateMsgAndHash(message, prehash);
    return Signature.fromBytes(signature, "recovered").recoverPublicKey(message).toBytes();
  }
  return Object.freeze({
    keygen,
    getPublicKey,
    getSharedSecret,
    utils,
    lengths,
    Point,
    sign: sign2,
    verify,
    recoverPublicKey,
    Signature,
    hash
  });
}
function _weierstrass_legacy_opts_to_new(c) {
  const CURVE = {
    a: c.a,
    b: c.b,
    p: c.Fp.ORDER,
    n: c.n,
    h: c.h,
    Gx: c.Gx,
    Gy: c.Gy
  };
  const Fp = c.Fp;
  let allowedLengths = c.allowedPrivateKeyLengths ? Array.from(new Set(c.allowedPrivateKeyLengths.map((l13) => Math.ceil(l13 / 2)))) : void 0;
  const Fn = Field(CURVE.n, {
    BITS: c.nBitLength,
    allowedLengths,
    modFromBytes: c.wrapPrivateKey
  });
  const curveOpts = {
    Fp,
    Fn,
    allowInfinityPoint: c.allowInfinityPoint,
    endo: c.endo,
    isTorsionFree: c.isTorsionFree,
    clearCofactor: c.clearCofactor,
    fromBytes: c.fromBytes,
    toBytes: c.toBytes
  };
  return { CURVE, curveOpts };
}
function _ecdsa_legacy_opts_to_new(c) {
  const { CURVE, curveOpts } = _weierstrass_legacy_opts_to_new(c);
  const ecdsaOpts = {
    hmac: c.hmac,
    randomBytes: c.randomBytes,
    lowS: c.lowS,
    bits2int: c.bits2int,
    bits2int_modN: c.bits2int_modN
  };
  return { CURVE, curveOpts, hash: c.hash, ecdsaOpts };
}
function _ecdsa_new_output_to_legacy(c, _ecdsa) {
  const Point = _ecdsa.Point;
  return Object.assign({}, _ecdsa, {
    ProjectivePoint: Point,
    CURVE: Object.assign({}, c, nLength(Point.Fn.ORDER, Point.Fn.BITS))
  });
}
function weierstrass(c) {
  const { CURVE, curveOpts, hash, ecdsaOpts } = _ecdsa_legacy_opts_to_new(c);
  const Point = weierstrassN(CURVE, curveOpts);
  const signs = ecdsa(Point, hash, ecdsaOpts);
  return _ecdsa_new_output_to_legacy(c, signs);
}

// node_modules/@noble/curves/esm/_shortw_utils.js
function createCurve(curveDef, defHash) {
  const create = (hash) => weierstrass({ ...curveDef, hash });
  return { ...create(defHash), create };
}

// node_modules/@noble/curves/esm/secp256k1.js
var secp256k1_CURVE = {
  p: BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"),
  n: BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"),
  h: BigInt(1),
  a: BigInt(0),
  b: BigInt(7),
  Gx: BigInt("0x79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798"),
  Gy: BigInt("0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8")
};
var secp256k1_ENDO = {
  beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
  basises: [
    [BigInt("0x3086d221a7d46bcde86c90e49284eb15"), -BigInt("0xe4437ed6010e88286f547fa90abfe4c3")],
    [BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"), BigInt("0x3086d221a7d46bcde86c90e49284eb15")]
  ]
};
var _2n3 = /* @__PURE__ */ BigInt(2);
function sqrtMod(y) {
  const P = secp256k1_CURVE.p;
  const _3n3 = BigInt(3), _6n = BigInt(6), _11n2 = BigInt(11), _22n = BigInt(22);
  const _23n2 = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);
  const b2 = y * y * y % P;
  const b3 = b2 * b2 * y % P;
  const b6 = pow2(b3, _3n3, P) * b3 % P;
  const b9 = pow2(b6, _3n3, P) * b3 % P;
  const b11 = pow2(b9, _2n3, P) * b2 % P;
  const b22 = pow2(b11, _11n2, P) * b11 % P;
  const b44 = pow2(b22, _22n, P) * b22 % P;
  const b88 = pow2(b44, _44n, P) * b44 % P;
  const b176 = pow2(b88, _88n, P) * b88 % P;
  const b220 = pow2(b176, _44n, P) * b44 % P;
  const b223 = pow2(b220, _3n3, P) * b3 % P;
  const t1 = pow2(b223, _23n2, P) * b22 % P;
  const t2 = pow2(t1, _6n, P) * b2 % P;
  const root = pow2(t2, _2n3, P);
  if (!Fpk1.eql(Fpk1.sqr(root), y))
    throw new Error("Cannot find square root");
  return root;
}
var Fpk1 = Field(secp256k1_CURVE.p, { sqrt: sqrtMod });
var secp256k1 = createCurve({ ...secp256k1_CURVE, Fp: Fpk1, lowS: true, endo: secp256k1_ENDO }, sha256);

// node_modules/@noble/hashes/esm/sha3.js
var _0n5 = BigInt(0);
var _1n5 = BigInt(1);
var _2n4 = BigInt(2);
var _7n2 = BigInt(7);
var _256n = BigInt(256);
var _0x71n = BigInt(113);
var SHA3_PI = [];
var SHA3_ROTL = [];
var _SHA3_IOTA = [];
for (let round = 0, R = _1n5, x = 1, y = 0; round < 24; round++) {
  [x, y] = [y, (2 * x + 3 * y) % 5];
  SHA3_PI.push(2 * (5 * y + x));
  SHA3_ROTL.push((round + 1) * (round + 2) / 2 % 64);
  let t = _0n5;
  for (let j = 0; j < 7; j++) {
    R = (R << _1n5 ^ (R >> _7n2) * _0x71n) % _256n;
    if (R & _2n4)
      t ^= _1n5 << (_1n5 << /* @__PURE__ */ BigInt(j)) - _1n5;
  }
  _SHA3_IOTA.push(t);
}
var IOTAS = split(_SHA3_IOTA, true);
var SHA3_IOTA_H = IOTAS[0];
var SHA3_IOTA_L = IOTAS[1];
var rotlH = (h, l13, s) => s > 32 ? rotlBH(h, l13, s) : rotlSH(h, l13, s);
var rotlL = (h, l13, s) => s > 32 ? rotlBL(h, l13, s) : rotlSL(h, l13, s);
function keccakP(s, rounds = 24) {
  const B = new Uint32Array(5 * 2);
  for (let round = 24 - rounds; round < 24; round++) {
    for (let x = 0; x < 10; x++)
      B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];
    for (let x = 0; x < 10; x += 2) {
      const idx1 = (x + 8) % 10;
      const idx0 = (x + 2) % 10;
      const B0 = B[idx0];
      const B1 = B[idx0 + 1];
      const Th = rotlH(B0, B1, 1) ^ B[idx1];
      const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];
      for (let y = 0; y < 50; y += 10) {
        s[x + y] ^= Th;
        s[x + y + 1] ^= Tl;
      }
    }
    let curH = s[2];
    let curL = s[3];
    for (let t = 0; t < 24; t++) {
      const shift = SHA3_ROTL[t];
      const Th = rotlH(curH, curL, shift);
      const Tl = rotlL(curH, curL, shift);
      const PI = SHA3_PI[t];
      curH = s[PI];
      curL = s[PI + 1];
      s[PI] = Th;
      s[PI + 1] = Tl;
    }
    for (let y = 0; y < 50; y += 10) {
      for (let x = 0; x < 10; x++)
        B[x] = s[y + x];
      for (let x = 0; x < 10; x++)
        s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
    }
    s[0] ^= SHA3_IOTA_H[round];
    s[1] ^= SHA3_IOTA_L[round];
  }
  clean(B);
}
var Keccak = class _Keccak extends Hash {
  // NOTE: we accept arguments in bytes instead of bits here.
  constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
    super();
    this.pos = 0;
    this.posOut = 0;
    this.finished = false;
    this.destroyed = false;
    this.enableXOF = false;
    this.blockLen = blockLen;
    this.suffix = suffix;
    this.outputLen = outputLen;
    this.enableXOF = enableXOF;
    this.rounds = rounds;
    anumber2(outputLen);
    if (!(0 < blockLen && blockLen < 200))
      throw new Error("only keccak-f1600 function is supported");
    this.state = new Uint8Array(200);
    this.state32 = u322(this.state);
  }
  clone() {
    return this._cloneInto();
  }
  keccak() {
    swap32IfBE(this.state32);
    keccakP(this.state32, this.rounds);
    swap32IfBE(this.state32);
    this.posOut = 0;
    this.pos = 0;
  }
  update(data) {
    aexists(this);
    data = toBytes(data);
    abytes(data);
    const { blockLen, state } = this;
    const len = data.length;
    for (let pos = 0; pos < len; ) {
      const take2 = Math.min(blockLen - this.pos, len - pos);
      for (let i = 0; i < take2; i++)
        state[this.pos++] ^= data[pos++];
      if (this.pos === blockLen)
        this.keccak();
    }
    return this;
  }
  finish() {
    if (this.finished)
      return;
    this.finished = true;
    const { state, suffix, pos, blockLen } = this;
    state[pos] ^= suffix;
    if ((suffix & 128) !== 0 && pos === blockLen - 1)
      this.keccak();
    state[blockLen - 1] ^= 128;
    this.keccak();
  }
  writeInto(out) {
    aexists(this, false);
    abytes(out);
    this.finish();
    const bufferOut = this.state;
    const { blockLen } = this;
    for (let pos = 0, len = out.length; pos < len; ) {
      if (this.posOut >= blockLen)
        this.keccak();
      const take2 = Math.min(blockLen - this.posOut, len - pos);
      out.set(bufferOut.subarray(this.posOut, this.posOut + take2), pos);
      this.posOut += take2;
      pos += take2;
    }
    return out;
  }
  xofInto(out) {
    if (!this.enableXOF)
      throw new Error("XOF is not possible for this instance");
    return this.writeInto(out);
  }
  xof(bytes2) {
    anumber2(bytes2);
    return this.xofInto(new Uint8Array(bytes2));
  }
  digestInto(out) {
    aoutput(out, this);
    if (this.finished)
      throw new Error("digest() was already called");
    this.writeInto(out);
    this.destroy();
    return out;
  }
  digest() {
    return this.digestInto(new Uint8Array(this.outputLen));
  }
  destroy() {
    this.destroyed = true;
    clean(this.state);
  }
  _cloneInto(to) {
    const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
    to || (to = new _Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
    to.state32.set(this.state32);
    to.pos = this.pos;
    to.posOut = this.posOut;
    to.finished = this.finished;
    to.rounds = rounds;
    to.suffix = suffix;
    to.outputLen = outputLen;
    to.enableXOF = enableXOF;
    to.destroyed = this.destroyed;
    return to;
  }
};
var gen = (suffix, blockLen, outputLen) => createHasher(() => new Keccak(blockLen, suffix, outputLen));
var keccak_256 = /* @__PURE__ */ (() => gen(1, 136, 256 / 8))();
var keccak_512 = /* @__PURE__ */ (() => gen(1, 72, 512 / 8))();

// node_modules/@polkadot/rpc-provider/node_modules/@polkadot/x-textencoder/fallback.js
var TextEncoder6 = class {
  encode(value) {
    const count = value.length;
    const u8a = new Uint8Array(count);
    for (let i = 0; i < count; i++) {
      u8a[i] = value.charCodeAt(i);
    }
    return u8a;
  }
};

// node_modules/@polkadot/rpc-provider/node_modules/@polkadot/x-textencoder/browser.js
var TextEncoder7 = /* @__PURE__ */ extractGlobal("TextEncoder", TextEncoder6);

// node_modules/@polkadot/rpc-provider/node_modules/@polkadot/util/is/function.js
function isFunction2(value) {
  return typeof value === "function";
}

// node_modules/@polkadot/rpc-provider/node_modules/@polkadot/util/hex/toU8a.js
var CHR3 = "0123456789abcdef";
var U83 = new Uint8Array(256);
var U163 = new Uint8Array(256 * 256);
for (let i = 0, count = CHR3.length; i < count; i++) {
  U83[CHR3[i].charCodeAt(0) | 0] = i | 0;
  if (i > 9) {
    U83[CHR3[i].toUpperCase().charCodeAt(0) | 0] = i | 0;
  }
}
for (let i = 0; i < 256; i++) {
  const s = i << 8;
  for (let j = 0; j < 256; j++) {
    U163[s | j] = U83[i] << 4 | U83[j];
  }
}
function hexToU8a2(value, bitLength = -1) {
  if (!value) {
    return new Uint8Array();
  }
  let s = value.startsWith("0x") ? 2 : 0;
  const decLength = Math.ceil((value.length - s) / 2);
  const endLength = Math.ceil(bitLength === -1 ? decLength : bitLength / 8);
  const result = new Uint8Array(endLength);
  const offset = endLength > decLength ? endLength - decLength : 0;
  for (let i = offset; i < endLength; i++, s += 2) {
    result[i] = U163[value.charCodeAt(s) << 8 | value.charCodeAt(s + 1)];
  }
  return result;
}

// node_modules/@polkadot/rpc-provider/node_modules/@polkadot/util/bn/bn.js
var import_bn9 = __toESM(require_bn(), 1);

// node_modules/@polkadot/rpc-provider/node_modules/@polkadot/util/is/bn.js
function isBn2(value) {
  return import_bn9.default.isBN(value);
}

// node_modules/@polkadot/rpc-provider/node_modules/@polkadot/util/is/hex.js
var REGEX_HEX_PREFIXED2 = /^0x[\da-fA-F]+$/;
function isHex2(value, bitLength = -1, ignoreLength) {
  return typeof value === "string" && (value === "0x" || REGEX_HEX_PREFIXED2.test(value)) && (bitLength === -1 ? ignoreLength || value.length % 2 === 0 : value.length === 2 + Math.ceil(bitLength / 4));
}

// node_modules/@polkadot/rpc-provider/node_modules/@polkadot/util/is/object.js
function isObject2(value) {
  return !!value && typeof value === "object";
}

// node_modules/@polkadot/rpc-provider/node_modules/@polkadot/util/is/helpers.js
function isOnFunction(...fns) {
  return (value) => isFunction2(value) && fns.every((f) => isFunction2(value[f]));
}

// node_modules/@polkadot/rpc-provider/node_modules/@polkadot/util/has.js
var hasBigInt2 = typeof BigInt2 === "function" && typeof BigInt2.asIntN === "function";
var hasBuffer2 = typeof xglobal.Buffer === "function" && typeof xglobal.Buffer.isBuffer === "function";
var hasProcess2 = typeof xglobal.process === "object";

// node_modules/@polkadot/rpc-provider/node_modules/@polkadot/util/is/buffer.js
function isBuffer2(value) {
  return hasBuffer2 && !!value && isFunction2(value.readDoubleLE) && xglobal.Buffer.isBuffer(value);
}

// node_modules/@polkadot/rpc-provider/node_modules/@polkadot/util/is/u8a.js
function isU8a2(value) {
  return (value && value.constructor) === Uint8Array || value instanceof Uint8Array;
}

// node_modules/@polkadot/rpc-provider/node_modules/@polkadot/util/string/toU8a.js
var encoder3 = new TextEncoder7();
function stringToU8a3(value) {
  return value ? encoder3.encode(value.toString()) : new Uint8Array();
}

// node_modules/@polkadot/rpc-provider/node_modules/@polkadot/util/u8a/toU8a.js
function u8aToU8a2(value, strict = false) {
  if (strict && (value === null || value === void 0)) {
    throw new Error("u8aToU8a: Expected non-null, non-undefined value");
  }
  return isU8a2(value) ? isBuffer2(value) ? new Uint8Array(value) : value : isHex2(value) ? hexToU8a2(value) : Array.isArray(value) ? new Uint8Array(value) : stringToU8a3(value);
}

// node_modules/@polkadot/rpc-provider/node_modules/@polkadot/util/u8a/toHex.js
var U84 = new Array(256);
var U164 = new Array(256 * 256);
for (let n = 0; n < 256; n++) {
  U84[n] = n.toString(16).padStart(2, "0");
}
for (let i = 0; i < 256; i++) {
  const s = i << 8;
  for (let j = 0; j < 256; j++) {
    U164[s | j] = U84[i] + U84[j];
  }
}
function hex2(value, result) {
  const mod2 = value.length % 2 | 0;
  const length = value.length - mod2 | 0;
  for (let i = 0; i < length; i += 2) {
    result += U164[value[i] << 8 | value[i + 1]];
  }
  if (mod2) {
    result += U84[value[length] | 0];
  }
  return result;
}
function u8aToHex2(value, bitLength = -1, isPrefixed = true) {
  const empty2 = isPrefixed ? "0x" : "";
  if (!value?.length) {
    return empty2;
  } else if (bitLength > 0) {
    const length = Math.ceil(bitLength / 8);
    if (value.length > length) {
      return `${hex2(value.subarray(0, length / 2), empty2)}\u2026${hex2(value.subarray(value.length - length / 2), "")}`;
    }
  }
  return hex2(value, empty2);
}

// node_modules/@polkadot/rpc-provider/node_modules/@polkadot/util/is/bigInt.js
function isBigInt(value) {
  return typeof value === "bigint";
}

// node_modules/@polkadot/rpc-provider/node_modules/@polkadot/util/format/formatDate.js
function zeroPad2(value) {
  return value.toString().padStart(2, "0");
}
function formatDate2(date) {
  const year = date.getFullYear().toString();
  const month = zeroPad2(date.getMonth() + 1);
  const day = zeroPad2(date.getDate());
  const hour = zeroPad2(date.getHours());
  const minute = zeroPad2(date.getMinutes());
  const second = zeroPad2(date.getSeconds());
  return `${year}-${month}-${day} ${hour}:${minute}:${second}`;
}

// node_modules/@polkadot/rpc-provider/node_modules/@polkadot/util/is/string.js
function isString2(value) {
  return typeof value === "string" || value instanceof String;
}

// node_modules/@polkadot/rpc-provider/node_modules/@polkadot/util/is/class.js
var isClass = /* @__PURE__ */ isOnFunction("isPrototypeOf", "hasOwnProperty");

// node_modules/@polkadot/rpc-provider/node_modules/@polkadot/util/is/childClass.js
function isChildClass(Parent, Child) {
  return isClass(Child) && isClass(Parent) ? Parent === Child || Parent.isPrototypeOf(Child) : false;
}

// node_modules/@polkadot/rpc-provider/node_modules/@polkadot/util/stringify.js
function replacer(_, v) {
  return isBigInt(v) ? v.toString() : v;
}
function stringify(value, space) {
  return JSON.stringify(value, replacer, space);
}

// node_modules/@polkadot/rpc-provider/node_modules/@polkadot/util/is/null.js
function isNull2(value) {
  return value === null;
}

// node_modules/@polkadot/rpc-provider/node_modules/@polkadot/util/is/number.js
function isNumber2(value) {
  return typeof value === "number";
}

// node_modules/@polkadot/rpc-provider/node_modules/@polkadot/util/is/undefined.js
function isUndefined2(value) {
  return value === void 0;
}

// node_modules/@polkadot/rpc-provider/node_modules/@polkadot/util/noop.js
function noop2() {
}

// node_modules/@polkadot/rpc-provider/node_modules/@polkadot/util/logger.js
var logTo2 = {
  debug: "log",
  error: "error",
  log: "log",
  warn: "warn"
};
function formatOther2(value) {
  if (value && isObject2(value) && value.constructor === Object) {
    const result = {};
    for (const [k, v] of Object.entries(value)) {
      result[k] = loggerFormat2(v);
    }
    return result;
  }
  return value;
}
function loggerFormat2(value) {
  if (Array.isArray(value)) {
    return value.map(loggerFormat2);
  } else if (isBn2(value)) {
    return value.toString();
  } else if (isU8a2(value) || isBuffer2(value)) {
    return u8aToHex2(u8aToU8a2(value));
  }
  return formatOther2(value);
}
function formatWithLength2(maxLength) {
  return (v) => {
    if (maxLength <= 0) {
      return v;
    }
    const r = `${v}`;
    return r.length < maxLength ? v : `${r.substring(0, maxLength)} ...`;
  };
}
function apply2(log, type, values, maxSize = -1) {
  if (values.length === 1 && isFunction2(values[0])) {
    const fnResult = values[0]();
    return apply2(log, type, Array.isArray(fnResult) ? fnResult : [fnResult], maxSize);
  }
  console[logTo2[log]](formatDate2(/* @__PURE__ */ new Date()), type, ...values.map(loggerFormat2).map(formatWithLength2(maxSize)));
}
function isDebugOn2(e, type) {
  return !!e && (e === "*" || type === e || e.endsWith("*") && type.startsWith(e.slice(0, -1)));
}
function isDebugOff2(e, type) {
  return !!e && (e.startsWith("-") && (type === e.slice(1) || e.endsWith("*") && type.startsWith(e.slice(1, -1))));
}
function getDebugFlag2(env, type) {
  let flag = false;
  for (const e of env) {
    if (isDebugOn2(e, type)) {
      flag = true;
    } else if (isDebugOff2(e, type)) {
      flag = false;
    }
  }
  return flag;
}
function parseEnv2(type) {
  const maxSize = parseInt(xglobal.process?.env?.["DEBUG_MAX"] || "-1", 10);
  return [
    getDebugFlag2((xglobal.process?.env?.["DEBUG"] || "").toLowerCase().split(","), type),
    isNaN(maxSize) ? -1 : maxSize
  ];
}
function logger2(origin) {
  const type = `${origin.toUpperCase()}:`.padStart(16);
  const [isDebug, maxSize] = parseEnv2(origin.toLowerCase());
  return {
    debug: isDebug ? (...values) => apply2("debug", type, values, maxSize) : noop2,
    error: (...values) => apply2("error", type, values),
    log: (...values) => apply2("log", type, values),
    noop: noop2,
    warn: (...values) => apply2("warn", type, values)
  };
}

// node_modules/@polkadot/rpc-provider/node_modules/@polkadot/util/object/spread.js
function objectSpread2(dest, ...sources) {
  const filterProps = /* @__PURE__ */ new Set(["__proto__", "constructor", "prototype"]);
  for (let i = 0, count = sources.length; i < count; i++) {
    const src = sources[i];
    if (src) {
      if (typeof src.entries === "function") {
        for (const [key, value] of src.entries()) {
          if (!filterProps.has(key)) {
            dest[key] = value;
          }
        }
      } else {
        const sanitizedSrc = /* @__PURE__ */ Object.create(null);
        for (const [key, value] of Object.entries(src)) {
          if (!filterProps.has(key)) {
            sanitizedSrc[key] = value;
          }
        }
        Object.assign(dest, sanitizedSrc);
      }
    }
  }
  return dest;
}

// node_modules/@polkadot/rpc-provider/coder/error.js
var UNKNOWN = -99999;
function extend(that, name, value) {
  Object.defineProperty(that, name, {
    configurable: true,
    enumerable: false,
    value
  });
}
var RpcError = class extends Error {
  code;
  data;
  message;
  name;
  stack;
  constructor(message = "", code = UNKNOWN, data) {
    super();
    extend(this, "message", String(message));
    extend(this, "name", this.constructor.name);
    extend(this, "data", data);
    extend(this, "code", code);
    if (isFunction2(Error.captureStackTrace)) {
      Error.captureStackTrace(this, this.constructor);
    } else {
      const { stack } = new Error(message);
      stack && extend(this, "stack", stack);
    }
  }
  static CODES = {
    ASSERT: -90009,
    INVALID_JSONRPC: -99998,
    METHOD_NOT_FOUND: -32601,
    // Rust client
    UNKNOWN
  };
};

// node_modules/@polkadot/rpc-provider/coder/index.js
function formatErrorData(data) {
  if (isUndefined2(data)) {
    return "";
  }
  const formatted = `: ${isString2(data) ? data.replace(/Error\("/g, "").replace(/\("/g, "(").replace(/"\)/g, ")").replace(/\(/g, ", ").replace(/\)/g, "") : stringify(data)}`;
  return formatted.length <= 256 ? formatted : `${formatted.substring(0, 255)}\u2026`;
}
function checkError(error) {
  if (error) {
    const { code, data, message } = error;
    throw new RpcError(`${code}: ${message}${formatErrorData(data)}`, code, data);
  }
}
var RpcCoder = class {
  __internal__id = 0;
  decodeResponse(response) {
    if (!response || response.jsonrpc !== "2.0") {
      throw new Error("Invalid jsonrpc field in decoded object");
    }
    const isSubscription2 = !isUndefined2(response.params) && !isUndefined2(response.method);
    if (!isNumber2(response.id) && (!isSubscription2 || !isNumber2(response.params.subscription) && !isString2(response.params.subscription))) {
      throw new Error("Invalid id field in decoded object");
    }
    checkError(response.error);
    if (response.result === void 0 && !isSubscription2) {
      throw new Error("No result found in jsonrpc response");
    }
    if (isSubscription2) {
      checkError(response.params.error);
      return response.params.result;
    }
    return response.result;
  }
  encodeJson(method, params) {
    const [id, data] = this.encodeObject(method, params);
    return [id, stringify(data)];
  }
  encodeObject(method, params) {
    const id = ++this.__internal__id;
    return [id, {
      id,
      jsonrpc: "2.0",
      method,
      params
    }];
  }
};

// node_modules/@polkadot/rpc-provider/defaults.js
var HTTP_URL = "http://127.0.0.1:9933";
var WS_URL = "ws://127.0.0.1:9944";
var defaults_default = {
  HTTP_URL,
  WS_URL
};

// node_modules/@polkadot/rpc-provider/lru.js
var DEFAULT_CAPACITY = 1024;
var LRUNode = class {
  key;
  __internal__expires;
  __internal__ttl;
  createdAt;
  next;
  prev;
  constructor(key, ttl) {
    this.key = key;
    this.__internal__ttl = ttl;
    this.__internal__expires = Date.now() + ttl;
    this.createdAt = Date.now();
    this.next = this.prev = this;
  }
  refresh() {
    this.__internal__expires = Date.now() + this.__internal__ttl;
  }
  get expiry() {
    return this.__internal__expires;
  }
};
var LRUCache = class {
  capacity;
  __internal__data = /* @__PURE__ */ new Map();
  __internal__refs = /* @__PURE__ */ new Map();
  __internal__length = 0;
  __internal__head;
  __internal__tail;
  __internal__ttl;
  constructor(capacity = DEFAULT_CAPACITY, ttl = 3e4) {
    this.capacity = capacity;
    this.__internal__ttl = ttl;
    this.__internal__head = this.__internal__tail = new LRUNode("<empty>", ttl);
  }
  get ttl() {
    return this.__internal__ttl;
  }
  get length() {
    return this.__internal__length;
  }
  get lengthData() {
    return this.__internal__data.size;
  }
  get lengthRefs() {
    return this.__internal__refs.size;
  }
  entries() {
    const keys2 = this.keys();
    const count = keys2.length;
    const entries = new Array(count);
    for (let i = 0; i < count; i++) {
      const key = keys2[i];
      entries[i] = [key, this.__internal__data.get(key)];
    }
    return entries;
  }
  keys() {
    const keys2 = [];
    if (this.__internal__length) {
      let curr = this.__internal__head;
      while (curr !== this.__internal__tail) {
        keys2.push(curr.key);
        curr = curr.next;
      }
      keys2.push(curr.key);
    }
    return keys2;
  }
  get(key) {
    const data = this.__internal__data.get(key);
    if (data) {
      this.__internal__toHead(key);
      this.__internal__evictTTL();
      return data;
    }
    this.__internal__evictTTL();
    return null;
  }
  set(key, value) {
    if (this.__internal__data.has(key)) {
      this.__internal__toHead(key);
    } else {
      const node = new LRUNode(key, this.__internal__ttl);
      this.__internal__refs.set(node.key, node);
      if (this.length === 0) {
        this.__internal__head = this.__internal__tail = node;
      } else {
        this.__internal__head.prev = node;
        node.next = this.__internal__head;
        this.__internal__head = node;
      }
      if (this.__internal__length === this.capacity) {
        this.__internal__data.delete(this.__internal__tail.key);
        this.__internal__refs.delete(this.__internal__tail.key);
        this.__internal__tail = this.__internal__tail.prev;
        this.__internal__tail.next = this.__internal__head;
      } else {
        this.__internal__length += 1;
      }
    }
    this.__internal__evictTTL();
    this.__internal__data.set(key, value);
  }
  __internal__evictTTL() {
    while (this.__internal__tail.expiry && this.__internal__tail.expiry < Date.now() && this.__internal__length > 0) {
      this.__internal__refs.delete(this.__internal__tail.key);
      this.__internal__data.delete(this.__internal__tail.key);
      this.__internal__length -= 1;
      this.__internal__tail = this.__internal__tail.prev;
      this.__internal__tail.next = this.__internal__head;
    }
    if (this.__internal__length === 0) {
      this.__internal__head = this.__internal__tail = new LRUNode("<empty>", this.__internal__ttl);
    }
  }
  __internal__toHead(key) {
    const ref = this.__internal__refs.get(key);
    if (ref && ref !== this.__internal__head) {
      ref.refresh();
      ref.prev.next = ref.next;
      ref.next.prev = ref.prev;
      ref.next = this.__internal__head;
      this.__internal__head.prev = ref;
      this.__internal__head = ref;
    }
  }
};

// node_modules/eventemitter3/index.mjs
var import_index = __toESM(require_eventemitter3(), 1);

// node_modules/@polkadot/x-ws/browser.js
var WebSocket = xglobal.WebSocket;

// node_modules/@polkadot/rpc-provider/ws/errors.js
var known = {
  1e3: "Normal Closure",
  1001: "Going Away",
  1002: "Protocol Error",
  1003: "Unsupported Data",
  1004: "(For future)",
  1005: "No Status Received",
  1006: "Abnormal Closure",
  1007: "Invalid frame payload data",
  1008: "Policy Violation",
  1009: "Message too big",
  1010: "Missing Extension",
  1011: "Internal Error",
  1012: "Service Restart",
  1013: "Try Again Later",
  1014: "Bad Gateway",
  1015: "TLS Handshake"
};
function getWSErrorString(code) {
  if (code >= 0 && code <= 999) {
    return "(Unused)";
  } else if (code >= 1016) {
    if (code <= 1999) {
      return "(For WebSocket standard)";
    } else if (code <= 2999) {
      return "(For WebSocket extensions)";
    } else if (code <= 3999) {
      return "(For libraries and frameworks)";
    } else if (code <= 4999) {
      return "(For applications)";
    }
  }
  return known[code] || "(Unknown)";
}

// node_modules/@polkadot/rpc-provider/ws/index.js
var ALIASES = {
  chain_finalisedHead: "chain_finalizedHead",
  chain_subscribeFinalisedHeads: "chain_subscribeFinalizedHeads",
  chain_unsubscribeFinalisedHeads: "chain_unsubscribeFinalizedHeads"
};
var RETRY_DELAY = 2500;
var DEFAULT_TIMEOUT_MS = 60 * 1e3;
var TIMEOUT_INTERVAL = 5e3;
var l = logger2("api-ws");
function eraseRecord(record, cb) {
  Object.keys(record).forEach((key) => {
    if (cb) {
      cb(record[key]);
    }
    delete record[key];
  });
}
function defaultEndpointStats() {
  return { bytesRecv: 0, bytesSent: 0, cached: 0, errors: 0, requests: 0, subscriptions: 0, timeout: 0 };
}
var WsProvider = class _WsProvider {
  __internal__callCache;
  __internal__coder;
  __internal__endpoints;
  __internal__headers;
  __internal__eventemitter;
  __internal__handlers = {};
  __internal__isReadyPromise;
  __internal__stats;
  __internal__waitingForId = {};
  __internal__cacheCapacity;
  __internal__autoConnectMs;
  __internal__endpointIndex;
  __internal__endpointStats;
  __internal__isConnected = false;
  __internal__subscriptions = {};
  __internal__timeoutId = null;
  __internal__websocket;
  __internal__timeout;
  /**
   * @param {string | string[]}  endpoint    The endpoint url. Usually `ws://ip:9944` or `wss://ip:9944`, may provide an array of endpoint strings.
   * @param {number | false} autoConnectMs Whether to connect automatically or not (default). Provided value is used as a delay between retries.
   * @param {Record<string, string>} headers The headers provided to the underlying WebSocket
   * @param {number} [timeout] Custom timeout value used per request . Defaults to `DEFAULT_TIMEOUT_MS`
   */
  constructor(endpoint = defaults_default.WS_URL, autoConnectMs = RETRY_DELAY, headers = {}, timeout, cacheCapacity) {
    const endpoints = Array.isArray(endpoint) ? endpoint : [endpoint];
    if (endpoints.length === 0) {
      throw new Error("WsProvider requires at least one Endpoint");
    }
    endpoints.forEach((endpoint2) => {
      if (!/^(wss|ws):\/\//.test(endpoint2)) {
        throw new Error(`Endpoint should start with 'ws://', received '${endpoint2}'`);
      }
    });
    this.__internal__callCache = new LRUCache(cacheCapacity || DEFAULT_CAPACITY);
    this.__internal__cacheCapacity = cacheCapacity || DEFAULT_CAPACITY;
    this.__internal__eventemitter = new import_index.default();
    this.__internal__autoConnectMs = autoConnectMs || 0;
    this.__internal__coder = new RpcCoder();
    this.__internal__endpointIndex = -1;
    this.__internal__endpoints = endpoints;
    this.__internal__headers = headers;
    this.__internal__websocket = null;
    this.__internal__stats = {
      active: { requests: 0, subscriptions: 0 },
      total: defaultEndpointStats()
    };
    this.__internal__endpointStats = defaultEndpointStats();
    this.__internal__timeout = timeout || DEFAULT_TIMEOUT_MS;
    if (autoConnectMs && autoConnectMs > 0) {
      this.connectWithRetry().catch(noop2);
    }
    this.__internal__isReadyPromise = new Promise((resolve) => {
      this.__internal__eventemitter.once("connected", () => {
        resolve(this);
      });
    });
  }
  /**
   * @summary `true` when this provider supports subscriptions
   */
  get hasSubscriptions() {
    return true;
  }
  /**
   * @summary `true` when this provider supports clone()
   */
  get isClonable() {
    return true;
  }
  /**
   * @summary Whether the node is connected or not.
   * @return {boolean} true if connected
   */
  get isConnected() {
    return this.__internal__isConnected;
  }
  /**
   * @description Promise that resolves the first time we are connected and loaded
   */
  get isReady() {
    return this.__internal__isReadyPromise;
  }
  get endpoint() {
    return this.__internal__endpoints[this.__internal__endpointIndex];
  }
  /**
   * @description Returns a clone of the object
   */
  clone() {
    return new _WsProvider(this.__internal__endpoints);
  }
  selectEndpointIndex(endpoints) {
    return (this.__internal__endpointIndex + 1) % endpoints.length;
  }
  /**
   * @summary Manually connect
   * @description The [[WsProvider]] connects automatically by default, however if you decided otherwise, you may
   * connect manually using this method.
   */
  // eslint-disable-next-line @typescript-eslint/require-await
  async connect() {
    if (this.__internal__websocket) {
      throw new Error("WebSocket is already connected");
    }
    try {
      this.__internal__endpointIndex = this.selectEndpointIndex(this.__internal__endpoints);
      this.__internal__websocket = typeof xglobal.WebSocket !== "undefined" && isChildClass(xglobal.WebSocket, WebSocket) ? new WebSocket(this.endpoint) : new WebSocket(this.endpoint, void 0, {
        headers: this.__internal__headers
      });
      if (this.__internal__websocket) {
        this.__internal__websocket.onclose = this.__internal__onSocketClose;
        this.__internal__websocket.onerror = this.__internal__onSocketError;
        this.__internal__websocket.onmessage = this.__internal__onSocketMessage;
        this.__internal__websocket.onopen = this.__internal__onSocketOpen;
      }
      this.__internal__timeoutId = setInterval(() => this.__internal__timeoutHandlers(), TIMEOUT_INTERVAL);
    } catch (error) {
      l.error(error);
      this.__internal__emit("error", error);
      throw error;
    }
  }
  /**
   * @description Connect, never throwing an error, but rather forcing a retry
   */
  async connectWithRetry() {
    if (this.__internal__autoConnectMs > 0) {
      try {
        await this.connect();
      } catch {
        setTimeout(() => {
          this.connectWithRetry().catch(noop2);
        }, this.__internal__autoConnectMs);
      }
    }
  }
  /**
   * @description Manually disconnect from the connection, clearing auto-connect logic
   */
  // eslint-disable-next-line @typescript-eslint/require-await
  async disconnect() {
    this.__internal__autoConnectMs = 0;
    try {
      if (this.__internal__websocket) {
        this.__internal__websocket.close(1e3);
      }
    } catch (error) {
      l.error(error);
      this.__internal__emit("error", error);
      throw error;
    }
  }
  /**
   * @description Returns the connection stats
   */
  get stats() {
    return {
      active: {
        requests: Object.keys(this.__internal__handlers).length,
        subscriptions: Object.keys(this.__internal__subscriptions).length
      },
      total: this.__internal__stats.total
    };
  }
  get endpointStats() {
    return this.__internal__endpointStats;
  }
  /**
   * @summary Listens on events after having subscribed using the [[subscribe]] function.
   * @param  {ProviderInterfaceEmitted} type Event
   * @param  {ProviderInterfaceEmitCb}  sub  Callback
   * @return unsubscribe function
   */
  on(type, sub) {
    this.__internal__eventemitter.on(type, sub);
    return () => {
      this.__internal__eventemitter.removeListener(type, sub);
    };
  }
  /**
   * @summary Send JSON data using WebSockets to configured HTTP Endpoint or queue.
   * @param method The RPC methods to execute
   * @param params Encoded parameters as applicable for the method
   * @param subscription Subscription details (internally used)
   */
  send(method, params, isCacheable, subscription) {
    this.__internal__endpointStats.requests++;
    this.__internal__stats.total.requests++;
    const [id, body] = this.__internal__coder.encodeJson(method, params);
    if (this.__internal__cacheCapacity === 0) {
      return this.__internal__send(id, body, method, params, subscription);
    }
    const cacheKey = isCacheable ? `${method}::${stringify(params)}` : "";
    let resultPromise = isCacheable ? this.__internal__callCache.get(cacheKey) : null;
    if (!resultPromise) {
      resultPromise = this.__internal__send(id, body, method, params, subscription);
      if (isCacheable) {
        this.__internal__callCache.set(cacheKey, resultPromise);
      }
    } else {
      this.__internal__endpointStats.cached++;
      this.__internal__stats.total.cached++;
    }
    return resultPromise;
  }
  async __internal__send(id, body, method, params, subscription) {
    return new Promise((resolve, reject) => {
      try {
        if (!this.isConnected || this.__internal__websocket === null) {
          throw new Error("WebSocket is not connected");
        }
        const callback = (error, result) => {
          error ? reject(error) : resolve(result);
        };
        l.debug(() => ["calling", method, body]);
        this.__internal__handlers[id] = {
          callback,
          method,
          params,
          start: Date.now(),
          subscription
        };
        const bytesSent = body.length;
        this.__internal__endpointStats.bytesSent += bytesSent;
        this.__internal__stats.total.bytesSent += bytesSent;
        this.__internal__websocket.send(body);
      } catch (error) {
        this.__internal__endpointStats.errors++;
        this.__internal__stats.total.errors++;
        reject(error);
      }
    });
  }
  /**
   * @name subscribe
   * @summary Allows subscribing to a specific event.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * const provider = new WsProvider('ws://127.0.0.1:9944');
   * const rpc = new Rpc(provider);
   *
   * rpc.state.subscribeStorage([[storage.system.account, <Address>]], (_, values) => {
   *   console.log(values)
   * }).then((subscriptionId) => {
   *   console.log('balance changes subscription id: ', subscriptionId)
   * })
   * ```
   */
  subscribe(type, method, params, callback) {
    this.__internal__endpointStats.subscriptions++;
    this.__internal__stats.total.subscriptions++;
    return this.send(method, params, false, { callback, type });
  }
  /**
   * @summary Allows unsubscribing to subscriptions made with [[subscribe]].
   */
  async unsubscribe(type, method, id) {
    const subscription = `${type}::${id}`;
    if (isUndefined2(this.__internal__subscriptions[subscription])) {
      l.debug(() => `Unable to find active subscription=${subscription}`);
      return false;
    }
    delete this.__internal__subscriptions[subscription];
    try {
      return this.isConnected && !isNull2(this.__internal__websocket) ? this.send(method, [id]) : true;
    } catch {
      return false;
    }
  }
  __internal__emit = (type, ...args) => {
    this.__internal__eventemitter.emit(type, ...args);
  };
  __internal__onSocketClose = (event) => {
    const error = new Error(`disconnected from ${this.endpoint}: ${event.code}:: ${event.reason || getWSErrorString(event.code)}`);
    if (this.__internal__autoConnectMs > 0) {
      l.error(error.message);
    }
    this.__internal__isConnected = false;
    if (this.__internal__websocket) {
      this.__internal__websocket.onclose = null;
      this.__internal__websocket.onerror = null;
      this.__internal__websocket.onmessage = null;
      this.__internal__websocket.onopen = null;
      this.__internal__websocket = null;
    }
    if (this.__internal__timeoutId) {
      clearInterval(this.__internal__timeoutId);
      this.__internal__timeoutId = null;
    }
    eraseRecord(this.__internal__handlers, (h) => {
      try {
        h.callback(error, void 0);
      } catch (err) {
        l.error(err);
      }
    });
    eraseRecord(this.__internal__waitingForId);
    this.__internal__endpointStats = defaultEndpointStats();
    this.__internal__emit("disconnected");
    if (this.__internal__autoConnectMs > 0) {
      setTimeout(() => {
        this.connectWithRetry().catch(noop2);
      }, this.__internal__autoConnectMs);
    }
  };
  __internal__onSocketError = (error) => {
    l.debug(() => ["socket error", error]);
    this.__internal__emit("error", error);
  };
  __internal__onSocketMessage = (message) => {
    l.debug(() => ["received", message.data]);
    const bytesRecv = message.data.length;
    this.__internal__endpointStats.bytesRecv += bytesRecv;
    this.__internal__stats.total.bytesRecv += bytesRecv;
    const response = JSON.parse(message.data);
    return isUndefined2(response.method) ? this.__internal__onSocketMessageResult(response) : this.__internal__onSocketMessageSubscribe(response);
  };
  __internal__onSocketMessageResult = (response) => {
    const handler = this.__internal__handlers[response.id];
    if (!handler) {
      l.debug(() => `Unable to find handler for id=${response.id}`);
      return;
    }
    try {
      const { method, params, subscription } = handler;
      const result = this.__internal__coder.decodeResponse(response);
      handler.callback(null, result);
      if (subscription) {
        const subId = `${subscription.type}::${result}`;
        this.__internal__subscriptions[subId] = objectSpread2({}, subscription, {
          method,
          params
        });
        if (this.__internal__waitingForId[subId]) {
          this.__internal__onSocketMessageSubscribe(this.__internal__waitingForId[subId]);
        }
      }
    } catch (error) {
      this.__internal__endpointStats.errors++;
      this.__internal__stats.total.errors++;
      handler.callback(error, void 0);
    }
    delete this.__internal__handlers[response.id];
  };
  __internal__onSocketMessageSubscribe = (response) => {
    if (!response.method) {
      throw new Error("No method found in JSONRPC response");
    }
    const method = ALIASES[response.method] || response.method;
    const subId = `${method}::${response.params.subscription}`;
    const handler = this.__internal__subscriptions[subId];
    if (!handler) {
      this.__internal__waitingForId[subId] = response;
      l.debug(() => `Unable to find handler for subscription=${subId}`);
      return;
    }
    delete this.__internal__waitingForId[subId];
    try {
      const result = this.__internal__coder.decodeResponse(response);
      handler.callback(null, result);
    } catch (error) {
      this.__internal__endpointStats.errors++;
      this.__internal__stats.total.errors++;
      handler.callback(error, void 0);
    }
  };
  __internal__onSocketOpen = () => {
    if (this.__internal__websocket === null) {
      throw new Error("WebSocket cannot be null in onOpen");
    }
    l.debug(() => ["connected to", this.endpoint]);
    this.__internal__isConnected = true;
    this.__internal__resubscribe();
    this.__internal__emit("connected");
    return true;
  };
  __internal__resubscribe = () => {
    const subscriptions = this.__internal__subscriptions;
    this.__internal__subscriptions = {};
    Promise.all(Object.keys(subscriptions).map(async (id) => {
      const { callback, method, params, type } = subscriptions[id];
      if (type.startsWith("author_")) {
        return;
      }
      try {
        await this.subscribe(type, method, params, callback);
      } catch (error) {
        l.error(error);
      }
    })).catch(l.error);
  };
  __internal__timeoutHandlers = () => {
    const now = Date.now();
    const ids = Object.keys(this.__internal__handlers);
    for (let i = 0, count = ids.length; i < count; i++) {
      const handler = this.__internal__handlers[ids[i]];
      if (now - handler.start > this.__internal__timeout) {
        try {
          handler.callback(new Error(`No response received from RPC endpoint in ${this.__internal__timeout / 1e3}s`), void 0);
        } catch {
        }
        this.__internal__endpointStats.timeout++;
        this.__internal__stats.total.timeout++;
        delete this.__internal__handlers[ids[i]];
      }
    }
  };
};

// node_modules/tslib/tslib.es6.mjs
var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
  };
  return extendStatics(d, b);
};
function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1) throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
  return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];
      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;
        case 4:
          _.label++;
          return { value: op[1], done: false };
        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;
        case 7:
          op = _.ops.pop();
          _.trys.pop();
          continue;
        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }
          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }
          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }
          if (t && _.label < t[2]) {
            _.label = t[2];
            _.ops.push(op);
            break;
          }
          if (t[2]) _.ops.pop();
          _.trys.pop();
          continue;
      }
      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }
    if (op[0] & 5) throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
}
function __spreadArray(to, from2, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l13 = from2.length, ar; i < l13; i++) {
    if (ar || !(i in from2)) {
      if (!ar) ar = Array.prototype.slice.call(from2, 0, i);
      ar[i] = from2[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from2));
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = Object.create((typeof AsyncIterator === "function" ? AsyncIterator : Object).prototype), verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function awaitReturn(f) {
    return function(v) {
      return Promise.resolve(v).then(f, reject);
    };
  }
  function verb(n, f) {
    if (g[n]) {
      i[n] = function(v) {
        return new Promise(function(a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
      if (f) i[n] = f(i[n]);
    }
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f, v) {
    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function(v) {
      return new Promise(function(resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function(v5) {
      resolve({ value: v5, done: d });
    }, reject);
  }
}

// node_modules/rxjs/dist/esm5/internal/util/isFunction.js
function isFunction3(value) {
  return typeof value === "function";
}

// node_modules/rxjs/dist/esm5/internal/util/createErrorClass.js
function createErrorClass(createImpl) {
  var _super = function(instance) {
    Error.call(instance);
    instance.stack = new Error().stack;
  };
  var ctorFunc = createImpl(_super);
  ctorFunc.prototype = Object.create(Error.prototype);
  ctorFunc.prototype.constructor = ctorFunc;
  return ctorFunc;
}

// node_modules/rxjs/dist/esm5/internal/util/UnsubscriptionError.js
var UnsubscriptionError = createErrorClass(function(_super) {
  return function UnsubscriptionErrorImpl(errors) {
    _super(this);
    this.message = errors ? errors.length + " errors occurred during unsubscription:\n" + errors.map(function(err, i) {
      return i + 1 + ") " + err.toString();
    }).join("\n  ") : "";
    this.name = "UnsubscriptionError";
    this.errors = errors;
  };
});

// node_modules/rxjs/dist/esm5/internal/util/arrRemove.js
function arrRemove(arr, item) {
  if (arr) {
    var index = arr.indexOf(item);
    0 <= index && arr.splice(index, 1);
  }
}

// node_modules/rxjs/dist/esm5/internal/Subscription.js
var Subscription = function() {
  function Subscription2(initialTeardown) {
    this.initialTeardown = initialTeardown;
    this.closed = false;
    this._parentage = null;
    this._finalizers = null;
  }
  Subscription2.prototype.unsubscribe = function() {
    var e_1, _a, e_2, _b;
    var errors;
    if (!this.closed) {
      this.closed = true;
      var _parentage = this._parentage;
      if (_parentage) {
        this._parentage = null;
        if (Array.isArray(_parentage)) {
          try {
            for (var _parentage_1 = __values(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {
              var parent_1 = _parentage_1_1.value;
              parent_1.remove(this);
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (_parentage_1_1 && !_parentage_1_1.done && (_a = _parentage_1.return)) _a.call(_parentage_1);
            } finally {
              if (e_1) throw e_1.error;
            }
          }
        } else {
          _parentage.remove(this);
        }
      }
      var initialFinalizer = this.initialTeardown;
      if (isFunction3(initialFinalizer)) {
        try {
          initialFinalizer();
        } catch (e) {
          errors = e instanceof UnsubscriptionError ? e.errors : [e];
        }
      }
      var _finalizers = this._finalizers;
      if (_finalizers) {
        this._finalizers = null;
        try {
          for (var _finalizers_1 = __values(_finalizers), _finalizers_1_1 = _finalizers_1.next(); !_finalizers_1_1.done; _finalizers_1_1 = _finalizers_1.next()) {
            var finalizer = _finalizers_1_1.value;
            try {
              execFinalizer(finalizer);
            } catch (err) {
              errors = errors !== null && errors !== void 0 ? errors : [];
              if (err instanceof UnsubscriptionError) {
                errors = __spreadArray(__spreadArray([], __read(errors)), __read(err.errors));
              } else {
                errors.push(err);
              }
            }
          }
        } catch (e_2_1) {
          e_2 = { error: e_2_1 };
        } finally {
          try {
            if (_finalizers_1_1 && !_finalizers_1_1.done && (_b = _finalizers_1.return)) _b.call(_finalizers_1);
          } finally {
            if (e_2) throw e_2.error;
          }
        }
      }
      if (errors) {
        throw new UnsubscriptionError(errors);
      }
    }
  };
  Subscription2.prototype.add = function(teardown) {
    var _a;
    if (teardown && teardown !== this) {
      if (this.closed) {
        execFinalizer(teardown);
      } else {
        if (teardown instanceof Subscription2) {
          if (teardown.closed || teardown._hasParent(this)) {
            return;
          }
          teardown._addParent(this);
        }
        (this._finalizers = (_a = this._finalizers) !== null && _a !== void 0 ? _a : []).push(teardown);
      }
    }
  };
  Subscription2.prototype._hasParent = function(parent) {
    var _parentage = this._parentage;
    return _parentage === parent || Array.isArray(_parentage) && _parentage.includes(parent);
  };
  Subscription2.prototype._addParent = function(parent) {
    var _parentage = this._parentage;
    this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;
  };
  Subscription2.prototype._removeParent = function(parent) {
    var _parentage = this._parentage;
    if (_parentage === parent) {
      this._parentage = null;
    } else if (Array.isArray(_parentage)) {
      arrRemove(_parentage, parent);
    }
  };
  Subscription2.prototype.remove = function(teardown) {
    var _finalizers = this._finalizers;
    _finalizers && arrRemove(_finalizers, teardown);
    if (teardown instanceof Subscription2) {
      teardown._removeParent(this);
    }
  };
  Subscription2.EMPTY = function() {
    var empty2 = new Subscription2();
    empty2.closed = true;
    return empty2;
  }();
  return Subscription2;
}();
var EMPTY_SUBSCRIPTION = Subscription.EMPTY;
function isSubscription(value) {
  return value instanceof Subscription || value && "closed" in value && isFunction3(value.remove) && isFunction3(value.add) && isFunction3(value.unsubscribe);
}
function execFinalizer(finalizer) {
  if (isFunction3(finalizer)) {
    finalizer();
  } else {
    finalizer.unsubscribe();
  }
}

// node_modules/rxjs/dist/esm5/internal/config.js
var config = {
  onUnhandledError: null,
  onStoppedNotification: null,
  Promise: void 0,
  useDeprecatedSynchronousErrorHandling: false,
  useDeprecatedNextContext: false
};

// node_modules/rxjs/dist/esm5/internal/scheduler/timeoutProvider.js
var timeoutProvider = {
  setTimeout: function(handler, timeout) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
      args[_i - 2] = arguments[_i];
    }
    var delegate = timeoutProvider.delegate;
    if (delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) {
      return delegate.setTimeout.apply(delegate, __spreadArray([handler, timeout], __read(args)));
    }
    return setTimeout.apply(void 0, __spreadArray([handler, timeout], __read(args)));
  },
  clearTimeout: function(handle) {
    var delegate = timeoutProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);
  },
  delegate: void 0
};

// node_modules/rxjs/dist/esm5/internal/util/reportUnhandledError.js
function reportUnhandledError(err) {
  timeoutProvider.setTimeout(function() {
    var onUnhandledError = config.onUnhandledError;
    if (onUnhandledError) {
      onUnhandledError(err);
    } else {
      throw err;
    }
  });
}

// node_modules/rxjs/dist/esm5/internal/util/noop.js
function noop3() {
}

// node_modules/rxjs/dist/esm5/internal/NotificationFactories.js
var COMPLETE_NOTIFICATION = function() {
  return createNotification("C", void 0, void 0);
}();
function errorNotification(error) {
  return createNotification("E", void 0, error);
}
function nextNotification(value) {
  return createNotification("N", value, void 0);
}
function createNotification(kind, value, error) {
  return {
    kind,
    value,
    error
  };
}

// node_modules/rxjs/dist/esm5/internal/util/errorContext.js
var context = null;
function errorContext(cb) {
  if (config.useDeprecatedSynchronousErrorHandling) {
    var isRoot = !context;
    if (isRoot) {
      context = { errorThrown: false, error: null };
    }
    cb();
    if (isRoot) {
      var _a = context, errorThrown = _a.errorThrown, error = _a.error;
      context = null;
      if (errorThrown) {
        throw error;
      }
    }
  } else {
    cb();
  }
}
function captureError(err) {
  if (config.useDeprecatedSynchronousErrorHandling && context) {
    context.errorThrown = true;
    context.error = err;
  }
}

// node_modules/rxjs/dist/esm5/internal/Subscriber.js
var Subscriber = function(_super) {
  __extends(Subscriber2, _super);
  function Subscriber2(destination) {
    var _this = _super.call(this) || this;
    _this.isStopped = false;
    if (destination) {
      _this.destination = destination;
      if (isSubscription(destination)) {
        destination.add(_this);
      }
    } else {
      _this.destination = EMPTY_OBSERVER;
    }
    return _this;
  }
  Subscriber2.create = function(next, error, complete) {
    return new SafeSubscriber(next, error, complete);
  };
  Subscriber2.prototype.next = function(value) {
    if (this.isStopped) {
      handleStoppedNotification(nextNotification(value), this);
    } else {
      this._next(value);
    }
  };
  Subscriber2.prototype.error = function(err) {
    if (this.isStopped) {
      handleStoppedNotification(errorNotification(err), this);
    } else {
      this.isStopped = true;
      this._error(err);
    }
  };
  Subscriber2.prototype.complete = function() {
    if (this.isStopped) {
      handleStoppedNotification(COMPLETE_NOTIFICATION, this);
    } else {
      this.isStopped = true;
      this._complete();
    }
  };
  Subscriber2.prototype.unsubscribe = function() {
    if (!this.closed) {
      this.isStopped = true;
      _super.prototype.unsubscribe.call(this);
      this.destination = null;
    }
  };
  Subscriber2.prototype._next = function(value) {
    this.destination.next(value);
  };
  Subscriber2.prototype._error = function(err) {
    try {
      this.destination.error(err);
    } finally {
      this.unsubscribe();
    }
  };
  Subscriber2.prototype._complete = function() {
    try {
      this.destination.complete();
    } finally {
      this.unsubscribe();
    }
  };
  return Subscriber2;
}(Subscription);
var _bind = Function.prototype.bind;
function bind(fn, thisArg) {
  return _bind.call(fn, thisArg);
}
var ConsumerObserver = function() {
  function ConsumerObserver2(partialObserver) {
    this.partialObserver = partialObserver;
  }
  ConsumerObserver2.prototype.next = function(value) {
    var partialObserver = this.partialObserver;
    if (partialObserver.next) {
      try {
        partialObserver.next(value);
      } catch (error) {
        handleUnhandledError(error);
      }
    }
  };
  ConsumerObserver2.prototype.error = function(err) {
    var partialObserver = this.partialObserver;
    if (partialObserver.error) {
      try {
        partialObserver.error(err);
      } catch (error) {
        handleUnhandledError(error);
      }
    } else {
      handleUnhandledError(err);
    }
  };
  ConsumerObserver2.prototype.complete = function() {
    var partialObserver = this.partialObserver;
    if (partialObserver.complete) {
      try {
        partialObserver.complete();
      } catch (error) {
        handleUnhandledError(error);
      }
    }
  };
  return ConsumerObserver2;
}();
var SafeSubscriber = function(_super) {
  __extends(SafeSubscriber2, _super);
  function SafeSubscriber2(observerOrNext, error, complete) {
    var _this = _super.call(this) || this;
    var partialObserver;
    if (isFunction3(observerOrNext) || !observerOrNext) {
      partialObserver = {
        next: observerOrNext !== null && observerOrNext !== void 0 ? observerOrNext : void 0,
        error: error !== null && error !== void 0 ? error : void 0,
        complete: complete !== null && complete !== void 0 ? complete : void 0
      };
    } else {
      var context_1;
      if (_this && config.useDeprecatedNextContext) {
        context_1 = Object.create(observerOrNext);
        context_1.unsubscribe = function() {
          return _this.unsubscribe();
        };
        partialObserver = {
          next: observerOrNext.next && bind(observerOrNext.next, context_1),
          error: observerOrNext.error && bind(observerOrNext.error, context_1),
          complete: observerOrNext.complete && bind(observerOrNext.complete, context_1)
        };
      } else {
        partialObserver = observerOrNext;
      }
    }
    _this.destination = new ConsumerObserver(partialObserver);
    return _this;
  }
  return SafeSubscriber2;
}(Subscriber);
function handleUnhandledError(error) {
  if (config.useDeprecatedSynchronousErrorHandling) {
    captureError(error);
  } else {
    reportUnhandledError(error);
  }
}
function defaultErrorHandler(err) {
  throw err;
}
function handleStoppedNotification(notification, subscriber) {
  var onStoppedNotification = config.onStoppedNotification;
  onStoppedNotification && timeoutProvider.setTimeout(function() {
    return onStoppedNotification(notification, subscriber);
  });
}
var EMPTY_OBSERVER = {
  closed: true,
  next: noop3,
  error: defaultErrorHandler,
  complete: noop3
};

// node_modules/rxjs/dist/esm5/internal/symbol/observable.js
var observable = function() {
  return typeof Symbol === "function" && Symbol.observable || "@@observable";
}();

// node_modules/rxjs/dist/esm5/internal/util/identity.js
function identity2(x) {
  return x;
}

// node_modules/rxjs/dist/esm5/internal/util/pipe.js
function pipeFromArray(fns) {
  if (fns.length === 0) {
    return identity2;
  }
  if (fns.length === 1) {
    return fns[0];
  }
  return function piped(input) {
    return fns.reduce(function(prev, fn) {
      return fn(prev);
    }, input);
  };
}

// node_modules/rxjs/dist/esm5/internal/Observable.js
var Observable = function() {
  function Observable2(subscribe) {
    if (subscribe) {
      this._subscribe = subscribe;
    }
  }
  Observable2.prototype.lift = function(operator) {
    var observable2 = new Observable2();
    observable2.source = this;
    observable2.operator = operator;
    return observable2;
  };
  Observable2.prototype.subscribe = function(observerOrNext, error, complete) {
    var _this = this;
    var subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);
    errorContext(function() {
      var _a = _this, operator = _a.operator, source = _a.source;
      subscriber.add(operator ? operator.call(subscriber, source) : source ? _this._subscribe(subscriber) : _this._trySubscribe(subscriber));
    });
    return subscriber;
  };
  Observable2.prototype._trySubscribe = function(sink) {
    try {
      return this._subscribe(sink);
    } catch (err) {
      sink.error(err);
    }
  };
  Observable2.prototype.forEach = function(next, promiseCtor) {
    var _this = this;
    promiseCtor = getPromiseCtor(promiseCtor);
    return new promiseCtor(function(resolve, reject) {
      var subscriber = new SafeSubscriber({
        next: function(value) {
          try {
            next(value);
          } catch (err) {
            reject(err);
            subscriber.unsubscribe();
          }
        },
        error: reject,
        complete: resolve
      });
      _this.subscribe(subscriber);
    });
  };
  Observable2.prototype._subscribe = function(subscriber) {
    var _a;
    return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);
  };
  Observable2.prototype[observable] = function() {
    return this;
  };
  Observable2.prototype.pipe = function() {
    var operations = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      operations[_i] = arguments[_i];
    }
    return pipeFromArray(operations)(this);
  };
  Observable2.prototype.toPromise = function(promiseCtor) {
    var _this = this;
    promiseCtor = getPromiseCtor(promiseCtor);
    return new promiseCtor(function(resolve, reject) {
      var value;
      _this.subscribe(function(x) {
        return value = x;
      }, function(err) {
        return reject(err);
      }, function() {
        return resolve(value);
      });
    });
  };
  Observable2.create = function(subscribe) {
    return new Observable2(subscribe);
  };
  return Observable2;
}();
function getPromiseCtor(promiseCtor) {
  var _a;
  return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config.Promise) !== null && _a !== void 0 ? _a : Promise;
}
function isObserver(value) {
  return value && isFunction3(value.next) && isFunction3(value.error) && isFunction3(value.complete);
}
function isSubscriber(value) {
  return value && value instanceof Subscriber || isObserver(value) && isSubscription(value);
}

// node_modules/rxjs/dist/esm5/internal/util/lift.js
function hasLift(source) {
  return isFunction3(source === null || source === void 0 ? void 0 : source.lift);
}
function operate(init2) {
  return function(source) {
    if (hasLift(source)) {
      return source.lift(function(liftedSource) {
        try {
          return init2(liftedSource, this);
        } catch (err) {
          this.error(err);
        }
      });
    }
    throw new TypeError("Unable to lift unknown Observable type");
  };
}

// node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js
function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {
  return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);
}
var OperatorSubscriber = function(_super) {
  __extends(OperatorSubscriber2, _super);
  function OperatorSubscriber2(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {
    var _this = _super.call(this, destination) || this;
    _this.onFinalize = onFinalize;
    _this.shouldUnsubscribe = shouldUnsubscribe;
    _this._next = onNext ? function(value) {
      try {
        onNext(value);
      } catch (err) {
        destination.error(err);
      }
    } : _super.prototype._next;
    _this._error = onError ? function(err) {
      try {
        onError(err);
      } catch (err2) {
        destination.error(err2);
      } finally {
        this.unsubscribe();
      }
    } : _super.prototype._error;
    _this._complete = onComplete ? function() {
      try {
        onComplete();
      } catch (err) {
        destination.error(err);
      } finally {
        this.unsubscribe();
      }
    } : _super.prototype._complete;
    return _this;
  }
  OperatorSubscriber2.prototype.unsubscribe = function() {
    var _a;
    if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {
      var closed_1 = this.closed;
      _super.prototype.unsubscribe.call(this);
      !closed_1 && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));
    }
  };
  return OperatorSubscriber2;
}(Subscriber);

// node_modules/rxjs/dist/esm5/internal/operators/refCount.js
function refCount() {
  return operate(function(source, subscriber) {
    var connection = null;
    source._refCount++;
    var refCounter = createOperatorSubscriber(subscriber, void 0, void 0, void 0, function() {
      if (!source || source._refCount <= 0 || 0 < --source._refCount) {
        connection = null;
        return;
      }
      var sharedConnection = source._connection;
      var conn = connection;
      connection = null;
      if (sharedConnection && (!conn || sharedConnection === conn)) {
        sharedConnection.unsubscribe();
      }
      subscriber.unsubscribe();
    });
    source.subscribe(refCounter);
    if (!refCounter.closed) {
      connection = source.connect();
    }
  });
}

// node_modules/rxjs/dist/esm5/internal/observable/ConnectableObservable.js
var ConnectableObservable = function(_super) {
  __extends(ConnectableObservable2, _super);
  function ConnectableObservable2(source, subjectFactory) {
    var _this = _super.call(this) || this;
    _this.source = source;
    _this.subjectFactory = subjectFactory;
    _this._subject = null;
    _this._refCount = 0;
    _this._connection = null;
    if (hasLift(source)) {
      _this.lift = source.lift;
    }
    return _this;
  }
  ConnectableObservable2.prototype._subscribe = function(subscriber) {
    return this.getSubject().subscribe(subscriber);
  };
  ConnectableObservable2.prototype.getSubject = function() {
    var subject = this._subject;
    if (!subject || subject.isStopped) {
      this._subject = this.subjectFactory();
    }
    return this._subject;
  };
  ConnectableObservable2.prototype._teardown = function() {
    this._refCount = 0;
    var _connection = this._connection;
    this._subject = this._connection = null;
    _connection === null || _connection === void 0 ? void 0 : _connection.unsubscribe();
  };
  ConnectableObservable2.prototype.connect = function() {
    var _this = this;
    var connection = this._connection;
    if (!connection) {
      connection = this._connection = new Subscription();
      var subject_1 = this.getSubject();
      connection.add(this.source.subscribe(createOperatorSubscriber(subject_1, void 0, function() {
        _this._teardown();
        subject_1.complete();
      }, function(err) {
        _this._teardown();
        subject_1.error(err);
      }, function() {
        return _this._teardown();
      })));
      if (connection.closed) {
        this._connection = null;
        connection = Subscription.EMPTY;
      }
    }
    return connection;
  };
  ConnectableObservable2.prototype.refCount = function() {
    return refCount()(this);
  };
  return ConnectableObservable2;
}(Observable);

// node_modules/rxjs/dist/esm5/internal/util/ObjectUnsubscribedError.js
var ObjectUnsubscribedError = createErrorClass(function(_super) {
  return function ObjectUnsubscribedErrorImpl() {
    _super(this);
    this.name = "ObjectUnsubscribedError";
    this.message = "object unsubscribed";
  };
});

// node_modules/rxjs/dist/esm5/internal/Subject.js
var Subject = function(_super) {
  __extends(Subject2, _super);
  function Subject2() {
    var _this = _super.call(this) || this;
    _this.closed = false;
    _this.currentObservers = null;
    _this.observers = [];
    _this.isStopped = false;
    _this.hasError = false;
    _this.thrownError = null;
    return _this;
  }
  Subject2.prototype.lift = function(operator) {
    var subject = new AnonymousSubject(this, this);
    subject.operator = operator;
    return subject;
  };
  Subject2.prototype._throwIfClosed = function() {
    if (this.closed) {
      throw new ObjectUnsubscribedError();
    }
  };
  Subject2.prototype.next = function(value) {
    var _this = this;
    errorContext(function() {
      var e_1, _a;
      _this._throwIfClosed();
      if (!_this.isStopped) {
        if (!_this.currentObservers) {
          _this.currentObservers = Array.from(_this.observers);
        }
        try {
          for (var _b = __values(_this.currentObservers), _c = _b.next(); !_c.done; _c = _b.next()) {
            var observer = _c.value;
            observer.next(value);
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
          } finally {
            if (e_1) throw e_1.error;
          }
        }
      }
    });
  };
  Subject2.prototype.error = function(err) {
    var _this = this;
    errorContext(function() {
      _this._throwIfClosed();
      if (!_this.isStopped) {
        _this.hasError = _this.isStopped = true;
        _this.thrownError = err;
        var observers = _this.observers;
        while (observers.length) {
          observers.shift().error(err);
        }
      }
    });
  };
  Subject2.prototype.complete = function() {
    var _this = this;
    errorContext(function() {
      _this._throwIfClosed();
      if (!_this.isStopped) {
        _this.isStopped = true;
        var observers = _this.observers;
        while (observers.length) {
          observers.shift().complete();
        }
      }
    });
  };
  Subject2.prototype.unsubscribe = function() {
    this.isStopped = this.closed = true;
    this.observers = this.currentObservers = null;
  };
  Object.defineProperty(Subject2.prototype, "observed", {
    get: function() {
      var _a;
      return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;
    },
    enumerable: false,
    configurable: true
  });
  Subject2.prototype._trySubscribe = function(subscriber) {
    this._throwIfClosed();
    return _super.prototype._trySubscribe.call(this, subscriber);
  };
  Subject2.prototype._subscribe = function(subscriber) {
    this._throwIfClosed();
    this._checkFinalizedStatuses(subscriber);
    return this._innerSubscribe(subscriber);
  };
  Subject2.prototype._innerSubscribe = function(subscriber) {
    var _this = this;
    var _a = this, hasError = _a.hasError, isStopped = _a.isStopped, observers = _a.observers;
    if (hasError || isStopped) {
      return EMPTY_SUBSCRIPTION;
    }
    this.currentObservers = null;
    observers.push(subscriber);
    return new Subscription(function() {
      _this.currentObservers = null;
      arrRemove(observers, subscriber);
    });
  };
  Subject2.prototype._checkFinalizedStatuses = function(subscriber) {
    var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, isStopped = _a.isStopped;
    if (hasError) {
      subscriber.error(thrownError);
    } else if (isStopped) {
      subscriber.complete();
    }
  };
  Subject2.prototype.asObservable = function() {
    var observable2 = new Observable();
    observable2.source = this;
    return observable2;
  };
  Subject2.create = function(destination, source) {
    return new AnonymousSubject(destination, source);
  };
  return Subject2;
}(Observable);
var AnonymousSubject = function(_super) {
  __extends(AnonymousSubject2, _super);
  function AnonymousSubject2(destination, source) {
    var _this = _super.call(this) || this;
    _this.destination = destination;
    _this.source = source;
    return _this;
  }
  AnonymousSubject2.prototype.next = function(value) {
    var _a, _b;
    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);
  };
  AnonymousSubject2.prototype.error = function(err) {
    var _a, _b;
    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);
  };
  AnonymousSubject2.prototype.complete = function() {
    var _a, _b;
    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);
  };
  AnonymousSubject2.prototype._subscribe = function(subscriber) {
    var _a, _b;
    return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION;
  };
  return AnonymousSubject2;
}(Subject);

// node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js
var BehaviorSubject = function(_super) {
  __extends(BehaviorSubject2, _super);
  function BehaviorSubject2(_value) {
    var _this = _super.call(this) || this;
    _this._value = _value;
    return _this;
  }
  Object.defineProperty(BehaviorSubject2.prototype, "value", {
    get: function() {
      return this.getValue();
    },
    enumerable: false,
    configurable: true
  });
  BehaviorSubject2.prototype._subscribe = function(subscriber) {
    var subscription = _super.prototype._subscribe.call(this, subscriber);
    !subscription.closed && subscriber.next(this._value);
    return subscription;
  };
  BehaviorSubject2.prototype.getValue = function() {
    var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, _value = _a._value;
    if (hasError) {
      throw thrownError;
    }
    this._throwIfClosed();
    return _value;
  };
  BehaviorSubject2.prototype.next = function(value) {
    _super.prototype.next.call(this, this._value = value);
  };
  return BehaviorSubject2;
}(Subject);

// node_modules/rxjs/dist/esm5/internal/scheduler/dateTimestampProvider.js
var dateTimestampProvider = {
  now: function() {
    return (dateTimestampProvider.delegate || Date).now();
  },
  delegate: void 0
};

// node_modules/rxjs/dist/esm5/internal/ReplaySubject.js
var ReplaySubject = function(_super) {
  __extends(ReplaySubject2, _super);
  function ReplaySubject2(_bufferSize, _windowTime, _timestampProvider) {
    if (_bufferSize === void 0) {
      _bufferSize = Infinity;
    }
    if (_windowTime === void 0) {
      _windowTime = Infinity;
    }
    if (_timestampProvider === void 0) {
      _timestampProvider = dateTimestampProvider;
    }
    var _this = _super.call(this) || this;
    _this._bufferSize = _bufferSize;
    _this._windowTime = _windowTime;
    _this._timestampProvider = _timestampProvider;
    _this._buffer = [];
    _this._infiniteTimeWindow = true;
    _this._infiniteTimeWindow = _windowTime === Infinity;
    _this._bufferSize = Math.max(1, _bufferSize);
    _this._windowTime = Math.max(1, _windowTime);
    return _this;
  }
  ReplaySubject2.prototype.next = function(value) {
    var _a = this, isStopped = _a.isStopped, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow, _timestampProvider = _a._timestampProvider, _windowTime = _a._windowTime;
    if (!isStopped) {
      _buffer.push(value);
      !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);
    }
    this._trimBuffer();
    _super.prototype.next.call(this, value);
  };
  ReplaySubject2.prototype._subscribe = function(subscriber) {
    this._throwIfClosed();
    this._trimBuffer();
    var subscription = this._innerSubscribe(subscriber);
    var _a = this, _infiniteTimeWindow = _a._infiniteTimeWindow, _buffer = _a._buffer;
    var copy = _buffer.slice();
    for (var i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {
      subscriber.next(copy[i]);
    }
    this._checkFinalizedStatuses(subscriber);
    return subscription;
  };
  ReplaySubject2.prototype._trimBuffer = function() {
    var _a = this, _bufferSize = _a._bufferSize, _timestampProvider = _a._timestampProvider, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow;
    var adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;
    _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);
    if (!_infiniteTimeWindow) {
      var now = _timestampProvider.now();
      var last2 = 0;
      for (var i = 1; i < _buffer.length && _buffer[i] <= now; i += 2) {
        last2 = i;
      }
      last2 && _buffer.splice(0, last2 + 1);
    }
  };
  return ReplaySubject2;
}(Subject);

// node_modules/rxjs/dist/esm5/internal/scheduler/Action.js
var Action = function(_super) {
  __extends(Action2, _super);
  function Action2(scheduler, work) {
    return _super.call(this) || this;
  }
  Action2.prototype.schedule = function(state, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    return this;
  };
  return Action2;
}(Subscription);

// node_modules/rxjs/dist/esm5/internal/scheduler/intervalProvider.js
var intervalProvider = {
  setInterval: function(handler, timeout) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
      args[_i - 2] = arguments[_i];
    }
    var delegate = intervalProvider.delegate;
    if (delegate === null || delegate === void 0 ? void 0 : delegate.setInterval) {
      return delegate.setInterval.apply(delegate, __spreadArray([handler, timeout], __read(args)));
    }
    return setInterval.apply(void 0, __spreadArray([handler, timeout], __read(args)));
  },
  clearInterval: function(handle) {
    var delegate = intervalProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearInterval) || clearInterval)(handle);
  },
  delegate: void 0
};

// node_modules/rxjs/dist/esm5/internal/scheduler/AsyncAction.js
var AsyncAction = function(_super) {
  __extends(AsyncAction2, _super);
  function AsyncAction2(scheduler, work) {
    var _this = _super.call(this, scheduler, work) || this;
    _this.scheduler = scheduler;
    _this.work = work;
    _this.pending = false;
    return _this;
  }
  AsyncAction2.prototype.schedule = function(state, delay) {
    var _a;
    if (delay === void 0) {
      delay = 0;
    }
    if (this.closed) {
      return this;
    }
    this.state = state;
    var id = this.id;
    var scheduler = this.scheduler;
    if (id != null) {
      this.id = this.recycleAsyncId(scheduler, id, delay);
    }
    this.pending = true;
    this.delay = delay;
    this.id = (_a = this.id) !== null && _a !== void 0 ? _a : this.requestAsyncId(scheduler, this.id, delay);
    return this;
  };
  AsyncAction2.prototype.requestAsyncId = function(scheduler, _id, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    return intervalProvider.setInterval(scheduler.flush.bind(scheduler, this), delay);
  };
  AsyncAction2.prototype.recycleAsyncId = function(_scheduler, id, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    if (delay != null && this.delay === delay && this.pending === false) {
      return id;
    }
    if (id != null) {
      intervalProvider.clearInterval(id);
    }
    return void 0;
  };
  AsyncAction2.prototype.execute = function(state, delay) {
    if (this.closed) {
      return new Error("executing a cancelled action");
    }
    this.pending = false;
    var error = this._execute(state, delay);
    if (error) {
      return error;
    } else if (this.pending === false && this.id != null) {
      this.id = this.recycleAsyncId(this.scheduler, this.id, null);
    }
  };
  AsyncAction2.prototype._execute = function(state, _delay) {
    var errored = false;
    var errorValue;
    try {
      this.work(state);
    } catch (e) {
      errored = true;
      errorValue = e ? e : new Error("Scheduled action threw falsy error");
    }
    if (errored) {
      this.unsubscribe();
      return errorValue;
    }
  };
  AsyncAction2.prototype.unsubscribe = function() {
    if (!this.closed) {
      var _a = this, id = _a.id, scheduler = _a.scheduler;
      var actions = scheduler.actions;
      this.work = this.state = this.scheduler = null;
      this.pending = false;
      arrRemove(actions, this);
      if (id != null) {
        this.id = this.recycleAsyncId(scheduler, id, null);
      }
      this.delay = null;
      _super.prototype.unsubscribe.call(this);
    }
  };
  return AsyncAction2;
}(Action);

// node_modules/rxjs/dist/esm5/internal/util/Immediate.js
var nextHandle = 1;
var resolved;
var activeHandles = {};
function findAndClearHandle(handle) {
  if (handle in activeHandles) {
    delete activeHandles[handle];
    return true;
  }
  return false;
}
var Immediate = {
  setImmediate: function(cb) {
    var handle = nextHandle++;
    activeHandles[handle] = true;
    if (!resolved) {
      resolved = Promise.resolve();
    }
    resolved.then(function() {
      return findAndClearHandle(handle) && cb();
    });
    return handle;
  },
  clearImmediate: function(handle) {
    findAndClearHandle(handle);
  }
};

// node_modules/rxjs/dist/esm5/internal/scheduler/immediateProvider.js
var setImmediate = Immediate.setImmediate;
var clearImmediate = Immediate.clearImmediate;
var immediateProvider = {
  setImmediate: function() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var delegate = immediateProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.setImmediate) || setImmediate).apply(void 0, __spreadArray([], __read(args)));
  },
  clearImmediate: function(handle) {
    var delegate = immediateProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearImmediate) || clearImmediate)(handle);
  },
  delegate: void 0
};

// node_modules/rxjs/dist/esm5/internal/scheduler/AsapAction.js
var AsapAction = function(_super) {
  __extends(AsapAction2, _super);
  function AsapAction2(scheduler, work) {
    var _this = _super.call(this, scheduler, work) || this;
    _this.scheduler = scheduler;
    _this.work = work;
    return _this;
  }
  AsapAction2.prototype.requestAsyncId = function(scheduler, id, delay) {
    if (delay === void 0) {
      delay = 0;
    }
    if (delay !== null && delay > 0) {
      return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
    }
    scheduler.actions.push(this);
    return scheduler._scheduled || (scheduler._scheduled = immediateProvider.setImmediate(scheduler.flush.bind(scheduler, void 0)));
  };
  AsapAction2.prototype.recycleAsyncId = function(scheduler, id, delay) {
    var _a;
    if (delay === void 0) {
      delay = 0;
    }
    if (delay != null ? delay > 0 : this.delay > 0) {
      return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
    }
    var actions = scheduler.actions;
    if (id != null && ((_a = actions[actions.length - 1]) === null || _a === void 0 ? void 0 : _a.id) !== id) {
      immediateProvider.clearImmediate(id);
      if (scheduler._scheduled === id) {
        scheduler._scheduled = void 0;
      }
    }
    return void 0;
  };
  return AsapAction2;
}(AsyncAction);

// node_modules/rxjs/dist/esm5/internal/Scheduler.js
var Scheduler = function() {
  function Scheduler2(schedulerActionCtor, now) {
    if (now === void 0) {
      now = Scheduler2.now;
    }
    this.schedulerActionCtor = schedulerActionCtor;
    this.now = now;
  }
  Scheduler2.prototype.schedule = function(work, delay, state) {
    if (delay === void 0) {
      delay = 0;
    }
    return new this.schedulerActionCtor(this, work).schedule(state, delay);
  };
  Scheduler2.now = dateTimestampProvider.now;
  return Scheduler2;
}();

// node_modules/rxjs/dist/esm5/internal/scheduler/AsyncScheduler.js
var AsyncScheduler = function(_super) {
  __extends(AsyncScheduler2, _super);
  function AsyncScheduler2(SchedulerAction, now) {
    if (now === void 0) {
      now = Scheduler.now;
    }
    var _this = _super.call(this, SchedulerAction, now) || this;
    _this.actions = [];
    _this._active = false;
    return _this;
  }
  AsyncScheduler2.prototype.flush = function(action) {
    var actions = this.actions;
    if (this._active) {
      actions.push(action);
      return;
    }
    var error;
    this._active = true;
    do {
      if (error = action.execute(action.state, action.delay)) {
        break;
      }
    } while (action = actions.shift());
    this._active = false;
    if (error) {
      while (action = actions.shift()) {
        action.unsubscribe();
      }
      throw error;
    }
  };
  return AsyncScheduler2;
}(Scheduler);

// node_modules/rxjs/dist/esm5/internal/scheduler/AsapScheduler.js
var AsapScheduler = function(_super) {
  __extends(AsapScheduler2, _super);
  function AsapScheduler2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  AsapScheduler2.prototype.flush = function(action) {
    this._active = true;
    var flushId = this._scheduled;
    this._scheduled = void 0;
    var actions = this.actions;
    var error;
    action = action || actions.shift();
    do {
      if (error = action.execute(action.state, action.delay)) {
        break;
      }
    } while ((action = actions[0]) && action.id === flushId && actions.shift());
    this._active = false;
    if (error) {
      while ((action = actions[0]) && action.id === flushId && actions.shift()) {
        action.unsubscribe();
      }
      throw error;
    }
  };
  return AsapScheduler2;
}(AsyncScheduler);

// node_modules/rxjs/dist/esm5/internal/scheduler/asap.js
var asapScheduler = new AsapScheduler(AsapAction);

// node_modules/rxjs/dist/esm5/internal/observable/empty.js
var EMPTY = new Observable(function(subscriber) {
  return subscriber.complete();
});

// node_modules/rxjs/dist/esm5/internal/util/isScheduler.js
function isScheduler(value) {
  return value && isFunction3(value.schedule);
}

// node_modules/rxjs/dist/esm5/internal/util/args.js
function last(arr) {
  return arr[arr.length - 1];
}
function popResultSelector(args) {
  return isFunction3(last(args)) ? args.pop() : void 0;
}
function popScheduler(args) {
  return isScheduler(last(args)) ? args.pop() : void 0;
}

// node_modules/rxjs/dist/esm5/internal/util/isArrayLike.js
var isArrayLike = function(x) {
  return x && typeof x.length === "number" && typeof x !== "function";
};

// node_modules/rxjs/dist/esm5/internal/util/isPromise.js
function isPromise(value) {
  return isFunction3(value === null || value === void 0 ? void 0 : value.then);
}

// node_modules/rxjs/dist/esm5/internal/util/isInteropObservable.js
function isInteropObservable(input) {
  return isFunction3(input[observable]);
}

// node_modules/rxjs/dist/esm5/internal/util/isAsyncIterable.js
function isAsyncIterable(obj) {
  return Symbol.asyncIterator && isFunction3(obj === null || obj === void 0 ? void 0 : obj[Symbol.asyncIterator]);
}

// node_modules/rxjs/dist/esm5/internal/util/throwUnobservableError.js
function createInvalidObservableTypeError(input) {
  return new TypeError("You provided " + (input !== null && typeof input === "object" ? "an invalid object" : "'" + input + "'") + " where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.");
}

// node_modules/rxjs/dist/esm5/internal/symbol/iterator.js
function getSymbolIterator() {
  if (typeof Symbol !== "function" || !Symbol.iterator) {
    return "@@iterator";
  }
  return Symbol.iterator;
}
var iterator = getSymbolIterator();

// node_modules/rxjs/dist/esm5/internal/util/isIterable.js
function isIterable(input) {
  return isFunction3(input === null || input === void 0 ? void 0 : input[iterator]);
}

// node_modules/rxjs/dist/esm5/internal/util/isReadableStreamLike.js
function readableStreamLikeToAsyncGenerator(readableStream) {
  return __asyncGenerator(this, arguments, function readableStreamLikeToAsyncGenerator_1() {
    var reader, _a, value, done;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          reader = readableStream.getReader();
          _b.label = 1;
        case 1:
          _b.trys.push([1, , 9, 10]);
          _b.label = 2;
        case 2:
          if (false) return [3, 8];
          return [4, __await(reader.read())];
        case 3:
          _a = _b.sent(), value = _a.value, done = _a.done;
          if (!done) return [3, 5];
          return [4, __await(void 0)];
        case 4:
          return [2, _b.sent()];
        case 5:
          return [4, __await(value)];
        case 6:
          return [4, _b.sent()];
        case 7:
          _b.sent();
          return [3, 2];
        case 8:
          return [3, 10];
        case 9:
          reader.releaseLock();
          return [7];
        case 10:
          return [2];
      }
    });
  });
}
function isReadableStreamLike(obj) {
  return isFunction3(obj === null || obj === void 0 ? void 0 : obj.getReader);
}

// node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js
function innerFrom(input) {
  if (input instanceof Observable) {
    return input;
  }
  if (input != null) {
    if (isInteropObservable(input)) {
      return fromInteropObservable(input);
    }
    if (isArrayLike(input)) {
      return fromArrayLike(input);
    }
    if (isPromise(input)) {
      return fromPromise(input);
    }
    if (isAsyncIterable(input)) {
      return fromAsyncIterable(input);
    }
    if (isIterable(input)) {
      return fromIterable(input);
    }
    if (isReadableStreamLike(input)) {
      return fromReadableStreamLike(input);
    }
  }
  throw createInvalidObservableTypeError(input);
}
function fromInteropObservable(obj) {
  return new Observable(function(subscriber) {
    var obs = obj[observable]();
    if (isFunction3(obs.subscribe)) {
      return obs.subscribe(subscriber);
    }
    throw new TypeError("Provided object does not correctly implement Symbol.observable");
  });
}
function fromArrayLike(array) {
  return new Observable(function(subscriber) {
    for (var i = 0; i < array.length && !subscriber.closed; i++) {
      subscriber.next(array[i]);
    }
    subscriber.complete();
  });
}
function fromPromise(promise) {
  return new Observable(function(subscriber) {
    promise.then(function(value) {
      if (!subscriber.closed) {
        subscriber.next(value);
        subscriber.complete();
      }
    }, function(err) {
      return subscriber.error(err);
    }).then(null, reportUnhandledError);
  });
}
function fromIterable(iterable) {
  return new Observable(function(subscriber) {
    var e_1, _a;
    try {
      for (var iterable_1 = __values(iterable), iterable_1_1 = iterable_1.next(); !iterable_1_1.done; iterable_1_1 = iterable_1.next()) {
        var value = iterable_1_1.value;
        subscriber.next(value);
        if (subscriber.closed) {
          return;
        }
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) _a.call(iterable_1);
      } finally {
        if (e_1) throw e_1.error;
      }
    }
    subscriber.complete();
  });
}
function fromAsyncIterable(asyncIterable) {
  return new Observable(function(subscriber) {
    process(asyncIterable, subscriber).catch(function(err) {
      return subscriber.error(err);
    });
  });
}
function fromReadableStreamLike(readableStream) {
  return fromAsyncIterable(readableStreamLikeToAsyncGenerator(readableStream));
}
function process(asyncIterable, subscriber) {
  var asyncIterable_1, asyncIterable_1_1;
  var e_2, _a;
  return __awaiter(this, void 0, void 0, function() {
    var value, e_2_1;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          _b.trys.push([0, 5, 6, 11]);
          asyncIterable_1 = __asyncValues(asyncIterable);
          _b.label = 1;
        case 1:
          return [4, asyncIterable_1.next()];
        case 2:
          if (!(asyncIterable_1_1 = _b.sent(), !asyncIterable_1_1.done)) return [3, 4];
          value = asyncIterable_1_1.value;
          subscriber.next(value);
          if (subscriber.closed) {
            return [2];
          }
          _b.label = 3;
        case 3:
          return [3, 1];
        case 4:
          return [3, 11];
        case 5:
          e_2_1 = _b.sent();
          e_2 = { error: e_2_1 };
          return [3, 11];
        case 6:
          _b.trys.push([6, , 9, 10]);
          if (!(asyncIterable_1_1 && !asyncIterable_1_1.done && (_a = asyncIterable_1.return))) return [3, 8];
          return [4, _a.call(asyncIterable_1)];
        case 7:
          _b.sent();
          _b.label = 8;
        case 8:
          return [3, 10];
        case 9:
          if (e_2) throw e_2.error;
          return [7];
        case 10:
          return [7];
        case 11:
          subscriber.complete();
          return [2];
      }
    });
  });
}

// node_modules/rxjs/dist/esm5/internal/util/executeSchedule.js
function executeSchedule(parentSubscription, scheduler, work, delay, repeat) {
  if (delay === void 0) {
    delay = 0;
  }
  if (repeat === void 0) {
    repeat = false;
  }
  var scheduleSubscription = scheduler.schedule(function() {
    work();
    if (repeat) {
      parentSubscription.add(this.schedule(null, delay));
    } else {
      this.unsubscribe();
    }
  }, delay);
  parentSubscription.add(scheduleSubscription);
  if (!repeat) {
    return scheduleSubscription;
  }
}

// node_modules/rxjs/dist/esm5/internal/operators/observeOn.js
function observeOn(scheduler, delay) {
  if (delay === void 0) {
    delay = 0;
  }
  return operate(function(source, subscriber) {
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      return executeSchedule(subscriber, scheduler, function() {
        return subscriber.next(value);
      }, delay);
    }, function() {
      return executeSchedule(subscriber, scheduler, function() {
        return subscriber.complete();
      }, delay);
    }, function(err) {
      return executeSchedule(subscriber, scheduler, function() {
        return subscriber.error(err);
      }, delay);
    }));
  });
}

// node_modules/rxjs/dist/esm5/internal/operators/subscribeOn.js
function subscribeOn(scheduler, delay) {
  if (delay === void 0) {
    delay = 0;
  }
  return operate(function(source, subscriber) {
    subscriber.add(scheduler.schedule(function() {
      return source.subscribe(subscriber);
    }, delay));
  });
}

// node_modules/rxjs/dist/esm5/internal/scheduled/scheduleObservable.js
function scheduleObservable(input, scheduler) {
  return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));
}

// node_modules/rxjs/dist/esm5/internal/scheduled/schedulePromise.js
function schedulePromise(input, scheduler) {
  return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));
}

// node_modules/rxjs/dist/esm5/internal/scheduled/scheduleArray.js
function scheduleArray(input, scheduler) {
  return new Observable(function(subscriber) {
    var i = 0;
    return scheduler.schedule(function() {
      if (i === input.length) {
        subscriber.complete();
      } else {
        subscriber.next(input[i++]);
        if (!subscriber.closed) {
          this.schedule();
        }
      }
    });
  });
}

// node_modules/rxjs/dist/esm5/internal/scheduled/scheduleIterable.js
function scheduleIterable(input, scheduler) {
  return new Observable(function(subscriber) {
    var iterator2;
    executeSchedule(subscriber, scheduler, function() {
      iterator2 = input[iterator]();
      executeSchedule(subscriber, scheduler, function() {
        var _a;
        var value;
        var done;
        try {
          _a = iterator2.next(), value = _a.value, done = _a.done;
        } catch (err) {
          subscriber.error(err);
          return;
        }
        if (done) {
          subscriber.complete();
        } else {
          subscriber.next(value);
        }
      }, 0, true);
    });
    return function() {
      return isFunction3(iterator2 === null || iterator2 === void 0 ? void 0 : iterator2.return) && iterator2.return();
    };
  });
}

// node_modules/rxjs/dist/esm5/internal/scheduled/scheduleAsyncIterable.js
function scheduleAsyncIterable(input, scheduler) {
  if (!input) {
    throw new Error("Iterable cannot be null");
  }
  return new Observable(function(subscriber) {
    executeSchedule(subscriber, scheduler, function() {
      var iterator2 = input[Symbol.asyncIterator]();
      executeSchedule(subscriber, scheduler, function() {
        iterator2.next().then(function(result) {
          if (result.done) {
            subscriber.complete();
          } else {
            subscriber.next(result.value);
          }
        });
      }, 0, true);
    });
  });
}

// node_modules/rxjs/dist/esm5/internal/scheduled/scheduleReadableStreamLike.js
function scheduleReadableStreamLike(input, scheduler) {
  return scheduleAsyncIterable(readableStreamLikeToAsyncGenerator(input), scheduler);
}

// node_modules/rxjs/dist/esm5/internal/scheduled/scheduled.js
function scheduled(input, scheduler) {
  if (input != null) {
    if (isInteropObservable(input)) {
      return scheduleObservable(input, scheduler);
    }
    if (isArrayLike(input)) {
      return scheduleArray(input, scheduler);
    }
    if (isPromise(input)) {
      return schedulePromise(input, scheduler);
    }
    if (isAsyncIterable(input)) {
      return scheduleAsyncIterable(input, scheduler);
    }
    if (isIterable(input)) {
      return scheduleIterable(input, scheduler);
    }
    if (isReadableStreamLike(input)) {
      return scheduleReadableStreamLike(input, scheduler);
    }
  }
  throw createInvalidObservableTypeError(input);
}

// node_modules/rxjs/dist/esm5/internal/observable/from.js
function from(input, scheduler) {
  return scheduler ? scheduled(input, scheduler) : innerFrom(input);
}

// node_modules/rxjs/dist/esm5/internal/observable/of.js
function of() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  var scheduler = popScheduler(args);
  return from(args, scheduler);
}

// node_modules/rxjs/dist/esm5/internal/util/EmptyError.js
var EmptyError = createErrorClass(function(_super) {
  return function EmptyErrorImpl() {
    _super(this);
    this.name = "EmptyError";
    this.message = "no elements in sequence";
  };
});

// node_modules/rxjs/dist/esm5/internal/firstValueFrom.js
function firstValueFrom(source, config4) {
  var hasConfig = typeof config4 === "object";
  return new Promise(function(resolve, reject) {
    var subscriber = new SafeSubscriber({
      next: function(value) {
        resolve(value);
        subscriber.unsubscribe();
      },
      error: reject,
      complete: function() {
        if (hasConfig) {
          resolve(config4.defaultValue);
        } else {
          reject(new EmptyError());
        }
      }
    });
    source.subscribe(subscriber);
  });
}

// node_modules/rxjs/dist/esm5/internal/operators/map.js
function map2(project, thisArg) {
  return operate(function(source, subscriber) {
    var index = 0;
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      subscriber.next(project.call(thisArg, value, index++));
    }));
  });
}

// node_modules/rxjs/dist/esm5/internal/util/mapOneOrManyArgs.js
var isArray = Array.isArray;
function callOrApply(fn, args) {
  return isArray(args) ? fn.apply(void 0, __spreadArray([], __read(args))) : fn(args);
}
function mapOneOrManyArgs(fn) {
  return map2(function(args) {
    return callOrApply(fn, args);
  });
}

// node_modules/rxjs/dist/esm5/internal/util/argsArgArrayOrObject.js
var isArray2 = Array.isArray;
var getPrototypeOf = Object.getPrototypeOf;
var objectProto = Object.prototype;
var getKeys = Object.keys;
function argsArgArrayOrObject(args) {
  if (args.length === 1) {
    var first_1 = args[0];
    if (isArray2(first_1)) {
      return { args: first_1, keys: null };
    }
    if (isPOJO(first_1)) {
      var keys2 = getKeys(first_1);
      return {
        args: keys2.map(function(key) {
          return first_1[key];
        }),
        keys: keys2
      };
    }
  }
  return { args, keys: null };
}
function isPOJO(obj) {
  return obj && typeof obj === "object" && getPrototypeOf(obj) === objectProto;
}

// node_modules/rxjs/dist/esm5/internal/util/createObject.js
function createObject(keys2, values) {
  return keys2.reduce(function(result, key, i) {
    return result[key] = values[i], result;
  }, {});
}

// node_modules/rxjs/dist/esm5/internal/observable/combineLatest.js
function combineLatest() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  var scheduler = popScheduler(args);
  var resultSelector = popResultSelector(args);
  var _a = argsArgArrayOrObject(args), observables = _a.args, keys2 = _a.keys;
  if (observables.length === 0) {
    return from([], scheduler);
  }
  var result = new Observable(combineLatestInit(observables, scheduler, keys2 ? function(values) {
    return createObject(keys2, values);
  } : identity2));
  return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;
}
function combineLatestInit(observables, scheduler, valueTransform) {
  if (valueTransform === void 0) {
    valueTransform = identity2;
  }
  return function(subscriber) {
    maybeSchedule(scheduler, function() {
      var length = observables.length;
      var values = new Array(length);
      var active = length;
      var remainingFirstValues = length;
      var _loop_1 = function(i2) {
        maybeSchedule(scheduler, function() {
          var source = from(observables[i2], scheduler);
          var hasFirstValue = false;
          source.subscribe(createOperatorSubscriber(subscriber, function(value) {
            values[i2] = value;
            if (!hasFirstValue) {
              hasFirstValue = true;
              remainingFirstValues--;
            }
            if (!remainingFirstValues) {
              subscriber.next(valueTransform(values.slice()));
            }
          }, function() {
            if (!--active) {
              subscriber.complete();
            }
          }));
        }, subscriber);
      };
      for (var i = 0; i < length; i++) {
        _loop_1(i);
      }
    }, subscriber);
  };
}
function maybeSchedule(scheduler, execute, subscription) {
  if (scheduler) {
    executeSchedule(subscription, scheduler, execute);
  } else {
    execute();
  }
}

// node_modules/rxjs/dist/esm5/internal/operators/mergeInternals.js
function mergeInternals(source, subscriber, project, concurrent, onBeforeNext, expand2, innerSubScheduler, additionalFinalizer) {
  var buffer = [];
  var active = 0;
  var index = 0;
  var isComplete = false;
  var checkComplete = function() {
    if (isComplete && !buffer.length && !active) {
      subscriber.complete();
    }
  };
  var outerNext = function(value) {
    return active < concurrent ? doInnerSub(value) : buffer.push(value);
  };
  var doInnerSub = function(value) {
    expand2 && subscriber.next(value);
    active++;
    var innerComplete = false;
    innerFrom(project(value, index++)).subscribe(createOperatorSubscriber(subscriber, function(innerValue) {
      onBeforeNext === null || onBeforeNext === void 0 ? void 0 : onBeforeNext(innerValue);
      if (expand2) {
        outerNext(innerValue);
      } else {
        subscriber.next(innerValue);
      }
    }, function() {
      innerComplete = true;
    }, void 0, function() {
      if (innerComplete) {
        try {
          active--;
          var _loop_1 = function() {
            var bufferedValue = buffer.shift();
            if (innerSubScheduler) {
              executeSchedule(subscriber, innerSubScheduler, function() {
                return doInnerSub(bufferedValue);
              });
            } else {
              doInnerSub(bufferedValue);
            }
          };
          while (buffer.length && active < concurrent) {
            _loop_1();
          }
          checkComplete();
        } catch (err) {
          subscriber.error(err);
        }
      }
    }));
  };
  source.subscribe(createOperatorSubscriber(subscriber, outerNext, function() {
    isComplete = true;
    checkComplete();
  }));
  return function() {
    additionalFinalizer === null || additionalFinalizer === void 0 ? void 0 : additionalFinalizer();
  };
}

// node_modules/rxjs/dist/esm5/internal/operators/mergeMap.js
function mergeMap(project, resultSelector, concurrent) {
  if (concurrent === void 0) {
    concurrent = Infinity;
  }
  if (isFunction3(resultSelector)) {
    return mergeMap(function(a, i) {
      return map2(function(b, ii) {
        return resultSelector(a, b, i, ii);
      })(innerFrom(project(a, i)));
    }, concurrent);
  } else if (typeof resultSelector === "number") {
    concurrent = resultSelector;
  }
  return operate(function(source, subscriber) {
    return mergeInternals(source, subscriber, project, concurrent);
  });
}

// node_modules/rxjs/dist/esm5/internal/operators/mergeAll.js
function mergeAll(concurrent) {
  if (concurrent === void 0) {
    concurrent = Infinity;
  }
  return mergeMap(identity2, concurrent);
}

// node_modules/rxjs/dist/esm5/internal/operators/concatAll.js
function concatAll() {
  return mergeAll(1);
}

// node_modules/rxjs/dist/esm5/internal/observable/concat.js
function concat() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  return concatAll()(from(args, popScheduler(args)));
}

// node_modules/rxjs/dist/esm5/internal/operators/filter.js
function filter(predicate, thisArg) {
  return operate(function(source, subscriber) {
    var index = 0;
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      return predicate.call(thisArg, value, index++) && subscriber.next(value);
    }));
  });
}

// node_modules/rxjs/dist/esm5/internal/operators/catchError.js
function catchError(selector) {
  return operate(function(source, subscriber) {
    var innerSub = null;
    var syncUnsub = false;
    var handledResult;
    innerSub = source.subscribe(createOperatorSubscriber(subscriber, void 0, void 0, function(err) {
      handledResult = innerFrom(selector(err, catchError(selector)(source)));
      if (innerSub) {
        innerSub.unsubscribe();
        innerSub = null;
        handledResult.subscribe(subscriber);
      } else {
        syncUnsub = true;
      }
    }));
    if (syncUnsub) {
      innerSub.unsubscribe();
      innerSub = null;
      handledResult.subscribe(subscriber);
    }
  });
}

// node_modules/rxjs/dist/esm5/internal/operators/scanInternals.js
function scanInternals(accumulator, seed, hasSeed, emitOnNext, emitBeforeComplete) {
  return function(source, subscriber) {
    var hasState = hasSeed;
    var state = seed;
    var index = 0;
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      var i = index++;
      state = hasState ? accumulator(state, value, i) : (hasState = true, value);
      emitOnNext && subscriber.next(state);
    }, emitBeforeComplete && function() {
      hasState && subscriber.next(state);
      subscriber.complete();
    }));
  };
}

// node_modules/rxjs/dist/esm5/internal/operators/reduce.js
function reduce(accumulator, seed) {
  return operate(scanInternals(accumulator, seed, arguments.length >= 2, false, true));
}

// node_modules/rxjs/dist/esm5/internal/operators/toArray.js
var arrReducer = function(arr, value) {
  return arr.push(value), arr;
};
function toArray() {
  return operate(function(source, subscriber) {
    reduce(arrReducer, [])(source).subscribe(subscriber);
  });
}

// node_modules/rxjs/dist/esm5/internal/observable/fromSubscribable.js
function fromSubscribable(subscribable) {
  return new Observable(function(subscriber) {
    return subscribable.subscribe(subscriber);
  });
}

// node_modules/rxjs/dist/esm5/internal/operators/connect.js
var DEFAULT_CONFIG = {
  connector: function() {
    return new Subject();
  }
};
function connect(selector, config4) {
  if (config4 === void 0) {
    config4 = DEFAULT_CONFIG;
  }
  var connector = config4.connector;
  return operate(function(source, subscriber) {
    var subject = connector();
    innerFrom(selector(fromSubscribable(subject))).subscribe(subscriber);
    subscriber.add(source.subscribe(subject));
  });
}

// node_modules/rxjs/dist/esm5/internal/operators/defaultIfEmpty.js
function defaultIfEmpty(defaultValue) {
  return operate(function(source, subscriber) {
    var hasValue = false;
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      hasValue = true;
      subscriber.next(value);
    }, function() {
      if (!hasValue) {
        subscriber.next(defaultValue);
      }
      subscriber.complete();
    }));
  });
}

// node_modules/rxjs/dist/esm5/internal/operators/take.js
function take(count) {
  return count <= 0 ? function() {
    return EMPTY;
  } : operate(function(source, subscriber) {
    var seen = 0;
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      if (++seen <= count) {
        subscriber.next(value);
        if (count <= seen) {
          subscriber.complete();
        }
      }
    }));
  });
}

// node_modules/rxjs/dist/esm5/internal/operators/distinctUntilChanged.js
function distinctUntilChanged(comparator, keySelector) {
  if (keySelector === void 0) {
    keySelector = identity2;
  }
  comparator = comparator !== null && comparator !== void 0 ? comparator : defaultCompare;
  return operate(function(source, subscriber) {
    var previousKey;
    var first2 = true;
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      var currentKey = keySelector(value);
      if (first2 || !comparator(previousKey, currentKey)) {
        first2 = false;
        previousKey = currentKey;
        subscriber.next(value);
      }
    }));
  });
}
function defaultCompare(a, b) {
  return a === b;
}

// node_modules/rxjs/dist/esm5/internal/operators/throwIfEmpty.js
function throwIfEmpty(errorFactory) {
  if (errorFactory === void 0) {
    errorFactory = defaultErrorFactory;
  }
  return operate(function(source, subscriber) {
    var hasValue = false;
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      hasValue = true;
      subscriber.next(value);
    }, function() {
      return hasValue ? subscriber.complete() : subscriber.error(errorFactory());
    }));
  });
}
function defaultErrorFactory() {
  return new EmptyError();
}

// node_modules/rxjs/dist/esm5/internal/operators/first.js
function first(predicate, defaultValue) {
  var hasDefaultValue = arguments.length >= 2;
  return function(source) {
    return source.pipe(predicate ? filter(function(v, i) {
      return predicate(v, i, source);
    }) : identity2, take(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(function() {
      return new EmptyError();
    }));
  };
}

// node_modules/rxjs/dist/esm5/internal/operators/multicast.js
function multicast(subjectOrSubjectFactory, selector) {
  var subjectFactory = isFunction3(subjectOrSubjectFactory) ? subjectOrSubjectFactory : function() {
    return subjectOrSubjectFactory;
  };
  if (isFunction3(selector)) {
    return connect(selector, {
      connector: subjectFactory
    });
  }
  return function(source) {
    return new ConnectableObservable(source, subjectFactory);
  };
}

// node_modules/rxjs/dist/esm5/internal/operators/publishReplay.js
function publishReplay(bufferSize, windowTime, selectorOrScheduler, timestampProvider) {
  if (selectorOrScheduler && !isFunction3(selectorOrScheduler)) {
    timestampProvider = selectorOrScheduler;
  }
  var selector = isFunction3(selectorOrScheduler) ? selectorOrScheduler : void 0;
  return function(source) {
    return multicast(new ReplaySubject(bufferSize, windowTime, timestampProvider), selector)(source);
  };
}

// node_modules/rxjs/dist/esm5/internal/operators/startWith.js
function startWith() {
  var values = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    values[_i] = arguments[_i];
  }
  var scheduler = popScheduler(values);
  return operate(function(source, subscriber) {
    (scheduler ? concat(values, source, scheduler) : concat(values, source)).subscribe(subscriber);
  });
}

// node_modules/rxjs/dist/esm5/internal/operators/switchMap.js
function switchMap(project, resultSelector) {
  return operate(function(source, subscriber) {
    var innerSubscriber = null;
    var index = 0;
    var isComplete = false;
    var checkComplete = function() {
      return isComplete && !innerSubscriber && subscriber.complete();
    };
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      innerSubscriber === null || innerSubscriber === void 0 ? void 0 : innerSubscriber.unsubscribe();
      var innerIndex = 0;
      var outerIndex = index++;
      innerFrom(project(value, outerIndex)).subscribe(innerSubscriber = createOperatorSubscriber(subscriber, function(innerValue) {
        return subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue);
      }, function() {
        innerSubscriber = null;
        checkComplete();
      }));
    }, function() {
      isComplete = true;
      checkComplete();
    }));
  });
}

// node_modules/rxjs/dist/esm5/internal/operators/tap.js
function tap(observerOrNext, error, complete) {
  var tapObserver = isFunction3(observerOrNext) || error || complete ? { next: observerOrNext, error, complete } : observerOrNext;
  return tapObserver ? operate(function(source, subscriber) {
    var _a;
    (_a = tapObserver.subscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
    var isUnsub = true;
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      var _a2;
      (_a2 = tapObserver.next) === null || _a2 === void 0 ? void 0 : _a2.call(tapObserver, value);
      subscriber.next(value);
    }, function() {
      var _a2;
      isUnsub = false;
      (_a2 = tapObserver.complete) === null || _a2 === void 0 ? void 0 : _a2.call(tapObserver);
      subscriber.complete();
    }, function(err) {
      var _a2;
      isUnsub = false;
      (_a2 = tapObserver.error) === null || _a2 === void 0 ? void 0 : _a2.call(tapObserver, err);
      subscriber.error(err);
    }, function() {
      var _a2, _b;
      if (isUnsub) {
        (_a2 = tapObserver.unsubscribe) === null || _a2 === void 0 ? void 0 : _a2.call(tapObserver);
      }
      (_b = tapObserver.finalize) === null || _b === void 0 ? void 0 : _b.call(tapObserver);
    }));
  }) : identity2;
}

// node_modules/@polkadot/api/util/logging.js
var l2 = /* @__PURE__ */ logger("api/util");

// node_modules/@polkadot/api/util/filterEvents.js
function filterEvents(txHash, { block: { extrinsics, header } }, allEvents, status) {
  for (const [txIndex, x] of extrinsics.entries()) {
    if (x.hash.eq(txHash)) {
      return {
        blockNumber: isCompact(header.number) ? header.number.unwrap() : header.number,
        events: allEvents.filter(({ phase }) => phase.isApplyExtrinsic && phase.asApplyExtrinsic.eqn(txIndex)),
        txIndex
      };
    }
  }
  if (status.isInBlock) {
    const allHashes = extrinsics.map((x) => x.hash.toHex());
    l2.warn(`block ${header.hash.toHex()}: Unable to find extrinsic ${txHash.toHex()} inside ${allHashes.join(", ")}`);
  }
  return {};
}

// node_modules/@polkadot/api/util/isKeyringPair.js
function isKeyringPair(account3) {
  return isFunction(account3.sign);
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/x-textdecoder/fallback.js
var TextDecoder4 = class {
  __encoding;
  constructor(encoding) {
    this.__encoding = encoding;
  }
  decode(value) {
    let result = "";
    for (let i = 0, count = value.length; i < count; i++) {
      result += String.fromCharCode(value[i]);
    }
    return result;
  }
};

// node_modules/@polkadot/api-derive/node_modules/@polkadot/x-textdecoder/browser.js
var TextDecoder5 = /* @__PURE__ */ extractGlobal("TextDecoder", TextDecoder4);

// node_modules/@polkadot/api-derive/node_modules/@polkadot/x-textencoder/fallback.js
var TextEncoder8 = class {
  encode(value) {
    const count = value.length;
    const u8a = new Uint8Array(count);
    for (let i = 0; i < count; i++) {
      u8a[i] = value.charCodeAt(i);
    }
    return u8a;
  }
};

// node_modules/@polkadot/api-derive/node_modules/@polkadot/x-textencoder/browser.js
var TextEncoder9 = /* @__PURE__ */ extractGlobal("TextEncoder", TextEncoder8);

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/is/function.js
function isFunction4(value) {
  return typeof value === "function";
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/array/chunk.js
function arrayChunk2(array, chunkSize) {
  const outputSize = Math.ceil(array.length / chunkSize);
  if (outputSize === 1) {
    return [array];
  }
  const output = Array(outputSize);
  for (let i = 0; i < outputSize; i++) {
    const offset = i * chunkSize;
    output[i] = array.slice(offset, offset + chunkSize);
  }
  return output;
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/array/flatten.js
function arrayFlatten2(arrays) {
  const num = arrays.length;
  if (num === 0) {
    return [];
  } else if (num === 1) {
    return arrays[0];
  }
  let size = 0;
  for (let i2 = 0; i2 < num; i2++) {
    size += arrays[i2].length;
  }
  const output = new Array(size);
  let i = -1;
  for (let j = 0; j < num; j++) {
    const a = arrays[j];
    for (let e = 0, count = a.length; e < count; e++) {
      output[++i] = a[e];
    }
  }
  return output;
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/assert.js
function assert2(condition, message) {
  if (!condition) {
    throw new Error(isFunction4(message) ? message() : message);
  }
}
function assertReturn2(value, message) {
  assert2(value !== void 0 && value !== null, message);
  return value;
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/bi/helpers.js
function createCmp(cmp) {
  return (...items) => {
    const count = items.length;
    if (count === 0) {
      throw new Error("Must provide one or more arguments");
    }
    let result = items[0];
    for (let i = 1; i < count; i++) {
      if (cmp(items[i], result)) {
        result = items[i];
      }
    }
    return result;
  };
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/hex/toU8a.js
var CHR4 = "0123456789abcdef";
var U85 = new Uint8Array(256);
var U165 = new Uint8Array(256 * 256);
for (let i = 0, count = CHR4.length; i < count; i++) {
  U85[CHR4[i].charCodeAt(0) | 0] = i | 0;
  if (i > 9) {
    U85[CHR4[i].toUpperCase().charCodeAt(0) | 0] = i | 0;
  }
}
for (let i = 0; i < 256; i++) {
  const s = i << 8;
  for (let j = 0; j < 256; j++) {
    U165[s | j] = U85[i] << 4 | U85[j];
  }
}
function hexToU8a3(value, bitLength = -1) {
  if (!value) {
    return new Uint8Array();
  }
  let s = value.startsWith("0x") ? 2 : 0;
  const decLength = Math.ceil((value.length - s) / 2);
  const endLength = Math.ceil(bitLength === -1 ? decLength : bitLength / 8);
  const result = new Uint8Array(endLength);
  const offset = endLength > decLength ? endLength - decLength : 0;
  for (let i = offset; i < endLength; i++, s += 2) {
    result[i] = U165[value.charCodeAt(s) << 8 | value.charCodeAt(s + 1)];
  }
  return result;
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/bn/bn.js
var import_bn12 = __toESM(require_bn(), 1);

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/is/hex.js
var REGEX_HEX_PREFIXED3 = /^0x[\da-fA-F]+$/;
var REGEX_HEX_NOPREFIX = /^[\da-fA-F]+$/;
function isHex3(value, bitLength = -1, ignoreLength) {
  return typeof value === "string" && (value === "0x" || REGEX_HEX_PREFIXED3.test(value)) && (bitLength === -1 ? ignoreLength || value.length % 2 === 0 : value.length === 2 + Math.ceil(bitLength / 4));
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/is/object.js
function isObject3(value) {
  return !!value && typeof value === "object";
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/is/helpers.js
function isOn(...fns) {
  return (value) => (isObject3(value) || isFunction4(value)) && fns.every((f) => isFunction4(value[f]));
}
function isOnObject2(...fns) {
  return (value) => isObject3(value) && fns.every((f) => isFunction4(value[f]));
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/is/toBigInt.js
var isToBigInt = /* @__PURE__ */ isOn("toBigInt");

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/is/toBn.js
var isToBn = /* @__PURE__ */ isOn("toBn");

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/has.js
var hasBigInt3 = typeof BigInt2 === "function" && typeof BigInt2.asIntN === "function";
var hasBuffer3 = typeof xglobal.Buffer === "function" && typeof xglobal.Buffer.isBuffer === "function";
var hasProcess3 = typeof xglobal.process === "object";

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/is/buffer.js
function isBuffer3(value) {
  return hasBuffer3 && !!value && isFunction4(value.readDoubleLE) && xglobal.Buffer.isBuffer(value);
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/is/u8a.js
function isU8a3(value) {
  return (value && value.constructor) === Uint8Array || value instanceof Uint8Array;
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/string/toU8a.js
var encoder4 = new TextEncoder9();
function stringToU8a4(value) {
  return value ? encoder4.encode(value.toString()) : new Uint8Array();
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/u8a/toU8a.js
function u8aToU8a3(value, strict = false) {
  if (strict && (value === null || value === void 0)) {
    throw new Error("u8aToU8a: Expected non-null, non-undefined value");
  }
  return isU8a3(value) ? isBuffer3(value) ? new Uint8Array(value) : value : isHex3(value) ? hexToU8a3(value) : Array.isArray(value) ? new Uint8Array(value) : stringToU8a4(value);
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/u8a/concat.js
function u8aConcat2(...list) {
  const count = list.length;
  const u8as = new Array(count);
  let length = 0;
  for (let i = 0; i < count; i++) {
    u8as[i] = u8aToU8a3(list[i]);
    length += u8as[i].length;
  }
  return u8aConcatStrict2(u8as, length);
}
function u8aConcatStrict2(u8as, length = 0) {
  const count = u8as.length;
  let offset = 0;
  if (!length) {
    for (let i = 0; i < count; i++) {
      length += u8as[i].length;
    }
  }
  const result = new Uint8Array(length);
  for (let i = 0; i < count; i++) {
    result.set(u8as[i], offset);
    offset += u8as[i].length;
  }
  return result;
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/u8a/toHex.js
var U86 = new Array(256);
var U166 = new Array(256 * 256);
for (let n = 0; n < 256; n++) {
  U86[n] = n.toString(16).padStart(2, "0");
}
for (let i = 0; i < 256; i++) {
  const s = i << 8;
  for (let j = 0; j < 256; j++) {
    U166[s | j] = U86[i] + U86[j];
  }
}
function hex3(value, result) {
  const mod2 = value.length % 2 | 0;
  const length = value.length - mod2 | 0;
  for (let i = 0; i < length; i += 2) {
    result += U166[value[i] << 8 | value[i + 1]];
  }
  if (mod2) {
    result += U86[value[length] | 0];
  }
  return result;
}
function u8aToHex3(value, bitLength = -1, isPrefixed = true) {
  const empty2 = isPrefixed ? "0x" : "";
  if (!value?.length) {
    return empty2;
  } else if (bitLength > 0) {
    const length = Math.ceil(bitLength / 8);
    if (value.length > length) {
      return `${hex3(value.subarray(0, length / 2), empty2)}\u2026${hex3(value.subarray(value.length - length / 2), "")}`;
    }
  }
  return hex3(value, empty2);
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/u8a/toString.js
var decoder2 = new TextDecoder5("utf-8");
function u8aToString2(value) {
  return value ? decoder2.decode(value) : "";
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/hex/stripPrefix.js
function hexStripPrefix(value) {
  if (!value || value === "0x") {
    return "";
  } else if (REGEX_HEX_PREFIXED3.test(value)) {
    return value.substring(2);
  } else if (REGEX_HEX_NOPREFIX.test(value)) {
    return value;
  }
  throw new Error(`Expected hex value to convert, found '${value}'`);
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/hex/toBn.js
function hexToBn(value, { isLe = false, isNegative = false } = {}) {
  if (!value || value === "0x") {
    return new import_bn12.default(0);
  }
  const stripped = hexStripPrefix(value);
  const bn = new import_bn12.default(stripped, 16, isLe ? "le" : "be");
  return isNegative ? bn.fromTwos(stripped.length * 4) : bn;
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/bn/min.js
var bnMax = /* @__PURE__ */ createCmp((a, b) => a.gt(b));
var bnMin = /* @__PURE__ */ createCmp((a, b) => a.lt(b));

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/bn/consts.js
var BN_ZERO2 = /* @__PURE__ */ new import_bn12.default(0);
var BN_ONE = /* @__PURE__ */ new import_bn12.default(1);
var BN_BILLION2 = /* @__PURE__ */ new import_bn12.default(1e9);
var BN_QUINTILL2 = BN_BILLION2.mul(BN_BILLION2);
var BN_MAX_INTEGER2 = /* @__PURE__ */ new import_bn12.default(Number.MAX_SAFE_INTEGER);
var BN_SQRT_MAX_INTEGER = /* @__PURE__ */ new import_bn12.default(94906265);

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/is/bigInt.js
function isBigInt2(value) {
  return typeof value === "bigint";
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/bn/toBn.js
function bnToBn(value) {
  return value ? import_bn12.default.isBN(value) ? value : isHex3(value) ? hexToBn(value.toString()) : isBigInt2(value) ? new import_bn12.default(value.toString()) : isToBn(value) ? value.toBn() : isToBigInt(value) ? new import_bn12.default(value.toBigInt().toString()) : new import_bn12.default(value) : new import_bn12.default(0);
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/bn/sqrt.js
function bnSqrt(value) {
  const n = bnToBn(value);
  if (n.isNeg()) {
    throw new Error("square root of negative numbers is not supported");
  }
  if (n.lte(BN_MAX_INTEGER2)) {
    return new import_bn12.default(~~Math.sqrt(n.toNumber()));
  }
  let x0 = BN_SQRT_MAX_INTEGER.clone();
  while (true) {
    const x1 = n.div(x0).iadd(x0).ishrn(1);
    if (x0.eq(x1) || x0.eq(x1.sub(BN_ONE))) {
      return x0;
    }
    x0 = x1;
  }
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/is/string.js
function isString3(value) {
  return typeof value === "string" || value instanceof String;
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/is/compact.js
var isCompact2 = /* @__PURE__ */ isOnObject2("toBigInt", "toBn", "toNumber", "unwrap");

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/is/number.js
function isNumber3(value) {
  return typeof value === "number";
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/is/undefined.js
function isUndefined3(value) {
  return value === void 0;
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/lazy.js
function lazyMethod2(result, item, creator, getName, index = 0) {
  const name = getName ? getName(item, index) : item.toString();
  let value;
  Object.defineProperty(result, name, {
    // This allows for re-configuration with the embedded defineProperty below
    // and ensures that on tested browsers and Node, it _will_ be redefined
    // and thus short-circuited for future access
    configurable: true,
    enumerable: true,
    // Use a function here, we don't want to capture the outer this, i.e.
    // don't use arrow functions in this context since we have a this inside
    get: function() {
      if (value === void 0) {
        value = creator(item, index, this);
        try {
          Object.defineProperty(this, name, { value });
        } catch {
        }
      }
      return value;
    }
  });
}
function lazyMethods2(result, items, creator, getName) {
  for (let i = 0, count = items.length; i < count; i++) {
    lazyMethod2(result, items[i], creator, getName, i);
  }
  return result;
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/nextTick.js
function nextTick2(onExec, onError) {
  setTimeout(() => {
    Promise.resolve().then(() => {
      onExec();
    }).catch((error) => {
      if (onError) {
        onError(error);
      } else {
        console.error(error);
      }
    });
  }, 0);
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/object/spread.js
function objectSpread3(dest, ...sources) {
  const filterProps = /* @__PURE__ */ new Set(["__proto__", "constructor", "prototype"]);
  for (let i = 0, count = sources.length; i < count; i++) {
    const src = sources[i];
    if (src) {
      if (typeof src.entries === "function") {
        for (const [key, value] of src.entries()) {
          if (!filterProps.has(key)) {
            dest[key] = value;
          }
        }
      } else {
        const sanitizedSrc = /* @__PURE__ */ Object.create(null);
        for (const [key, value] of Object.entries(src)) {
          if (!filterProps.has(key)) {
            sanitizedSrc[key] = value;
          }
        }
        Object.assign(dest, sanitizedSrc);
      }
    }
  }
  return dest;
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util/string/toHex.js
function stringToHex(value) {
  return u8aToHex3(stringToU8a4(value));
}

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/x-textencoder/fallback.js
var TextEncoder10 = class {
  encode(value) {
    const count = value.length;
    const u8a = new Uint8Array(count);
    for (let i = 0; i < count; i++) {
      u8a[i] = value.charCodeAt(i);
    }
    return u8a;
  }
};

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/x-textencoder/browser.js
var TextEncoder11 = /* @__PURE__ */ extractGlobal("TextEncoder", TextEncoder10);

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/is/function.js
function isFunction5(value) {
  return typeof value === "function";
}

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/hex/toU8a.js
var CHR5 = "0123456789abcdef";
var U87 = new Uint8Array(256);
var U167 = new Uint8Array(256 * 256);
for (let i = 0, count = CHR5.length; i < count; i++) {
  U87[CHR5[i].charCodeAt(0) | 0] = i | 0;
  if (i > 9) {
    U87[CHR5[i].toUpperCase().charCodeAt(0) | 0] = i | 0;
  }
}
for (let i = 0; i < 256; i++) {
  const s = i << 8;
  for (let j = 0; j < 256; j++) {
    U167[s | j] = U87[i] << 4 | U87[j];
  }
}
function hexToU8a4(value, bitLength = -1) {
  if (!value) {
    return new Uint8Array();
  }
  let s = value.startsWith("0x") ? 2 : 0;
  const decLength = Math.ceil((value.length - s) / 2);
  const endLength = Math.ceil(bitLength === -1 ? decLength : bitLength / 8);
  const result = new Uint8Array(endLength);
  const offset = endLength > decLength ? endLength - decLength : 0;
  for (let i = offset; i < endLength; i++, s += 2) {
    result[i] = U167[value.charCodeAt(s) << 8 | value.charCodeAt(s + 1)];
  }
  return result;
}

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/bn/bn.js
var import_bn18 = __toESM(require_bn(), 1);

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/is/bn.js
function isBn3(value) {
  return import_bn18.default.isBN(value);
}

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/is/hex.js
var REGEX_HEX_PREFIXED4 = /^0x[\da-fA-F]+$/;
function isHex4(value, bitLength = -1, ignoreLength) {
  return typeof value === "string" && (value === "0x" || REGEX_HEX_PREFIXED4.test(value)) && (bitLength === -1 ? ignoreLength || value.length % 2 === 0 : value.length === 2 + Math.ceil(bitLength / 4));
}

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/is/object.js
function isObject4(value) {
  return !!value && typeof value === "object";
}

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/has.js
var hasBigInt4 = typeof BigInt2 === "function" && typeof BigInt2.asIntN === "function";
var hasBuffer4 = typeof xglobal.Buffer === "function" && typeof xglobal.Buffer.isBuffer === "function";
var hasProcess4 = typeof xglobal.process === "object";

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/is/buffer.js
function isBuffer4(value) {
  return hasBuffer4 && !!value && isFunction5(value.readDoubleLE) && xglobal.Buffer.isBuffer(value);
}

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/is/u8a.js
function isU8a4(value) {
  return (value && value.constructor) === Uint8Array || value instanceof Uint8Array;
}

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/string/toU8a.js
var encoder5 = new TextEncoder11();
function stringToU8a5(value) {
  return value ? encoder5.encode(value.toString()) : new Uint8Array();
}

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/u8a/toU8a.js
function u8aToU8a4(value, strict = false) {
  if (strict && (value === null || value === void 0)) {
    throw new Error("u8aToU8a: Expected non-null, non-undefined value");
  }
  return isU8a4(value) ? isBuffer4(value) ? new Uint8Array(value) : value : isHex4(value) ? hexToU8a4(value) : Array.isArray(value) ? new Uint8Array(value) : stringToU8a5(value);
}

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/u8a/concat.js
function u8aConcat3(...list) {
  const count = list.length;
  const u8as = new Array(count);
  let length = 0;
  for (let i = 0; i < count; i++) {
    u8as[i] = u8aToU8a4(list[i]);
    length += u8as[i].length;
  }
  return u8aConcatStrict3(u8as, length);
}
function u8aConcatStrict3(u8as, length = 0) {
  const count = u8as.length;
  let offset = 0;
  if (!length) {
    for (let i = 0; i < count; i++) {
      length += u8as[i].length;
    }
  }
  const result = new Uint8Array(length);
  for (let i = 0; i < count; i++) {
    result.set(u8as[i], offset);
    offset += u8as[i].length;
  }
  return result;
}

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/u8a/toHex.js
var U88 = new Array(256);
var U168 = new Array(256 * 256);
for (let n = 0; n < 256; n++) {
  U88[n] = n.toString(16).padStart(2, "0");
}
for (let i = 0; i < 256; i++) {
  const s = i << 8;
  for (let j = 0; j < 256; j++) {
    U168[s | j] = U88[i] + U88[j];
  }
}
function hex4(value, result) {
  const mod2 = value.length % 2 | 0;
  const length = value.length - mod2 | 0;
  for (let i = 0; i < length; i += 2) {
    result += U168[value[i] << 8 | value[i + 1]];
  }
  if (mod2) {
    result += U88[value[length] | 0];
  }
  return result;
}
function u8aToHex4(value, bitLength = -1, isPrefixed = true) {
  const empty2 = isPrefixed ? "0x" : "";
  if (!value?.length) {
    return empty2;
  } else if (bitLength > 0) {
    const length = Math.ceil(bitLength / 8);
    if (value.length > length) {
      return `${hex4(value.subarray(0, length / 2), empty2)}\u2026${hex4(value.subarray(value.length - length / 2), "")}`;
    }
  }
  return hex4(value, empty2);
}

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/is/bigInt.js
function isBigInt3(value) {
  return typeof value === "bigint";
}

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/format/formatDate.js
function zeroPad3(value) {
  return value.toString().padStart(2, "0");
}
function formatDate3(date) {
  const year = date.getFullYear().toString();
  const month = zeroPad3(date.getMonth() + 1);
  const day = zeroPad3(date.getDate());
  const hour = zeroPad3(date.getHours());
  const minute = zeroPad3(date.getMinutes());
  const second = zeroPad3(date.getSeconds());
  return `${year}-${month}-${day} ${hour}:${minute}:${second}`;
}

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/stringify.js
function replacer2(_, v) {
  return isBigInt3(v) ? v.toString() : v;
}
function stringify2(value, space) {
  return JSON.stringify(value, replacer2, space);
}

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/is/null.js
function isNull3(value) {
  return value === null;
}

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/is/undefined.js
function isUndefined4(value) {
  return value === void 0;
}

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/lazy.js
function lazyMethod3(result, item, creator, getName, index = 0) {
  const name = getName ? getName(item, index) : item.toString();
  let value;
  Object.defineProperty(result, name, {
    // This allows for re-configuration with the embedded defineProperty below
    // and ensures that on tested browsers and Node, it _will_ be redefined
    // and thus short-circuited for future access
    configurable: true,
    enumerable: true,
    // Use a function here, we don't want to capture the outer this, i.e.
    // don't use arrow functions in this context since we have a this inside
    get: function() {
      if (value === void 0) {
        value = creator(item, index, this);
        try {
          Object.defineProperty(this, name, { value });
        } catch {
        }
      }
      return value;
    }
  });
}

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/noop.js
function noop4() {
}

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/logger.js
var logTo3 = {
  debug: "log",
  error: "error",
  log: "log",
  warn: "warn"
};
function formatOther3(value) {
  if (value && isObject4(value) && value.constructor === Object) {
    const result = {};
    for (const [k, v] of Object.entries(value)) {
      result[k] = loggerFormat3(v);
    }
    return result;
  }
  return value;
}
function loggerFormat3(value) {
  if (Array.isArray(value)) {
    return value.map(loggerFormat3);
  } else if (isBn3(value)) {
    return value.toString();
  } else if (isU8a4(value) || isBuffer4(value)) {
    return u8aToHex4(u8aToU8a4(value));
  }
  return formatOther3(value);
}
function formatWithLength3(maxLength) {
  return (v) => {
    if (maxLength <= 0) {
      return v;
    }
    const r = `${v}`;
    return r.length < maxLength ? v : `${r.substring(0, maxLength)} ...`;
  };
}
function apply3(log, type, values, maxSize = -1) {
  if (values.length === 1 && isFunction5(values[0])) {
    const fnResult = values[0]();
    return apply3(log, type, Array.isArray(fnResult) ? fnResult : [fnResult], maxSize);
  }
  console[logTo3[log]](formatDate3(/* @__PURE__ */ new Date()), type, ...values.map(loggerFormat3).map(formatWithLength3(maxSize)));
}
function isDebugOn3(e, type) {
  return !!e && (e === "*" || type === e || e.endsWith("*") && type.startsWith(e.slice(0, -1)));
}
function isDebugOff3(e, type) {
  return !!e && (e.startsWith("-") && (type === e.slice(1) || e.endsWith("*") && type.startsWith(e.slice(1, -1))));
}
function getDebugFlag3(env, type) {
  let flag = false;
  for (const e of env) {
    if (isDebugOn3(e, type)) {
      flag = true;
    } else if (isDebugOff3(e, type)) {
      flag = false;
    }
  }
  return flag;
}
function parseEnv3(type) {
  const maxSize = parseInt(xglobal.process?.env?.["DEBUG_MAX"] || "-1", 10);
  return [
    getDebugFlag3((xglobal.process?.env?.["DEBUG"] || "").toLowerCase().split(","), type),
    isNaN(maxSize) ? -1 : maxSize
  ];
}
function logger3(origin) {
  const type = `${origin.toUpperCase()}:`.padStart(16);
  const [isDebug, maxSize] = parseEnv3(origin.toLowerCase());
  return {
    debug: isDebug ? (...values) => apply3("debug", type, values, maxSize) : noop4,
    error: (...values) => apply3("error", type, values),
    log: (...values) => apply3("log", type, values),
    noop: noop4,
    warn: (...values) => apply3("warn", type, values)
  };
}

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/memoize.js
function defaultGetId() {
  return "none";
}
function memoize(fn, { getInstanceId = defaultGetId } = {}) {
  const cache = {};
  const memoized2 = (...args) => {
    const stringParams = stringify2(args);
    const instanceId = getInstanceId();
    if (!cache[instanceId]) {
      cache[instanceId] = {};
    }
    if (cache[instanceId][stringParams] === void 0) {
      cache[instanceId][stringParams] = fn(...args);
    }
    return cache[instanceId][stringParams];
  };
  memoized2.unmemoize = (...args) => {
    const stringParams = stringify2(args);
    const instanceId = getInstanceId();
    if (cache[instanceId]?.[stringParams] !== void 0) {
      delete cache[instanceId][stringParams];
    }
  };
  return memoized2;
}

// node_modules/@polkadot/rpc-core/node_modules/@polkadot/util/object/spread.js
function objectSpread4(dest, ...sources) {
  const filterProps = /* @__PURE__ */ new Set(["__proto__", "constructor", "prototype"]);
  for (let i = 0, count = sources.length; i < count; i++) {
    const src = sources[i];
    if (src) {
      if (typeof src.entries === "function") {
        for (const [key, value] of src.entries()) {
          if (!filterProps.has(key)) {
            dest[key] = value;
          }
        }
      } else {
        const sanitizedSrc = /* @__PURE__ */ Object.create(null);
        for (const [key, value] of Object.entries(src)) {
          if (!filterProps.has(key)) {
            sanitizedSrc[key] = value;
          }
        }
        Object.assign(dest, sanitizedSrc);
      }
    }
  }
  return dest;
}

// node_modules/@polkadot/types/node_modules/@polkadot/x-textdecoder/fallback.js
var TextDecoder6 = class {
  __encoding;
  constructor(encoding) {
    this.__encoding = encoding;
  }
  decode(value) {
    let result = "";
    for (let i = 0, count = value.length; i < count; i++) {
      result += String.fromCharCode(value[i]);
    }
    return result;
  }
};

// node_modules/@polkadot/types/node_modules/@polkadot/x-textdecoder/browser.js
var TextDecoder7 = /* @__PURE__ */ extractGlobal("TextDecoder", TextDecoder6);

// node_modules/@polkadot/types/node_modules/@polkadot/x-textencoder/fallback.js
var TextEncoder12 = class {
  encode(value) {
    const count = value.length;
    const u8a = new Uint8Array(count);
    for (let i = 0; i < count; i++) {
      u8a[i] = value.charCodeAt(i);
    }
    return u8a;
  }
};

// node_modules/@polkadot/types/node_modules/@polkadot/x-textencoder/browser.js
var TextEncoder13 = /* @__PURE__ */ extractGlobal("TextEncoder", TextEncoder12);

// node_modules/@polkadot/types/node_modules/@polkadot/util/is/function.js
function isFunction6(value) {
  return typeof value === "function";
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/assert.js
function assert3(condition, message) {
  if (!condition) {
    throw new Error(isFunction6(message) ? message() : message);
  }
}
function assertReturn3(value, message) {
  assert3(value !== void 0 && value !== null, message);
  return value;
}
function assertUnreachable(x) {
  throw new Error(`This codepath should be unreachable. Unhandled input: ${x}`);
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/bi/consts.js
var _0n6 = /* @__PURE__ */ BigInt2(0);
var _1n6 = /* @__PURE__ */ BigInt2(1);
var _1Bn = /* @__PURE__ */ BigInt2(1e9);
var _1Qn = _1Bn * _1Bn;
var _2pow53n = /* @__PURE__ */ BigInt2(Number.MAX_SAFE_INTEGER);

// node_modules/@polkadot/types/node_modules/@polkadot/util/hex/toU8a.js
var CHR6 = "0123456789abcdef";
var U89 = new Uint8Array(256);
var U169 = new Uint8Array(256 * 256);
for (let i = 0, count = CHR6.length; i < count; i++) {
  U89[CHR6[i].charCodeAt(0) | 0] = i | 0;
  if (i > 9) {
    U89[CHR6[i].toUpperCase().charCodeAt(0) | 0] = i | 0;
  }
}
for (let i = 0; i < 256; i++) {
  const s = i << 8;
  for (let j = 0; j < 256; j++) {
    U169[s | j] = U89[i] << 4 | U89[j];
  }
}
function hexToU8a5(value, bitLength = -1) {
  if (!value) {
    return new Uint8Array();
  }
  let s = value.startsWith("0x") ? 2 : 0;
  const decLength = Math.ceil((value.length - s) / 2);
  const endLength = Math.ceil(bitLength === -1 ? decLength : bitLength / 8);
  const result = new Uint8Array(endLength);
  const offset = endLength > decLength ? endLength - decLength : 0;
  for (let i = offset; i < endLength; i++, s += 2) {
    result[i] = U169[value.charCodeAt(s) << 8 | value.charCodeAt(s + 1)];
  }
  return result;
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/bn/bn.js
var import_bn21 = __toESM(require_bn(), 1);

// node_modules/@polkadot/types/node_modules/@polkadot/util/is/bn.js
function isBn4(value) {
  return import_bn21.default.isBN(value);
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/is/hex.js
var REGEX_HEX_PREFIXED5 = /^0x[\da-fA-F]+$/;
var REGEX_HEX_NOPREFIX2 = /^[\da-fA-F]+$/;
function isHex5(value, bitLength = -1, ignoreLength) {
  return typeof value === "string" && (value === "0x" || REGEX_HEX_PREFIXED5.test(value)) && (bitLength === -1 ? ignoreLength || value.length % 2 === 0 : value.length === 2 + Math.ceil(bitLength / 4));
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/is/object.js
function isObject5(value) {
  return !!value && typeof value === "object";
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/is/helpers.js
function isOn2(...fns) {
  return (value) => (isObject5(value) || isFunction6(value)) && fns.every((f) => isFunction6(value[f]));
}
function isOnObject3(...fns) {
  return (value) => isObject5(value) && fns.every((f) => isFunction6(value[f]));
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/is/toBigInt.js
var isToBigInt2 = /* @__PURE__ */ isOn2("toBigInt");

// node_modules/@polkadot/types/node_modules/@polkadot/util/is/toBn.js
var isToBn2 = /* @__PURE__ */ isOn2("toBn");

// node_modules/@polkadot/types/node_modules/@polkadot/util/has.js
var hasBigInt5 = typeof BigInt2 === "function" && typeof BigInt2.asIntN === "function";
var hasBuffer5 = typeof xglobal.Buffer === "function" && typeof xglobal.Buffer.isBuffer === "function";
var hasProcess5 = typeof xglobal.process === "object";

// node_modules/@polkadot/types/node_modules/@polkadot/util/is/buffer.js
function isBuffer5(value) {
  return hasBuffer5 && !!value && isFunction6(value.readDoubleLE) && xglobal.Buffer.isBuffer(value);
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/is/u8a.js
function isU8a5(value) {
  return (value && value.constructor) === Uint8Array || value instanceof Uint8Array;
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/string/toU8a.js
var encoder6 = new TextEncoder13();
function stringToU8a6(value) {
  return value ? encoder6.encode(value.toString()) : new Uint8Array();
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/u8a/toU8a.js
function u8aToU8a5(value, strict = false) {
  if (strict && (value === null || value === void 0)) {
    throw new Error("u8aToU8a: Expected non-null, non-undefined value");
  }
  return isU8a5(value) ? isBuffer5(value) ? new Uint8Array(value) : value : isHex5(value) ? hexToU8a5(value) : Array.isArray(value) ? new Uint8Array(value) : stringToU8a6(value);
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/u8a/concat.js
function u8aConcat4(...list) {
  const count = list.length;
  const u8as = new Array(count);
  let length = 0;
  for (let i = 0; i < count; i++) {
    u8as[i] = u8aToU8a5(list[i]);
    length += u8as[i].length;
  }
  return u8aConcatStrict4(u8as, length);
}
function u8aConcatStrict4(u8as, length = 0) {
  const count = u8as.length;
  let offset = 0;
  if (!length) {
    for (let i = 0; i < count; i++) {
      length += u8as[i].length;
    }
  }
  const result = new Uint8Array(length);
  for (let i = 0; i < count; i++) {
    result.set(u8as[i], offset);
    offset += u8as[i].length;
  }
  return result;
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/u8a/toBn.js
function u8aToBn2(value, { isLe = true, isNegative = false } = {}) {
  if (!isLe) {
    value = value.slice().reverse();
  }
  const count = value.length;
  if (isNegative && count && value[count - 1] & 128) {
    switch (count) {
      case 0:
        return new import_bn21.default(0);
      case 1:
        return new import_bn21.default((value[0] ^ 255) * -1 - 1);
      case 2:
        return new import_bn21.default((value[0] + (value[1] << 8) ^ 65535) * -1 - 1);
      case 3:
        return new import_bn21.default((value[0] + (value[1] << 8) + (value[2] << 16) ^ 16777215) * -1 - 1);
      case 4:
        return new import_bn21.default((value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) * -1 - 1);
      case 5:
        return new import_bn21.default(((value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) + (value[4] ^ 255) * 4294967296) * -1 - 1);
      case 6:
        return new import_bn21.default(((value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) + (value[4] + (value[5] << 8) ^ 65535) * 4294967296) * -1 - 1);
      default:
        return new import_bn21.default(value, "le").fromTwos(count * 8);
    }
  }
  switch (count) {
    case 0:
      return new import_bn21.default(0);
    case 1:
      return new import_bn21.default(value[0]);
    case 2:
      return new import_bn21.default(value[0] + (value[1] << 8));
    case 3:
      return new import_bn21.default(value[0] + (value[1] << 8) + (value[2] << 16));
    case 4:
      return new import_bn21.default(value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216);
    case 5:
      return new import_bn21.default(value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] + (value[4] << 8)) * 16777216);
    case 6:
      return new import_bn21.default(value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] + (value[4] << 8) + (value[5] << 16)) * 16777216);
    default:
      return new import_bn21.default(value, "le");
  }
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/u8a/toHex.js
var U810 = new Array(256);
var U1610 = new Array(256 * 256);
for (let n = 0; n < 256; n++) {
  U810[n] = n.toString(16).padStart(2, "0");
}
for (let i = 0; i < 256; i++) {
  const s = i << 8;
  for (let j = 0; j < 256; j++) {
    U1610[s | j] = U810[i] + U810[j];
  }
}
function hex5(value, result) {
  const mod2 = value.length % 2 | 0;
  const length = value.length - mod2 | 0;
  for (let i = 0; i < length; i += 2) {
    result += U1610[value[i] << 8 | value[i + 1]];
  }
  if (mod2) {
    result += U810[value[length] | 0];
  }
  return result;
}
function u8aToHex5(value, bitLength = -1, isPrefixed = true) {
  const empty2 = isPrefixed ? "0x" : "";
  if (!value?.length) {
    return empty2;
  } else if (bitLength > 0) {
    const length = Math.ceil(bitLength / 8);
    if (value.length > length) {
      return `${hex5(value.subarray(0, length / 2), empty2)}\u2026${hex5(value.subarray(value.length - length / 2), "")}`;
    }
  }
  return hex5(value, empty2);
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/u8a/toString.js
var decoder3 = new TextDecoder7("utf-8");
function u8aToString3(value) {
  return value ? decoder3.decode(value) : "";
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/hex/stripPrefix.js
function hexStripPrefix2(value) {
  if (!value || value === "0x") {
    return "";
  } else if (REGEX_HEX_PREFIXED5.test(value)) {
    return value.substring(2);
  } else if (REGEX_HEX_NOPREFIX2.test(value)) {
    return value;
  }
  throw new Error(`Expected hex value to convert, found '${value}'`);
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/hex/toBn.js
function hexToBn2(value, { isLe = false, isNegative = false } = {}) {
  if (!value || value === "0x") {
    return new import_bn21.default(0);
  }
  const stripped = hexStripPrefix2(value);
  const bn = new import_bn21.default(stripped, 16, isLe ? "le" : "be");
  return isNegative ? bn.fromTwos(stripped.length * 4) : bn;
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/bn/consts.js
var BN_ZERO3 = /* @__PURE__ */ new import_bn21.default(0);
var BN_ONE2 = /* @__PURE__ */ new import_bn21.default(1);
var BN_TWO = /* @__PURE__ */ new import_bn21.default(2);
var BN_BILLION3 = /* @__PURE__ */ new import_bn21.default(1e9);
var BN_QUINTILL3 = BN_BILLION3.mul(BN_BILLION3);
var BN_MAX_INTEGER3 = /* @__PURE__ */ new import_bn21.default(Number.MAX_SAFE_INTEGER);

// node_modules/@polkadot/types/node_modules/@polkadot/util/is/bigInt.js
function isBigInt4(value) {
  return typeof value === "bigint";
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/bn/toBn.js
function bnToBn2(value) {
  return value ? import_bn21.default.isBN(value) ? value : isHex5(value) ? hexToBn2(value.toString()) : isBigInt4(value) ? new import_bn21.default(value.toString()) : isToBn2(value) ? value.toBn() : isToBigInt2(value) ? new import_bn21.default(value.toBigInt().toString()) : new import_bn21.default(value) : new import_bn21.default(0);
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/bn/toU8a.js
var DEFAULT_OPTS = { bitLength: -1, isLe: true, isNegative: false };
function bnToU8a(value, { bitLength = -1, isLe = true, isNegative = false } = DEFAULT_OPTS) {
  const valueBn = bnToBn2(value);
  const byteLength = bitLength === -1 ? Math.ceil(valueBn.bitLength() / 8) : Math.ceil((bitLength || 0) / 8);
  if (!value) {
    return bitLength === -1 ? new Uint8Array(1) : new Uint8Array(byteLength);
  }
  const output = new Uint8Array(byteLength);
  const bn = isNegative ? valueBn.toTwos(byteLength * 8) : valueBn;
  output.set(bn.toArray(isLe ? "le" : "be", byteLength), 0);
  return output;
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/compact/toU8a.js
var MAX_U8 = BN_TWO.pow(new import_bn21.default(8 - 2)).isub(BN_ONE2);
var MAX_U16 = BN_TWO.pow(new import_bn21.default(16 - 2)).isub(BN_ONE2);
var MAX_U32 = BN_TWO.pow(new import_bn21.default(32 - 2)).isub(BN_ONE2);
var BL_16 = { bitLength: 16 };
var BL_32 = { bitLength: 32 };
function compactToU8a(value) {
  const bn = bnToBn2(value);
  if (bn.lte(MAX_U8)) {
    return new Uint8Array([bn.toNumber() << 2]);
  } else if (bn.lte(MAX_U16)) {
    return bnToU8a(bn.shln(2).iadd(BN_ONE2), BL_16);
  } else if (bn.lte(MAX_U32)) {
    return bnToU8a(bn.shln(2).iadd(BN_TWO), BL_32);
  }
  const u8a = bnToU8a(bn);
  let length = u8a.length;
  while (u8a[length - 1] === 0) {
    length--;
  }
  if (length < 4) {
    throw new Error("Invalid length, previous checks match anything less than 2^30");
  }
  return u8aConcatStrict4([
    // subtract 4 as minimum (also catered for in decoding)
    new Uint8Array([(length - 4 << 2) + 3]),
    u8a.subarray(0, length)
  ]);
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/compact/addLength.js
function compactAddLength(input) {
  return u8aConcatStrict4([
    compactToU8a(input.length),
    input
  ]);
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/compact/fromU8a.js
function compactFromU8a2(input) {
  const u8a = u8aToU8a5(input);
  switch (u8a[0] & 3) {
    case 0:
      return [1, new import_bn21.default(u8a[0] >>> 2)];
    case 1:
      return [2, new import_bn21.default(u8a[0] + (u8a[1] << 8) >>> 2)];
    case 2:
      return [4, new import_bn21.default(u8a[0] + (u8a[1] << 8) + (u8a[2] << 16) + u8a[3] * 16777216 >>> 2)];
    default: {
      const offset = (u8a[0] >>> 2) + 5;
      switch (offset) {
        case 5:
          return [5, new import_bn21.default(u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + u8a[4] * 16777216)];
        case 6:
          return [6, new import_bn21.default(u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + (u8a[4] + (u8a[5] << 8)) * 16777216)];
        case 7:
          return [7, new import_bn21.default(u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + (u8a[4] + (u8a[5] << 8) + (u8a[6] << 16)) * 16777216)];
        default:
          return [offset, u8aToBn2(u8a.subarray(1, offset))];
      }
    }
  }
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/compact/stripLength.js
function compactStripLength2(input) {
  const [offset, length] = compactFromU8a2(input);
  const total = offset + length.toNumber();
  return [
    total,
    input.subarray(offset, total)
  ];
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/is/boolean.js
function isBoolean(value) {
  return typeof value === "boolean";
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/format/formatDecimal.js
var NUMBER_REGEX = new RegExp("(\\d+?)(?=(\\d{3})+(?!\\d)|$)", "g");
function formatDecimal(value, separator = ",") {
  const isNegative = value[0].startsWith("-");
  const matched = isNegative ? value.substring(1).match(NUMBER_REGEX) : value.match(NUMBER_REGEX);
  return matched ? `${isNegative ? "-" : ""}${matched.join(separator)}` : value;
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/format/getSeparator.js
function getSeparator(locale) {
  return {
    decimal: 0.1.toLocaleString(locale, { useGrouping: false }).charAt(1),
    thousand: 1e3.toLocaleString(locale, { useGrouping: true }).replace(/\d/g, "").charAt(0)
  };
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/format/si.js
var SI_MID = 8;
var SI = [
  { power: -24, text: "yocto", value: "y" },
  { power: -21, text: "zepto", value: "z" },
  { power: -18, text: "atto", value: "a" },
  { power: -15, text: "femto", value: "f" },
  { power: -12, text: "pico", value: "p" },
  { power: -9, text: "nano", value: "n" },
  { power: -6, text: "micro", value: "\xB5" },
  { power: -3, text: "milli", value: "m" },
  { power: 0, text: "Unit", value: "-" },
  // position 8
  { power: 3, text: "Kilo", value: "k" },
  { power: 6, text: "Mill", value: "M" },
  // Mega, M
  { power: 9, text: "Bill", value: "B" },
  // Giga, G
  { power: 12, text: "Tril", value: "T" },
  // Tera, T
  { power: 15, text: "Peta", value: "P" },
  { power: 18, text: "Exa", value: "E" },
  { power: 21, text: "Zeta", value: "Z" },
  { power: 24, text: "Yotta", value: "Y" }
];
function findSi(type) {
  for (let i = 0, count = SI.length; i < count; i++) {
    if (SI[i].value === type) {
      return SI[i];
    }
  }
  return SI[SI_MID];
}
function calcSi(text2, decimals, forceUnit) {
  if (forceUnit) {
    return findSi(forceUnit);
  }
  const siDefIndex = SI_MID - 1 + Math.ceil((text2.length - decimals) / 3);
  return SI[siDefIndex] || SI[siDefIndex < 0 ? 0 : SI.length - 1];
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/format/formatBalance.js
var DEFAULT_DECIMALS = 0;
var DEFAULT_UNIT = SI[SI_MID].text;
var defaultDecimals = DEFAULT_DECIMALS;
var defaultUnit = DEFAULT_UNIT;
function _formatBalance(input, { decimals = defaultDecimals, forceUnit, locale = "en", withAll = false, withSi = true, withSiFull = false, withUnit = true, withZero = true } = {}) {
  let text2 = bnToBn2(input).toString();
  if (text2.length === 0 || text2 === "0") {
    return "0";
  }
  let sign2 = "";
  if (text2[0].startsWith("-")) {
    sign2 = "-";
    text2 = text2.substring(1);
  }
  const si = calcSi(text2, decimals, forceUnit);
  const mid = text2.length - (decimals + si.power);
  const pre = mid <= 0 ? "0" : text2.substring(0, mid);
  let post = text2.padStart(mid < 0 ? decimals : 1, "0").substring(mid < 0 ? 0 : mid).padEnd(withAll ? Math.max(decimals, 4) : 4, "0").substring(0, withAll ? Math.max(4, decimals + si.power) : 4);
  if (!withZero) {
    let end = post.length - 1;
    do {
      if (post[end] === "0") {
        end--;
      }
    } while (post[end] === "0");
    post = post.substring(0, end + 1);
  }
  const unit = isBoolean(withUnit) ? SI[SI_MID].text : withUnit;
  const units = withSi || withSiFull ? si.value === "-" ? withUnit ? ` ${unit}` : "" : ` ${withSiFull ? `${si.text}${withUnit ? " " : ""}` : si.value}${withUnit ? unit : ""}` : "";
  const { decimal, thousand } = getSeparator(locale);
  return `${sign2}${formatDecimal(pre, thousand)}${post && `${decimal}${post}`}${units}`;
}
var formatBalance = _formatBalance;
formatBalance.calcSi = (text2, decimals = defaultDecimals) => calcSi(text2, decimals);
formatBalance.findSi = findSi;
formatBalance.getDefaults = () => {
  return {
    decimals: defaultDecimals,
    unit: defaultUnit
  };
};
formatBalance.getOptions = (decimals = defaultDecimals) => {
  return SI.filter(({ power }) => power < 0 ? decimals + power >= 0 : true);
};
formatBalance.setDefaults = ({ decimals, unit }) => {
  defaultDecimals = (Array.isArray(decimals) ? decimals[0] : decimals) ?? defaultDecimals;
  defaultUnit = (Array.isArray(unit) ? unit[0] : unit) ?? defaultUnit;
  SI[SI_MID].text = defaultUnit;
};

// node_modules/@polkadot/types/node_modules/@polkadot/util/format/formatDate.js
function zeroPad4(value) {
  return value.toString().padStart(2, "0");
}
function formatDate4(date) {
  const year = date.getFullYear().toString();
  const month = zeroPad4(date.getMonth() + 1);
  const day = zeroPad4(date.getDate());
  const hour = zeroPad4(date.getHours());
  const minute = zeroPad4(date.getMinutes());
  const second = zeroPad4(date.getSeconds());
  return `${year}-${month}-${day} ${hour}:${minute}:${second}`;
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/format/formatNumber.js
function formatNumber(value, { locale = "en" } = {}) {
  const { thousand } = getSeparator(locale);
  return formatDecimal(bnToBn2(value).toString(), thousand);
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/is/string.js
function isString4(value) {
  return typeof value === "string" || value instanceof String;
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/is/codec.js
var checkCodec = /* @__PURE__ */ isOnObject3("toHex", "toHuman", "toU8a");
var checkRegistry = /* @__PURE__ */ isOnObject3("get");
function isCodec(value) {
  return checkCodec(value) && checkRegistry(value.registry);
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/stringify.js
function replacer3(_, v) {
  return isBigInt4(v) ? v.toString() : v;
}
function stringify3(value, space) {
  return JSON.stringify(value, replacer3, space);
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/is/null.js
function isNull4(value) {
  return value === null;
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/is/number.js
function isNumber4(value) {
  return typeof value === "number";
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/is/undefined.js
function isUndefined5(value) {
  return value === void 0;
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/lazy.js
function lazyMethod4(result, item, creator, getName, index = 0) {
  const name = getName ? getName(item, index) : item.toString();
  let value;
  Object.defineProperty(result, name, {
    // This allows for re-configuration with the embedded defineProperty below
    // and ensures that on tested browsers and Node, it _will_ be redefined
    // and thus short-circuited for future access
    configurable: true,
    enumerable: true,
    // Use a function here, we don't want to capture the outer this, i.e.
    // don't use arrow functions in this context since we have a this inside
    get: function() {
      if (value === void 0) {
        value = creator(item, index, this);
        try {
          Object.defineProperty(this, name, { value });
        } catch {
        }
      }
      return value;
    }
  });
}
function lazyMethods3(result, items, creator, getName) {
  for (let i = 0, count = items.length; i < count; i++) {
    lazyMethod4(result, items[i], creator, getName, i);
  }
  return result;
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/noop.js
function noop5() {
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/logger.js
var logTo4 = {
  debug: "log",
  error: "error",
  log: "log",
  warn: "warn"
};
function formatOther4(value) {
  if (value && isObject5(value) && value.constructor === Object) {
    const result = {};
    for (const [k, v] of Object.entries(value)) {
      result[k] = loggerFormat4(v);
    }
    return result;
  }
  return value;
}
function loggerFormat4(value) {
  if (Array.isArray(value)) {
    return value.map(loggerFormat4);
  } else if (isBn4(value)) {
    return value.toString();
  } else if (isU8a5(value) || isBuffer5(value)) {
    return u8aToHex5(u8aToU8a5(value));
  }
  return formatOther4(value);
}
function formatWithLength4(maxLength) {
  return (v) => {
    if (maxLength <= 0) {
      return v;
    }
    const r = `${v}`;
    return r.length < maxLength ? v : `${r.substring(0, maxLength)} ...`;
  };
}
function apply4(log, type, values, maxSize = -1) {
  if (values.length === 1 && isFunction6(values[0])) {
    const fnResult = values[0]();
    return apply4(log, type, Array.isArray(fnResult) ? fnResult : [fnResult], maxSize);
  }
  console[logTo4[log]](formatDate4(/* @__PURE__ */ new Date()), type, ...values.map(loggerFormat4).map(formatWithLength4(maxSize)));
}
function isDebugOn4(e, type) {
  return !!e && (e === "*" || type === e || e.endsWith("*") && type.startsWith(e.slice(0, -1)));
}
function isDebugOff4(e, type) {
  return !!e && (e.startsWith("-") && (type === e.slice(1) || e.endsWith("*") && type.startsWith(e.slice(1, -1))));
}
function getDebugFlag4(env, type) {
  let flag = false;
  for (const e of env) {
    if (isDebugOn4(e, type)) {
      flag = true;
    } else if (isDebugOff4(e, type)) {
      flag = false;
    }
  }
  return flag;
}
function parseEnv4(type) {
  const maxSize = parseInt(xglobal.process?.env?.["DEBUG_MAX"] || "-1", 10);
  return [
    getDebugFlag4((xglobal.process?.env?.["DEBUG"] || "").toLowerCase().split(","), type),
    isNaN(maxSize) ? -1 : maxSize
  ];
}
function logger4(origin) {
  const type = `${origin.toUpperCase()}:`.padStart(16);
  const [isDebug, maxSize] = parseEnv4(origin.toLowerCase());
  return {
    debug: isDebug ? (...values) => apply4("debug", type, values, maxSize) : noop5,
    error: (...values) => apply4("error", type, values),
    log: (...values) => apply4("log", type, values),
    noop: noop5,
    warn: (...values) => apply4("warn", type, values)
  };
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/object/spread.js
function objectSpread5(dest, ...sources) {
  const filterProps = /* @__PURE__ */ new Set(["__proto__", "constructor", "prototype"]);
  for (let i = 0, count = sources.length; i < count; i++) {
    const src = sources[i];
    if (src) {
      if (typeof src.entries === "function") {
        for (const [key, value] of src.entries()) {
          if (!filterProps.has(key)) {
            dest[key] = value;
          }
        }
      } else {
        const sanitizedSrc = /* @__PURE__ */ Object.create(null);
        for (const [key, value] of Object.entries(src)) {
          if (!filterProps.has(key)) {
            sanitizedSrc[key] = value;
          }
        }
        Object.assign(dest, sanitizedSrc);
      }
    }
  }
  return dest;
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/object/property.js
function objectProperty(that, key, getter, getName, index = 0) {
  const name = getName ? getName(key, index) : key;
  if (!(name in that)) {
    Object.defineProperty(that, name, {
      enumerable: true,
      // Unlike in lazy, we always call into the upper function, i.e. this method
      // does not cache old values (it is expected to be used for dynamic values)
      get: function() {
        return getter(key, index, this);
      }
    });
  }
}
function objectProperties(that, keys2, getter, getName) {
  for (let i = 0, count = keys2.length; i < count; i++) {
    objectProperty(that, keys2[i], getter, getName, i);
  }
}

// node_modules/@polkadot/types/node_modules/@polkadot/util/string/camelCase.js
var CC_TO_UP2 = new Array(256);
var CC_TO_LO2 = new Array(256);
for (let i = 0, count = CC_TO_UP2.length; i < count; i++) {
  CC_TO_LO2[i] = String.fromCharCode(i).toLowerCase();
  CC_TO_UP2[i] = String.fromCharCode(i).toUpperCase();
}
function formatAllCaps2(w) {
  return w.slice(0, w.length - 1).toLowerCase() + CC_TO_UP2[w.charCodeAt(w.length - 1)];
}
function converter3(format) {
  return (value) => {
    const parts = value.replace(/[-_., ]+/g, " ").trim().split(" ");
    let result = "";
    for (let i = 0, count = parts.length; i < count; i++) {
      const w = parts[i];
      result += format(/^[\dA-Z]+$/.test(w) ? w.toLowerCase() : w.replace(/^[\dA-Z]{2,}[^a-z]/, formatAllCaps2), i);
    }
    return result;
  };
}
var stringCamelCase2 = /* @__PURE__ */ converter3((w, i) => (i ? CC_TO_UP2[w.charCodeAt(0)] : CC_TO_LO2[w.charCodeAt(0)]) + w.slice(1));
var stringPascalCase2 = /* @__PURE__ */ converter3((w) => CC_TO_UP2[w.charCodeAt(0)] + w.slice(1));

// node_modules/@polkadot/types/interfaces/definitions.js
var definitions_exports = {};
__export(definitions_exports, {
  assetConversion: () => definitions_default4,
  assets: () => definitions_default5,
  attestations: () => definitions_default53,
  aura: () => definitions_default6,
  author: () => definitions_default72,
  authorship: () => definitions_default7,
  babe: () => definitions_default8,
  balances: () => definitions_default9,
  beefy: () => definitions_default10,
  benchmark: () => definitions_default11,
  blockbuilder: () => definitions_default12,
  bridges: () => definitions_default54,
  chain: () => definitions_default73,
  childstate: () => definitions_default74,
  claims: () => definitions_default55,
  collective: () => definitions_default13,
  consensus: () => definitions_default14,
  contracts: () => definitions_default15,
  contractsAbi: () => definitions_default66,
  crowdloan: () => definitions_default56,
  cumulus: () => definitions_default57,
  democracy: () => definitions_default16,
  dev: () => definitions_default17,
  discovery: () => definitions_default18,
  dryRunApi: () => definitions_default62,
  elections: () => definitions_default19,
  engine: () => definitions_default20,
  eth: () => definitions_default67,
  evm: () => definitions_default21,
  extrinsics: () => definitions_default22,
  finality: () => definitions_default58,
  fungibles: () => definitions_default23,
  genericAsset: () => definitions_default24,
  genesisBuilder: () => definitions_default25,
  gilt: () => definitions_default26,
  grandpa: () => definitions_default27,
  identity: () => definitions_default28,
  imOnline: () => definitions_default29,
  lottery: () => definitions_default30,
  metadata: () => definitions_default,
  mixnet: () => definitions_default31,
  mmr: () => definitions_default32,
  nfts: () => definitions_default33,
  nimbus: () => definitions_default68,
  nompools: () => definitions_default34,
  offchain: () => definitions_default75,
  offences: () => definitions_default35,
  ormlOracle: () => definitions_default69,
  ormlTokens: () => definitions_default70,
  parachains: () => definitions_default59,
  payment: () => definitions_default76,
  poll: () => definitions_default60,
  pow: () => definitions_default36,
  proxy: () => definitions_default37,
  purchase: () => definitions_default61,
  recovery: () => definitions_default38,
  rpc: () => definitions_default71,
  runtime: () => definitions_default2,
  scaleInfo: () => definitions_default3,
  scheduler: () => definitions_default39,
  session: () => definitions_default40,
  society: () => definitions_default41,
  staking: () => definitions_default42,
  state: () => definitions_default77,
  statement: () => definitions_default43,
  support: () => definitions_default44,
  syncstate: () => definitions_default45,
  system: () => definitions_default46,
  treasury: () => definitions_default47,
  txpayment: () => definitions_default48,
  txqueue: () => definitions_default49,
  uniques: () => definitions_default50,
  utility: () => definitions_default51,
  vesting: () => definitions_default52,
  xcm: () => definitions_default63,
  xcmPaymentApi: () => definitions_default64,
  xcmRuntimeApi: () => definitions_default65
});

// node_modules/@polkadot/types/interfaces/metadata/hashers.js
var AllHashers = {
  Blake2_128: null,
  // eslint-disable-line camelcase
  Blake2_256: null,
  // eslint-disable-line camelcase
  Blake2_128Concat: null,
  // eslint-disable-line camelcase
  Twox128: null,
  Twox256: null,
  Twox64Concat: null,
  // new in v11
  Identity: null
};

// node_modules/@polkadot/types/interfaces/metadata/runtime.js
var META_V1_TO_V2 = {
  metadata: {
    description: "Returns the metadata of a runtime",
    params: [],
    type: "OpaqueMetadata"
  }
};
var runtime = {
  Metadata: [
    {
      methods: {
        metadata_at_version: {
          description: "Returns the metadata at a given version.",
          params: [
            {
              name: "version",
              type: "u32"
            }
          ],
          type: "Option<OpaqueMetadata>"
        },
        metadata_versions: {
          description: "Returns the supported metadata versions.",
          params: [],
          type: "Vec<u32>"
        },
        ...META_V1_TO_V2
      },
      version: 2
    },
    {
      methods: {
        ...META_V1_TO_V2
      },
      version: 1
    }
  ]
};

// node_modules/@polkadot/types/interfaces/metadata/v9.js
var v9 = {
  // v9
  ErrorMetadataV9: {
    name: "Text",
    docs: "Vec<Text>"
  },
  EventMetadataV9: {
    name: "Text",
    args: "Vec<Type>",
    docs: "Vec<Text>"
  },
  FunctionArgumentMetadataV9: {
    name: "Text",
    type: "Type"
  },
  FunctionMetadataV9: {
    name: "Text",
    args: "Vec<FunctionArgumentMetadataV9>",
    docs: "Vec<Text>"
  },
  MetadataV9: {
    modules: "Vec<ModuleMetadataV9>"
  },
  ModuleConstantMetadataV9: {
    name: "Text",
    type: "Type",
    value: "Bytes",
    docs: "Vec<Text>"
  },
  ModuleMetadataV9: {
    name: "Text",
    storage: "Option<StorageMetadataV9>",
    calls: "Option<Vec<FunctionMetadataV9>>",
    events: "Option<Vec<EventMetadataV9>>",
    constants: "Vec<ModuleConstantMetadataV9>",
    errors: "Vec<ErrorMetadataV9>"
  },
  StorageEntryMetadataV9: {
    name: "Text",
    modifier: "StorageEntryModifierV9",
    type: "StorageEntryTypeV9",
    fallback: "Bytes",
    docs: "Vec<Text>"
  },
  StorageEntryModifierV9: {
    _enum: ["Optional", "Default", "Required"]
  },
  StorageEntryTypeV9: {
    _enum: {
      Plain: "Type",
      Map: {
        hasher: "StorageHasherV9",
        key: "Type",
        value: "Type",
        linked: "bool"
      },
      DoubleMap: {
        hasher: "StorageHasherV9",
        key1: "Type",
        key2: "Type",
        value: "Type",
        key2Hasher: "StorageHasherV9"
      }
    }
  },
  StorageHasherV9: {
    _enum: {
      Blake2_128: null,
      // eslint-disable-line camelcase
      Blake2_256: null,
      // eslint-disable-line camelcase
      Twox128: null,
      Twox256: null,
      Twox64Concat: null
    }
  },
  StorageMetadataV9: {
    prefix: "Text",
    items: "Vec<StorageEntryMetadataV9>"
  }
};

// node_modules/@polkadot/types/interfaces/metadata/v10.js
var v10 = {
  // v10
  ErrorMetadataV10: "ErrorMetadataV9",
  EventMetadataV10: "EventMetadataV9",
  FunctionArgumentMetadataV10: "FunctionArgumentMetadataV9",
  FunctionMetadataV10: "FunctionMetadataV9",
  MetadataV10: {
    modules: "Vec<ModuleMetadataV10>"
  },
  ModuleConstantMetadataV10: "ModuleConstantMetadataV9",
  ModuleMetadataV10: {
    name: "Text",
    storage: "Option<StorageMetadataV10>",
    calls: "Option<Vec<FunctionMetadataV10>>",
    events: "Option<Vec<EventMetadataV10>>",
    constants: "Vec<ModuleConstantMetadataV10>",
    errors: "Vec<ErrorMetadataV10>"
  },
  StorageEntryModifierV10: "StorageEntryModifierV9",
  StorageEntryMetadataV10: {
    name: "Text",
    modifier: "StorageEntryModifierV10",
    type: "StorageEntryTypeV10",
    fallback: "Bytes",
    docs: "Vec<Text>"
  },
  StorageEntryTypeV10: {
    _enum: {
      Plain: "Type",
      Map: {
        hasher: "StorageHasherV10",
        key: "Type",
        value: "Type",
        linked: "bool"
      },
      DoubleMap: {
        hasher: "StorageHasherV10",
        key1: "Type",
        key2: "Type",
        value: "Type",
        key2Hasher: "StorageHasherV10"
      }
    }
  },
  StorageMetadataV10: {
    prefix: "Text",
    items: "Vec<StorageEntryMetadataV10>"
  },
  StorageHasherV10: {
    _enum: {
      Blake2_128: null,
      // eslint-disable-line camelcase
      Blake2_256: null,
      // eslint-disable-line camelcase
      Blake2_128Concat: null,
      // eslint-disable-line camelcase
      Twox128: null,
      Twox256: null,
      Twox64Concat: null
    }
  }
};

// node_modules/@polkadot/types/interfaces/metadata/v11.js
var v11 = {
  // v11
  ErrorMetadataV11: "ErrorMetadataV10",
  EventMetadataV11: "EventMetadataV10",
  ExtrinsicMetadataV11: {
    version: "u8",
    signedExtensions: "Vec<Text>"
  },
  FunctionArgumentMetadataV11: "FunctionArgumentMetadataV10",
  FunctionMetadataV11: "FunctionMetadataV10",
  MetadataV11: {
    modules: "Vec<ModuleMetadataV11>",
    extrinsic: "ExtrinsicMetadataV11"
  },
  ModuleConstantMetadataV11: "ModuleConstantMetadataV10",
  ModuleMetadataV11: {
    name: "Text",
    storage: "Option<StorageMetadataV11>",
    calls: "Option<Vec<FunctionMetadataV11>>",
    events: "Option<Vec<EventMetadataV11>>",
    constants: "Vec<ModuleConstantMetadataV11>",
    errors: "Vec<ErrorMetadataV11>"
  },
  StorageEntryModifierV11: "StorageEntryModifierV10",
  StorageEntryMetadataV11: {
    name: "Text",
    modifier: "StorageEntryModifierV11",
    type: "StorageEntryTypeV11",
    fallback: "Bytes",
    docs: "Vec<Text>"
  },
  StorageEntryTypeV11: {
    _enum: {
      Plain: "Type",
      Map: {
        hasher: "StorageHasherV11",
        key: "Type",
        value: "Type",
        linked: "bool"
      },
      DoubleMap: {
        hasher: "StorageHasherV11",
        key1: "Type",
        key2: "Type",
        value: "Type",
        key2Hasher: "StorageHasherV11"
      }
    }
  },
  StorageMetadataV11: {
    prefix: "Text",
    items: "Vec<StorageEntryMetadataV11>"
  },
  StorageHasherV11: {
    _enum: AllHashers
  }
};

// node_modules/@polkadot/types/interfaces/metadata/v12.js
var v12 = {
  // v12
  ErrorMetadataV12: "ErrorMetadataV11",
  EventMetadataV12: "EventMetadataV11",
  ExtrinsicMetadataV12: "ExtrinsicMetadataV11",
  FunctionArgumentMetadataV12: "FunctionArgumentMetadataV11",
  FunctionMetadataV12: "FunctionMetadataV11",
  MetadataV12: {
    modules: "Vec<ModuleMetadataV12>",
    extrinsic: "ExtrinsicMetadataV12"
  },
  ModuleConstantMetadataV12: "ModuleConstantMetadataV11",
  ModuleMetadataV12: {
    name: "Text",
    storage: "Option<StorageMetadataV12>",
    calls: "Option<Vec<FunctionMetadataV12>>",
    events: "Option<Vec<EventMetadataV12>>",
    constants: "Vec<ModuleConstantMetadataV12>",
    errors: "Vec<ErrorMetadataV12>",
    index: "u8"
  },
  StorageEntryModifierV12: "StorageEntryModifierV11",
  StorageEntryMetadataV12: "StorageEntryMetadataV11",
  StorageEntryTypeV12: "StorageEntryTypeV11",
  StorageMetadataV12: "StorageMetadataV11",
  StorageHasherV12: "StorageHasherV11"
};

// node_modules/@polkadot/types/interfaces/metadata/v13.js
var v13 = {
  // v13
  ErrorMetadataV13: "ErrorMetadataV12",
  EventMetadataV13: "EventMetadataV12",
  ExtrinsicMetadataV13: "ExtrinsicMetadataV12",
  FunctionArgumentMetadataV13: "FunctionArgumentMetadataV12",
  FunctionMetadataV13: "FunctionMetadataV12",
  MetadataV13: {
    modules: "Vec<ModuleMetadataV13>",
    extrinsic: "ExtrinsicMetadataV13"
  },
  ModuleConstantMetadataV13: "ModuleConstantMetadataV12",
  ModuleMetadataV13: {
    name: "Text",
    storage: "Option<StorageMetadataV13>",
    calls: "Option<Vec<FunctionMetadataV13>>",
    events: "Option<Vec<EventMetadataV13>>",
    constants: "Vec<ModuleConstantMetadataV13>",
    errors: "Vec<ErrorMetadataV13>",
    index: "u8"
  },
  StorageEntryModifierV13: "StorageEntryModifierV12",
  StorageEntryMetadataV13: {
    name: "Text",
    modifier: "StorageEntryModifierV13",
    type: "StorageEntryTypeV13",
    fallback: "Bytes",
    docs: "Vec<Text>"
  },
  StorageEntryTypeV13: {
    _enum: {
      Plain: "Type",
      Map: {
        hasher: "StorageHasherV13",
        key: "Type",
        value: "Type",
        linked: "bool"
      },
      DoubleMap: {
        hasher: "StorageHasherV13",
        key1: "Type",
        key2: "Type",
        value: "Type",
        key2Hasher: "StorageHasherV13"
      },
      NMap: {
        keyVec: "Vec<Type>",
        hashers: "Vec<StorageHasherV13>",
        value: "Type"
      }
    }
  },
  StorageMetadataV13: {
    prefix: "Text",
    items: "Vec<StorageEntryMetadataV13>"
  },
  StorageHasherV13: "StorageHasherV12"
};

// node_modules/@polkadot/types/interfaces/scaleInfo/v1.js
var Si1Variant = {
  name: "Text",
  fields: "Vec<Si1Field>",
  index: "u8",
  docs: "Vec<Text>"
};
var v1 = {
  Si1Field: {
    name: "Option<Text>",
    type: "Si1LookupTypeId",
    typeName: "Option<Text>",
    docs: "Vec<Text>"
  },
  Si1LookupTypeId: "Compact<u32>",
  Si1Path: "Si0Path",
  Si1Type: {
    path: "Si1Path",
    params: "Vec<Si1TypeParameter>",
    def: "Si1TypeDef",
    docs: "Vec<Text>"
  },
  Si1TypeDef: {
    _enum: {
      Composite: "Si1TypeDefComposite",
      Variant: "Si1TypeDefVariant",
      Sequence: "Si1TypeDefSequence",
      Array: "Si1TypeDefArray",
      Tuple: "Si1TypeDefTuple",
      Primitive: "Si1TypeDefPrimitive",
      Compact: "Si1TypeDefCompact",
      BitSequence: "Si1TypeDefBitSequence",
      // NOTE: This is specific to the implementation for pre-v14 metadata
      // compatibility (always keep this as the last entry in the enum)
      HistoricMetaCompat: "Type"
    }
  },
  Si1TypeDefArray: {
    len: "u32",
    type: "Si1LookupTypeId"
  },
  Si1TypeDefBitSequence: {
    bitStoreType: "Si1LookupTypeId",
    bitOrderType: "Si1LookupTypeId"
  },
  Si1TypeDefCompact: {
    type: "Si1LookupTypeId"
  },
  Si1TypeDefComposite: {
    fields: "Vec<Si1Field>"
  },
  Si1TypeDefPrimitive: "Si0TypeDefPrimitive",
  Si1TypeDefSequence: {
    type: "Si1LookupTypeId"
  },
  Si1TypeDefTuple: "Vec<Si1LookupTypeId>",
  Si1TypeParameter: {
    name: "Text",
    type: "Option<Si1LookupTypeId>"
  },
  Si1TypeDefVariant: {
    variants: "Vec<Si1Variant>"
  },
  Si1Variant
};

// node_modules/@polkadot/types/interfaces/metadata/v14.js
var v14 = {
  // registry
  PortableTypeV14: {
    id: "Si1LookupTypeId",
    type: "Si1Type"
  },
  // compatibility with earlier layouts, i.e. don't break previous users
  ErrorMetadataV14: {
    ...Si1Variant,
    args: "Vec<Type>"
  },
  EventMetadataV14: {
    ...Si1Variant,
    args: "Vec<Type>"
  },
  FunctionArgumentMetadataV14: {
    name: "Text",
    type: "Type",
    typeName: "Option<Type>"
  },
  FunctionMetadataV14: {
    ...Si1Variant,
    args: "Vec<FunctionArgumentMetadataV14>"
  },
  // V14
  ExtrinsicMetadataV14: {
    type: "SiLookupTypeId",
    version: "u8",
    signedExtensions: "Vec<SignedExtensionMetadataV14>"
  },
  MetadataV14: {
    lookup: "PortableRegistry",
    pallets: "Vec<PalletMetadataV14>",
    extrinsic: "ExtrinsicMetadataV14",
    type: "SiLookupTypeId"
  },
  PalletCallMetadataV14: {
    type: "SiLookupTypeId"
  },
  PalletConstantMetadataV14: {
    name: "Text",
    type: "SiLookupTypeId",
    value: "Bytes",
    docs: "Vec<Text>"
  },
  PalletErrorMetadataV14: {
    type: "SiLookupTypeId"
  },
  PalletEventMetadataV14: {
    type: "SiLookupTypeId"
  },
  PalletMetadataV14: {
    name: "Text",
    storage: "Option<PalletStorageMetadataV14>",
    calls: "Option<PalletCallMetadataV14>",
    events: "Option<PalletEventMetadataV14>",
    constants: "Vec<PalletConstantMetadataV14>",
    errors: "Option<PalletErrorMetadataV14>",
    index: "u8"
  },
  PalletStorageMetadataV14: {
    prefix: "Text",
    // NOTE: Renamed from entries
    items: "Vec<StorageEntryMetadataV14>"
  },
  SignedExtensionMetadataV14: {
    identifier: "Text",
    type: "SiLookupTypeId",
    additionalSigned: "SiLookupTypeId"
  },
  StorageEntryMetadataV14: {
    name: "Text",
    modifier: "StorageEntryModifierV14",
    type: "StorageEntryTypeV14",
    fallback: "Bytes",
    docs: "Vec<Text>"
  },
  StorageEntryModifierV14: "StorageEntryModifierV13",
  StorageEntryTypeV14: {
    _enum: {
      Plain: "SiLookupTypeId",
      Map: {
        hashers: "Vec<StorageHasherV14>",
        key: "SiLookupTypeId",
        // NOTE: Renamed from "keys"
        value: "SiLookupTypeId"
      }
    }
  },
  StorageHasherV14: "StorageHasherV13"
};

// node_modules/@polkadot/types/interfaces/metadata/v15.js
var v15 = {
  // new/adjusted in v15
  CustomMetadata15: {
    map: "BTreeMap<Text, CustomValueMetadata15>"
  },
  CustomValueMetadata15: {
    type: "SiLookupTypeId",
    value: "Bytes"
  },
  ExtrinsicMetadataV15: {
    version: "u8",
    addressType: "SiLookupTypeId",
    callType: "SiLookupTypeId",
    signatureType: "SiLookupTypeId",
    extraType: "SiLookupTypeId",
    signedExtensions: "Vec<SignedExtensionMetadataV14>"
  },
  OuterEnums15: {
    callType: "SiLookupTypeId",
    eventType: "SiLookupTypeId",
    errorType: "SiLookupTypeId"
  },
  PalletMetadataV15: {
    name: "Text",
    storage: "Option<PalletStorageMetadataV14>",
    calls: "Option<PalletCallMetadataV14>",
    events: "Option<PalletEventMetadataV14>",
    constants: "Vec<PalletConstantMetadataV14>",
    errors: "Option<PalletErrorMetadataV14>",
    index: "u8",
    docs: "Vec<Text>"
  },
  RuntimeApiMetadataV15: {
    name: "Text",
    methods: "Vec<RuntimeApiMethodMetadataV15>",
    docs: "Vec<Text>"
  },
  RuntimeApiMethodMetadataV15: {
    name: "Text",
    inputs: "Vec<RuntimeApiMethodParamMetadataV15>",
    output: "SiLookupTypeId",
    docs: "Vec<Text>"
  },
  RuntimeApiMethodParamMetadataV15: {
    name: "Text",
    type: "SiLookupTypeId"
  },
  // actual v15 definition
  MetadataV15: {
    lookup: "PortableRegistry",
    pallets: "Vec<PalletMetadataV15>",
    extrinsic: "ExtrinsicMetadataV15",
    type: "SiLookupTypeId",
    apis: "Vec<RuntimeApiMetadataV15>",
    outerEnums: "OuterEnums15",
    custom: "CustomMetadata15"
  }
};

// node_modules/@polkadot/types/interfaces/metadata/definitions.js
var definitions_default = {
  rpc: {},
  runtime,
  types: {
    // all known
    ...v9,
    ...v10,
    ...v11,
    ...v12,
    ...v13,
    ...v14,
    ...v15,
    // latest mappings
    // NOTE: For v15, we only added the runtime defintions,
    // hence latest for most pointing to the previous V14
    ErrorMetadataLatest: "ErrorMetadataV14",
    EventMetadataLatest: "EventMetadataV14",
    ExtrinsicMetadataLatest: "ExtrinsicMetadataV15",
    FunctionArgumentMetadataLatest: "FunctionArgumentMetadataV14",
    FunctionMetadataLatest: "FunctionMetadataV14",
    MetadataLatest: "MetadataV15",
    PalletCallMetadataLatest: "PalletCallMetadataV14",
    PalletConstantMetadataLatest: "PalletConstantMetadataV14",
    PalletErrorMetadataLatest: "PalletErrorMetadataV14",
    PalletEventMetadataLatest: "PalletEventMetadataV14",
    PalletMetadataLatest: "PalletMetadataV15",
    PalletStorageMetadataLatest: "PalletStorageMetadataV14",
    PortableType: "PortableTypeV14",
    RuntimeApiMetadataLatest: "RuntimeApiMetadataV15",
    SignedExtensionMetadataLatest: "SignedExtensionMetadataV14",
    StorageEntryMetadataLatest: "StorageEntryMetadataV14",
    StorageEntryModifierLatest: "StorageEntryModifierV14",
    StorageEntryTypeLatest: "StorageEntryTypeV14",
    StorageHasher: "StorageHasherV14",
    // additional types
    OpaqueMetadata: "Opaque<Bytes>",
    // the enum containing all the mappings
    MetadataAll: {
      _enum: {
        V0: "DoNotConstruct<MetadataV0>",
        V1: "DoNotConstruct<MetadataV1>",
        V2: "DoNotConstruct<MetadataV2>",
        V3: "DoNotConstruct<MetadataV3>",
        V4: "DoNotConstruct<MetadataV4>",
        V5: "DoNotConstruct<MetadataV5>",
        V6: "DoNotConstruct<MetadataV6>",
        V7: "DoNotConstruct<MetadataV7>",
        V8: "DoNotConstruct<MetadataV8>",
        // First version on Kusama in V9, dropping will be problematic
        V9: "MetadataV9",
        V10: "MetadataV10",
        V11: "MetadataV11",
        V12: "MetadataV12",
        V13: "MetadataV13",
        V14: "MetadataV14",
        V15: "MetadataV15"
      }
    }
  }
};

// node_modules/@polkadot/types/interfaces/runtime/runtime.js
var CORE_V1_TO_V4 = {
  execute_block: {
    description: "Execute the given block.",
    params: [
      {
        name: "block",
        type: "Block"
      }
    ],
    type: "Null"
  }
};
var CORE_V1_TO_V2 = {
  version: {
    description: "Returns the version of the runtime.",
    params: [],
    type: "RuntimeVersionPre3"
  }
};
var CORE_V2_TO_V4 = {
  initialize_block: {
    description: "Initialize a block with the given header.",
    params: [
      {
        name: "header",
        type: "Header"
      }
    ],
    type: "Null"
  }
};
var CORE_V4_VERSION = {
  version: {
    description: "Returns the version of the runtime.",
    params: [],
    type: "RuntimeVersion"
  }
};
var CORE_V4_TO_V5 = {
  ...CORE_V1_TO_V4,
  initialize_block: {
    description: "Initialize a block with the given header.",
    params: [
      {
        name: "header",
        type: "Header"
      }
    ],
    type: "ExtrinsicInclusionMode"
  }
};
var runtime2 = {
  Core: [
    {
      methods: {
        ...CORE_V4_VERSION,
        ...CORE_V4_TO_V5
      },
      version: 5
    },
    {
      methods: {
        ...CORE_V4_VERSION,
        ...CORE_V1_TO_V4,
        ...CORE_V2_TO_V4
      },
      version: 4
    },
    {
      methods: {
        version: {
          description: "Returns the version of the runtime.",
          params: [],
          type: "RuntimeVersionPre4"
        },
        ...CORE_V1_TO_V4,
        ...CORE_V2_TO_V4
      },
      version: 3
    },
    {
      methods: {
        ...CORE_V1_TO_V2,
        ...CORE_V1_TO_V4,
        ...CORE_V2_TO_V4
      },
      version: 2
    },
    {
      methods: {
        initialise_block: {
          description: "Initialize a block with the given header.",
          params: [
            {
              name: "header",
              type: "Header"
            }
          ],
          type: "Null"
        },
        ...CORE_V1_TO_V2,
        ...CORE_V1_TO_V4
      },
      version: 1
    }
  ]
};

// node_modules/@polkadot/types/interfaces/runtime/definitions.js
var numberTypes = {
  Fixed64: "Int<64, Fixed64>",
  FixedI64: "Int<64, FixedI64>",
  FixedU64: "UInt<64, FixedU64>",
  Fixed128: "Int<128, Fixed128>",
  FixedI128: "Int<128, FixedI128>",
  FixedU128: "UInt<128, FixedU128>",
  I32F32: "Int<64, I32F32>",
  U32F32: "UInt<64, U32F32>",
  PerU16: "UInt<16, PerU16>",
  Perbill: "UInt<32, Perbill>",
  Percent: "UInt<8, Percent>",
  Permill: "UInt<32, Permill>",
  Perquintill: "UInt<64, Perquintill>"
};
var knownOrigins = {
  //
  // (1) Defaults from Substrate
  //
  Council: "CollectiveOrigin",
  System: "SystemOrigin",
  TechnicalCommittee: "CollectiveOrigin",
  //
  // (2) Defaults from Polkadot
  //
  Xcm: "XcmOrigin",
  XcmPallet: "XcmOrigin",
  //
  // (3) Defaults from Acala
  //
  Authority: "AuthorityOrigin",
  GeneralCouncil: "CollectiveOrigin"
};
var definitions_default2 = {
  rpc: {},
  runtime: runtime2,
  types: {
    ...numberTypes,
    AccountId: "AccountId32",
    AccountId20: "GenericEthereumAccountId",
    AccountId32: "GenericAccountId32",
    AccountId33: "GenericAccountId33",
    AccountIdOf: "AccountId",
    AccountIndex: "GenericAccountIndex",
    Address: "MultiAddress",
    AssetId: "u32",
    Balance: "UInt<128, Balance>",
    BalanceOf: "Balance",
    Block: "GenericBlock",
    BlockNumber: "u32",
    BlockNumberFor: "BlockNumber",
    BlockNumberOf: "BlockNumber",
    Call: "GenericCall",
    CallHash: "Hash",
    CallHashOf: "CallHash",
    ChangesTrieConfiguration: {
      digestInterval: "u32",
      digestLevels: "u32"
    },
    ChangesTrieSignal: {
      _enum: {
        NewConfiguration: "Option<ChangesTrieConfiguration>"
      }
    },
    ConsensusEngineId: "GenericConsensusEngineId",
    CodecHash: "Hash",
    CrateVersion: {
      major: "u16",
      minor: "u8",
      patch: "u8"
    },
    Digest: {
      logs: "Vec<DigestItem>"
    },
    DigestItem: {
      _enum: {
        Other: "Bytes",
        // 0
        AuthoritiesChange: "Vec<AuthorityId>",
        // 1
        ChangesTrieRoot: "Hash",
        // 2
        SealV0: "SealV0",
        // 3
        Consensus: "Consensus",
        // 4
        Seal: "Seal",
        // 5
        PreRuntime: "PreRuntime",
        // 6
        ChangesTrieSignal: "ChangesTrieSignal",
        // 7
        RuntimeEnvironmentUpdated: "Null"
        // 8
      }
    },
    ExtrinsicsWeight: {
      normal: "Weight",
      operational: "Weight"
    },
    H32: "[u8; 4; H32]",
    H64: "[u8; 8; H64]",
    H128: "[u8; 16; H128]",
    H160: "[u8; 20; H160]",
    H256: "[u8; 32; H256]",
    H512: "[u8; 64; H512]",
    H1024: "[u8; 128; H1024]",
    H2048: "[u8; 256; H2048]",
    Hash: "H256",
    Header: {
      parentHash: "Hash",
      number: "Compact<BlockNumber>",
      stateRoot: "Hash",
      extrinsicsRoot: "Hash",
      digest: "Digest"
    },
    HeaderPartial: {
      parentHash: "Hash",
      // since we only parse JSON with this, having non-compact works
      number: "BlockNumber"
    },
    IndicesLookupSource: "GenericLookupSource",
    Index: "u32",
    Justification: "(ConsensusEngineId, EncodedJustification)",
    EncodedJustification: "Bytes",
    Justifications: "Vec<Justification>",
    KeyValue: "(StorageKey, StorageData)",
    KeyTypeId: "u32",
    LockIdentifier: "[u8; 8]",
    LookupSource: "MultiAddress",
    LookupTarget: "AccountId",
    ModuleId: "LockIdentifier",
    MultiAddress: "GenericMultiAddress",
    MultiSigner: {
      _enum: {
        Ed25519: "[u8; 32]",
        Sr25519: "[u8; 32]",
        Ecdsa: "[u8; 33]"
      }
    },
    Moment: "UInt<64, Moment>",
    OpaqueCall: "Bytes",
    Origin: "DoNotConstruct<Origin>",
    OriginCaller: {
      _enum: {
        // this should be dynamically built from the actual modules, based on index
        System: "SystemOrigin"
      }
    },
    PalletId: "LockIdentifier",
    PalletsOrigin: "OriginCaller",
    PalletVersion: {
      major: "u16",
      minor: "u8",
      patch: "u8"
    },
    Pays: {
      _enum: ["Yes", "No"]
    },
    Phantom: "Null",
    PhantomData: "Null",
    Releases: {
      _enum: ["V1", "V2", "V3", "V4", "V5", "V6", "V7", "V8", "V9", "V10"]
    },
    RuntimeCall: "Call",
    RuntimeEvent: "Event",
    RuntimeDbWeight: {
      read: "Weight",
      write: "Weight"
    },
    SignedBlock: "SignedBlockWithJustifications",
    SignedBlockWithJustification: {
      block: "Block",
      justification: "Option<EncodedJustification>"
    },
    SignedBlockWithJustifications: {
      block: "Block",
      justifications: "Option<Justifications>"
    },
    Slot: "u64",
    SlotDuration: "u64",
    StorageData: "Bytes",
    StorageInfo: {
      palletName: "Bytes",
      storage_name: "Bytes",
      prefix: "Bytes",
      maxValues: "Option<u32>",
      maxSize: "Option<u32>"
    },
    StorageProof: {
      trieNodes: "Vec<Bytes>"
    },
    TransactionPriority: "u64",
    TransactionLongevity: "u64",
    TransactionTag: "Bytes",
    TransactionInfo: {
      _alias: {
        dataSize: "size"
      },
      chunkRoot: "H256",
      contentHash: "H256",
      dataSize: "u32",
      blockChunks: "u32"
    },
    TransactionStorageProof: {
      chunk: "Vec<u8>",
      proof: "Vec<Vec<u8>>"
    },
    ValidatorId: "AccountId",
    ValidatorIdOf: "ValidatorId",
    WeightV0: "u32",
    WeightV1: "u64",
    WeightV2: {
      refTime: "Compact<u64>",
      proofSize: "Compact<u64>"
    },
    Weight: "WeightV2",
    WeightMultiplier: "Fixed64",
    // digest
    PreRuntime: "(ConsensusEngineId, Bytes)",
    SealV0: "(u64, Signature)",
    Seal: "(ConsensusEngineId, Bytes)",
    Consensus: "(ConsensusEngineId, Bytes)",
    // Type when core initialize_block went from v4 to v5
    ExtrinsicInclusionMode: {
      _enum: ["AllExtrinsics", "OnlyInherents"]
    }
  }
};

// node_modules/@polkadot/types/interfaces/scaleInfo/v0.js
var v0 = {
  Si0Field: {
    name: "Option<Text>",
    type: "Si0LookupTypeId",
    typeName: "Option<Text>",
    docs: "Vec<Text>"
  },
  Si0LookupTypeId: "u32",
  Si0Path: "Vec<Text>",
  Si0Type: {
    path: "Si0Path",
    params: "Vec<Si0LookupTypeId>",
    def: "Si0TypeDef"
  },
  Si0TypeDef: {
    _enum: {
      Composite: "Si0TypeDefComposite",
      Variant: "Si0TypeDefVariant",
      Sequence: "Si0TypeDefSequence",
      Array: "Si0TypeDefArray",
      Tuple: "Si0TypeDefTuple",
      Primitive: "Si0TypeDefPrimitive",
      Compact: "Si0TypeDefCompact",
      Phantom: "Si0TypeDefPhantom",
      BitSequence: "Si0TypeDefBitSequence"
    }
  },
  Si0TypeDefArray: {
    len: "u32",
    type: "Si0LookupTypeId"
  },
  Si0TypeDefBitSequence: {
    bitStoreType: "Si0LookupTypeId",
    bitOrderType: "Si0LookupTypeId"
  },
  Si0TypeDefCompact: {
    type: "Si0LookupTypeId"
  },
  Si0TypeDefComposite: {
    fields: "Vec<Si0Field>"
  },
  Si0TypeDefPhantom: "Null",
  Si0TypeDefVariant: {
    variants: "Vec<Si0Variant>"
  },
  Si0TypeDefPrimitive: {
    _enum: ["Bool", "Char", "Str", "U8", "U16", "U32", "U64", "U128", "U256", "I8", "I16", "I32", "I64", "I128", "I256"]
  },
  Si0TypeDefSequence: {
    type: "Si0LookupTypeId"
  },
  Si0TypeDefTuple: "Vec<Si0LookupTypeId>",
  Si0TypeParameter: {
    name: "Text",
    type: "Option<Si0LookupTypeId>"
  },
  Si0Variant: {
    name: "Text",
    fields: "Vec<Si0Field>",
    index: "Option<u8>",
    discriminant: "Option<u64>",
    docs: "Vec<Text>"
  }
};

// node_modules/@polkadot/types/interfaces/scaleInfo/definitions.js
var definitions_default3 = {
  rpc: {},
  types: {
    ...v0,
    ...v1,
    // latest mappings
    SiField: "Si1Field",
    SiLookupTypeId: "Si1LookupTypeId",
    SiPath: "Si1Path",
    SiType: "Si1Type",
    SiTypeDef: "Si1TypeDef",
    SiTypeDefArray: "Si1TypeDefArray",
    SiTypeDefBitSequence: "Si1TypeDefBitSequence",
    SiTypeDefCompact: "Si1TypeDefCompact",
    SiTypeDefComposite: "Si1TypeDefComposite",
    SiTypeDefPrimitive: "Si1TypeDefPrimitive",
    SiTypeDefSequence: "Si1TypeDefSequence",
    SiTypeDefTuple: "Si1TypeDefTuple",
    SiTypeParameter: "Si1TypeParameter",
    SiTypeDefVariant: "Si1TypeDefVariant",
    SiVariant: "Si1Variant"
  }
};

// node_modules/@polkadot/types/interfaces/assetConversion/runtime.js
var runtime3 = {
  AssetConversionApi: [
    {
      methods: {
        get_reserves: {
          description: "Get pool reserves",
          params: [
            {
              name: "asset1",
              type: "StagingXcmV3MultiLocation"
            },
            {
              name: "asset2",
              type: "StagingXcmV3MultiLocation"
            }
          ],
          type: "Option<(Balance,Balance)>"
        },
        quote_price_exact_tokens_for_tokens: {
          description: "Quote price: exact tokens for tokens",
          params: [
            {
              name: "asset1",
              type: "StagingXcmV3MultiLocation"
            },
            {
              name: "asset2",
              type: "StagingXcmV3MultiLocation"
            },
            {
              name: "amount",
              type: "u128"
            },
            {
              name: "include_fee",
              type: "bool"
            }
          ],
          type: "Option<(Balance)>"
        },
        quote_price_tokens_for_exact_tokens: {
          description: "Quote price: tokens for exact tokens",
          params: [
            {
              name: "asset1",
              type: "StagingXcmV3MultiLocation"
            },
            {
              name: "asset2",
              type: "StagingXcmV3MultiLocation"
            },
            {
              name: "amount",
              type: "u128"
            },
            {
              name: "include_fee",
              type: "bool"
            }
          ],
          type: "Option<(Balance)>"
        }
      },
      version: 1
    }
  ]
};

// node_modules/@polkadot/types/interfaces/assetConversion/definitions.js
var definitions_default4 = {
  rpc: {},
  runtime: runtime3,
  types: {
    TAssetConversion: "Option<MultiLocation>"
  }
};

// node_modules/@polkadot/types/interfaces/assets/runtime.js
var runtime4 = {
  AssetsApi: [
    {
      methods: {
        account_balances: {
          description: "Return the current set of authorities.",
          params: [
            {
              name: "account",
              type: "AccountId"
            }
          ],
          type: "Vec<(u32, TAssetBalance)>"
        }
      },
      version: 1
    }
  ]
};

// node_modules/@polkadot/types/interfaces/assets/definitions.js
var definitions_default5 = {
  rpc: {},
  runtime: runtime4,
  types: {
    AssetApprovalKey: {
      owner: "AccountId",
      delegate: "AccountId"
    },
    AssetApproval: {
      amount: "TAssetBalance",
      deposit: "TAssetDepositBalance"
    },
    AssetBalance: {
      balance: "TAssetBalance",
      isFrozen: "bool",
      isSufficient: "bool"
    },
    AssetDestroyWitness: {
      accounts: "Compact<u32>",
      sufficients: "Compact<u32>",
      approvals: "Compact<u32>"
    },
    AssetDetails: {
      owner: "AccountId",
      issuer: "AccountId",
      admin: "AccountId",
      freezer: "AccountId",
      supply: "TAssetBalance",
      deposit: "TAssetDepositBalance",
      minBalance: "TAssetBalance",
      isSufficient: "bool",
      accounts: "u32",
      sufficients: "u32",
      approvals: "u32",
      isFrozen: "bool"
    },
    AssetMetadata: {
      deposit: "TAssetDepositBalance",
      name: "Vec<u8>",
      symbol: "Vec<u8>",
      decimals: "u8",
      isFrozen: "bool"
    },
    TAssetBalance: "u64",
    TAssetDepositBalance: "BalanceOf"
  }
};

// node_modules/@polkadot/types/interfaces/aura/runtime.js
var runtime5 = {
  AuraApi: [
    {
      methods: {
        authorities: {
          description: "Return the current set of authorities.",
          params: [],
          type: "Vec<AuthorityId>"
        },
        slot_duration: {
          description: "Returns the slot duration for Aura.",
          params: [],
          type: "SlotDuration"
        }
      },
      version: 1
    }
  ]
};

// node_modules/@polkadot/types/interfaces/aura/definitions.js
var definitions_default6 = {
  rpc: {},
  runtime: runtime5,
  types: {
    RawAuraPreDigest: {
      slotNumber: "u64"
    }
  }
};

// node_modules/@polkadot/types/interfaces/authorship/definitions.js
var definitions_default7 = {
  rpc: {},
  types: {
    UncleEntryItem: {
      _enum: {
        InclusionHeight: "BlockNumber",
        Uncle: "(Hash, Option<AccountId>)"
      }
    }
  }
};

// node_modules/@polkadot/types/interfaces/babe/rpc.js
var rpc = {
  epochAuthorship: {
    description: "Returns data about which slots (primary or secondary) can be claimed in the current epoch with the keys in the keystore",
    isUnsafe: true,
    params: [],
    type: "HashMap<AuthorityId, EpochAuthorship>"
  }
};

// node_modules/@polkadot/types/interfaces/babe/runtime.js
var V1_V2_SHARED = {
  current_epoch: {
    description: "Returns information regarding the current epoch.",
    params: [],
    type: "Epoch"
  },
  current_epoch_start: {
    description: "Returns the slot that started the current epoch.",
    params: [],
    type: "Slot"
  },
  generate_key_ownership_proof: {
    description: "Generates a proof of key ownership for the given authority in the current epoch.",
    params: [
      {
        name: "slot",
        type: "Slot"
      },
      {
        name: "authorityId",
        type: "AuthorityId"
      }
    ],
    type: "Option<OpaqueKeyOwnershipProof>"
  },
  next_epoch: {
    description: "Returns information regarding the next epoch (which was already previously announced).",
    params: [],
    type: "Epoch"
  },
  submit_report_equivocation_unsigned_extrinsic: {
    description: "Submits an unsigned extrinsic to report an equivocation.",
    params: [
      {
        name: "equivocationProof",
        type: "BabeEquivocationProof"
      },
      {
        name: "keyOwnerProof",
        type: "OpaqueKeyOwnershipProof"
      }
    ],
    type: "Option<Null>"
  }
};
var runtime6 = {
  BabeApi: [
    {
      methods: {
        configuration: {
          description: "Return the genesis configuration for BABE. The configuration is only read on genesis.",
          params: [],
          type: "BabeGenesisConfiguration"
        },
        ...V1_V2_SHARED
      },
      version: 2
    },
    {
      methods: {
        configuration: {
          description: "Return the configuration for BABE. Version 1.",
          params: [],
          type: "BabeGenesisConfigurationV1"
        },
        ...V1_V2_SHARED
      },
      version: 1
    }
  ]
};

// node_modules/@polkadot/types/interfaces/babe/definitions.js
var definitions_default8 = {
  rpc,
  runtime: runtime6,
  types: {
    AllowedSlots: {
      _enum: ["PrimarySlots", "PrimaryAndSecondaryPlainSlots", "PrimaryAndSecondaryVRFSlots"]
    },
    BabeAuthorityWeight: "u64",
    BabeEpochConfiguration: {
      c: "(u64, u64)",
      allowedSlots: "AllowedSlots"
    },
    BabeBlockWeight: "u32",
    BabeEquivocationProof: {
      offender: "AuthorityId",
      slotNumber: "SlotNumber",
      firstHeader: "Header",
      secondHeader: "Header"
    },
    BabeGenesisConfiguration: {
      slotDuration: "u64",
      epochLength: "u64",
      c: "(u64, u64)",
      genesisAuthorities: "Vec<(AuthorityId, BabeAuthorityWeight)>",
      randomness: "Randomness",
      allowedSlots: "AllowedSlots"
    },
    BabeGenesisConfigurationV1: {
      slotDuration: "u64",
      epochLength: "u64",
      c: "(u64, u64)",
      genesisAuthorities: "Vec<(AuthorityId, BabeAuthorityWeight)>",
      randomness: "Randomness",
      secondarySlots: "bool"
    },
    BabeWeight: "u64",
    MaybeRandomness: "Option<Randomness>",
    MaybeVrf: "Option<VrfData>",
    Epoch: {
      epochIndex: "u64",
      startSlot: "Slot",
      duration: "u64",
      authorities: "Vec<(AuthorityId, BabeAuthorityWeight)>",
      randomness: "Hash",
      // [u8; VRF_OUTPUT_LENGTH],
      config: "BabeEpochConfiguration"
    },
    EpochAuthorship: {
      primary: "Vec<u64>",
      secondary: "Vec<u64>",
      secondary_vrf: "Vec<u64>"
    },
    NextConfigDescriptor: {
      _enum: {
        V0: "Null",
        V1: "NextConfigDescriptorV1"
      }
    },
    NextConfigDescriptorV1: {
      c: "(u64, u64)",
      allowedSlots: "AllowedSlots"
    },
    OpaqueKeyOwnershipProof: "Bytes",
    Randomness: "Hash",
    // [u8; RANDOMNESS_LENGTH],
    RawBabePreDigest: {
      _enum: {
        Phantom: "Null",
        // index starts at 1... empty slot at 0
        Primary: "RawBabePreDigestPrimary",
        SecondaryPlain: "RawBabePreDigestSecondaryPlain",
        SecondaryVRF: "RawBabePreDigestSecondaryVRF"
      }
    },
    RawBabePreDigestPrimary: {
      authorityIndex: "u32",
      // AuthorityIndex (also in aura)
      slotNumber: "SlotNumber",
      vrfOutput: "VrfOutput",
      vrfProof: "VrfProof"
    },
    RawBabePreDigestSecondaryPlain: {
      authorityIndex: "u32",
      // AuthorityIndex (also in aura)
      slotNumber: "SlotNumber"
    },
    RawBabePreDigestSecondaryVRF: {
      authorityIndex: "u32",
      slotNumber: "SlotNumber",
      vrfOutput: "VrfOutput",
      vrfProof: "VrfProof"
    },
    RawBabePreDigestTo159: {
      _enum: {
        Primary: "RawBabePreDigestPrimaryTo159",
        Secondary: "RawBabePreDigestSecondaryTo159"
      }
    },
    RawBabePreDigestPrimaryTo159: {
      authorityIndex: "u32",
      slotNumber: "SlotNumber",
      weight: "BabeBlockWeight",
      vrfOutput: "VrfOutput",
      vrfProof: "VrfProof"
    },
    RawBabePreDigestSecondaryTo159: {
      authorityIndex: "u32",
      slotNumber: "SlotNumber",
      weight: "BabeBlockWeight"
    },
    // a cross old/new compatible version of the digest, that is _only_ useful
    // for partial parsing and extraction of the author. This assumes that all
    // entries has the authorityIndex in the first position - and that it is all
    // we are interested in
    RawBabePreDigestCompat: {
      _enum: {
        Zero: "u32",
        One: "u32",
        Two: "u32",
        Three: "u32"
      }
    },
    SlotNumber: "u64",
    VrfData: "[u8; 32]",
    VrfOutput: "[u8; 32]",
    VrfProof: "[u8; 64]"
  }
};

// node_modules/@polkadot/types/interfaces/balances/definitions.js
var definitions_default9 = {
  rpc: {},
  types: {
    AccountData: {
      free: "Balance",
      reserved: "Balance",
      miscFrozen: "Balance",
      feeFrozen: "Balance"
    },
    BalanceLockTo212: {
      id: "LockIdentifier",
      amount: "Balance",
      until: "BlockNumber",
      reasons: "WithdrawReasons"
    },
    BalanceLock: {
      id: "LockIdentifier",
      amount: "Balance",
      reasons: "Reasons"
    },
    BalanceStatus: {
      _enum: ["Free", "Reserved"]
    },
    Reasons: {
      _enum: ["Fee", "Misc", "All"]
    },
    ReserveData: {
      id: "ReserveIdentifier",
      amount: "Balance"
    },
    ReserveIdentifier: "[u8; 8]",
    VestingSchedule: {
      offset: "Balance",
      perBlock: "Balance",
      startingBlock: "BlockNumber"
    },
    WithdrawReasons: {
      _set: {
        TransactionPayment: 1,
        Transfer: 2,
        Reserve: 4,
        Fee: 8,
        Tip: 16
      }
    }
  }
};

// node_modules/@polkadot/types/interfaces/beefy/rpc.js
var rpc2 = {
  getFinalizedHead: {
    description: "Returns hash of the latest BEEFY finalized block as seen by this client.",
    params: [],
    type: "H256"
  },
  subscribeJustifications: {
    description: "Returns the block most recently finalized by BEEFY, alongside its justification.",
    params: [],
    pubsub: [
      "justifications",
      "subscribeJustifications",
      "unsubscribeJustifications"
    ],
    type: "BeefyVersionedFinalityProof"
  }
};

// node_modules/@polkadot/types/interfaces/beefy/runtime.js
var BEEFY_V3 = {
  beefy_genesis: {
    description: "Return the block number where BEEFY consensus is enabled/started",
    params: [],
    type: "Option<BlockNumber>"
  },
  generate_key_ownership_proof: {
    description: "Generates a proof of key ownership for the given authority in the given set.",
    params: [
      {
        name: "setId",
        type: "ValidatorSetId"
      },
      {
        name: "authorityId",
        type: "AuthorityId"
      }
    ],
    type: "Option<OpaqueKeyOwnershipProof>"
  },
  validator_set: {
    description: "Return the current active BEEFY validator set",
    params: [],
    type: "Option<ValidatorSet>"
  }
};
var BEEFY_V1_V3 = {
  ...BEEFY_V3,
  submit_report_equivocation_unsigned_extrinsic: {
    description: "Submits an unsigned extrinsic to report an equivocation.",
    params: [
      {
        name: "equivocationProof",
        type: "BeefyEquivocationProof"
      },
      {
        name: "keyOwnerProof",
        type: "OpaqueKeyOwnershipProof"
      }
    ],
    type: "Option<Null>"
  }
};
var BEEFY_V4 = {
  ...BEEFY_V3,
  submit_report_double_voting_unsigned_extrinsic: {
    description: "Submits an unsigned extrinsic to report a double voting equivocation.",
    params: [
      {
        name: "equivocationProof",
        type: "SpConsensusBeefyDoubleVotingProof"
      },
      {
        name: "keyOwnerProof",
        type: "OpaqueKeyOwnershipProof"
      }
    ],
    type: "Option<Null>"
  }
};
var BEEFY_MMR_V1 = {
  authority_set_proof: {
    description: "Return the currently active BEEFY authority set proof.",
    params: [],
    type: "BeefyAuthoritySet"
  },
  next_authority_set_proof: {
    description: "Return the next/queued BEEFY authority set proof.",
    params: [],
    type: "BeefyNextAuthoritySet"
  }
};
var runtime7 = {
  BeefyApi: [
    {
      methods: BEEFY_V4,
      version: 4
    },
    {
      methods: BEEFY_V1_V3,
      version: 3
    },
    {
      methods: BEEFY_V1_V3,
      version: 2
    },
    {
      methods: BEEFY_V1_V3,
      version: 1
    }
  ],
  BeefyMmrApi: [
    {
      methods: BEEFY_MMR_V1,
      version: 1
    }
  ]
};

// node_modules/@polkadot/types/interfaces/beefy/definitions.js
var definitions_default10 = {
  rpc: rpc2,
  runtime: runtime7,
  types: {
    BeefyAuthoritySet: {
      id: "u64",
      len: "u32",
      root: "H256"
    },
    BeefyCommitment: {
      payload: "BeefyPayload",
      blockNumber: "BlockNumber",
      validatorSetId: "ValidatorSetId"
    },
    BeefyId: "[u8; 33]",
    BeefyEquivocationProof: {
      first: "BeefyVoteMessage",
      second: "BeefyVoteMessage"
    },
    BeefyCompactSignedCommitment: {
      commitment: "BeefyCommitment",
      signaturesFrom: "Vec<u8>",
      validatorSetLen: "u32",
      signaturesCompact: "Vec<EcdsaSignature>"
    },
    BeefySignedCommitment: {
      commitment: "BeefyCommitment",
      signatures: "Vec<Option<EcdsaSignature>>"
    },
    BeefyVersionedFinalityProof: {
      _enum: {
        V0: "Null",
        V1: "BeefyCompactSignedCommitment"
      }
    },
    BeefyNextAuthoritySet: {
      id: "u64",
      len: "u32",
      root: "H256"
    },
    BeefyPayload: "Vec<(BeefyPayloadId, Bytes)>",
    BeefyPayloadId: "[u8;2]",
    BeefyVoteMessage: {
      commitment: "BeefyCommitment",
      id: "AuthorityId",
      signature: "Signature"
    },
    MmrRootHash: "H256",
    ValidatorSetId: "u64",
    ValidatorSet: {
      validators: "Vec<AuthorityId>",
      id: "ValidatorSetId"
    }
  }
};

// node_modules/@polkadot/types/interfaces/benchmark/runtime.js
var runtime8 = {
  Benchmark: [
    {
      methods: {
        benchmark_metadata: {
          description: "Get the benchmark metadata available for this runtime.",
          params: [
            {
              name: "extra",
              type: "bool"
            }
          ],
          type: "(Vec<BenchmarkList>, Vec<StorageInfo>)"
        },
        dispatch_benchmark: {
          description: "Dispatch the given benchmark.",
          params: [
            {
              name: "config",
              type: "BenchmarkConfig"
            }
          ],
          type: "Result<Vec<BenchmarkBatch>, Text>"
        }
      },
      version: 1
    }
  ]
};

// node_modules/@polkadot/types/interfaces/benchmark/definitions.js
var definitions_default11 = {
  rpc: {},
  runtime: runtime8,
  types: {
    BenchmarkBatch: {
      pallet: "Text",
      instance: "Text",
      benchmark: "Text",
      results: "Vec<BenchmarkResult>"
    },
    BenchmarkConfig: {
      pallet: "Bytes",
      benchmark: "Bytes",
      selectedComponents: "Vec<(BenchmarkParameter, u32)>",
      verify: "bool",
      internalRepeats: "u32"
    },
    BenchmarkList: {
      pallet: "Bytes",
      instance: "Bytes",
      benchmarks: "Vec<BenchmarkMetadata>"
    },
    BenchmarkMetadata: {
      name: "Bytes",
      components: "Vec<(BenchmarkParameter, u32, u32)>"
    },
    BenchmarkParameter: {
      _enum: ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]
    },
    BenchmarkResult: {
      components: "Vec<(BenchmarkParameter, u32)>",
      extrinsicTime: "u128",
      storageRootTime: "u128",
      reads: "u32",
      repeatReads: "u32",
      writes: "u32",
      repeatWrites: "u32",
      proofSize: "u32",
      benchKeys: "Vec<(Vec<u8>, u32, u32, bool)>"
    }
  }
};

// node_modules/@polkadot/types/interfaces/blockbuilder/runtime.js
var BB_V2_TO_V4 = {
  // this was removed after V4
  random_seed: {
    description: "Generate a random seed.",
    params: [],
    type: "Hash"
  }
};
var BB_V2_TO_V5 = {
  apply_extrinsic: {
    description: "Apply the given extrinsic.",
    params: [
      {
        name: "extrinsic",
        type: "Extrinsic"
      }
    ],
    type: "ApplyExtrinsicResultPre6"
  }
};
var BB_V2_TO_V6 = {
  check_inherents: {
    description: "Check that the inherents are valid.",
    params: [
      {
        name: "block",
        type: "Block"
      },
      {
        name: "data",
        type: "InherentData"
      }
    ],
    type: "CheckInherentsResult"
  },
  inherent_extrinsics: {
    description: "Generate inherent extrinsics.",
    params: [
      {
        name: "inherent",
        type: "InherentData"
      }
    ],
    type: "Vec<Extrinsic>"
  }
};
var BB_V3_TO_V6 = {
  // renamed in v3 from finalize_block
  finalize_block: {
    description: "Finish the current block.",
    params: [],
    type: "Header"
  }
};
var runtime9 = {
  BlockBuilder: [
    {
      methods: {
        apply_extrinsic: {
          description: "Apply the given extrinsic.",
          params: [
            {
              name: "extrinsic",
              type: "Extrinsic"
            }
          ],
          type: "ApplyExtrinsicResult"
        },
        ...BB_V2_TO_V6,
        ...BB_V3_TO_V6
      },
      version: 6
    },
    {
      methods: {
        // apply_extrinsic result changed in 6
        ...BB_V2_TO_V5,
        ...BB_V2_TO_V6,
        ...BB_V3_TO_V6
      },
      version: 5
    },
    {
      methods: {
        // random_seed removed
        ...BB_V2_TO_V4,
        ...BB_V2_TO_V5,
        ...BB_V2_TO_V6,
        ...BB_V3_TO_V6
      },
      version: 4
    },
    {
      methods: {
        // finalize_block renamed
        ...BB_V2_TO_V4,
        ...BB_V2_TO_V6,
        ...BB_V3_TO_V6
      },
      version: 3
    },
    {
      methods: {
        finalise_block: {
          description: "Finish the current block.",
          params: [],
          type: "Header"
        },
        ...BB_V2_TO_V4,
        ...BB_V2_TO_V6
      },
      version: 2
    }
  ]
};

// node_modules/@polkadot/types/interfaces/blockbuilder/definitions.js
var definitions_default12 = {
  rpc: {},
  runtime: runtime9,
  types: {
    CheckInherentsResult: {
      okay: "bool",
      fatalError: "bool",
      errors: "InherentData"
    },
    InherentData: {
      data: "BTreeMap<InherentIdentifier, Bytes>"
    },
    InherentIdentifier: "[u8; 8]"
  }
};

// node_modules/@polkadot/types/interfaces/collective/definitions.js
var definitions_default13 = {
  rpc: {},
  types: {
    CollectiveOrigin: {
      _enum: {
        Members: "(MemberCount, MemberCount)",
        Member: "AccountId"
      }
    },
    MemberCount: "u32",
    ProposalIndex: "u32",
    VotesTo230: {
      index: "ProposalIndex",
      threshold: "MemberCount",
      ayes: "Vec<AccountId>",
      nays: "Vec<AccountId>"
    },
    Votes: {
      index: "ProposalIndex",
      threshold: "MemberCount",
      ayes: "Vec<AccountId>",
      nays: "Vec<AccountId>",
      end: "BlockNumber"
    }
  }
};

// node_modules/@polkadot/types/interfaces/consensus/definitions.js
var definitions_default14 = {
  rpc: {},
  types: {
    AuthorityId: "AccountId",
    RawVRFOutput: "[u8; 32]"
  }
};

// node_modules/@polkadot/types/interfaces/contracts/rpc.js
var rpc3 = {
  call: {
    deprecated: "Use the runtime interface `api.call.contractsApi.call` instead",
    description: "Executes a call to a contract",
    params: [
      {
        name: "callRequest",
        type: "ContractCallRequest"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "ContractExecResult"
  },
  getStorage: {
    deprecated: "Use the runtime interface `api.call.contractsApi.getStorage` instead",
    description: "Returns the value under a specified storage key in a contract",
    params: [
      {
        name: "address",
        type: "AccountId"
      },
      {
        name: "key",
        type: "H256"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "Option<Bytes>"
  },
  instantiate: {
    deprecated: "Use the runtime interface `api.call.contractsApi.instantiate` instead",
    description: "Instantiate a new contract",
    params: [
      {
        name: "request",
        type: "InstantiateRequestV1"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "ContractInstantiateResult"
  },
  rentProjection: {
    deprecated: "Not available in newer versions of the contracts interfaces",
    description: "Returns the projected time a given contract will be able to sustain paying its rent",
    params: [
      {
        name: "address",
        type: "AccountId"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "Option<BlockNumber>"
  },
  uploadCode: {
    deprecated: "Use the runtime interface `api.call.contractsApi.uploadCode` instead",
    description: "Upload new code without instantiating a contract from it",
    // The RPC here is terribly misnamed - somebody forgot how the RPCs
    // are actually done, ie. <module>_<camelCasedMethod>
    endpoint: "contracts_upload_code",
    params: [
      {
        name: "uploadRequest",
        type: "CodeUploadRequest"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "CodeUploadResult"
  }
};

// node_modules/@polkadot/types/interfaces/contracts/runtime.js
var SHARED_V1_V2 = {
  get_storage: {
    description: "Query a given storage key in a given contract.",
    params: [
      {
        name: "address",
        type: "AccountId"
      },
      {
        name: "key",
        type: "Bytes"
      }
    ],
    type: "Option<Bytes>"
  },
  upload_code: {
    description: "Upload new code without instantiating a contract from it.",
    params: [
      {
        name: "origin",
        type: "AccountId"
      },
      {
        name: "code",
        type: "Bytes"
      },
      {
        name: "storageDepositLimit",
        type: "Option<Balance>"
      }
    ],
    type: "CodeUploadResult"
  }
};
var runtime10 = {
  ContractsApi: [
    {
      methods: {
        call: {
          description: "Perform a call from a specified account to a given contract.",
          params: [
            {
              name: "origin",
              type: "AccountId"
            },
            {
              name: "dest",
              type: "AccountId"
            },
            {
              name: "value",
              type: "Balance"
            },
            {
              name: "gasLimit",
              type: "Option<WeightV2>"
            },
            {
              name: "storageDepositLimit",
              type: "Option<Balance>"
            },
            {
              name: "inputData",
              type: "Vec<u8>"
            }
          ],
          type: "ContractExecResult"
        },
        instantiate: {
          description: "Instantiate a new contract.",
          params: [
            {
              name: "origin",
              type: "AccountId"
            },
            {
              name: "value",
              type: "Balance"
            },
            {
              name: "gasLimit",
              type: "Option<WeightV2>"
            },
            {
              name: "storageDepositLimit",
              type: "Option<Balance>"
            },
            {
              name: "code",
              type: "CodeSource"
            },
            {
              name: "data",
              type: "Bytes"
            },
            {
              name: "salt",
              type: "Bytes"
            }
          ],
          type: "ContractInstantiateResult"
        },
        ...SHARED_V1_V2
      },
      version: 2
    },
    {
      methods: {
        call: {
          description: "Perform a call from a specified account to a given contract.",
          params: [
            {
              name: "origin",
              type: "AccountId"
            },
            {
              name: "dest",
              type: "AccountId"
            },
            {
              name: "value",
              type: "Balance"
            },
            {
              name: "gasLimit",
              type: "u64"
            },
            {
              name: "storageDepositLimit",
              type: "Option<Balance>"
            },
            {
              name: "inputData",
              type: "Vec<u8>"
            }
          ],
          type: "ContractExecResultU64"
        },
        instantiate: {
          description: "Instantiate a new contract.",
          params: [
            {
              name: "origin",
              type: "AccountId"
            },
            {
              name: "value",
              type: "Balance"
            },
            {
              name: "gasLimit",
              type: "u64"
            },
            {
              name: "storageDepositLimit",
              type: "Option<Balance>"
            },
            {
              name: "code",
              type: "CodeSource"
            },
            {
              name: "data",
              type: "Bytes"
            },
            {
              name: "salt",
              type: "Bytes"
            }
          ],
          type: "ContractInstantiateResultU64"
        },
        ...SHARED_V1_V2
      },
      version: 1
    }
  ]
};

// node_modules/@polkadot/types/interfaces/contracts/definitions.js
var definitions_default15 = {
  rpc: rpc3,
  runtime: runtime10,
  types: {
    AliveContractInfo: {
      trieId: "TrieId",
      storageSize: "u32",
      pairCount: "u32",
      codeHash: "CodeHash",
      rentAllowance: "Balance",
      rentPaid: "Balance",
      deductBlock: "BlockNumber",
      lastWrite: "Option<BlockNumber>",
      _reserved: "Option<Null>"
    },
    CodeHash: "Hash",
    CodeSource: {
      _enum: {
        Upload: "Bytes",
        Existing: "Hash"
      }
    },
    CodeUploadRequest: {
      origin: "AccountId",
      code: "Bytes",
      storageDepositLimit: "Option<Balance>"
    },
    CodeUploadResult: "Result<CodeUploadResultValue, DispatchError>",
    CodeUploadResultValue: {
      codeHash: "CodeHash",
      deposit: "Balance"
    },
    ContractCallRequest: {
      origin: "AccountId",
      dest: "AccountId",
      value: "Balance",
      gasLimit: "u64",
      storageDepositLimit: "Option<Balance>",
      inputData: "Bytes"
    },
    ContractExecResultSuccessTo255: {
      status: "u8",
      data: "Raw"
    },
    ContractExecResultTo255: {
      _enum: {
        Success: "ContractExecResultSuccessTo255",
        Error: "Null"
      }
    },
    ContractExecResultSuccessTo260: {
      flags: "ContractReturnFlags",
      data: "Bytes",
      gasConsumed: "u64"
    },
    ContractExecResultTo260: {
      _enum: {
        Success: "ContractExecResultSuccessTo260",
        Error: "Null"
      }
    },
    ContractExecResultOk: {
      flags: "ContractReturnFlags",
      data: "Bytes"
    },
    ContractExecResultResult: "Result<ContractExecResultOk, DispatchError>",
    ContractExecResultTo267: {
      gasConsumed: "u64",
      debugMessage: "Text",
      result: "ContractExecResultResult"
    },
    ContractExecResult: {
      gasConsumed: "Weight",
      gasRequired: "Weight",
      storageDeposit: "StorageDeposit",
      debugMessage: "Text",
      result: "ContractExecResultResult"
    },
    ContractExecResultU64: {
      gasConsumed: "u64",
      gasRequired: "u64",
      storageDeposit: "StorageDeposit",
      debugMessage: "Text",
      result: "ContractExecResultResult"
    },
    ContractInfo: {
      _enum: {
        Alive: "AliveContractInfo",
        Tombstone: "TombstoneContractInfo"
      }
    },
    ContractCallFlags: {
      _set: {
        _bitLength: 32,
        ForwardInput: 1,
        CloneInput: 2,
        TailCall: 4,
        AllowReentry: 8
      }
    },
    ContractReturnFlags: {
      _set: {
        _bitLength: 32,
        Revert: 1
      }
    },
    ContractStorageKey: "[u8; 32]",
    DeletedContract: {
      pairCount: "u32",
      trieId: "TrieId"
    },
    ExecReturnValue: {
      flags: "ContractReturnFlags",
      data: "Bytes"
    },
    Gas: "u64",
    HostFnWeightsTo264: {
      caller: "Weight",
      address: "Weight",
      gasLeft: "Weight",
      balance: "Weight",
      valueTransferred: "Weight",
      minimumBalance: "Weight",
      tombstoneDeposit: "Weight",
      rentAllowance: "Weight",
      blockNumber: "Weight",
      now: "Weight",
      weightToFee: "Weight",
      gas: "Weight",
      input: "Weight",
      inputPerByte: "Weight",
      return: "Weight",
      returnPerByte: "Weight",
      terminate: "Weight",
      restoreTo: "Weight",
      restoreToPerDelta: "Weight",
      random: "Weight",
      depositEvent: "Weight",
      depositEventPerTopic: "Weight",
      depositEventPerByte: "Weight",
      setRentAllowance: "Weight",
      setStorage: "Weight",
      setStoragePerByte: "Weight",
      clearStorage: "Weight",
      getStorage: "Weight",
      getStoragePerByte: "Weight",
      transfer: "Weight",
      call: "Weight",
      callTransferSurcharge: "Weight",
      callPerInputByte: "Weight",
      callPerOutputByte: "Weight",
      instantiate: "Weight",
      instantiatePerInputByte: "Weight",
      instantiatePerOutputByte: "Weight",
      hashSha2256: "Weight",
      hashSha2256PerByte: "Weight",
      hashKeccak256: "Weight",
      hashKeccak256PerByte: "Weight",
      hashBlake2256: "Weight",
      hashBlake2256PerByte: "Weight",
      hashBlake2128: "Weight",
      hashBlake2128PerByte: "Weight"
    },
    HostFnWeights: {
      caller: "Weight",
      address: "Weight",
      gasLeft: "Weight",
      balance: "Weight",
      valueTransferred: "Weight",
      minimumBalance: "Weight",
      tombstoneDeposit: "Weight",
      rentAllowance: "Weight",
      blockNumber: "Weight",
      now: "Weight",
      weightToFee: "Weight",
      gas: "Weight",
      input: "Weight",
      inputPerByte: "Weight",
      return: "Weight",
      returnPerByte: "Weight",
      terminate: "Weight",
      terminatePerCodeByte: "Weight",
      restoreTo: "Weight",
      restoreToPerCallerCodeByte: "Weight",
      restoreToPerTombstoneCodeByte: "Weight",
      restoreToPerDelta: "Weight",
      random: "Weight",
      depositEvent: "Weight",
      depositEventPerTopic: "Weight",
      depositEventPerByte: "Weight",
      setRentAllowance: "Weight",
      setStorage: "Weight",
      setStoragePerByte: "Weight",
      clearStorage: "Weight",
      getStorage: "Weight",
      getStoragePerByte: "Weight",
      transfer: "Weight",
      call: "Weight",
      callPerCodeByte: "Weight",
      callTransferSurcharge: "Weight",
      callPerInputByte: "Weight",
      callPerOutputByte: "Weight",
      instantiate: "Weight",
      instantiatePerCodeByte: "Weight",
      instantiatePerInputByte: "Weight",
      instantiatePerOutputByte: "Weight",
      instantiatePerSaltByte: "Weight",
      hashSha2256: "Weight",
      hashSha2256PerByte: "Weight",
      hashKeccak256: "Weight",
      hashKeccak256PerByte: "Weight",
      hashBlake2256: "Weight",
      hashBlake2256PerByte: "Weight",
      hashBlake2128: "Weight",
      hashBlake2128PerByte: "Weight",
      rentParams: "Weight"
    },
    InstantiateRequestV1: {
      origin: "AccountId",
      value: "Balance",
      gasLimit: "Gas",
      code: "Bytes",
      data: "Bytes",
      salt: "Bytes"
    },
    InstantiateRequestV2: {
      _fallback: "InstantiateRequestV1",
      origin: "AccountId",
      value: "Balance",
      gasLimit: "Gas",
      storageDepositLimit: "Option<Balance>",
      code: "Bytes",
      data: "Bytes",
      salt: "Bytes"
    },
    InstantiateRequest: {
      _fallback: "InstantiateRequestV2",
      origin: "AccountId",
      value: "Balance",
      gasLimit: "Gas",
      storageDepositLimit: "Option<Balance>",
      code: "CodeSource",
      data: "Bytes",
      salt: "Bytes"
    },
    ContractInstantiateResultTo267: "Result<InstantiateReturnValueTo267, Null>",
    ContractInstantiateResultTo299: "Result<InstantiateReturnValueOk, Null>",
    ContractInstantiateResult: {
      gasConsumed: "WeightV2",
      gasRequired: "WeightV2",
      storageDeposit: "StorageDeposit",
      debugMessage: "Text",
      result: "InstantiateReturnValue"
    },
    ContractInstantiateResultU64: {
      // only this one can fail, the current version (above) _should_ be correctly
      // versioned now, aka no more deprecated RPCs involved, only runtime calls
      _fallback: "ContractInstantiateResultTo299",
      gasConsumed: "u64",
      gasRequired: "u64",
      storageDeposit: "StorageDeposit",
      debugMessage: "Text",
      result: "InstantiateReturnValue"
    },
    InstantiateReturnValueTo267: {
      result: "ExecReturnValue",
      accountId: "AccountId",
      rentProjection: "Option<RentProjection>"
    },
    InstantiateReturnValueOk: {
      result: "ExecReturnValue",
      accountId: "AccountId"
    },
    InstantiateReturnValue: "Result<InstantiateReturnValueOk, DispatchError>",
    InstructionWeights: {
      i64const: "u32",
      i64load: "u32",
      i64store: "u32",
      select: "u32",
      rIf: "u32",
      br: "u32",
      brIf: "u32",
      brIable: "u32",
      brIablePerEntry: "u32",
      call: "u32",
      callIndirect: "u32",
      callIndirectPerParam: "u32",
      localGet: "u32",
      localSet: "u32",
      local_tee: "u32",
      globalGet: "u32",
      globalSet: "u32",
      memoryCurrent: "u32",
      memoryGrow: "u32",
      i64clz: "u32",
      i64ctz: "u32",
      i64popcnt: "u32",
      i64eqz: "u32",
      i64extendsi32: "u32",
      i64extendui32: "u32",
      i32wrapi64: "u32",
      i64eq: "u32",
      i64ne: "u32",
      i64lts: "u32",
      i64ltu: "u32",
      i64gts: "u32",
      i64gtu: "u32",
      i64les: "u32",
      i64leu: "u32",
      i64ges: "u32",
      i64geu: "u32",
      i64add: "u32",
      i64sub: "u32",
      i64mul: "u32",
      i64divs: "u32",
      i64divu: "u32",
      i64rems: "u32",
      i64remu: "u32",
      i64and: "u32",
      i64or: "u32",
      i64xor: "u32",
      i64shl: "u32",
      i64shrs: "u32",
      i64shru: "u32",
      i64rotl: "u32",
      i64rotr: "u32"
    },
    LimitsTo264: {
      eventTopics: "u32",
      stackHeight: "u32",
      globals: "u32",
      parameters: "u32",
      memoryPages: "u32",
      tableSize: "u32",
      brTableSize: "u32",
      subjectLen: "u32",
      codeSize: "u32"
    },
    Limits: {
      eventTopics: "u32",
      stackHeight: "u32",
      globals: "u32",
      parameters: "u32",
      memoryPages: "u32",
      tableSize: "u32",
      brTableSize: "u32",
      subjectLen: "u32"
    },
    PrefabWasmModule: {
      scheduleVersion: "Compact<u32>",
      initial: "Compact<u32>",
      maximum: "Compact<u32>",
      refcount: "Compact<u64>",
      _reserved: "Option<Null>",
      code: "Bytes",
      originalCodeLen: "u32"
    },
    RentProjection: {
      _enum: {
        EvictionAt: "BlockNumber",
        NoEviction: "Null"
      }
    },
    ScheduleTo212: {
      version: "u32",
      putCodePerByteCost: "Gas",
      growMemCost: "Gas",
      regularOpCost: "Gas",
      returnDataPerByteCost: "Gas",
      eventDataPerByteCost: "Gas",
      eventPerTopicCost: "Gas",
      eventBaseCost: "Gas",
      sandboxDataReadCost: "Gas",
      sandboxDataWriteCost: "Gas",
      maxEventTopics: "u32",
      maxStackHeight: "u32",
      maxMemoryPages: "u32",
      enablePrintln: "bool",
      maxSubjectLen: "u32"
    },
    ScheduleTo258: {
      version: "u32",
      putCodePerByteCost: "Gas",
      growMemCost: "Gas",
      regularOpCost: "Gas",
      returnDataPerByteCost: "Gas",
      eventDataPerByteCost: "Gas",
      eventPerTopicCost: "Gas",
      eventBaseCost: "Gas",
      sandboxDataReadCost: "Gas",
      sandboxDataWriteCost: "Gas",
      transferCost: "Gas",
      maxEventTopics: "u32",
      maxStackHeight: "u32",
      maxMemoryPages: "u32",
      enablePrintln: "bool",
      maxSubjectLen: "u32"
    },
    ScheduleTo264: {
      version: "u32",
      enablePrintln: "bool",
      limits: "LimitsTo264",
      instructionWeights: "InstructionWeights",
      hostFnWeights: "HostFnWeightsTo264"
    },
    Schedule: {
      version: "u32",
      enablePrintln: "bool",
      limits: "Limits",
      instructionWeights: "InstructionWeights",
      hostFnWeights: "HostFnWeights"
    },
    SeedOf: "Hash",
    StorageDeposit: {
      _enum: {
        Refund: "Balance",
        Charge: "Balance"
      }
    },
    TombstoneContractInfo: "Hash",
    TrieId: "Bytes"
  }
};

// node_modules/@polkadot/types/interfaces/democracy/definitions.js
var AllConvictions = [
  // 0.1x votes, unlocked.
  "None",
  // 1x votes, locked for an enactment period following a successful vote.
  "Locked1x",
  // 2x votes, locked for 2x enactment periods following a successful vote.
  "Locked2x",
  // 3x votes, locked for 4x...
  "Locked3x",
  // 4x votes, locked for 8x...
  "Locked4x",
  // 5x votes, locked for 16x...
  "Locked5x",
  // 6x votes, locked for 32x...
  "Locked6x"
];
var definitions_default16 = {
  rpc: {},
  types: {
    AccountVote: {
      _enum: {
        Standard: "AccountVoteStandard",
        Split: "AccountVoteSplit"
      }
    },
    AccountVoteSplit: {
      aye: "Balance",
      nay: "Balance"
    },
    AccountVoteStandard: {
      vote: "Vote",
      balance: "Balance"
    },
    Conviction: {
      _enum: AllConvictions
    },
    Delegations: {
      votes: "Balance",
      capital: "Balance"
    },
    PreimageStatus: {
      _enum: {
        Missing: "BlockNumber",
        Available: "PreimageStatusAvailable"
      }
    },
    PreimageStatusAvailable: {
      data: "Bytes",
      provider: "AccountId",
      deposit: "Balance",
      since: "BlockNumber",
      expiry: "Option<BlockNumber>"
    },
    PriorLock: "(BlockNumber, Balance)",
    PropIndex: "u32",
    Proposal: "Call",
    ProxyState: {
      _enum: {
        Open: "AccountId",
        Active: "AccountId"
      }
    },
    ReferendumIndex: "u32",
    ReferendumInfoTo239: {
      end: "BlockNumber",
      proposalHash: "Hash",
      threshold: "VoteThreshold",
      delay: "BlockNumber"
    },
    ReferendumInfo: {
      _enum: {
        Ongoing: "ReferendumStatus",
        Finished: "ReferendumInfoFinished"
      }
    },
    ReferendumInfoFinished: {
      approved: "bool",
      end: "BlockNumber"
    },
    ReferendumStatus: {
      end: "BlockNumber",
      proposalHash: "Hash",
      threshold: "VoteThreshold",
      delay: "BlockNumber",
      tally: "Tally"
    },
    Tally: {
      ayes: "Balance",
      nays: "Balance",
      turnout: "Balance"
    },
    Voting: {
      _enum: {
        Direct: "VotingDirect",
        Delegating: "VotingDelegating"
      }
    },
    VotingDirect: {
      votes: "Vec<VotingDirectVote>",
      delegations: "Delegations",
      prior: "PriorLock"
    },
    VotingDirectVote: "(ReferendumIndex, AccountVote)",
    VotingDelegating: {
      balance: "Balance",
      target: "AccountId",
      conviction: "Conviction",
      delegations: "Delegations",
      prior: "PriorLock"
    }
  }
};

// node_modules/@polkadot/types/interfaces/dev/rpc.js
var rpc4 = {
  getBlockStats: {
    description: "Reexecute the specified `block_hash` and gather statistics while doing so",
    isUnsafe: true,
    params: [
      {
        isHistoric: true,
        name: "at",
        type: "Hash"
      }
    ],
    type: "Option<BlockStats>"
  }
};

// node_modules/@polkadot/types/interfaces/dev/definitions.js
var definitions_default17 = {
  rpc: rpc4,
  types: {
    BlockStats: {
      witnessLen: "u64",
      witnessCompactLen: "u64",
      blockLen: "u64",
      blockNumExtrinsics: "u64"
    }
  }
};

// node_modules/@polkadot/types/interfaces/discovery/runtime.js
var runtime11 = {
  AuthorityDiscoveryApi: [
    {
      methods: {
        authorities: {
          description: "Retrieve authority identifiers of the current and next authority set.",
          params: [],
          type: "Vec<AuthorityId>"
        }
      },
      version: 1
    }
  ]
};

// node_modules/@polkadot/types/interfaces/discovery/definitions.js
var definitions_default18 = {
  rpc: {},
  runtime: runtime11,
  types: {}
};

// node_modules/@polkadot/types/interfaces/elections/definitions.js
var definitions_default19 = {
  rpc: {},
  types: {
    ApprovalFlag: "u32",
    DefunctVoter: {
      who: "AccountId",
      voteCount: "Compact<u32>",
      candidateCount: "Compact<u32>"
    },
    Renouncing: {
      _enum: {
        Member: "Null",
        RunnerUp: "Null",
        Candidate: "Compact<u32>"
      }
    },
    SetIndex: "u32",
    Vote: "GenericVote",
    VoteIndex: "u32",
    VoterInfo: {
      lastActive: "VoteIndex",
      lastWin: "VoteIndex",
      pot: "Balance",
      stake: "Balance"
    },
    VoteThreshold: {
      _enum: [
        "Super Majority Approve",
        "Super Majority Against",
        "Simple Majority"
      ]
    }
  }
};

// node_modules/@polkadot/types/interfaces/engine/rpc.js
var rpc5 = {
  createBlock: {
    description: "Instructs the manual-seal authorship task to create a new block",
    params: [
      {
        name: "createEmpty",
        type: "bool"
      },
      {
        name: "finalize",
        type: "bool"
      },
      {
        isOptional: true,
        name: "parentHash",
        type: "BlockHash"
      }
    ],
    type: "CreatedBlock"
  },
  finalizeBlock: {
    description: "Instructs the manual-seal authorship task to finalize a block",
    params: [
      {
        name: "hash",
        type: "BlockHash"
      },
      {
        isOptional: true,
        name: "justification",
        type: "Justification"
      }
    ],
    type: "bool"
  }
};

// node_modules/@polkadot/types/interfaces/engine/definitions.js
var definitions_default20 = {
  rpc: rpc5,
  types: {
    CreatedBlock: {
      _alias: {
        blockHash: "hash"
      },
      blockHash: "BlockHash",
      aux: "ImportedAux"
    },
    ImportedAux: {
      headerOnly: "bool",
      clearJustificationRequests: "bool",
      needsJustification: "bool",
      badJustification: "bool",
      needsFinalityProof: "bool",
      isNewBest: "bool"
    }
  }
};

// node_modules/@polkadot/types/interfaces/evm/definitions.js
var definitions_default21 = {
  rpc: {},
  types: {
    EvmAccount: {
      nonce: "u256",
      balance: "u256"
    },
    EvmCallInfo: {
      exitReason: "ExitReason",
      value: "Bytes",
      usedGas: "U256",
      logs: "Vec<EvmLog>"
    },
    EvmCreateInfo: {
      exitReason: "ExitReason",
      value: "H160",
      usedGas: "U256",
      logs: "Vec<EvmLog>"
    },
    EvmCallInfoV2: {
      exitReason: "ExitReason",
      value: "Bytes",
      usedGas: "U256",
      weightInfo: "Option<EvmWeightInfo>",
      logs: "Vec<EvmLog>"
    },
    EvmCreateInfoV2: {
      exitReason: "ExitReason",
      value: "H160",
      usedGas: "U256",
      weightInfo: "Option<EvmWeightInfo>",
      logs: "Vec<EvmLog>"
    },
    EvmLog: {
      address: "H160",
      topics: "Vec<H256>",
      data: "Bytes"
    },
    EvmVicinity: {
      gasPrice: "u256",
      origin: "H160"
    },
    EvmWeightInfo: {
      refTimeLimit: "Option<u64>",
      proofSizeLimit: "Option<u64>",
      refTimeUsage: "Option<u64>",
      proofSizeUsage: "Option<u64>"
    },
    ExitError: {
      _enum: {
        StackUnderflow: "Null",
        StackOverflow: "Null",
        InvalidJump: "Null",
        InvalidRange: "Null",
        DesignatedInvalid: "Null",
        CallTooDeep: "Null",
        CreateCollision: "Null",
        CreateContractLimit: "Null",
        OutOfOffset: "Null",
        OutOfGas: "Null",
        OutOfFund: "Null",
        PCUnderflow: "Null",
        CreateEmpty: "Null",
        Other: "Text"
      }
    },
    ExitFatal: {
      _enum: {
        NotSupported: "Null",
        UnhandledInterrupt: "Null",
        CallErrorAsFatal: "ExitError",
        Other: "Text"
      }
    },
    ExitReason: {
      _enum: {
        Succeed: "ExitSucceed",
        Error: "ExitError",
        Revert: "ExitRevert",
        Fatal: "ExitFatal"
      }
    },
    ExitRevert: {
      _enum: ["Reverted"]
    },
    ExitSucceed: {
      _enum: ["Stopped", "Returned", "Suicided"]
    }
  }
};

// node_modules/@polkadot/types/interfaces/extrinsics/definitions.js
var definitions_default22 = {
  rpc: {},
  types: {
    Extrinsic: "GenericExtrinsic",
    ExtrinsicEra: "GenericExtrinsicEra",
    ExtrinsicPayload: "GenericExtrinsicPayload",
    ExtrinsicSignature: "MultiSignature",
    ExtrinsicV4: "GenericExtrinsicV4",
    ExtrinsicPayloadV4: "GenericExtrinsicPayloadV4",
    ExtrinsicSignatureV4: "GenericExtrinsicSignatureV4",
    ExtrinsicUnknown: "GenericExtrinsicUnknown",
    ExtrinsicPayloadUnknown: "GenericExtrinsicPayloadUnknown",
    ExtrinsicV5: "GenericExtrinsicV5",
    ExtrinsicPayloadV5: "GenericExtrinsicPayloadV5",
    ExtrinsicSignatureV5: "GenericExtrinsicSignatureV5",
    // eras
    Era: "ExtrinsicEra",
    ImmortalEra: "GenericImmortalEra",
    MortalEra: "GenericMortalEra",
    // signatures & signer
    AnySignature: "H512",
    MultiSignature: {
      _enum: {
        Ed25519: "Ed25519Signature",
        Sr25519: "Sr25519Signature",
        Ecdsa: "EcdsaSignature"
      }
    },
    Signature: "H512",
    SignerPayload: "GenericSignerPayload",
    EcdsaSignature: "[u8; 65]",
    Ed25519Signature: "H512",
    Sr25519Signature: "H512"
  }
};

// node_modules/@polkadot/types/interfaces/fungibles/runtime.js
var runtime12 = {
  FungiblesApi: [
    {
      methods: {
        query_account_balances: {
          description: "Returns the list of all `MultiAsset` that an `AccountId` has",
          params: [
            {
              name: "account",
              type: "AccountId"
            }
          ],
          type: "Result<Vec<XcmV3MultiAsset>, FungiblesAccessError>"
        }
      },
      version: 1
    },
    {
      methods: {
        query_account_balances: {
          description: "Returns the list of all `MultiAsset` that an `AccountId` has",
          params: [
            {
              name: "account",
              type: "AccountId"
            }
          ],
          type: "Result<XcmVersionedAssets, FungiblesAccessError>"
        }
      },
      version: 2
    }
  ]
};

// node_modules/@polkadot/types/interfaces/fungibles/definitions.js
var definitions_default23 = {
  rpc: {},
  runtime: runtime12,
  types: {
    FungiblesAccessError: {
      _enum: ["AssetIdConversionFailed", "AmountToBalanceConversionFailed"]
    }
  }
};

// node_modules/@polkadot/types/interfaces/genericAsset/definitions.js
var definitions_default24 = {
  rpc: {},
  types: {
    AssetOptions: {
      initalIssuance: "Compact<Balance>",
      permissions: "PermissionLatest"
    },
    Owner: {
      _enum: {
        None: "Null",
        Address: "AccountId"
      }
    },
    PermissionsV1: {
      update: "Owner",
      mint: "Owner",
      burn: "Owner"
    },
    PermissionVersions: {
      _enum: {
        V1: "PermissionsV1"
      }
    },
    PermissionLatest: "PermissionsV1"
  }
};

// node_modules/@polkadot/types/interfaces/genesisBuilder/runtime.js
var runtime13 = {
  GenesisBuilder: [
    {
      methods: {
        build_config: {
          description: "Build `RuntimeGenesisConfig` from a JSON blob not using any defaults and store it in the storage.",
          params: [
            {
              name: "json",
              type: "Vec<u8>"
            }
          ],
          type: "Result<(), GenesisBuildErr>"
        },
        create_default_config: {
          description: "Creates the default `RuntimeGenesisConfig` and returns it as a JSON blob.",
          params: [],
          type: "Vec<u8>"
        }
      },
      version: 1
    }
  ]
};

// node_modules/@polkadot/types/interfaces/genesisBuilder/definitions.js
var definitions_default25 = {
  rpc: {},
  runtime: runtime13,
  types: {
    GenesisBuildErr: "Text"
  }
};

// node_modules/@polkadot/types/interfaces/gilt/definitions.js
var definitions_default26 = {
  rpc: {},
  types: {
    ActiveGilt: {
      proportion: "Perquintill",
      amount: "Balance",
      who: "AccountId",
      expiry: "BlockNumber"
    },
    ActiveGiltsTotal: {
      frozen: "Balance",
      proportion: "Perquintill",
      index: "ActiveIndex",
      target: "Perquintill"
    },
    ActiveIndex: "u32",
    GiltBid: {
      amount: "Balance",
      who: "AccountId"
    }
  }
};

// node_modules/@polkadot/types/interfaces/grandpa/rpc.js
var rpc6 = {
  proveFinality: {
    description: "Prove finality for the given block number, returning the Justification for the last block in the set.",
    params: [
      {
        name: "blockNumber",
        type: "BlockNumber"
      }
    ],
    type: "Option<EncodedFinalityProofs>"
  },
  roundState: {
    description: "Returns the state of the current best round state as well as the ongoing background rounds",
    params: [],
    type: "ReportedRoundStates"
  },
  subscribeJustifications: {
    description: "Subscribes to grandpa justifications",
    params: [],
    pubsub: [
      "justifications",
      "subscribeJustifications",
      "unsubscribeJustifications"
    ],
    type: "JustificationNotification"
  }
};

// node_modules/@polkadot/types/interfaces/grandpa/runtime.js
var GRANDPA_V2_V3 = {
  generate_key_ownership_proof: {
    description: "Generates a proof of key ownership for the given authority in the given set.",
    params: [
      {
        name: "setId",
        type: "SetId"
      },
      {
        name: "authorityId",
        type: "AuthorityId"
      }
    ],
    type: "Option<OpaqueKeyOwnershipProof>"
  },
  grandpa_authorities: {
    description: "Get the current GRANDPA authorities and weights. This should not change except for when changes are scheduled and the corresponding delay has passed.",
    params: [],
    type: "AuthorityList"
  },
  submit_report_equivocation_unsigned_extrinsic: {
    description: "Submits an unsigned extrinsic to report an equivocation.",
    params: [
      {
        name: "equivocationProof",
        type: "GrandpaEquivocationProof"
      },
      {
        name: "keyOwnerProof",
        type: "OpaqueKeyOwnershipProof"
      }
    ],
    type: "Option<Null>"
  }
};
var runtime14 = {
  GrandpaApi: [
    {
      methods: {
        current_set_id: {
          description: "Get current GRANDPA authority set id.",
          params: [],
          type: "SetId"
        },
        ...GRANDPA_V2_V3
      },
      version: 3
    },
    {
      methods: GRANDPA_V2_V3,
      version: 2
    }
  ]
};

// node_modules/@polkadot/types/interfaces/grandpa/definitions.js
var definitions_default27 = {
  rpc: rpc6,
  runtime: runtime14,
  types: {
    AuthorityIndex: "u64",
    AuthorityList: "Vec<NextAuthority>",
    AuthoritySet: {
      currentAuthorities: "AuthorityList",
      setId: "u64",
      pendingStandardChanges: "ForkTreePendingChange",
      pendingForcedChanges: "Vec<PendingChange>",
      authoritySetChanges: "AuthoritySetChanges"
    },
    ForkTreePendingChange: {
      roots: "Vec<ForkTreePendingChangeNode>",
      bestFinalizedNumber: "Option<BlockNumber>"
    },
    ForkTreePendingChangeNode: {
      hash: "BlockHash",
      number: "BlockNumber",
      data: "PendingChange",
      // actual data, here PendingChange
      children: "Vec<ForkTreePendingChangeNode>"
    },
    AuthoritySetChange: "(U64, BlockNumber)",
    AuthoritySetChanges: "Vec<AuthoritySetChange>",
    AuthorityWeight: "u64",
    DelayKind: {
      _enum: {
        Finalized: "Null",
        Best: "DelayKindBest"
      }
    },
    DelayKindBest: {
      medianLastFinalized: "BlockNumber"
    },
    EncodedFinalityProofs: "Bytes",
    GrandpaEquivocation: {
      _enum: {
        Prevote: "GrandpaEquivocationValue",
        Precommit: "GrandpaEquivocationValue"
      }
    },
    GrandpaEquivocationProof: {
      setId: "SetId",
      equivocation: "GrandpaEquivocation"
    },
    GrandpaEquivocationValue: {
      roundNumber: "u64",
      identity: "AuthorityId",
      first: "(GrandpaPrevote, AuthoritySignature)",
      second: "(GrandpaPrevote, AuthoritySignature)"
    },
    GrandpaPrevote: {
      targetHash: "Hash",
      targetNumber: "BlockNumber"
    },
    GrandpaCommit: {
      targetHash: "BlockHash",
      targetNumber: "BlockNumber",
      precommits: "Vec<GrandpaSignedPrecommit>"
    },
    GrandpaPrecommit: {
      targetHash: "BlockHash",
      targetNumber: "BlockNumber"
    },
    GrandpaSignedPrecommit: {
      precommit: "GrandpaPrecommit",
      signature: "AuthoritySignature",
      id: "AuthorityId"
    },
    GrandpaJustification: {
      round: "u64",
      commit: "GrandpaCommit",
      votesAncestries: "Vec<Header>"
    },
    JustificationNotification: "Bytes",
    KeyOwnerProof: "MembershipProof",
    NextAuthority: "(AuthorityId, AuthorityWeight)",
    PendingChange: {
      nextAuthorities: "AuthorityList",
      delay: "BlockNumber",
      canonHeight: "BlockNumber",
      canonHash: "BlockHash",
      delayKind: "DelayKind"
    },
    PendingPause: {
      scheduledAt: "BlockNumber",
      delay: "BlockNumber"
    },
    PendingResume: {
      scheduledAt: "BlockNumber",
      delay: "BlockNumber"
    },
    Precommits: {
      currentWeight: "u32",
      missing: "BTreeSet<AuthorityId>"
    },
    Prevotes: {
      currentWeight: "u32",
      missing: "BTreeSet<AuthorityId>"
    },
    ReportedRoundStates: {
      setId: "u32",
      best: "RoundState",
      background: "Vec<RoundState>"
    },
    RoundState: {
      round: "u32",
      totalWeight: "u32",
      thresholdWeight: "u32",
      prevotes: "Prevotes",
      precommits: "Precommits"
    },
    SetId: "u64",
    StoredPendingChange: {
      scheduledAt: "BlockNumber",
      delay: "BlockNumber",
      nextAuthorities: "AuthorityList"
    },
    StoredState: {
      _enum: {
        Live: "Null",
        PendingPause: "PendingPause",
        Paused: "Null",
        PendingResume: "PendingResume"
      }
    }
  }
};

// node_modules/@polkadot/types/interfaces/identity/definitions.js
var definitions_default28 = {
  rpc: {},
  types: {
    IdentityFields: {
      _set: {
        _bitLength: 64,
        // Mapped here to 32 bits, in Rust these are 64-bit values
        Display: 1,
        Legal: 2,
        Web: 4,
        Riot: 8,
        Email: 16,
        PgpFingerprint: 32,
        Image: 64,
        Twitter: 128
      }
    },
    IdentityInfoAdditional: "(Data, Data)",
    IdentityInfoTo198: {
      additional: "Vec<IdentityInfoAdditional>",
      display: "Data",
      legal: "Data",
      web: "Data",
      riot: "Data",
      email: "Data",
      pgpFingerprint: "Option<H160>",
      image: "Data"
    },
    IdentityInfo: {
      _fallback: "IdentityInfoTo198",
      additional: "Vec<IdentityInfoAdditional>",
      display: "Data",
      legal: "Data",
      web: "Data",
      riot: "Data",
      email: "Data",
      pgpFingerprint: "Option<H160>",
      image: "Data",
      twitter: "Data"
    },
    IdentityJudgement: {
      _enum: {
        Unknown: "Null",
        FeePaid: "Balance",
        Reasonable: "Null",
        KnownGood: "Null",
        OutOfDate: "Null",
        LowQuality: "Null",
        Erroneous: "Null"
      }
    },
    RegistrationJudgement: "(RegistrarIndex, IdentityJudgement)",
    RegistrationTo198: {
      judgements: "Vec<RegistrationJudgement>",
      deposit: "Balance",
      info: "IdentityInfoTo198"
    },
    Registration: {
      _fallback: "RegistrationTo198",
      judgements: "Vec<RegistrationJudgement>",
      deposit: "Balance",
      info: "IdentityInfo"
    },
    RegistrarIndex: "u32",
    RegistrarInfo: {
      account: "AccountId",
      fee: "Balance",
      fields: "IdentityFields"
    }
  }
};

// node_modules/@polkadot/types/interfaces/imOnline/definitions.js
var definitions_default29 = {
  rpc: {},
  types: {
    AuthIndex: "u32",
    AuthoritySignature: "Signature",
    Heartbeat: {
      blockNumber: "BlockNumber",
      networkState: "OpaqueNetworkState",
      sessionIndex: "SessionIndex",
      authorityIndex: "AuthIndex",
      validatorsLen: "u32"
    },
    HeartbeatTo244: {
      blockNumber: "BlockNumber",
      networkState: "OpaqueNetworkState",
      sessionIndex: "SessionIndex",
      authorityIndex: "AuthIndex"
    },
    OpaqueMultiaddr: "Opaque<Bytes>",
    OpaquePeerId: "Opaque<Bytes>",
    OpaqueNetworkState: {
      peerId: "OpaquePeerId",
      externalAddresses: "Vec<OpaqueMultiaddr>"
    }
  }
};

// node_modules/@polkadot/types/interfaces/lottery/definitions.js
var definitions_default30 = {
  rpc: {},
  types: {
    CallIndex: "(u8, u8)",
    LotteryConfig: {
      price: "Balance",
      start: "BlockNumber",
      length: "BlockNumber",
      delay: "BlockNumber",
      repeat: "bool"
    }
  }
};

// node_modules/@polkadot/types/interfaces/mixnet/runtime.js
var runtime15 = {
  MixnetApi: [
    {
      methods: {
        current_mixnodes: {
          description: "Get the index and phase of the current session.",
          params: [],
          type: "Result<Mixnode, MixnodesErr>"
        },
        maybe_register: {
          description: "Try to register a mixnode for the next session.",
          params: [
            {
              name: "session_index",
              type: "u32"
            },
            {
              name: "mixnode",
              type: "Mixnode"
            }
          ],
          type: "bool"
        },
        prev_mixnodes: {
          description: "Get the index and phase of the current session.",
          params: [],
          type: "Result<Mixnode, MixnodesErr>"
        },
        session_status: {
          description: "Get the index and phase of the current session.",
          params: [],
          type: "SessionStatus"
        }
      },
      version: 1
    }
  ]
};

// node_modules/@polkadot/types/interfaces/mixnet/definitions.js
var definitions_default31 = {
  rpc: {},
  runtime: runtime15,
  types: {
    Mixnode: {
      externalAddresses: "Vec<Bytes>",
      kxPublic: "[u8; 32]",
      peerId: "[u8; 32]"
    },
    MixnodesErr: {
      _enum: {
        InsufficientRegistrations: {
          min: "u32",
          num: "u32"
        }
      }
    },
    SessionPhase: {
      _enum: ["CoverToCurrent", "RequestsToCurrent", "CoverToPrev", "DisconnectFromPrev"]
    },
    SessionStatus: {
      currentIndex: "u32",
      phase: "SessionPhase"
    }
  }
};

// node_modules/@polkadot/types/interfaces/mmr/rpc.js
var rpc7 = {
  generateProof: {
    description: "Generate MMR proof for the given block numbers.",
    params: [
      {
        name: "blockNumbers",
        type: "Vec<u64>"
      },
      {
        isOptional: true,
        name: "bestKnownBlockNumber",
        type: "u64"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "MmrLeafBatchProof"
  },
  root: {
    description: "Get the MMR root hash for the current best block.",
    params: [
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "MmrHash"
  },
  verifyProof: {
    description: "Verify an MMR proof",
    params: [
      {
        name: "proof",
        type: "MmrLeafBatchProof"
      }
    ],
    type: "bool"
  },
  verifyProofStateless: {
    description: "Verify an MMR proof statelessly given an mmr_root",
    params: [
      {
        name: "root",
        type: "MmrHash"
      },
      {
        name: "proof",
        type: "MmrLeafBatchProof"
      }
    ],
    type: "bool"
  }
};

// node_modules/@polkadot/types/interfaces/mmr/runtime.js
var MMR_V2 = {
  generate_proof: {
    description: "Generate MMR proof for the given block numbers.",
    params: [
      {
        name: "blockNumbers",
        type: "Vec<BlockNumber>"
      },
      {
        name: "bestKnownBlockNumber",
        type: "Option<BlockNumber>"
      }
    ],
    type: "Result<(Vec<MmrEncodableOpaqueLeaf>, MmrBatchProof), MmrError>"
  },
  mmr_leaf_count: {
    description: "Return the number of MMR blocks in the chain.",
    params: [],
    type: "Result<U64, MmrError>"
  },
  mmr_root: {
    description: "Return the on-chain MMR root hash.",
    params: [],
    type: "Result<Hash, MmrError>"
  },
  verify_proof: {
    description: "Verify MMR proof against on-chain MMR.",
    params: [
      {
        name: "leaves",
        type: "Vec<MmrEncodableOpaqueLeaf>"
      },
      {
        name: "proof",
        type: "MmrBatchProof"
      }
    ],
    type: "Result<(), MmrError>"
  },
  verify_proof_stateless: {
    description: "Verify MMR proof against given root hash.",
    params: [
      {
        name: "root",
        type: "Hash"
      },
      {
        name: "leaves",
        type: "Vec<MmrEncodableOpaqueLeaf>"
      },
      {
        name: "proof",
        type: "MmrBatchProof"
      }
    ],
    type: "Result<(), MmrError>"
  }
};
var MMR_V1 = {
  generate_batch_proof: {
    description: "Generate MMR proof for a series of leaves under given indices.",
    params: [
      {
        name: "leafIndices",
        type: "Vec<MmrLeafIndex>"
      }
    ],
    type: "Result<(Vec<MmrEncodableOpaqueLeaf>, MmrBatchProof), MmrError>"
  },
  generate_proof: {
    description: "Generate MMR proof for a leaf under given index.",
    params: [
      {
        name: "leafIndex",
        type: "MmrLeafIndex"
      }
    ],
    type: "Result<(MmrEncodableOpaqueLeaf, MmrProof), MmrError>"
  },
  mmr_root: {
    description: "Return the on-chain MMR root hash.",
    params: [],
    type: "Result<Hash, MmrError>"
  },
  verify_batch_proof: {
    description: "Verify MMR proof against on-chain MMR for a batch of leaves.",
    params: [
      {
        name: "leaves",
        type: "Vec<MmrEncodableOpaqueLeaf>"
      },
      {
        name: "proof",
        type: "MmrBatchProof"
      }
    ],
    type: "Result<(), MmrError>"
  },
  verify_batch_proof_stateless: {
    description: "Verify MMR proof against given root hash or a batch of leaves.",
    params: [
      {
        name: "root",
        type: "Hash"
      },
      {
        name: "leaves",
        type: "Vec<MmrEncodableOpaqueLeaf>"
      },
      {
        name: "proof",
        type: "MmrBatchProof"
      }
    ],
    type: "Result<(), MmrError>"
  },
  verify_proof: {
    description: "Verify MMR proof against on-chain MMR.",
    params: [
      {
        name: "leaf",
        type: "MmrEncodableOpaqueLeaf"
      },
      {
        name: "proof",
        type: "MmrProof"
      }
    ],
    type: "Result<(), MmrError>"
  },
  verify_proof_stateless: {
    description: "Verify MMR proof against given root hash.",
    params: [
      {
        name: "root",
        type: "Hash"
      },
      {
        name: "leaf",
        type: "MmrEncodableOpaqueLeaf"
      },
      {
        name: "proof",
        type: "MmrProof"
      }
    ],
    type: "Result<(), MmrError>"
  }
};
var runtime16 = {
  MmrApi: [
    {
      methods: MMR_V2,
      version: 2
    },
    {
      methods: MMR_V1,
      version: 1
    }
  ]
};

// node_modules/@polkadot/types/interfaces/mmr/definitions.js
var definitions_default32 = {
  rpc: rpc7,
  runtime: runtime16,
  types: {
    MmrBatchProof: {
      leafIndices: "Vec<MmrLeafIndex>",
      leafCount: "MmrNodeIndex",
      items: "Vec<Hash>"
    },
    MmrEncodableOpaqueLeaf: "Bytes",
    MmrError: {
      _enum: ["InvalidNumericOp", "Push", "GetRoot", "Commit", "GenerateProof", "Verify", "LeafNotFound", " PalletNotIncluded", "InvalidLeafIndex", "InvalidBestKnownBlock"]
    },
    MmrHash: "Hash",
    MmrLeafBatchProof: {
      blockHash: "BlockHash",
      leaves: "Bytes",
      proof: "Bytes"
    },
    MmrLeafIndex: "u64",
    MmrLeafProof: {
      blockHash: "BlockHash",
      leaf: "Bytes",
      proof: "Bytes"
    },
    MmrNodeIndex: "u64",
    MmrProof: {
      leafIndex: "MmrLeafIndex",
      leafCount: "MmrNodeIndex",
      items: "Vec<Hash>"
    }
  }
};

// node_modules/@polkadot/types/interfaces/nfts/runtime.js
var runtime17 = {
  NftsApi: [
    {
      methods: {
        attribute: {
          description: "An attribute",
          params: [
            {
              name: "collection",
              type: "NftCollectionId"
            },
            {
              name: "item",
              type: "NftItemId"
            },
            {
              name: "key",
              type: "Bytes"
            }
          ],
          type: "Option<Bytes>"
        },
        collection_attribute: {
          description: "A collection attribute",
          params: [
            {
              name: "collection",
              type: "NftCollectionId"
            },
            {
              name: "key",
              type: "Bytes"
            }
          ],
          type: "Option<Bytes>"
        },
        collection_owner: {
          description: "A collection owner",
          params: [
            {
              name: "collection",
              type: "NftCollectionId"
            }
          ],
          type: "Option<AccountId>"
        },
        custom_attribute: {
          description: "A custom attribute",
          params: [
            {
              name: "account",
              type: "AccountId"
            },
            {
              name: "collection",
              type: "NftCollectionId"
            },
            {
              name: "item",
              type: "NftItemId"
            },
            {
              name: "key",
              type: "Bytes"
            }
          ],
          type: "Option<Bytes>"
        },
        owner: {
          description: "Collection owner",
          params: [
            {
              name: "collection",
              type: "NftCollectionId"
            },
            {
              name: "item",
              type: "NftItemId"
            }
          ],
          type: "Option<AccountId>"
        },
        system_attribute: {
          description: "System attribute",
          params: [
            {
              name: "collection",
              type: "NftCollectionId"
            },
            {
              name: "item",
              type: "NftItemId"
            },
            {
              name: "key",
              type: "Bytes"
            }
          ],
          type: "Option<Bytes>"
        }
      },
      version: 1
    }
  ]
};

// node_modules/@polkadot/types/interfaces/nfts/definitions.js
var definitions_default33 = {
  rpc: {},
  runtime: runtime17,
  types: {
    NftCollectionId: "u32",
    NftItemId: "u32"
  }
};

// node_modules/@polkadot/types/interfaces/nompools/runtime.js
var runtime18 = {
  NominationPoolsApi: [
    {
      methods: {
        balance_to_points: {
          description: "Returns the equivalent points of `new_funds` for a given pool.",
          params: [
            {
              name: "poolId",
              type: "NpPoolId"
            },
            {
              name: "newFunds",
              type: "Balance"
            }
          ],
          type: "Balance"
        },
        pending_rewards: {
          description: "Returns the pending rewards for the given member.",
          params: [
            {
              name: "member",
              type: "AccountId"
            }
          ],
          type: "Balance"
        },
        points_to_balance: {
          description: "Returns the equivalent balance of `points` for a given pool.",
          params: [
            {
              name: "poolId",
              type: "NpPoolId"
            },
            {
              name: "points",
              type: "Balance"
            }
          ],
          type: "Balance"
        }
      },
      version: 1
    }
  ]
};

// node_modules/@polkadot/types/interfaces/nompools/definitions.js
var definitions_default34 = {
  rpc: {},
  runtime: runtime18,
  types: {
    NpApiError: {
      _enum: ["MemberNotFound", "OverflowInPendingRewards"]
    },
    NpPoolId: "u32"
  }
};

// node_modules/@polkadot/types/interfaces/offences/definitions.js
var definitions_default35 = {
  rpc: {},
  types: {
    DeferredOffenceOf: "(Vec<OffenceDetails>, Vec<Perbill>, SessionIndex)",
    Kind: "[u8; 16]",
    OffenceDetails: {
      offender: "Offender",
      reporters: "Vec<Reporter>"
    },
    Offender: "IdentificationTuple",
    OpaqueTimeSlot: "Bytes",
    ReportIdOf: "Hash",
    Reporter: "AccountId"
  }
};

// node_modules/@polkadot/types/interfaces/pow/runtime.js
var runtime19 = {
  DifficultyApi: [
    {
      methods: {
        difficulty: {
          description: "Return the target difficulty of the next block.",
          params: [],
          // This is Difficulty in the original, however this is chain-specific
          type: "Raw"
        }
      },
      version: 1
    }
  ],
  TimestampApi: [
    {
      methods: {
        timestamp: {
          description: "API necessary for timestamp-based difficulty adjustment algorithms.",
          params: [],
          type: "Moment"
        }
      },
      version: 1
    }
  ]
};

// node_modules/@polkadot/types/interfaces/pow/definitions.js
var definitions_default36 = {
  rpc: {},
  runtime: runtime19,
  types: {}
};

// node_modules/@polkadot/types/interfaces/proxy/definitions.js
var definitions_default37 = {
  rpc: {},
  types: {
    ProxyDefinition: {
      delegate: "AccountId",
      proxyType: "ProxyType",
      delay: "BlockNumber"
    },
    ProxyType: {
      _enum: ["Any", "NonTransfer", "Governance", "Staking"]
    },
    ProxyAnnouncement: {
      real: "AccountId",
      callHash: "Hash",
      height: "BlockNumber"
    }
  }
};

// node_modules/@polkadot/types/interfaces/recovery/definitions.js
var definitions_default38 = {
  rpc: {},
  types: {
    ActiveRecovery: {
      created: "BlockNumber",
      deposit: "Balance",
      friends: "Vec<AccountId>"
    },
    RecoveryConfig: {
      delayPeriod: "BlockNumber",
      deposit: "Balance",
      friends: "Vec<AccountId>",
      threshold: "u16"
    }
  }
};

// node_modules/@polkadot/types/interfaces/scheduler/definitions.js
var definitions_default39 = {
  rpc: {},
  types: {
    Period: "(BlockNumber, u32)",
    Priority: "u8",
    SchedulePeriod: "Period",
    SchedulePriority: "Priority",
    Scheduled: {
      maybeId: "Option<Bytes>",
      priority: "SchedulePriority",
      call: "Call",
      maybePeriodic: "Option<SchedulePeriod>",
      origin: "PalletsOrigin"
    },
    ScheduledTo254: {
      maybeId: "Option<Bytes>",
      priority: "SchedulePriority",
      call: "Call",
      maybePeriodic: "Option<SchedulePeriod>"
    },
    TaskAddress: "(BlockNumber, u32)"
  }
};

// node_modules/@polkadot/types/interfaces/session/runtime.js
var runtime20 = {
  SessionKeys: [
    {
      methods: {
        decode_session_keys: {
          description: "Decode the given public session keys.",
          params: [
            {
              name: "encoded",
              type: "Bytes"
            }
          ],
          type: "Option<Vec<(Bytes, KeyTypeId)>>"
        },
        generate_session_keys: {
          description: "Generate a set of session keys with optionally using the given seed.",
          params: [
            {
              name: "seed",
              type: "Option<Bytes>"
            }
          ],
          type: "Bytes"
        }
      },
      version: 1
    }
  ]
};

// node_modules/@polkadot/types/interfaces/session/definitions.js
var keyTypes = {
  // key for beefy
  BeefyKey: "[u8; 33]",
  // default to Substrate master defaults, 4 keys (polkadot master, 5 keys)
  Keys: "SessionKeys4",
  SessionKeys1: "(AccountId)",
  SessionKeys2: "(AccountId, AccountId)",
  SessionKeys3: "(AccountId, AccountId, AccountId)",
  SessionKeys4: "(AccountId, AccountId, AccountId, AccountId)",
  SessionKeys5: "(AccountId, AccountId, AccountId, AccountId, AccountId)",
  SessionKeys6: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",
  SessionKeys6B: "(AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)",
  SessionKeys7: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",
  SessionKeys7B: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)",
  SessionKeys8: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",
  SessionKeys8B: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)",
  SessionKeys9: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",
  SessionKeys9B: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)",
  SessionKeys10: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)",
  SessionKeys10B: "(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)"
};
var definitions_default40 = {
  rpc: {},
  runtime: runtime20,
  types: {
    ...keyTypes,
    FullIdentification: "Exposure",
    IdentificationTuple: "(ValidatorId, FullIdentification)",
    MembershipProof: {
      session: "SessionIndex",
      trieNodes: "Vec<Bytes>",
      validatorCount: "ValidatorCount"
    },
    SessionIndex: "u32",
    ValidatorCount: "u32"
  }
};

// node_modules/@polkadot/types/interfaces/society/definitions.js
var definitions_default41 = {
  rpc: {},
  types: {
    Bid: {
      who: "AccountId",
      kind: "BidKind",
      value: "Balance"
    },
    BidKind: {
      _enum: {
        Deposit: "Balance",
        Vouch: "(AccountId, Balance)"
      }
    },
    // a society-specific Judgement (not the same as identity Judgement)
    SocietyJudgement: {
      _enum: ["Rebid", "Reject", "Approve"]
    },
    // a society-specific Vote
    SocietyVote: {
      _enum: ["Skeptic", "Reject", "Approve"]
    },
    StrikeCount: "u32",
    VouchingStatus: {
      _enum: ["Vouching", "Banned"]
    }
  }
};

// node_modules/@polkadot/types/interfaces/staking/runtime.js
var runtime21 = {
  StakingApi: [
    {
      methods: {
        nominations_quota: {
          description: "Returns the nominations quota for a nominator with a given balance.",
          params: [
            {
              name: "balance",
              type: "Balance"
            }
          ],
          type: "u32"
        }
      },
      version: 1
    }
  ]
};

// node_modules/@polkadot/types/interfaces/staking/definitions.js
var deprecated = {
  Points: "u32",
  EraPoints: {
    total: "Points",
    individual: "Vec<Points>"
  }
};
var phragmen = {
  CompactAssignments: "CompactAssignmentsWith16",
  CompactAssignmentsWith16: {
    votes1: "Vec<(NominatorIndexCompact, ValidatorIndexCompact)>",
    votes2: "Vec<(NominatorIndexCompact, CompactScoreCompact, ValidatorIndexCompact)>",
    votes3: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 2], ValidatorIndexCompact)>",
    votes4: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 3], ValidatorIndexCompact)>",
    votes5: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 4], ValidatorIndexCompact)>",
    votes6: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 5], ValidatorIndexCompact)>",
    votes7: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 6], ValidatorIndexCompact)>",
    votes8: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 7], ValidatorIndexCompact)>",
    votes9: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 8], ValidatorIndexCompact)>",
    votes10: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 9], ValidatorIndexCompact)>",
    votes11: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 10], ValidatorIndexCompact)>",
    votes12: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 11], ValidatorIndexCompact)>",
    votes13: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 12], ValidatorIndexCompact)>",
    votes14: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 13], ValidatorIndexCompact)>",
    votes15: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 14], ValidatorIndexCompact)>",
    votes16: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 15], ValidatorIndexCompact)>"
  },
  CompactAssignmentsWith24: {
    votes1: "Vec<(NominatorIndexCompact, ValidatorIndexCompact)>",
    votes2: "Vec<(NominatorIndexCompact, CompactScoreCompact, ValidatorIndexCompact)>",
    votes3: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 2], ValidatorIndexCompact)>",
    votes4: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 3], ValidatorIndexCompact)>",
    votes5: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 4], ValidatorIndexCompact)>",
    votes6: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 5], ValidatorIndexCompact)>",
    votes7: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 6], ValidatorIndexCompact)>",
    votes8: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 7], ValidatorIndexCompact)>",
    votes9: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 8], ValidatorIndexCompact)>",
    votes10: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 9], ValidatorIndexCompact)>",
    votes11: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 10], ValidatorIndexCompact)>",
    votes12: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 11], ValidatorIndexCompact)>",
    votes13: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 12], ValidatorIndexCompact)>",
    votes14: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 13], ValidatorIndexCompact)>",
    votes15: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 14], ValidatorIndexCompact)>",
    votes16: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 15], ValidatorIndexCompact)>",
    votes17: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 16], ValidatorIndexCompact)>",
    votes18: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 17], ValidatorIndexCompact)>",
    votes19: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 18], ValidatorIndexCompact)>",
    votes20: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 19], ValidatorIndexCompact)>",
    votes21: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 20], ValidatorIndexCompact)>",
    votes22: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 21], ValidatorIndexCompact)>",
    votes23: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 22], ValidatorIndexCompact)>",
    votes24: "Vec<(NominatorIndexCompact, [CompactScoreCompact; 23], ValidatorIndexCompact)>"
  },
  CompactAssignmentsTo265: "CompactAssignmentsWith16",
  CompactAssignmentsTo257: {
    votes1: "Vec<(NominatorIndex, [CompactScore; 0], ValidatorIndex)>",
    votes2: "Vec<(NominatorIndex, [CompactScore; 1], ValidatorIndex)>",
    votes3: "Vec<(NominatorIndex, [CompactScore; 2], ValidatorIndex)>",
    votes4: "Vec<(NominatorIndex, [CompactScore; 3], ValidatorIndex)>",
    votes5: "Vec<(NominatorIndex, [CompactScore; 4], ValidatorIndex)>",
    votes6: "Vec<(NominatorIndex, [CompactScore; 5], ValidatorIndex)>",
    votes7: "Vec<(NominatorIndex, [CompactScore; 6], ValidatorIndex)>",
    votes8: "Vec<(NominatorIndex, [CompactScore; 7], ValidatorIndex)>",
    votes9: "Vec<(NominatorIndex, [CompactScore; 8], ValidatorIndex)>",
    votes10: "Vec<(NominatorIndex, [CompactScore; 9], ValidatorIndex)>",
    votes11: "Vec<(NominatorIndex, [CompactScore; 10], ValidatorIndex)>",
    votes12: "Vec<(NominatorIndex, [CompactScore; 11], ValidatorIndex)>",
    votes13: "Vec<(NominatorIndex, [CompactScore; 12], ValidatorIndex)>",
    votes14: "Vec<(NominatorIndex, [CompactScore; 13], ValidatorIndex)>",
    votes15: "Vec<(NominatorIndex, [CompactScore; 14], ValidatorIndex)>",
    votes16: "Vec<(NominatorIndex, [CompactScore; 15], ValidatorIndex)>"
  },
  CompactScore: "(ValidatorIndex, OffchainAccuracy)",
  CompactScoreCompact: "(ValidatorIndexCompact, OffchainAccuracyCompact)",
  ElectionCompute: {
    // in previous versions the last entry was "AuthorityId"
    // (since no data attached, and it is via SCALE can rename)
    _enum: ["OnChain", "Signed", "Unsigned"]
  },
  ElectionPhase: {
    _enum: {
      Off: null,
      Signed: null,
      Unsigned: "(bool, BlockNumber)",
      Emergency: null
    }
  },
  ElectionResult: {
    compute: "ElectionCompute",
    slotStake: "Balance",
    electedStashes: "Vec<AccountId>",
    exposures: "Vec<(AccountId, Exposure)>"
  },
  ElectionScore: "[u128; 3]",
  ElectionSize: {
    validators: "Compact<ValidatorIndex>",
    nominators: "Compact<NominatorIndex>"
  },
  ElectionStatus: {
    _enum: {
      Close: "Null",
      Open: "BlockNumber"
    }
  },
  ExtendedBalance: "u128",
  RawSolution: "RawSolutionWith16",
  RawSolutionWith16: {
    compact: "CompactAssignmentsWith16",
    score: "ElectionScore",
    round: "u32"
  },
  RawSolutionWith24: {
    compact: "CompactAssignmentsWith24",
    score: "ElectionScore",
    round: "u32"
  },
  RawSolutionTo265: "RawSolutionWith16",
  ReadySolution: {
    supports: "SolutionSupports",
    score: "ElectionScore",
    compute: "ElectionCompute"
  },
  RoundSnapshot: {
    voters: "Vec<(AccountId, VoteWeight, Vec<AccountId>)>",
    targets: "Vec<AccountId>"
  },
  SeatHolder: {
    who: "AccountId",
    stake: "Balance",
    deposit: "Balance"
  },
  SignedSubmission: {
    _fallback: "SignedSubmissionTo276",
    who: "AccountId",
    deposit: "Balance",
    solution: "RawSolution",
    reward: "Balance"
  },
  SignedSubmissionTo276: {
    who: "AccountId",
    deposit: "Balance",
    solution: "RawSolution"
  },
  SignedSubmissionOf: "SignedSubmission",
  SolutionOrSnapshotSize: {
    voters: "Compact<u32>",
    targets: "Compact<u32>"
  },
  SolutionSupport: {
    total: "ExtendedBalance",
    voters: "Vec<(AccountId, ExtendedBalance)>"
  },
  SolutionSupports: "Vec<(AccountId, SolutionSupport)>",
  Supports: "SolutionSupports",
  SubmissionIndicesOf: "BTreeMap<ElectionScore, u32>",
  Voter: {
    votes: "Vec<AccountId>",
    stake: "Balance",
    deposit: "Balance"
  },
  VoteWeight: "u64"
};
var definitions_default42 = {
  rpc: {},
  runtime: runtime21,
  types: {
    ...deprecated,
    ...phragmen,
    ActiveEraInfo: {
      index: "EraIndex",
      start: "Option<Moment>"
    },
    EraIndex: "u32",
    EraRewardPoints: {
      total: "RewardPoint",
      individual: "BTreeMap<AccountId, RewardPoint>"
    },
    EraRewards: {
      total: "u32",
      rewards: "Vec<u32>"
    },
    Exposure: {
      total: "Compact<Balance>",
      own: "Compact<Balance>",
      others: "Vec<IndividualExposure>"
    },
    Forcing: {
      _enum: [
        "NotForcing",
        "ForceNew",
        "ForceNone",
        "ForceAlways"
      ]
    },
    IndividualExposure: {
      who: "AccountId",
      value: "Compact<Balance>"
    },
    KeyType: "AccountId",
    MomentOf: "Moment",
    Nominations: {
      targets: "Vec<AccountId>",
      submittedIn: "EraIndex",
      suppressed: "bool"
    },
    NominatorIndex: "u32",
    NominatorIndexCompact: "Compact<NominatorIndex>",
    OffchainAccuracy: "PerU16",
    OffchainAccuracyCompact: "Compact<OffchainAccuracy>",
    PhragmenScore: "[u128; 3]",
    Points: "u32",
    RewardDestination: {
      _enum: {
        Staked: "Null",
        Stash: "Null",
        Controller: "Null",
        Account: "AccountId",
        None: "Null"
      }
    },
    RewardPoint: "u32",
    SlashJournalEntry: {
      who: "AccountId",
      amount: "Balance",
      ownSlash: "Balance"
    },
    SlashingSpansTo204: {
      spanIndex: "SpanIndex",
      lastStart: "EraIndex",
      prior: "Vec<EraIndex>"
    },
    SlashingSpans: {
      spanIndex: "SpanIndex",
      lastStart: "EraIndex",
      lastNonzeroSlash: "EraIndex",
      prior: "Vec<EraIndex>"
    },
    SpanIndex: "u32",
    SpanRecord: {
      slashed: "Balance",
      paidOut: "Balance"
    },
    StakingLedgerTo223: {
      stash: "AccountId",
      total: "Compact<Balance>",
      active: "Compact<Balance>",
      unlocking: "Vec<UnlockChunk>"
    },
    StakingLedgerTo240: {
      _fallback: "StakingLedgerTo223",
      stash: "AccountId",
      total: "Compact<Balance>",
      active: "Compact<Balance>",
      unlocking: "Vec<UnlockChunk>",
      lastReward: "Option<EraIndex>"
    },
    StakingLedger: {
      stash: "AccountId",
      total: "Compact<Balance>",
      active: "Compact<Balance>",
      unlocking: "Vec<UnlockChunk>",
      claimedRewards: "Vec<EraIndex>"
    },
    UnappliedSlashOther: "(AccountId, Balance)",
    UnappliedSlash: {
      validator: "AccountId",
      own: "Balance",
      others: "Vec<UnappliedSlashOther>",
      reporters: "Vec<AccountId>",
      payout: "Balance"
    },
    UnlockChunk: {
      value: "Compact<Balance>",
      era: "Compact<BlockNumber>"
    },
    ValidatorIndex: "u16",
    ValidatorIndexCompact: "Compact<ValidatorIndex>",
    ValidatorPrefs: "ValidatorPrefsWithBlocked",
    ValidatorPrefsWithCommission: {
      commission: "Compact<Perbill>"
    },
    ValidatorPrefsWithBlocked: {
      commission: "Compact<Perbill>",
      blocked: "bool"
    },
    ValidatorPrefsTo196: {
      validatorPayment: "Compact<Balance>"
    },
    ValidatorPrefsTo145: {
      unstakeThreshold: "Compact<u32>",
      validatorPayment: "Compact<Balance>"
    }
  }
};

// node_modules/@polkadot/types/interfaces/statement/runtime.js
var runtime22 = {
  ValidateStatement: [
    {
      methods: {
        valdate_statement: {
          description: "Validate the statement.",
          params: [
            {
              name: "source",
              type: "StatementStoreStatementSource"
            },
            {
              name: "statement",
              type: "SpStatementStoreStatement"
            }
          ],
          type: "Result<StatementStoreValidStatement, StatementStoreInvalidStatement>"
        }
      },
      version: 1
    }
  ]
};

// node_modules/@polkadot/types/interfaces/statement/definitions.js
var definitions_default43 = {
  rpc: {},
  runtime: runtime22,
  types: {
    StatementStoreStatementSource: {
      _enum: ["Chain", "Network", "Local"]
    },
    StatementStoreValidStatement: {
      maxCount: "u32",
      maxSize: "u32"
    },
    StatementStoreInvalidStatement: {
      _enum: ["BadProof", "NoProof", "InternalError"]
    }
  }
};

// node_modules/@polkadot/types/interfaces/support/definitions.js
var definitions_default44 = {
  rpc: {},
  types: {
    WeightToFeeCoefficient: {
      coeffInteger: "Balance",
      coeffFrac: "Perbill",
      negative: "bool",
      degree: "u8"
    }
  }
};

// node_modules/@polkadot/types/interfaces/syncstate/rpc.js
var rpc8 = {
  genSyncSpec: {
    description: "Returns the json-serialized chainspec running the node, with a sync state.",
    endpoint: "sync_state_genSyncSpec",
    params: [
      {
        name: "raw",
        type: "bool"
      }
    ],
    type: "Json"
  }
};

// node_modules/@polkadot/types/interfaces/syncstate/definitions.js
var definitions_default45 = {
  rpc: rpc8,
  types: {}
};

// node_modules/@polkadot/types/interfaces/system/rpc.js
var rpc9 = {
  accountNextIndex: {
    alias: ["account_nextIndex"],
    description: "Retrieves the next accountIndex as available on the node",
    params: [
      {
        name: "accountId",
        type: "AccountId"
      }
    ],
    type: "Index"
  },
  addLogFilter: {
    description: "Adds the supplied directives to the current log filter",
    isUnsafe: true,
    params: [
      {
        name: "directives",
        type: "Text"
      }
    ],
    type: "Null"
  },
  addReservedPeer: {
    description: "Adds a reserved peer",
    isUnsafe: true,
    params: [
      {
        name: "peer",
        type: "Text"
      }
    ],
    type: "Text"
  },
  chain: {
    description: "Retrieves the chain",
    params: [],
    type: "Text"
  },
  chainType: {
    description: "Retrieves the chain type",
    params: [],
    type: "ChainType"
  },
  dryRun: {
    alias: ["system_dryRunAt"],
    description: "Dry run an extrinsic at a given block",
    isUnsafe: true,
    params: [
      {
        name: "extrinsic",
        type: "Bytes"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "ApplyExtrinsicResult"
  },
  health: {
    description: "Return health status of the node",
    noErrorLog: true,
    params: [],
    type: "Health"
  },
  localListenAddresses: {
    description: "The addresses include a trailing /p2p/ with the local PeerId, and are thus suitable to be passed to addReservedPeer or as a bootnode address for example",
    params: [],
    type: "Vec<Text>"
  },
  localPeerId: {
    description: "Returns the base58-encoded PeerId of the node",
    params: [],
    type: "Text"
  },
  name: {
    description: "Retrieves the node name",
    params: [],
    type: "Text"
  },
  networkState: {
    alias: ["system_unstable_networkState"],
    description: "Returns current state of the network",
    isUnsafe: true,
    params: [],
    type: "NetworkState"
  },
  nodeRoles: {
    description: "Returns the roles the node is running as",
    params: [],
    type: "Vec<NodeRole>"
  },
  peers: {
    description: "Returns the currently connected peers",
    isUnsafe: true,
    params: [],
    type: "Vec<PeerInfo>"
  },
  properties: {
    description: "Get a custom set of properties as a JSON object, defined in the chain spec",
    params: [],
    type: "ChainProperties"
  },
  removeReservedPeer: {
    description: "Remove a reserved peer",
    isUnsafe: true,
    params: [
      {
        name: "peerId",
        type: "Text"
      }
    ],
    type: "Text"
  },
  reservedPeers: {
    description: "Returns the list of reserved peers",
    params: [],
    type: "Vec<Text>"
  },
  resetLogFilter: {
    description: "Resets the log filter to Substrate defaults",
    isUnsafe: true,
    params: [],
    type: "Null"
  },
  syncState: {
    description: "Returns the state of the syncing of the node",
    params: [],
    type: "SyncState"
  },
  version: {
    description: "Retrieves the version of the node",
    params: [],
    type: "Text"
  }
};

// node_modules/@polkadot/types/interfaces/system/runtime.js
var runtime23 = {
  AccountNonceApi: [
    {
      methods: {
        account_nonce: {
          description: "The API to query account nonce (aka transaction index)",
          params: [
            {
              name: "accountId",
              type: "AccountId"
            }
          ],
          type: "Index"
        }
      },
      version: 1
    }
  ]
};

// node_modules/@polkadot/types/interfaces/system/definitions.js
var definitions_default46 = {
  rpc: rpc9,
  runtime: runtime23,
  types: {
    AccountInfo: "AccountInfoWithTripleRefCount",
    AccountInfoWithRefCountU8: {
      nonce: "Index",
      refcount: "u8",
      data: "AccountData"
    },
    AccountInfoWithRefCount: {
      _fallback: "AccountInfoWithRefCountU8",
      nonce: "Index",
      refcount: "RefCount",
      data: "AccountData"
    },
    AccountInfoWithDualRefCount: {
      _fallback: "AccountInfoWithRefCount",
      nonce: "Index",
      consumers: "RefCount",
      providers: "RefCount",
      data: "AccountData"
    },
    // original naming
    AccountInfoWithProviders: "AccountInfoWithDualRefCount",
    AccountInfoWithTripleRefCount: {
      _fallback: "AccountInfoWithDualRefCount",
      nonce: "Index",
      consumers: "RefCount",
      providers: "RefCount",
      sufficients: "RefCount",
      data: "AccountData"
    },
    ApplyExtrinsicResult: "Result<DispatchOutcome, TransactionValidityError>",
    ApplyExtrinsicResultPre6: "Result<DispatchOutcomePre6, TransactionValidityError>",
    ArithmeticError: {
      _enum: [
        "Underflow",
        "Overflow",
        "DivisionByZero"
      ]
    },
    BlockLength: {
      max: "PerDispatchClassU32"
    },
    BlockWeights: {
      baseBlock: "Weight",
      maxBlock: "Weight",
      perClass: "PerDispatchClassWeightsPerClass"
    },
    ChainProperties: "GenericChainProperties",
    ChainType: {
      _enum: {
        Development: "Null",
        Local: "Null",
        Live: "Null",
        Custom: "Text"
      }
    },
    ConsumedWeight: "PerDispatchClassWeight",
    DigestOf: "Digest",
    DispatchClass: {
      _enum: ["Normal", "Operational", "Mandatory"]
    },
    DispatchError: {
      _enum: {
        Other: "Null",
        CannotLookup: "Null",
        BadOrigin: "Null",
        Module: "DispatchErrorModule",
        ConsumerRemaining: "Null",
        NoProviders: "Null",
        TooManyConsumers: "Null",
        Token: "TokenError",
        Arithmetic: "ArithmeticError",
        Transactional: "TransactionalError",
        Exhausted: "Null",
        Corruption: "Null",
        Unavailable: "Null"
      }
    },
    DispatchErrorPre6: {
      _enum: {
        Other: "Null",
        CannotLookup: "Null",
        BadOrigin: "Null",
        Module: "DispatchErrorModulePre6",
        ConsumerRemaining: "Null",
        NoProviders: "Null",
        TooManyConsumers: "Null",
        Token: "TokenError",
        Arithmetic: "ArithmeticError",
        Transactional: "TransactionalError"
      }
    },
    DispatchErrorPre6First: {
      // The enum was modified mid-flight, affecting asset chains -
      // https://github.com/paritytech/substrate/pull/10382/files#diff-e4e016b33a82268b6208dc974eea841bad47597865a749fee2f937eb6fdf67b4R498
      _enum: {
        Other: "Null",
        CannotLookup: "Null",
        BadOrigin: "Null",
        Module: "DispatchErrorModulePre6",
        ConsumerRemaining: "Null",
        NoProviders: "Null",
        Token: "TokenError",
        Arithmetic: "ArithmeticError",
        Transactional: "TransactionalError"
      }
    },
    DispatchErrorModuleU8: {
      index: "u8",
      error: "u8"
    },
    DispatchErrorModuleU8a: {
      index: "u8",
      error: "[u8; 4]"
    },
    DispatchErrorModule: "DispatchErrorModuleU8a",
    DispatchErrorModulePre6: "DispatchErrorModuleU8",
    DispatchErrorTo198: {
      module: "Option<u8>",
      error: "u8"
    },
    DispatchInfo: {
      weight: "Weight",
      class: "DispatchClass",
      paysFee: "Pays"
    },
    DispatchInfoTo190: {
      weight: "Weight",
      class: "DispatchClass"
    },
    DispatchInfoTo244: {
      weight: "Weight",
      class: "DispatchClass",
      paysFee: "bool"
    },
    DispatchOutcome: "Result<(), DispatchError>",
    DispatchOutcomePre6: "Result<(), DispatchErrorPre6>",
    DispatchResult: "Result<(), DispatchError>",
    DispatchResultOf: "DispatchResult",
    DispatchResultTo198: "Result<(), Text>",
    Event: "GenericEvent",
    EventId: "[u8; 2]",
    EventIndex: "u32",
    EventRecord: {
      phase: "Phase",
      event: "Event",
      topics: "Vec<Hash>"
    },
    Health: {
      peers: "u64",
      isSyncing: "bool",
      shouldHavePeers: "bool"
    },
    InvalidTransaction: {
      _enum: {
        Call: "Null",
        Payment: "Null",
        Future: "Null",
        Stale: "Null",
        BadProof: "Null",
        AncientBirthBlock: "Null",
        ExhaustsResources: "Null",
        Custom: "u8",
        BadMandatory: "Null",
        MandatoryDispatch: "Null",
        BadSigner: "Null"
      }
    },
    Key: "Bytes",
    LastRuntimeUpgradeInfo: {
      specVersion: "Compact<u32>",
      specName: "Text"
    },
    NetworkState: {
      peerId: "Text",
      listenedAddresses: "Vec<Text>",
      externalAddresses: "Vec<Text>",
      connectedPeers: "HashMap<Text, Peer>",
      notConnectedPeers: "HashMap<Text, NotConnectedPeer>",
      averageDownloadPerSec: "u64",
      averageUploadPerSec: "u64",
      peerset: "NetworkStatePeerset"
    },
    NetworkStatePeerset: {
      messageQueue: "u64",
      nodes: "HashMap<Text, NetworkStatePeersetInfo>"
    },
    NetworkStatePeersetInfo: {
      connected: "bool",
      reputation: "i32"
    },
    NodeRole: {
      _enum: {
        Full: "Null",
        LightClient: "Null",
        Authority: "Null",
        UnknownRole: "u8"
      }
    },
    NotConnectedPeer: {
      knownAddresses: "Vec<Text>",
      latestPingTime: "Option<PeerPing>",
      versionString: "Option<Text>"
    },
    Peer: {
      enabled: "bool",
      endpoint: "PeerEndpoint",
      knownAddresses: "Vec<Text>",
      latestPingTime: "PeerPing",
      open: "bool",
      versionString: "Text"
    },
    PeerEndpoint: {
      listening: "PeerEndpointAddr"
    },
    PeerEndpointAddr: {
      _alias: {
        localAddr: "local_addr",
        sendBackAddr: "send_back_addr"
      },
      localAddr: "Text",
      sendBackAddr: "Text"
    },
    PeerPing: {
      nanos: "u64",
      secs: "u64"
    },
    PeerInfo: {
      peerId: "Text",
      roles: "Text",
      protocolVersion: "u32",
      bestHash: "Hash",
      bestNumber: "BlockNumber"
    },
    PerDispatchClassU32: {
      normal: "u32",
      operational: "u32",
      mandatory: "u32"
    },
    PerDispatchClassWeight: {
      normal: "Weight",
      operational: "Weight",
      mandatory: "Weight"
    },
    PerDispatchClassWeightsPerClass: {
      normal: "WeightPerClass",
      operational: "WeightPerClass",
      mandatory: "WeightPerClass"
    },
    Phase: {
      _enum: {
        ApplyExtrinsic: "u32",
        Finalization: "Null",
        Initialization: "Null"
      }
    },
    RawOrigin: {
      _enum: {
        Root: "Null",
        Signed: "AccountId",
        None: "Null"
      }
    },
    RefCount: "u32",
    RefCountTo259: "u8",
    SyncState: {
      startingBlock: "BlockNumber",
      currentBlock: "BlockNumber",
      highestBlock: "Option<BlockNumber>"
    },
    SystemOrigin: "RawOrigin",
    TokenError: {
      _enum: [
        "NoFunds",
        "WouldDie",
        "BelowMinimum",
        "CannotCreate",
        "UnknownAsset",
        "Frozen",
        "Unsupported",
        // these are dropped, but still in older versions
        // (if this adjusts, will need to take a re-look)
        "Underflow",
        "Overflow"
      ]
    },
    TransactionValidityError: {
      _enum: {
        Invalid: "InvalidTransaction",
        Unknown: "UnknownTransaction"
      }
    },
    TransactionalError: {
      _enum: [
        "LimitReached",
        "NoLayer"
      ]
    },
    UnknownTransaction: {
      _enum: {
        CannotLookup: "Null",
        NoUnsignedValidator: "Null",
        Custom: "u8"
      }
    },
    WeightPerClass: {
      baseExtrinsic: "Weight",
      maxExtrinsic: "Option<Weight>",
      maxTotal: "Option<Weight>",
      reserved: "Option<Weight>"
    }
  }
};

// node_modules/@polkadot/types/interfaces/treasury/definitions.js
var definitions_default47 = {
  rpc: {},
  types: {
    Bounty: {
      proposer: "AccountId",
      value: "Balance",
      fee: "Balance",
      curatorDeposit: "Balance",
      bond: "Balance",
      status: "BountyStatus"
    },
    BountyIndex: "u32",
    BountyStatus: {
      _enum: {
        Proposed: "Null",
        Approved: "Null",
        Funded: "Null",
        CuratorProposed: "BountyStatusCuratorProposed",
        Active: "BountyStatusActive",
        PendingPayout: "BountyStatusPendingPayout"
      }
    },
    BountyStatusActive: {
      curator: "AccountId",
      updateDue: "BlockNumber"
    },
    BountyStatusCuratorProposed: {
      curator: "AccountId"
    },
    BountyStatusPendingPayout: {
      curator: "AccountId",
      beneficiary: "AccountId",
      unlockAt: "BlockNumber"
    },
    OpenTip: {
      reason: "Hash",
      who: "AccountId",
      finder: "AccountId",
      deposit: "Balance",
      closes: "Option<BlockNumber>",
      tips: "Vec<OpenTipTip>",
      findersFee: "bool"
    },
    OpenTipTo225: {
      reason: "Hash",
      who: "AccountId",
      finder: "Option<OpenTipFinderTo225>",
      closes: "Option<BlockNumber>",
      tips: "Vec<OpenTipTip>"
    },
    OpenTipFinderTo225: "(AccountId, Balance)",
    OpenTipTip: "(AccountId, Balance)",
    TreasuryProposal: {
      proposer: "AccountId",
      value: "Balance",
      beneficiary: "AccountId",
      bond: "Balance"
    }
  }
};

// node_modules/@polkadot/types/interfaces/txpayment/definitions.js
var definitions_default48 = {
  rpc: {},
  types: {
    Multiplier: "Fixed128"
  }
};

// node_modules/@polkadot/types/interfaces/txqueue/runtime.js
var runtime24 = {
  TaggedTransactionQueue: [
    {
      methods: {
        validate_transaction: {
          description: "Validate the transaction.",
          params: [
            {
              name: "source",
              type: "TransactionSource"
            },
            {
              name: "tx",
              type: "Extrinsic"
            },
            {
              name: "blockHash",
              type: "BlockHash"
            }
          ],
          type: "TransactionValidity"
        }
      },
      version: 3
    },
    {
      methods: {
        validate_transaction: {
          description: "Validate the transaction.",
          params: [
            {
              name: "source",
              type: "TransactionSource"
            },
            {
              name: "tx",
              type: "Extrinsic"
            }
          ],
          type: "TransactionValidity"
        }
      },
      version: 2
    },
    {
      methods: {
        validate_transaction: {
          description: "Validate the transaction.",
          params: [
            {
              name: "tx",
              type: "Extrinsic"
            }
          ],
          type: "TransactionValidity"
        }
      },
      version: 1
    }
  ]
};

// node_modules/@polkadot/types/interfaces/txqueue/definitions.js
var definitions_default49 = {
  rpc: {},
  runtime: runtime24,
  types: {
    TransactionSource: {
      _enum: ["InBlock", "Local", "External"]
    },
    TransactionValidity: "Result<ValidTransaction, TransactionValidityError>",
    ValidTransaction: {
      priority: "TransactionPriority",
      requires: "Vec<TransactionTag>",
      provides: "Vec<TransactionTag>",
      longevity: "TransactionLongevity",
      propagate: "bool"
    }
  }
};

// node_modules/@polkadot/types/interfaces/uniques/definitions.js
var definitions_default50 = {
  rpc: {},
  types: {
    ClassId: "u32",
    InstanceId: "u32",
    DepositBalance: "Balance",
    DepositBalanceOf: "Balance",
    ClassDetails: {
      owner: "AccountId",
      issuer: "AccountId",
      admin: "AccountId",
      freezer: "AccountId",
      totalDeposit: "DepositBalance",
      freeHolding: "bool",
      instances: "u32",
      instanceMetadatas: "u32",
      attributes: "u32",
      isFrozen: "bool"
    },
    DestroyWitness: {
      instances: "Compact<u32>",
      instanceMetadatas: "Compact<u32>",
      attributes: "Compact<u32>"
    },
    InstanceDetails: {
      owner: "AccountId",
      approved: "Option<AccountId>",
      isFrozen: "bool",
      deposit: "DepositBalance"
    },
    ClassMetadata: {
      deposit: "DepositBalance",
      data: "Vec<u8>",
      isFrozen: "bool"
    },
    InstanceMetadata: {
      deposit: "DepositBalance",
      data: "Vec<u8>",
      isFrozen: "bool"
    }
  }
};

// node_modules/@polkadot/types/interfaces/utility/definitions.js
var definitions_default51 = {
  rpc: {},
  types: {
    Multisig: {
      when: "Timepoint",
      deposit: "Balance",
      depositor: "AccountId",
      approvals: "Vec<AccountId>"
    },
    Timepoint: {
      height: "BlockNumber",
      index: "u32"
    }
  }
};

// node_modules/@polkadot/types/interfaces/vesting/definitions.js
var definitions_default52 = {
  rpc: {},
  types: {
    VestingInfo: {
      locked: "Balance",
      perBlock: "Balance",
      startingBlock: "BlockNumber"
    }
  }
};

// node_modules/@polkadot/types/interfaces/attestations/definitions.js
var definitions_default53 = {
  rpc: {},
  types: {
    BlockAttestations: {
      receipt: "CandidateReceipt",
      valid: "Vec<AccountId>",
      invalid: "Vec<AccountId>"
    },
    IncludedBlocks: {
      actualNumber: "BlockNumber",
      session: "SessionIndex",
      randomSeed: "H256",
      activeParachains: "Vec<ParaId>",
      paraBlocks: "Vec<Hash>"
    },
    MoreAttestations: {}
  }
};

// node_modules/@polkadot/types/interfaces/bridges/definitions.js
var definitions_default54 = {
  rpc: {},
  types: {
    BridgedBlockHash: "H256",
    BridgedBlockNumber: "BlockNumber",
    BridgedHeader: "Header",
    BridgeMessageId: "(LaneId, MessageNonce)",
    CallOrigin: {
      _enum: {
        SourceRoot: "Null",
        TargetAccount: "(AccountId, MultiSigner, MultiSignature)",
        SourceAccount: "AccountId"
      }
    },
    ChainId: "[u8; 4]",
    DeliveredMessages: {
      begin: "MessageNonce",
      end: "MessageNonce",
      // pub type DispatchResultsBitVec = BitVec<Msb0, u8>;
      dispatchResults: "BitVec"
    },
    DispatchFeePayment: {
      _enum: ["AtSourceChain", "AtTargetChain"]
    },
    InboundLaneData: {
      relayers: "Vec<UnrewardedRelayer>",
      lastConfirmedNonce: "MessageNonce"
    },
    InboundRelayer: "AccountId",
    InitializationData: {
      header: "Header",
      authorityList: "AuthorityList",
      setId: "SetId",
      isHalted: "bool"
    },
    LaneId: "[u8; 4]",
    MessageData: {
      payload: "Bytes",
      fee: "Balance"
    },
    MessagesDeliveryProofOf: {
      bridgedHeaderHash: "BlockHash",
      storageProof: "Vec<Bytes>",
      lane: "LaneId"
    },
    MessageKey: {
      laneId: "LaneId",
      nonce: "MessageNonce"
    },
    MessageNonce: "u64",
    MessagesProofOf: {
      bridgedHeaderHash: "BridgedBlockHash",
      storageProof: "Vec<Bytes>",
      lane: "LaneId",
      noncesStart: "MessageNonce",
      noncesEnd: "MessageNonce"
    },
    OperatingMode: {
      _enum: ["Normal", "RejectingOutboundMessages", "Halted"]
    },
    OutboundLaneData: {
      oldestUnprunedNonce: "MessageNonce",
      latestReceivedNonce: "MessageNonce",
      latestGeneratedNonce: "MessageNonce"
    },
    OutboundMessageFee: "Balance",
    OutboundPayload: {
      specVersion: "u32",
      weight: "Weight",
      origin: "CallOrigin",
      dispatchFeePayment: "DispatchFeePayment",
      call: "Bytes"
    },
    Parameter: "Null",
    RelayerId: "AccountId",
    UnrewardedRelayer: {
      relayer: "RelayerId",
      messages: "DeliveredMessages"
    },
    UnrewardedRelayersState: {
      unrewardedRelayer_Entries: "MessageNonce",
      messagesInOldestEntry: "MessageNonce",
      totalMessages: "MessageNonce"
    }
  }
};

// node_modules/@polkadot/types/interfaces/claims/definitions.js
var definitions_default55 = {
  rpc: {},
  types: {
    StatementKind: {
      _enum: ["Regular", "Saft"]
    }
  }
};

// node_modules/@polkadot/types/interfaces/crowdloan/definitions.js
var definitions_default56 = {
  rpc: {},
  types: {
    FundIndex: "u32",
    LastContribution: {
      _enum: {
        Never: "Null",
        PreEnding: "u32",
        Ending: "BlockNumber"
      }
    },
    FundInfo: {
      depositor: "AccountId",
      verifier: "Option<MultiSigner>",
      deposit: "Balance",
      raised: "Balance",
      end: "BlockNumber",
      cap: "Balance",
      lastContribution: "LastContribution",
      firstPeriod: "LeasePeriod",
      lastPeriod: "LeasePeriod",
      trieIndex: "TrieIndex"
    },
    TrieIndex: "u32"
  }
};

// node_modules/@polkadot/types/interfaces/cumulus/runtime.js
var runtime25 = {
  AuraUnincludedSegmentApi: [
    {
      methods: {
        can_build_upon: {
          description: "Whether it is legal to extend the chain",
          params: [
            {
              name: "includedHash",
              type: "BlockHash"
            },
            {
              name: "slot",
              type: "Slot"
            }
          ],
          type: "bool"
        }
      },
      version: 1
    }
  ],
  CollectCollationInfo: [
    {
      methods: {
        collect_collation_info: {
          description: "Collect information about a collation.",
          params: [
            {
              name: "header",
              type: "Header"
            }
          ],
          type: "CollationInfo"
        }
      },
      version: 2
    },
    {
      methods: {
        collect_collation_info: {
          description: "Collect information about a collation.",
          params: [],
          type: "CollationInfoV1"
        }
      },
      version: 1
    }
  ]
};

// node_modules/@polkadot/types/interfaces/cumulus/definitions.js
var dmpQueue = {
  CollationInfo: {
    upwardMessages: "Vec<UpwardMessage>",
    horizontalMessages: "Vec<OutboundHrmpMessage>",
    newValidationCode: "Option<ValidationCode>",
    processedDownwardMessages: "u32",
    hrmpWatermark: "RelayBlockNumber",
    headData: "HeadData"
  },
  CollationInfoV1: {
    upwardMessages: "Vec<UpwardMessage>",
    horizontalMessages: "Vec<OutboundHrmpMessage>",
    newValidationCode: "Option<ValidationCode>",
    processedDownwardMessages: "u32",
    hrmpWatermark: "RelayBlockNumber"
  },
  ConfigData: {
    maxIndividual: "Weight"
  },
  MessageId: "[u8; 32]",
  OverweightIndex: "u64",
  PageCounter: "u32",
  PageIndexData: {
    beginUsed: "PageCounter",
    endUsed: "PageCounter",
    overweightCount: "OverweightIndex"
  }
};
var definitions_default57 = {
  rpc: {},
  runtime: runtime25,
  types: dmpQueue
};

// node_modules/@polkadot/types/interfaces/finality/runtime.js
var finalityV1 = {
  methods: {
    best_finalized: {
      description: "Returns number and hash of the best finalized header known to the bridge module.",
      params: [],
      type: "(BlockNumber, Hash)"
    }
  },
  version: 1
};
var runtime26 = {
  KusamaFinalityApi: [finalityV1],
  PolkadotFinalityApi: [finalityV1],
  RococoFinalityApi: [finalityV1],
  WestendFinalityApi: [finalityV1]
};

// node_modules/@polkadot/types/interfaces/finality/definitions.js
var definitions_default58 = {
  rpc: {},
  runtime: runtime26,
  types: {}
};

// node_modules/@polkadot/types/interfaces/parachains/hrmp.js
var hrmp_default = {
  HrmpChannel: {
    maxCapacity: "u32",
    maxTotalSize: "u32",
    maxMessageSize: "u32",
    msgCount: "u32",
    totalSize: "u32",
    mqcHead: "Option<Hash>",
    senderDeposit: "Balance",
    recipientDeposit: "Balance"
  },
  HrmpChannelId: {
    sender: "u32",
    receiver: "u32"
  },
  HrmpOpenChannelRequest: {
    confirmed: "bool",
    age: "SessionIndex",
    senderDeposit: "Balance",
    maxMessageSize: "u32",
    maxCapacity: "u32",
    maxTotalSize: "u32"
  }
};

// node_modules/@polkadot/types/interfaces/parachains/runtime.js
var PH_V1_TO_V2 = {
  assumed_validation_data: {
    description: "Returns the persisted validation data for the given `ParaId` along with the corresponding validation code hash.",
    params: [
      {
        name: "paraId",
        type: "ParaId"
      },
      {
        name: "hash",
        type: "Hash"
      }
    ],
    type: "Option<(PersistedValidationData, ValidationCodeHash)>"
  },
  availability_cores: {
    description: "Yields information on all availability cores as relevant to the child block.",
    params: [],
    type: "Vec<CoreState>"
  },
  candidate_events: {
    description: "Get a vector of events concerning candidates that occurred within a block.",
    params: [],
    type: "Vec<CandidateEvent>"
  },
  candidate_pending_availability: {
    description: "Get the receipt of a candidate pending availability.",
    params: [
      {
        name: "paraId",
        type: "ParaId"
      }
    ],
    type: "Option<CommittedCandidateReceipt>"
  },
  check_validation_outputs: {
    description: "Checks if the given validation outputs pass the acceptance criteria.",
    params: [
      {
        name: "paraId",
        type: "ParaId"
      },
      {
        name: "outputs",
        type: "CandidateCommitments"
      }
    ],
    type: "bool"
  },
  dmq_contents: {
    description: "Get all the pending inbound messages in the downward message queue for a para.",
    params: [
      {
        name: "paraId",
        type: "ParaId"
      }
    ],
    type: "Vec<InboundDownwardMessage>"
  },
  inbound_hrmp_channels_contents: {
    description: "Get the contents of all channels addressed to the given recipient.",
    params: [
      {
        name: "paraId",
        type: "ParaId"
      }
    ],
    type: "Vec<InboundHrmpMessage>"
  },
  on_chain_votes: {
    description: "Scrape dispute relevant from on-chain, backing votes and resolved disputes.",
    params: [],
    type: "Option<ScrapedOnChainVotes>"
  },
  persisted_validation_data: {
    description: "Yields the persisted validation data for the given `ParaId` along with an assumption that should be used if the para currently occupies a core.",
    params: [
      {
        name: "paraId",
        type: "ParaId"
      },
      {
        name: "assumption",
        type: "OccupiedCoreAssumption"
      }
    ],
    type: "Option<PersistedValidationData>"
  },
  session_index_for_child: {
    description: "Returns the session index expected at a child of the block.",
    params: [],
    type: "SessionIndex"
  },
  validation_code: {
    description: "Fetch the validation code used by a para, making the given `OccupiedCoreAssumption`.",
    params: [
      {
        name: "paraId",
        type: "ParaId"
      },
      {
        name: "assumption",
        type: "OccupiedCoreAssumption"
      }
    ],
    type: "Option<ValidationCode>"
  },
  validation_code_by_hash: {
    description: "Get the validation code from its hash.",
    params: [
      {
        name: "hash",
        type: "ValidationCodeHash"
      }
    ],
    type: "Option<ValidationCode>"
  },
  validator_groups: {
    description: "Returns the validator groups and rotation info localized based on the hypothetical child of a block whose state  this is invoked on",
    params: [],
    type: "(Vec<Vec<ParaValidatorIndex>>, GroupRotationInfo)"
  },
  validators: {
    description: "Get the current validators.",
    params: [],
    type: "Vec<ValidatorId>"
  }
};
var PH_V2_TO_V3 = {
  pvfs_require_precheck: {
    description: "Returns code hashes of PVFs that require pre-checking by validators in the active set.",
    params: [],
    type: "Vec<ValidationCodeHash>"
  },
  session_info: {
    description: "Get the session info for the given session, if stored.",
    params: [
      {
        name: "index",
        type: "SessionIndex"
      }
    ],
    type: "Option<SessionInfo>"
  },
  submit_pvf_check_statement: {
    description: "Submits a PVF pre-checking statement into the transaction pool.",
    params: [
      {
        name: "stmt",
        type: "PvfCheckStatement"
      },
      {
        name: "signature",
        type: "ValidatorSignature"
      }
    ],
    type: "Null"
  },
  validation_code_hash: {
    description: "Fetch the hash of the validation code used by a para, making the given `OccupiedCoreAssumption`.",
    params: [
      {
        name: "paraId",
        type: "ParaId"
      },
      {
        name: "assumption",
        type: "OccupiedCoreAssumption"
      }
    ],
    type: "Option<ValidationCodeHash>"
  }
};
var PH_V3 = {
  disputes: {
    description: "Returns all onchain disputes.",
    params: [],
    type: "Vec<(SessionIndex, CandidateHash, DisputeState)>"
  }
};
var PH_V4 = {
  session_executor_params: {
    description: "Returns execution parameters for the session.",
    params: [
      {
        name: "sessionIndex",
        type: "SessionIndex"
      }
    ],
    type: "Option<ExecutorParams>"
  }
};
var PH_V5 = {
  key_ownership_proof: {
    description: "Returns a merkle proof of a validator session key",
    params: [
      {
        name: "validatorId",
        type: "ValidatorId"
      }
    ],
    type: "Option<OpaqueKeyOwnershipProof>"
  },
  submit_report_dispute_lost: {
    description: "Submit an unsigned extrinsic to slash validators who lost a dispute about a candidate of a past session",
    params: [
      {
        name: "disputeProof",
        type: "DisputeProof"
      },
      {
        name: "keyOwnershipProof",
        type: "OpaqueKeyOwnershipProof"
      }
    ],
    type: "Option<Null>"
  },
  unapplied_slashes: {
    description: "Returns a list of validators that lost a past session dispute and need to be slashed",
    params: [],
    type: "Vec<(SessionIndex, CandidateHash, PendingSlashes)>"
  }
};
var PH_V6 = {
  minimum_backing_votes: {
    description: "Get the minimum number of backing votes for a parachain candidate. This is a staging method! Do not use on production runtimes!",
    params: [],
    type: "u32"
  }
};
var PH_V7 = {
  async_backing_params: {
    description: "Returns candidate's acceptance limitations for asynchronous backing for a relay parent",
    params: [],
    type: "AsyncBackingParams"
  },
  para_backing_state: {
    description: "Returns the state of parachain backing for a given para",
    params: [
      {
        name: "paraId",
        type: "ParaId"
      }
    ],
    type: "Option<BackingState>"
  }
};
var PH_V8 = {
  disabled_validators: {
    description: "Returns a list of all disabled validators at the given block",
    params: [],
    type: "ValidatorIndex"
  }
};
var PH_V9 = {
  node_features: {
    description: "Get node features. This is a staging method! Do not use on production runtimes!",
    params: [],
    type: "NodeFeatures"
  }
};
var PH_V10 = {
  approval_voting_params: {
    description: "Approval voting configuration parameters",
    params: [],
    type: "ApprovalVotingParams"
  }
};
var PH_V11 = {
  claim_queue: {
    description: "Claim queue",
    params: [],
    type: "BTreeMap<CoreIndex, Vec<u32>>"
  }
};
var runtime27 = {
  ParachainHost: [
    {
      methods: {
        ...PH_V1_TO_V2,
        ...PH_V2_TO_V3,
        ...PH_V3,
        ...PH_V4,
        ...PH_V5,
        ...PH_V6,
        ...PH_V7,
        ...PH_V8,
        ...PH_V9,
        ...PH_V10,
        ...PH_V11
      },
      version: 11
    },
    {
      methods: {
        ...PH_V1_TO_V2,
        ...PH_V2_TO_V3,
        ...PH_V3,
        ...PH_V4,
        ...PH_V5,
        ...PH_V6,
        ...PH_V7,
        ...PH_V8,
        ...PH_V9,
        ...PH_V10
      },
      version: 10
    },
    {
      methods: {
        ...PH_V1_TO_V2,
        ...PH_V2_TO_V3,
        ...PH_V3,
        ...PH_V4,
        ...PH_V5,
        ...PH_V6,
        ...PH_V7,
        ...PH_V8,
        ...PH_V9
      },
      version: 9
    },
    {
      methods: {
        ...PH_V1_TO_V2,
        ...PH_V2_TO_V3,
        ...PH_V3,
        ...PH_V4,
        ...PH_V5,
        ...PH_V6,
        ...PH_V7,
        ...PH_V8
      },
      version: 8
    },
    {
      methods: {
        ...PH_V1_TO_V2,
        ...PH_V2_TO_V3,
        ...PH_V3,
        ...PH_V4,
        ...PH_V5,
        ...PH_V6,
        ...PH_V7
      },
      version: 7
    },
    {
      methods: {
        ...PH_V1_TO_V2,
        ...PH_V2_TO_V3,
        ...PH_V3,
        ...PH_V4,
        ...PH_V5,
        ...PH_V6
      },
      version: 6
    },
    {
      methods: {
        ...PH_V1_TO_V2,
        ...PH_V2_TO_V3,
        ...PH_V3,
        ...PH_V4,
        ...PH_V5
      },
      version: 5
    },
    {
      methods: {
        ...PH_V1_TO_V2,
        ...PH_V2_TO_V3,
        ...PH_V3,
        ...PH_V4
      },
      version: 4
    },
    {
      methods: {
        ...PH_V1_TO_V2,
        ...PH_V2_TO_V3,
        ...PH_V3
      },
      version: 3
    },
    {
      methods: {
        ...PH_V1_TO_V2,
        ...PH_V2_TO_V3
      },
      version: 2
    },
    {
      methods: {
        session_info: {
          description: "Get the session info for the given session, if stored.",
          params: [
            {
              name: "index",
              type: "SessionIndex"
            }
          ],
          type: "Option<OldV1SessionInfo>"
        },
        ...PH_V1_TO_V2
      },
      version: 1
    }
  ]
};

// node_modules/@polkadot/types/interfaces/parachains/slots.js
var SlotRange10 = {
  _enum: ["ZeroZero", "ZeroOne", "ZeroTwo", "ZeroThree", "OneOne", "OneTwo", "OneThree", "TwoTwo", "TwoThree", "ThreeThree"]
};
var SlotRange = {
  _enum: ["ZeroZero", "ZeroOne", "ZeroTwo", "ZeroThree", "ZeroFour", "ZeroFive", "ZeroSix", "ZeroSeven", "OneOne", "OneTwo", "OneThree", "OneFour", "OneFive", "OneSix", "OneSeven", "TwoTwo", "TwoThree", "TwoFour", "TwoFive", "TwoSix", "TwoSeven", "ThreeThree", "ThreeFour", "ThreeFive", "ThreeSix", "ThreeSeven", "FourFour", "FourFive", "FourSix", "FourSeven", "FiveFive", "FiveSix", "FiveSeven", "SixSix", "SixSeven", "SevenSeven"]
};
var oldTypes = {
  Bidder: {
    _enum: {
      New: "NewBidder",
      Existing: "ParaId"
    }
  },
  IncomingParachain: {
    _enum: {
      Unset: "NewBidder",
      Fixed: "IncomingParachainFixed",
      Deploy: "IncomingParachainDeploy"
    }
  },
  IncomingParachainDeploy: {
    code: "ValidationCode",
    initialHeadData: "HeadData"
  },
  IncomingParachainFixed: {
    codeHash: "Hash",
    codeSize: "u32",
    initialHeadData: "HeadData"
  },
  NewBidder: {
    who: "AccountId",
    sub: "SubId"
  },
  SubId: "u32"
};
var slots_default = {
  ...oldTypes,
  AuctionIndex: "u32",
  LeasePeriod: "BlockNumber",
  LeasePeriodOf: "BlockNumber",
  SlotRange10,
  SlotRange,
  WinningData10: `[WinningDataEntry; ${SlotRange10._enum.length}]`,
  WinningData: `[WinningDataEntry; ${SlotRange._enum.length}]`,
  WinningDataEntry: "Option<(AccountId, ParaId, BalanceOf)>",
  WinnersData10: "Vec<WinnersDataTuple10>",
  WinnersData: "Vec<WinnersDataTuple>",
  WinnersDataTuple10: "(AccountId, ParaId, BalanceOf, SlotRange10)",
  WinnersDataTuple: "(AccountId, ParaId, BalanceOf, SlotRange)"
};

// node_modules/@polkadot/types/interfaces/parachains/definitions.js
var proposeTypes = {
  ParachainProposal: {
    proposer: "AccountId",
    genesisHead: "HeadData",
    validators: "Vec<ValidatorId>",
    name: "Bytes",
    balance: "Balance"
  },
  RegisteredParachainInfo: {
    validators: "Vec<ValidatorId>",
    proposer: "AccountId"
  }
};
var cumulusTypes = {
  ServiceQuality: {
    _enum: ["Ordered", "Fast"]
  }
};
var disputeTypes = {
  DisputeLocation: {
    _enum: ["Local", "Remote"]
  },
  DisputeResult: {
    _enum: ["Valid", "Invalid"]
  },
  DisputeState: {
    validatorsFor: "BitVec",
    validatorsAgainst: "BitVec",
    start: "BlockNumber",
    concludedAt: "Option<BlockNumber>"
  },
  DisputeStatement: {
    _enum: {
      Valid: "ValidDisputeStatementKind",
      Invalid: "InvalidDisputeStatementKind"
    }
  },
  DisputeStatementSet: {
    candidateHash: "CandidateHash",
    session: "SessionIndex",
    statements: "Vec<(DisputeStatement, ParaValidatorIndex, ValidatorSignature)>"
  },
  ExecutorParam: {
    _enum: {
      Phantom: "Null",
      // index starts at 1... empty slot at 0
      MaxMemoryPages: "u32",
      StackLogicalMax: "u32",
      StackNativeMax: "u32",
      PrecheckingMaxMemory: "u64",
      PvfPrepTimeout: "(PvfPrepTimeoutKind, u64)",
      PvfExecTimeout: "(PvfExecTimeoutKind, u64)"
    }
  },
  ExecutorParamsHash: "Hash",
  ExecutorParams: "Vec<ExecutorParam>",
  ExplicitDisputeStatement: {
    valid: "bool",
    candidateHash: "CandidateHash",
    session: "SessionIndex"
  },
  InvalidDisputeStatementKind: {
    _enum: ["Explicit"]
  },
  MultiDisputeStatementSet: "Vec<DisputeStatementSet>",
  PvfExecTimeoutKind: {
    _enum: ["Backing", "Approval"]
  },
  PvfPrepTimeoutKind: {
    _enum: ["Precheck", "Lenient"]
  },
  ValidDisputeStatementKind: {
    _enum: {
      Explicit: "Null",
      BackingSeconded: "Hash",
      BackingValid: "Hash",
      ApprovalChecking: "Null"
    }
  }
};
var definitions_default59 = {
  rpc: {},
  runtime: runtime27,
  types: {
    ...cumulusTypes,
    ...disputeTypes,
    ...hrmp_default,
    ...proposeTypes,
    ...slots_default,
    AbridgedCandidateReceipt: {
      parachainIndex: "ParaId",
      relayParent: "Hash",
      headData: "HeadData",
      collator: "CollatorId",
      signature: "CollatorSignature",
      povBlockHash: "Hash",
      commitments: "CandidateCommitments"
    },
    AbridgedHostConfiguration: {
      maxCodeSize: "u32",
      maxHeadDataSize: "u32",
      maxUpwardQueueCount: "u32",
      maxUpwardQueueSize: "u32",
      maxUpwardMessageSize: "u32",
      maxUpwardMessageNumPerCandidate: "u32",
      hrmpMaxMessageNumPerCandidate: "u32",
      validationUpgradeFrequency: "BlockNumber",
      validationUpgradeDelay: "BlockNumber"
    },
    AbridgedHrmpChannel: {
      maxCapacity: "u32",
      maxTotalSize: "u32",
      maxMessageSize: "u32",
      msgCount: "u32",
      totalSize: "u32",
      mqcHead: "Option<Hash>"
    },
    ApprovalVotingParams: {
      maxApprovalCoalesceCount: "u32"
    },
    AssignmentId: "AccountId",
    AssignmentKind: {
      _enum: {
        Parachain: "Null",
        Parathread: "(CollatorId, u32)"
      }
    },
    AsyncBackingParams: {
      maxCandidateDepth: "u32",
      allowedAncestryLen: "u32"
    },
    AttestedCandidate: {
      candidate: "AbridgedCandidateReceipt",
      validityVotes: "Vec<ValidityAttestation>",
      validatorIndices: "BitVec"
    },
    AuthorityDiscoveryId: "AccountId",
    AvailabilityBitfield: "BitVec",
    AvailabilityBitfieldRecord: {
      bitfield: "AvailabilityBitfield",
      submittedTt: "BlockNumber"
    },
    BackedCandidate: {
      candidate: "CommittedCandidateReceipt",
      validityVotes: "Vec<ValidityAttestation>",
      validatorIndices: "BitVec"
    },
    BackingState: {
      constraints: "Constraints",
      pendingAvailability: "Vec<CandidatePendingAvailability>"
    },
    BufferedSessionChange: {
      applyAt: "BlockNumber",
      validators: "Vec<ValidatorId>",
      queued: "Vec<ValidatorId>",
      sessionIndex: "SessionIndex"
    },
    CandidateCommitments: {
      upwardMessages: "Vec<UpwardMessage>",
      horizontalMessages: "Vec<OutboundHrmpMessage>",
      newValidationCode: "Option<ValidationCode>",
      headData: "HeadData",
      processedDownwardMessages: "u32",
      hrmpWatermark: "BlockNumber"
    },
    CandidateDescriptor: {
      paraId: "ParaId",
      relayParent: "RelayChainHash",
      collatorId: "CollatorId",
      persistedValidationDataHash: "Hash",
      povHash: "Hash",
      erasureRoot: "Hash",
      signature: "CollatorSignature",
      paraHead: "Hash",
      validationCodeHash: "ValidationCodeHash"
    },
    CandidateEvent: {
      _enum: {
        CandidateBacked: "(CandidateReceipt, HeadData, CoreIndex, GroupIndex)",
        CandidateIncluded: "(CandidateReceipt, HeadData, CoreIndex, GroupIndex)",
        CandidateTimedOut: "(CandidateReceipt, HeadData, CoreIndex)"
      }
    },
    CandidateHash: "Hash",
    CandidateInfo: {
      who: "AccountId",
      deposit: "Balance"
    },
    CandidatePendingAvailability: {
      core: "CoreIndex",
      hash: "CandidateHash",
      descriptor: "CandidateDescriptor",
      availabilityVotes: "BitVec",
      backers: "BitVec",
      relayParentNumber: "BlockNumber",
      backedInNumber: "BlockNumber",
      backingGroup: "GroupIndex"
    },
    CandidateReceipt: {
      descriptor: "CandidateDescriptor",
      commitmentsHash: "Hash"
    },
    GlobalValidationData: {
      maxCodeSize: "u32",
      maxHeadDataSize: "u32",
      blockNumber: "BlockNumber"
    },
    CollatorId: "H256",
    CollatorSignature: "Signature",
    CommittedCandidateReceipt: {
      descriptor: "CandidateDescriptor",
      commitments: "CandidateCommitments"
    },
    Constraints: {
      minRelayParentNumber: "BlockNumber",
      maxPovSize: "u32",
      maxCodeSize: "u32",
      umpRemaining: "u32",
      umpRemainingBytes: "u32",
      maxUmpNumPerCandidate: "u32",
      dmpRemainingMessages: "Vec<BlockNumber>",
      hrmpInbound: "InboundHrmpLimitations",
      hrmpChannelsOut: "HashMap<ParaId, OutboundHrmpChannelLimitations>",
      maxHrmpNumPerCandidate: "u32",
      requiredParent: "HeadData",
      validationCodeHash: "ValidationCodeHash",
      upgradeRestriction: "Option<UpgradeRestriction>",
      futureValidationCode: "Option<(BlockNumber, ValidationCodeHash)>"
    },
    CoreAssignment: {
      core: "CoreIndex",
      paraId: "ParaId",
      kind: "AssignmentKind",
      groupIdx: "GroupIndex"
    },
    CoreIndex: "u32",
    CoreOccupied: {
      _enum: {
        Parathread: "ParathreadEntry",
        Parachain: "Null"
      }
    },
    CoreState: {
      _enum: {
        Occupied: "OccupiedCore",
        Scheduled: "ScheduledCore",
        Free: "Null"
      }
    },
    DisputeProof: {
      timeSlot: "DisputesTimeSlot",
      kind: "SlashingOffenceKind",
      validatorIndex: "ValidatorIndex",
      validatorId: "ValidatorId"
    },
    DisputesTimeSlot: {
      sessionIndex: "SessionIndex",
      candidateHash: "CandidateHash"
    },
    DoubleVoteReport: {
      identity: "ValidatorId",
      first: "(Statement, ValidatorSignature)",
      second: "(Statement, ValidatorSignature)",
      proof: "MembershipProof",
      signingContext: "SigningContext"
    },
    DownwardMessage: "Bytes",
    GroupIndex: "u32",
    GroupRotationInfo: {
      sessionStartBlock: "BlockNumber",
      groupRotationFrequency: "BlockNumber",
      now: "BlockNumber"
    },
    GlobalValidationSchedule: {
      maxCodeSize: "u32",
      maxHeadDataSize: "u32",
      blockNumber: "BlockNumber"
    },
    HeadData: "Bytes",
    HostConfiguration: {
      maxCodeSize: "u32",
      maxHeadDataSize: "u32",
      maxUpwardQueueCount: "u32",
      maxUpwardQueueSize: "u32",
      maxUpwardMessageSize: "u32",
      maxUpwardMessageNumPerCandidate: "u32",
      hrmpMaxMessageNumPerCandidate: "u32",
      validationUpgradeFrequency: "BlockNumber",
      validationUpgradeDelay: "BlockNumber",
      maxPovSize: "u32",
      maxDownwardMessageSize: "u32",
      preferredDispatchableUpwardMessagesStepWeight: "Weight",
      hrmpMaxParachainOutboundChannels: "u32",
      hrmpMaxParathreadOutboundChannels: "u32",
      hrmpOpenRequestTtl: "u32",
      hrmpSenderDeposit: "Balance",
      hrmpRecipientDeposit: "Balance",
      hrmpChannelMaxCapacity: "u32",
      hrmpChannelMaxTotalSize: "u32",
      hrmpMaxParachainInboundChannels: "u32",
      hrmpMaxParathreadInboundChannels: "u32",
      hrmpChannelMaxMessageSize: "u32",
      codeRetentionPeriod: "BlockNumber",
      parathreadCores: "u32",
      parathreadRetries: "u32",
      groupRotationFrequency: "BlockNumber",
      chainAvailabilityPeriod: "BlockNumber",
      threadAvailabilityPeriod: "BlockNumber",
      schedulingLookahead: "u32",
      maxValidatorsPerCore: "Option<u32>",
      maxValidators: "Option<u32>",
      disputePeriod: "SessionIndex",
      disputePostConclusionAcceptancePeriod: "BlockNumber",
      disputeMaxSpamSlots: "u32",
      disputeConclusionByTimeOutPeriod: "BlockNumber",
      noShowSlots: "u32",
      nDelayTranches: "u32",
      zerothDelayTrancheWidth: "u32",
      neededApprovals: "u32",
      relayVrfModuloSamples: "u32"
    },
    InboundDownwardMessage: {
      pubSentAt: "BlockNumber",
      pubMsg: "DownwardMessage"
    },
    InboundHrmpMessage: {
      sentAt: "BlockNumber",
      data: "Bytes"
    },
    InboundHrmpLimitations: {
      validWatermarks: "Vec<BlockNumber>"
    },
    InboundHrmpMessages: "Vec<InboundHrmpMessage>",
    LocalValidationData: {
      parentHead: "HeadData",
      balance: "Balance",
      codeUpgradeAllowed: "Option<BlockNumber>"
    },
    MessageIngestionType: {
      downwardMessages: "Vec<InboundDownwardMessage>",
      horizontalMessages: "BTreeMap<ParaId, InboundHrmpMessages>"
    },
    MessageQueueChain: "RelayChainHash",
    NodeFeatures: "BitVec",
    OccupiedCore: {
      nextUpOnAvailable: "Option<ScheduledCore>",
      occupiedSince: "BlockNumber",
      timeOutAt: "BlockNumber",
      nextUpOnTimeOut: "Option<ScheduledCore>",
      availability: "BitVec",
      groupResponsible: "GroupIndex",
      candidateHash: "CandidateHash",
      candidateDescriptor: "CandidateDescriptor"
    },
    OccupiedCoreAssumption: {
      _enum: ["Included,", "TimedOut", "Free"]
    },
    OutboundHrmpChannelLimitations: {
      bytesRemaining: "u32",
      messagesRemaining: "u32"
    },
    OutboundHrmpMessage: {
      recipient: "u32",
      data: "Bytes"
    },
    PendingSlashes: {
      _alias: {
        slashKeys: "keys"
      },
      slashKeys: "BTreeMap<ValidatorIndex, ValidatorId>",
      kind: "SlashingOffenceKind"
    },
    ParachainDispatchOrigin: {
      _enum: ["Signed", "Parachain", "Root"]
    },
    ParachainInherentData: {
      validationData: "PersistedValidationData",
      relayChainState: "StorageProof",
      downwardMessages: "Vec<InboundDownwardMessage>",
      horizontalMessages: "BTreeMap<ParaId, VecInboundHrmpMessage>"
    },
    ParachainsInherentData: {
      bitfields: "SignedAvailabilityBitfields",
      backedCandidates: "Vec<BackedCandidate>",
      disputes: "MultiDisputeStatementSet",
      parentHeader: "Header"
    },
    ParaGenesisArgs: {
      genesisHead: "Bytes",
      validationCode: "Bytes",
      parachain: "bool"
    },
    ParaId: "u32",
    ParaInfo: {
      manager: "AccountId",
      deposit: "Balance",
      locked: "bool"
    },
    ParaLifecycle: {
      _enum: ["Onboarding", "Parathread", "Parachain", "UpgradingToParachain", "DowngradingToParathread", "OutgoingParathread", "OutgoingParachain"]
    },
    ParaPastCodeMeta: {
      upgradeTimes: "Vec<ReplacementTimes>",
      lastPruned: "Option<BlockNumber>"
    },
    ParaScheduling: {
      _enum: ["Always", "Dynamic"]
    },
    ParathreadClaim: "(ParaId, CollatorId)",
    ParathreadClaimQueue: {
      queue: "Vec<QueuedParathread>",
      nextCoreOffset: "u32"
    },
    ParathreadEntry: {
      claim: "ParathreadClaim",
      retries: "u32"
    },
    ParaValidatorIndex: "u32",
    PersistedValidationData: {
      parentHead: "HeadData",
      relayParentNumber: "RelayChainBlockNumber",
      relayParentStorageRoot: "Hash",
      maxPovSize: "u32"
    },
    PvfCheckStatement: {
      accept: "bool",
      subject: "ValidationCodeHash",
      sessionIndex: "SessionIndex",
      validatorIndex: "ParaValidatorIndex"
    },
    QueuedParathread: {
      claim: "ParathreadEntry",
      coreOffset: "u32"
    },
    RelayBlockNumber: "u32",
    RelayChainBlockNumber: "RelayBlockNumber",
    RelayHash: "Hash",
    RelayChainHash: "RelayHash",
    Remark: "[u8; 32]",
    ReplacementTimes: {
      expectedAt: "BlockNumber",
      activatedAt: "BlockNumber"
    },
    Retriable: {
      _enum: {
        Never: "Null",
        WithRetries: "u32"
      }
    },
    ScheduledCore: {
      paraId: "ParaId",
      collator: "Option<CollatorId>"
    },
    Scheduling: {
      _enum: ["Always", "Dynamic"]
    },
    ScrapedOnChainVotes: {
      session: "SessionIndex",
      backingValidatorsPerCandidate: "Vec<(CandidateReceipt, Vec<(ParaValidatorIndex, ValidityAttestation)>)>",
      disputes: "MultiDisputeStatementSet"
    },
    SessionInfo: {
      activeValidatorIndices: "Vec<ParaValidatorIndex>",
      randomSeed: "[u8; 32]",
      disputePeriod: "SessionIndex",
      validators: "Vec<ValidatorId>",
      discoveryKeys: "Vec<AuthorityDiscoveryId>",
      assignmentKeys: "Vec<AssignmentId>",
      validatorGroups: "Vec<Vec<ValidatorIndex>>",
      nCores: "u32",
      zerothDelayTrancheWidth: "u32",
      relayVrfModuloSamples: "u32",
      nDelayTranches: "u32",
      noShowSlots: "u32",
      neededApprovals: "u32"
    },
    OldV1SessionInfo: {
      validators: "Vec<ValidatorId>",
      discoveryKeys: "Vec<AuthorityDiscoveryId>",
      assignmentKeys: "Vec<AssignmentId>",
      validatorGroups: "Vec<Vec<ParaValidatorIndex>>",
      nCores: "u32",
      zerothDelayTrancheWidth: "u32",
      relayVrfModuloSamples: "u32",
      nDelayTranches: "u32",
      noShowSlots: "u32",
      neededApprovals: "u32"
    },
    SessionInfoValidatorGroup: "Vec<ParaValidatorIndex>",
    SignedAvailabilityBitfield: {
      payload: "BitVec",
      validatorIndex: "ParaValidatorIndex",
      signature: "ValidatorSignature"
    },
    SignedAvailabilityBitfields: "Vec<SignedAvailabilityBitfield>",
    SigningContext: {
      sessionIndex: "SessionIndex",
      parentHash: "Hash"
    },
    SlashingOffenceKind: {
      _enum: ["ForInvalid", "AgainstValid"]
    },
    Statement: {
      _enum: {
        Never: "Null",
        // starts at 1
        Candidate: "Hash",
        Valid: "Hash",
        Invalid: "Hash"
      }
    },
    TransientValidationData: {
      maxCodeSize: "u32",
      maxHeadDataSize: "u32",
      balance: "Balance",
      codeUpgradeAllowed: "Option<BlockNumber>",
      dmqLength: "u32"
    },
    UpgradeGoAhead: {
      _enum: ["Abort", "GoAhead"]
    },
    UpgradeRestriction: {
      _enum: ["Present"]
    },
    UpwardMessage: "Bytes",
    ValidationFunctionParams: {
      maxCodeSize: "u32",
      relayChainHeight: "RelayChainBlockNumber",
      codeUpgradeAllowed: "Option<RelayChainBlockNumber>"
    },
    ValidationCode: "Bytes",
    ValidationCodeHash: "Hash",
    ValidationData: {
      persisted: "PersistedValidationData",
      transient: "TransientValidationData"
    },
    ValidationDataType: {
      validationData: "ValidationData",
      relayChainState: "Vec<Bytes>"
    },
    ValidatorSignature: "Signature",
    ValidityAttestation: {
      _enum: {
        Never: "Null",
        // starts at 1
        Implicit: "ValidatorSignature",
        Explicit: "ValidatorSignature"
      }
    },
    MessagingStateSnapshot: {
      relayDispatchQueueSize: "(u32, u32)",
      egressChannels: "Vec<MessagingStateSnapshotEgressEntry>"
    },
    MessagingStateSnapshotEgressEntry: "(ParaId, AbridgedHrmpChannel)",
    SystemInherentData: "ParachainInherentData",
    VecInboundHrmpMessage: "Vec<InboundHrmpMessage>"
  }
};

// node_modules/@polkadot/types/interfaces/poll/definitions.js
var definitions_default60 = {
  rpc: {},
  types: {
    Approvals: "[bool; 4]"
  }
};

// node_modules/@polkadot/types/interfaces/purchase/definitions.js
var definitions_default61 = {
  rpc: {},
  types: {
    AccountStatus: {
      validity: "AccountValidity",
      freeBalance: "Balance",
      lockedBalance: "Balance",
      signature: "Vec<u8>",
      vat: "Permill"
    },
    AccountValidity: {
      _enum: ["Invalid", "Initiated", "Pending", "ValidLow", "ValidHigh", "Completed"]
    }
  }
};

// node_modules/@polkadot/types/interfaces/dryRunApi/runtime.js
var runtime28 = {
  DryRunApi: [
    {
      methods: {
        dry_run_call: {
          description: "Dry run call",
          params: [
            {
              name: "origin",
              type: "OriginCaller"
            },
            {
              name: "call",
              type: "RuntimeCall"
            }
          ],
          type: "Result<CallDryRunEffects, XcmDryRunApiError>"
        },
        dry_run_xcm: {
          description: "Dry run XCM program",
          params: [
            {
              name: "originLocation",
              type: "VersionedMultiLocation"
            },
            {
              name: "xcm",
              type: "VersionedXcm"
            }
          ],
          type: "Result<XcmDryRunEffects, XcmDryRunApiError>"
        }
      },
      version: 1
    }
  ]
};

// node_modules/@polkadot/types/interfaces/dryRunApi/definitions.js
var definitions_default62 = {
  rpc: {},
  runtime: runtime28,
  types: {
    PostDispatchInfo: {
      actualWeight: "Option<Weight>",
      paysFee: "Pays"
    },
    DispatchResultWithPostInfo: "Result<PostDispatchInfo, DispatchError>",
    CallDryRunEffects: {
      executionResult: "DispatchResultWithPostInfo",
      emittedEvents: "Vec<Event>",
      localXcm: "Option<VersionedXcm>",
      forwardedXcms: "Vec<(VersionedMultiLocation, Vec<VersionedXcm>)>"
    },
    XcmDryRunEffects: {
      executionResult: "OutcomeV4",
      emittedEvents: "Vec<Event>",
      forwardedXcms: "Vec<(VersionedMultiLocation, Vec<VersionedXcm>)>"
    },
    XcmDryRunApiError: {
      _enum: [
        "Unimplemented",
        "VersionedConversionFailed"
      ]
    }
  }
};

// node_modules/@polkadot/types-create/node_modules/@polkadot/x-textencoder/fallback.js
var TextEncoder14 = class {
  encode(value) {
    const count = value.length;
    const u8a = new Uint8Array(count);
    for (let i = 0; i < count; i++) {
      u8a[i] = value.charCodeAt(i);
    }
    return u8a;
  }
};

// node_modules/@polkadot/types-create/node_modules/@polkadot/x-textencoder/browser.js
var TextEncoder15 = /* @__PURE__ */ extractGlobal("TextEncoder", TextEncoder14);

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/is/function.js
function isFunction7(value) {
  return typeof value === "function";
}

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/hex/toU8a.js
var CHR7 = "0123456789abcdef";
var U811 = new Uint8Array(256);
var U1611 = new Uint8Array(256 * 256);
for (let i = 0, count = CHR7.length; i < count; i++) {
  U811[CHR7[i].charCodeAt(0) | 0] = i | 0;
  if (i > 9) {
    U811[CHR7[i].toUpperCase().charCodeAt(0) | 0] = i | 0;
  }
}
for (let i = 0; i < 256; i++) {
  const s = i << 8;
  for (let j = 0; j < 256; j++) {
    U1611[s | j] = U811[i] << 4 | U811[j];
  }
}
function hexToU8a6(value, bitLength = -1) {
  if (!value) {
    return new Uint8Array();
  }
  let s = value.startsWith("0x") ? 2 : 0;
  const decLength = Math.ceil((value.length - s) / 2);
  const endLength = Math.ceil(bitLength === -1 ? decLength : bitLength / 8);
  const result = new Uint8Array(endLength);
  const offset = endLength > decLength ? endLength - decLength : 0;
  for (let i = offset; i < endLength; i++, s += 2) {
    result[i] = U1611[value.charCodeAt(s) << 8 | value.charCodeAt(s + 1)];
  }
  return result;
}

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/is/hex.js
var REGEX_HEX_PREFIXED6 = /^0x[\da-fA-F]+$/;
function isHex6(value, bitLength = -1, ignoreLength) {
  return typeof value === "string" && (value === "0x" || REGEX_HEX_PREFIXED6.test(value)) && (bitLength === -1 ? ignoreLength || value.length % 2 === 0 : value.length === 2 + Math.ceil(bitLength / 4));
}

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/has.js
var hasBigInt6 = typeof BigInt2 === "function" && typeof BigInt2.asIntN === "function";
var hasBuffer6 = typeof xglobal.Buffer === "function" && typeof xglobal.Buffer.isBuffer === "function";
var hasProcess6 = typeof xglobal.process === "object";

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/is/buffer.js
function isBuffer6(value) {
  return hasBuffer6 && !!value && isFunction7(value.readDoubleLE) && xglobal.Buffer.isBuffer(value);
}

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/is/u8a.js
function isU8a6(value) {
  return (value && value.constructor) === Uint8Array || value instanceof Uint8Array;
}

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/string/toU8a.js
var encoder7 = new TextEncoder15();
function stringToU8a7(value) {
  return value ? encoder7.encode(value.toString()) : new Uint8Array();
}

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/u8a/toU8a.js
function u8aToU8a6(value, strict = false) {
  if (strict && (value === null || value === void 0)) {
    throw new Error("u8aToU8a: Expected non-null, non-undefined value");
  }
  return isU8a6(value) ? isBuffer6(value) ? new Uint8Array(value) : value : isHex6(value) ? hexToU8a6(value) : Array.isArray(value) ? new Uint8Array(value) : stringToU8a7(value);
}

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/u8a/eq.js
function u8aEq2(a, b) {
  const u8aa = u8aToU8a6(a);
  const u8ab = u8aToU8a6(b);
  if (u8aa.length === u8ab.length) {
    const dvA = new DataView(u8aa.buffer, u8aa.byteOffset);
    const dvB = new DataView(u8ab.buffer, u8ab.byteOffset);
    const mod2 = u8aa.length % 4 | 0;
    const length = u8aa.length - mod2 | 0;
    for (let i = 0; i < length; i += 4) {
      if (dvA.getUint32(i) !== dvB.getUint32(i)) {
        return false;
      }
    }
    for (let i = length, count = u8aa.length; i < count; i++) {
      if (u8aa[i] !== u8ab[i]) {
        return false;
      }
    }
    return true;
  }
  return false;
}

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/u8a/toHex.js
var U812 = new Array(256);
var U1612 = new Array(256 * 256);
for (let n = 0; n < 256; n++) {
  U812[n] = n.toString(16).padStart(2, "0");
}
for (let i = 0; i < 256; i++) {
  const s = i << 8;
  for (let j = 0; j < 256; j++) {
    U1612[s | j] = U812[i] + U812[j];
  }
}
function hex6(value, result) {
  const mod2 = value.length % 2 | 0;
  const length = value.length - mod2 | 0;
  for (let i = 0; i < length; i += 2) {
    result += U1612[value[i] << 8 | value[i + 1]];
  }
  if (mod2) {
    result += U812[value[length] | 0];
  }
  return result;
}
function u8aToHex6(value, bitLength = -1, isPrefixed = true) {
  const empty2 = isPrefixed ? "0x" : "";
  if (!value?.length) {
    return empty2;
  } else if (bitLength > 0) {
    const length = Math.ceil(bitLength / 8);
    if (value.length > length) {
      return `${hex6(value.subarray(0, length / 2), empty2)}\u2026${hex6(value.subarray(value.length - length / 2), "")}`;
    }
  }
  return hex6(value, empty2);
}

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/is/bigInt.js
function isBigInt5(value) {
  return typeof value === "bigint";
}

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/is/string.js
function isString5(value) {
  return typeof value === "string" || value instanceof String;
}

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/stringify.js
function replacer4(_, v) {
  return isBigInt5(v) ? v.toString() : v;
}
function stringify4(value, space) {
  return JSON.stringify(value, replacer4, space);
}

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/is/number.js
function isNumber5(value) {
  return typeof value === "number";
}

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/is/undefined.js
function isUndefined6(value) {
  return value === void 0;
}

// node_modules/@polkadot/types-create/node_modules/@polkadot/util/object/spread.js
function objectSpread6(dest, ...sources) {
  const filterProps = /* @__PURE__ */ new Set(["__proto__", "constructor", "prototype"]);
  for (let i = 0, count = sources.length; i < count; i++) {
    const src = sources[i];
    if (src) {
      if (typeof src.entries === "function") {
        for (const [key, value] of src.entries()) {
          if (!filterProps.has(key)) {
            dest[key] = value;
          }
        }
      } else {
        const sanitizedSrc = /* @__PURE__ */ Object.create(null);
        for (const [key, value] of Object.entries(src)) {
          if (!filterProps.has(key)) {
            sanitizedSrc[key] = value;
          }
        }
        Object.assign(dest, sanitizedSrc);
      }
    }
  }
  return dest;
}

// node_modules/@polkadot/types-create/types/types.js
var TypeDefInfo;
(function(TypeDefInfo2) {
  TypeDefInfo2[TypeDefInfo2["BTreeMap"] = 0] = "BTreeMap";
  TypeDefInfo2[TypeDefInfo2["BTreeSet"] = 1] = "BTreeSet";
  TypeDefInfo2[TypeDefInfo2["Compact"] = 2] = "Compact";
  TypeDefInfo2[TypeDefInfo2["DoNotConstruct"] = 3] = "DoNotConstruct";
  TypeDefInfo2[TypeDefInfo2["Enum"] = 4] = "Enum";
  TypeDefInfo2[TypeDefInfo2["HashMap"] = 5] = "HashMap";
  TypeDefInfo2[TypeDefInfo2["Int"] = 6] = "Int";
  TypeDefInfo2[TypeDefInfo2["Linkage"] = 7] = "Linkage";
  TypeDefInfo2[TypeDefInfo2["Null"] = 8] = "Null";
  TypeDefInfo2[TypeDefInfo2["Option"] = 9] = "Option";
  TypeDefInfo2[TypeDefInfo2["Plain"] = 10] = "Plain";
  TypeDefInfo2[TypeDefInfo2["Range"] = 11] = "Range";
  TypeDefInfo2[TypeDefInfo2["RangeInclusive"] = 12] = "RangeInclusive";
  TypeDefInfo2[TypeDefInfo2["Result"] = 13] = "Result";
  TypeDefInfo2[TypeDefInfo2["Set"] = 14] = "Set";
  TypeDefInfo2[TypeDefInfo2["Si"] = 15] = "Si";
  TypeDefInfo2[TypeDefInfo2["Struct"] = 16] = "Struct";
  TypeDefInfo2[TypeDefInfo2["Tuple"] = 17] = "Tuple";
  TypeDefInfo2[TypeDefInfo2["UInt"] = 18] = "UInt";
  TypeDefInfo2[TypeDefInfo2["Vec"] = 19] = "Vec";
  TypeDefInfo2[TypeDefInfo2["VecFixed"] = 20] = "VecFixed";
  TypeDefInfo2[TypeDefInfo2["WrapperKeepOpaque"] = 21] = "WrapperKeepOpaque";
  TypeDefInfo2[TypeDefInfo2["WrapperOpaque"] = 22] = "WrapperOpaque";
})(TypeDefInfo || (TypeDefInfo = {}));

// node_modules/@polkadot/types-codec/node_modules/@polkadot/x-textdecoder/fallback.js
var TextDecoder8 = class {
  __encoding;
  constructor(encoding) {
    this.__encoding = encoding;
  }
  decode(value) {
    let result = "";
    for (let i = 0, count = value.length; i < count; i++) {
      result += String.fromCharCode(value[i]);
    }
    return result;
  }
};

// node_modules/@polkadot/types-codec/node_modules/@polkadot/x-textdecoder/browser.js
var TextDecoder9 = /* @__PURE__ */ extractGlobal("TextDecoder", TextDecoder8);

// node_modules/@polkadot/types-codec/node_modules/@polkadot/x-textencoder/fallback.js
var TextEncoder16 = class {
  encode(value) {
    const count = value.length;
    const u8a = new Uint8Array(count);
    for (let i = 0; i < count; i++) {
      u8a[i] = value.charCodeAt(i);
    }
    return u8a;
  }
};

// node_modules/@polkadot/types-codec/node_modules/@polkadot/x-textencoder/browser.js
var TextEncoder17 = /* @__PURE__ */ extractGlobal("TextEncoder", TextEncoder16);

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/is/function.js
function isFunction8(value) {
  return typeof value === "function";
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/hex/toU8a.js
var CHR8 = "0123456789abcdef";
var U813 = new Uint8Array(256);
var U1613 = new Uint8Array(256 * 256);
for (let i = 0, count = CHR8.length; i < count; i++) {
  U813[CHR8[i].charCodeAt(0) | 0] = i | 0;
  if (i > 9) {
    U813[CHR8[i].toUpperCase().charCodeAt(0) | 0] = i | 0;
  }
}
for (let i = 0; i < 256; i++) {
  const s = i << 8;
  for (let j = 0; j < 256; j++) {
    U1613[s | j] = U813[i] << 4 | U813[j];
  }
}
function hexToU8a7(value, bitLength = -1) {
  if (!value) {
    return new Uint8Array();
  }
  let s = value.startsWith("0x") ? 2 : 0;
  const decLength = Math.ceil((value.length - s) / 2);
  const endLength = Math.ceil(bitLength === -1 ? decLength : bitLength / 8);
  const result = new Uint8Array(endLength);
  const offset = endLength > decLength ? endLength - decLength : 0;
  for (let i = offset; i < endLength; i++, s += 2) {
    result[i] = U1613[value.charCodeAt(s) << 8 | value.charCodeAt(s + 1)];
  }
  return result;
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/bn/bn.js
var import_bn32 = __toESM(require_bn(), 1);

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/is/bn.js
function isBn5(value) {
  return import_bn32.default.isBN(value);
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/is/hex.js
var REGEX_HEX_PREFIXED7 = /^0x[\da-fA-F]+$/;
var REGEX_HEX_NOPREFIX3 = /^[\da-fA-F]+$/;
function isHex7(value, bitLength = -1, ignoreLength) {
  return typeof value === "string" && (value === "0x" || REGEX_HEX_PREFIXED7.test(value)) && (bitLength === -1 ? ignoreLength || value.length % 2 === 0 : value.length === 2 + Math.ceil(bitLength / 4));
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/is/object.js
function isObject6(value) {
  return !!value && typeof value === "object";
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/is/helpers.js
function isOn3(...fns) {
  return (value) => (isObject6(value) || isFunction8(value)) && fns.every((f) => isFunction8(value[f]));
}
function isOnObject4(...fns) {
  return (value) => isObject6(value) && fns.every((f) => isFunction8(value[f]));
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/is/toBigInt.js
var isToBigInt3 = /* @__PURE__ */ isOn3("toBigInt");

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/is/toBn.js
var isToBn3 = /* @__PURE__ */ isOn3("toBn");

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/has.js
var hasBigInt7 = typeof BigInt2 === "function" && typeof BigInt2.asIntN === "function";
var hasBuffer7 = typeof xglobal.Buffer === "function" && typeof xglobal.Buffer.isBuffer === "function";
var hasProcess7 = typeof xglobal.process === "object";

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/is/buffer.js
function isBuffer7(value) {
  return hasBuffer7 && !!value && isFunction8(value.readDoubleLE) && xglobal.Buffer.isBuffer(value);
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/is/u8a.js
function isU8a7(value) {
  return (value && value.constructor) === Uint8Array || value instanceof Uint8Array;
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/string/toU8a.js
var encoder8 = new TextEncoder17();
function stringToU8a8(value) {
  return value ? encoder8.encode(value.toString()) : new Uint8Array();
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/u8a/toU8a.js
function u8aToU8a7(value, strict = false) {
  if (strict && (value === null || value === void 0)) {
    throw new Error("u8aToU8a: Expected non-null, non-undefined value");
  }
  return isU8a7(value) ? isBuffer7(value) ? new Uint8Array(value) : value : isHex7(value) ? hexToU8a7(value) : Array.isArray(value) ? new Uint8Array(value) : stringToU8a8(value);
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/u8a/concat.js
function u8aConcatStrict5(u8as, length = 0) {
  const count = u8as.length;
  let offset = 0;
  if (!length) {
    for (let i = 0; i < count; i++) {
      length += u8as[i].length;
    }
  }
  const result = new Uint8Array(length);
  for (let i = 0; i < count; i++) {
    result.set(u8as[i], offset);
    offset += u8as[i].length;
  }
  return result;
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/u8a/toBn.js
function u8aToBn3(value, { isLe = true, isNegative = false } = {}) {
  if (!isLe) {
    value = value.slice().reverse();
  }
  const count = value.length;
  if (isNegative && count && value[count - 1] & 128) {
    switch (count) {
      case 0:
        return new import_bn32.default(0);
      case 1:
        return new import_bn32.default((value[0] ^ 255) * -1 - 1);
      case 2:
        return new import_bn32.default((value[0] + (value[1] << 8) ^ 65535) * -1 - 1);
      case 3:
        return new import_bn32.default((value[0] + (value[1] << 8) + (value[2] << 16) ^ 16777215) * -1 - 1);
      case 4:
        return new import_bn32.default((value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) * -1 - 1);
      case 5:
        return new import_bn32.default(((value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) + (value[4] ^ 255) * 4294967296) * -1 - 1);
      case 6:
        return new import_bn32.default(((value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) + (value[4] + (value[5] << 8) ^ 65535) * 4294967296) * -1 - 1);
      default:
        return new import_bn32.default(value, "le").fromTwos(count * 8);
    }
  }
  switch (count) {
    case 0:
      return new import_bn32.default(0);
    case 1:
      return new import_bn32.default(value[0]);
    case 2:
      return new import_bn32.default(value[0] + (value[1] << 8));
    case 3:
      return new import_bn32.default(value[0] + (value[1] << 8) + (value[2] << 16));
    case 4:
      return new import_bn32.default(value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216);
    case 5:
      return new import_bn32.default(value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] + (value[4] << 8)) * 16777216);
    case 6:
      return new import_bn32.default(value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] + (value[4] << 8) + (value[5] << 16)) * 16777216);
    default:
      return new import_bn32.default(value, "le");
  }
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/u8a/toFloat.js
function u8aToFloat(value, { bitLength = 32, isLe = true } = {}) {
  if (bitLength !== 32 && bitLength !== 64) {
    throw new Error("Invalid bitLength provided, expected 32 or 64");
  } else if (value.length < bitLength / 8) {
    throw new Error(`Invalid input buffer provided, expected at least ${bitLength / 8} bytes, found ${value.length}`);
  }
  const dv = new DataView(value.buffer, value.byteOffset);
  return bitLength === 32 ? dv.getFloat32(0, isLe) : dv.getFloat64(0, isLe);
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/u8a/toHex.js
var U814 = new Array(256);
var U1614 = new Array(256 * 256);
for (let n = 0; n < 256; n++) {
  U814[n] = n.toString(16).padStart(2, "0");
}
for (let i = 0; i < 256; i++) {
  const s = i << 8;
  for (let j = 0; j < 256; j++) {
    U1614[s | j] = U814[i] + U814[j];
  }
}
function hex7(value, result) {
  const mod2 = value.length % 2 | 0;
  const length = value.length - mod2 | 0;
  for (let i = 0; i < length; i += 2) {
    result += U1614[value[i] << 8 | value[i + 1]];
  }
  if (mod2) {
    result += U814[value[length] | 0];
  }
  return result;
}
function u8aToHex7(value, bitLength = -1, isPrefixed = true) {
  const empty2 = isPrefixed ? "0x" : "";
  if (!value?.length) {
    return empty2;
  } else if (bitLength > 0) {
    const length = Math.ceil(bitLength / 8);
    if (value.length > length) {
      return `${hex7(value.subarray(0, length / 2), empty2)}\u2026${hex7(value.subarray(value.length - length / 2), "")}`;
    }
  }
  return hex7(value, empty2);
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/u8a/toNumber.js
function u8aToNumber(value, { isLe = true, isNegative = false } = {}) {
  if (!isLe) {
    value = value.slice().reverse();
  }
  const count = value.length;
  if (isNegative && count && value[count - 1] & 128) {
    switch (count) {
      case 0:
        return 0;
      case 1:
        return (value[0] ^ 255) * -1 - 1;
      case 2:
        return (value[0] + (value[1] << 8) ^ 65535) * -1 - 1;
      case 3:
        return (value[0] + (value[1] << 8) + (value[2] << 16) ^ 16777215) * -1 - 1;
      case 4:
        return (value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) * -1 - 1;
      case 5:
        return ((value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) + (value[4] ^ 255) * 4294967296) * -1 - 1;
      case 6:
        return ((value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216 ^ 4294967295) + (value[4] + (value[5] << 8) ^ 65535) * 4294967296) * -1 - 1;
      default:
        throw new Error("Value more than 48-bits cannot be reliably converted");
    }
  }
  switch (count) {
    case 0:
      return 0;
    case 1:
      return value[0];
    case 2:
      return value[0] + (value[1] << 8);
    case 3:
      return value[0] + (value[1] << 8) + (value[2] << 16);
    case 4:
      return value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 16777216;
    case 5:
      return value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] + (value[4] << 8)) * 16777216;
    case 6:
      return value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] + (value[4] << 8) + (value[5] << 16)) * 16777216;
    default:
      throw new Error("Value more than 48-bits cannot be reliably converted");
  }
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/u8a/toString.js
var decoder4 = new TextDecoder9("utf-8");
function u8aToString4(value) {
  return value ? decoder4.decode(value) : "";
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/hex/stripPrefix.js
function hexStripPrefix3(value) {
  if (!value || value === "0x") {
    return "";
  } else if (REGEX_HEX_PREFIXED7.test(value)) {
    return value.substring(2);
  } else if (REGEX_HEX_NOPREFIX3.test(value)) {
    return value;
  }
  throw new Error(`Expected hex value to convert, found '${value}'`);
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/hex/toBn.js
function hexToBn3(value, { isLe = false, isNegative = false } = {}) {
  if (!value || value === "0x") {
    return new import_bn32.default(0);
  }
  const stripped = hexStripPrefix3(value);
  const bn = new import_bn32.default(stripped, 16, isLe ? "le" : "be");
  return isNegative ? bn.fromTwos(stripped.length * 4) : bn;
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/bn/consts.js
var BN_ONE3 = /* @__PURE__ */ new import_bn32.default(1);
var BN_TWO2 = /* @__PURE__ */ new import_bn32.default(2);
var BN_HUNDRED = /* @__PURE__ */ new import_bn32.default(100);
var BN_MILLION = /* @__PURE__ */ new import_bn32.default(1e6);
var BN_BILLION4 = /* @__PURE__ */ new import_bn32.default(1e9);
var BN_QUINTILL4 = BN_BILLION4.mul(BN_BILLION4);
var BN_MAX_INTEGER4 = /* @__PURE__ */ new import_bn32.default(Number.MAX_SAFE_INTEGER);

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/is/bigInt.js
function isBigInt6(value) {
  return typeof value === "bigint";
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/bn/toBn.js
function bnToBn3(value) {
  return value ? import_bn32.default.isBN(value) ? value : isHex7(value) ? hexToBn3(value.toString()) : isBigInt6(value) ? new import_bn32.default(value.toString()) : isToBn3(value) ? value.toBn() : isToBigInt3(value) ? new import_bn32.default(value.toBigInt().toString()) : new import_bn32.default(value) : new import_bn32.default(0);
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/bn/toU8a.js
var DEFAULT_OPTS2 = { bitLength: -1, isLe: true, isNegative: false };
function bnToU8a2(value, { bitLength = -1, isLe = true, isNegative = false } = DEFAULT_OPTS2) {
  const valueBn = bnToBn3(value);
  const byteLength = bitLength === -1 ? Math.ceil(valueBn.bitLength() / 8) : Math.ceil((bitLength || 0) / 8);
  if (!value) {
    return bitLength === -1 ? new Uint8Array(1) : new Uint8Array(byteLength);
  }
  const output = new Uint8Array(byteLength);
  const bn = isNegative ? valueBn.toTwos(byteLength * 8) : valueBn;
  output.set(bn.toArray(isLe ? "le" : "be", byteLength), 0);
  return output;
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/bn/toHex.js
function bnToHex(value, { bitLength = -1, isLe = false, isNegative = false } = {}) {
  return u8aToHex7(bnToU8a2(value, { bitLength, isLe, isNegative }));
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/compact/toU8a.js
var MAX_U82 = BN_TWO2.pow(new import_bn32.default(8 - 2)).isub(BN_ONE3);
var MAX_U162 = BN_TWO2.pow(new import_bn32.default(16 - 2)).isub(BN_ONE3);
var MAX_U322 = BN_TWO2.pow(new import_bn32.default(32 - 2)).isub(BN_ONE3);
var BL_162 = { bitLength: 16 };
var BL_322 = { bitLength: 32 };
function compactToU8a2(value) {
  const bn = bnToBn3(value);
  if (bn.lte(MAX_U82)) {
    return new Uint8Array([bn.toNumber() << 2]);
  } else if (bn.lte(MAX_U162)) {
    return bnToU8a2(bn.shln(2).iadd(BN_ONE3), BL_162);
  } else if (bn.lte(MAX_U322)) {
    return bnToU8a2(bn.shln(2).iadd(BN_TWO2), BL_322);
  }
  const u8a = bnToU8a2(bn);
  let length = u8a.length;
  while (u8a[length - 1] === 0) {
    length--;
  }
  if (length < 4) {
    throw new Error("Invalid length, previous checks match anything less than 2^30");
  }
  return u8aConcatStrict5([
    // subtract 4 as minimum (also catered for in decoding)
    new Uint8Array([(length - 4 << 2) + 3]),
    u8a.subarray(0, length)
  ]);
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/compact/addLength.js
function compactAddLength2(input) {
  return u8aConcatStrict5([
    compactToU8a2(input.length),
    input
  ]);
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/compact/fromU8a.js
function compactFromU8a3(input) {
  const u8a = u8aToU8a7(input);
  switch (u8a[0] & 3) {
    case 0:
      return [1, new import_bn32.default(u8a[0] >>> 2)];
    case 1:
      return [2, new import_bn32.default(u8a[0] + (u8a[1] << 8) >>> 2)];
    case 2:
      return [4, new import_bn32.default(u8a[0] + (u8a[1] << 8) + (u8a[2] << 16) + u8a[3] * 16777216 >>> 2)];
    default: {
      const offset = (u8a[0] >>> 2) + 5;
      switch (offset) {
        case 5:
          return [5, new import_bn32.default(u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + u8a[4] * 16777216)];
        case 6:
          return [6, new import_bn32.default(u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + (u8a[4] + (u8a[5] << 8)) * 16777216)];
        case 7:
          return [7, new import_bn32.default(u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + (u8a[4] + (u8a[5] << 8) + (u8a[6] << 16)) * 16777216)];
        default:
          return [offset, u8aToBn3(u8a.subarray(1, offset))];
      }
    }
  }
}
function compactFromU8aLim2(u8a) {
  switch (u8a[0] & 3) {
    case 0:
      return [1, u8a[0] >>> 2];
    case 1:
      return [2, u8a[0] + (u8a[1] << 8) >>> 2];
    case 2:
      return [4, u8a[0] + (u8a[1] << 8) + (u8a[2] << 16) + u8a[3] * 16777216 >>> 2];
    default: {
      switch ((u8a[0] >>> 2) + 5) {
        case 5:
          return [5, u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + u8a[4] * 16777216];
        case 6:
          return [6, u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + (u8a[4] + (u8a[5] << 8)) * 16777216];
        case 7:
          return [7, u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + (u8a[4] + (u8a[5] << 8) + (u8a[6] << 16)) * 16777216];
        default:
          throw new Error("Compact input is > Number.MAX_SAFE_INTEGER");
      }
    }
  }
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/compact/stripLength.js
function compactStripLength3(input) {
  const [offset, length] = compactFromU8a3(input);
  const total = offset + length.toNumber();
  return [
    total,
    input.subarray(offset, total)
  ];
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/float/toU8a.js
function floatToU8a(value = 0, { bitLength = 32, isLe = true } = {}) {
  if (bitLength !== 32 && bitLength !== 64) {
    throw new Error("Invalid bitLength provided, expected 32 or 64");
  }
  const result = new Uint8Array(bitLength / 8);
  const dv = new DataView(result.buffer, result.byteOffset);
  if (bitLength === 32) {
    dv.setFloat32(0, Number(value), isLe);
  } else {
    dv.setFloat64(0, Number(value), isLe);
  }
  return result;
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/is/boolean.js
function isBoolean2(value) {
  return typeof value === "boolean";
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/format/formatDecimal.js
var NUMBER_REGEX2 = new RegExp("(\\d+?)(?=(\\d{3})+(?!\\d)|$)", "g");
function formatDecimal2(value, separator = ",") {
  const isNegative = value[0].startsWith("-");
  const matched = isNegative ? value.substring(1).match(NUMBER_REGEX2) : value.match(NUMBER_REGEX2);
  return matched ? `${isNegative ? "-" : ""}${matched.join(separator)}` : value;
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/format/getSeparator.js
function getSeparator2(locale) {
  return {
    decimal: 0.1.toLocaleString(locale, { useGrouping: false }).charAt(1),
    thousand: 1e3.toLocaleString(locale, { useGrouping: true }).replace(/\d/g, "").charAt(0)
  };
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/format/si.js
var SI_MID2 = 8;
var SI2 = [
  { power: -24, text: "yocto", value: "y" },
  { power: -21, text: "zepto", value: "z" },
  { power: -18, text: "atto", value: "a" },
  { power: -15, text: "femto", value: "f" },
  { power: -12, text: "pico", value: "p" },
  { power: -9, text: "nano", value: "n" },
  { power: -6, text: "micro", value: "\xB5" },
  { power: -3, text: "milli", value: "m" },
  { power: 0, text: "Unit", value: "-" },
  // position 8
  { power: 3, text: "Kilo", value: "k" },
  { power: 6, text: "Mill", value: "M" },
  // Mega, M
  { power: 9, text: "Bill", value: "B" },
  // Giga, G
  { power: 12, text: "Tril", value: "T" },
  // Tera, T
  { power: 15, text: "Peta", value: "P" },
  { power: 18, text: "Exa", value: "E" },
  { power: 21, text: "Zeta", value: "Z" },
  { power: 24, text: "Yotta", value: "Y" }
];
function findSi2(type) {
  for (let i = 0, count = SI2.length; i < count; i++) {
    if (SI2[i].value === type) {
      return SI2[i];
    }
  }
  return SI2[SI_MID2];
}
function calcSi2(text2, decimals, forceUnit) {
  if (forceUnit) {
    return findSi2(forceUnit);
  }
  const siDefIndex = SI_MID2 - 1 + Math.ceil((text2.length - decimals) / 3);
  return SI2[siDefIndex] || SI2[siDefIndex < 0 ? 0 : SI2.length - 1];
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/format/formatBalance.js
var DEFAULT_DECIMALS2 = 0;
var DEFAULT_UNIT2 = SI2[SI_MID2].text;
var defaultDecimals2 = DEFAULT_DECIMALS2;
var defaultUnit2 = DEFAULT_UNIT2;
function _formatBalance2(input, { decimals = defaultDecimals2, forceUnit, locale = "en", withAll = false, withSi = true, withSiFull = false, withUnit = true, withZero = true } = {}) {
  let text2 = bnToBn3(input).toString();
  if (text2.length === 0 || text2 === "0") {
    return "0";
  }
  let sign2 = "";
  if (text2[0].startsWith("-")) {
    sign2 = "-";
    text2 = text2.substring(1);
  }
  const si = calcSi2(text2, decimals, forceUnit);
  const mid = text2.length - (decimals + si.power);
  const pre = mid <= 0 ? "0" : text2.substring(0, mid);
  let post = text2.padStart(mid < 0 ? decimals : 1, "0").substring(mid < 0 ? 0 : mid).padEnd(withAll ? Math.max(decimals, 4) : 4, "0").substring(0, withAll ? Math.max(4, decimals + si.power) : 4);
  if (!withZero) {
    let end = post.length - 1;
    do {
      if (post[end] === "0") {
        end--;
      }
    } while (post[end] === "0");
    post = post.substring(0, end + 1);
  }
  const unit = isBoolean2(withUnit) ? SI2[SI_MID2].text : withUnit;
  const units = withSi || withSiFull ? si.value === "-" ? withUnit ? ` ${unit}` : "" : ` ${withSiFull ? `${si.text}${withUnit ? " " : ""}` : si.value}${withUnit ? unit : ""}` : "";
  const { decimal, thousand } = getSeparator2(locale);
  return `${sign2}${formatDecimal2(pre, thousand)}${post && `${decimal}${post}`}${units}`;
}
var formatBalance2 = _formatBalance2;
formatBalance2.calcSi = (text2, decimals = defaultDecimals2) => calcSi2(text2, decimals);
formatBalance2.findSi = findSi2;
formatBalance2.getDefaults = () => {
  return {
    decimals: defaultDecimals2,
    unit: defaultUnit2
  };
};
formatBalance2.getOptions = (decimals = defaultDecimals2) => {
  return SI2.filter(({ power }) => power < 0 ? decimals + power >= 0 : true);
};
formatBalance2.setDefaults = ({ decimals, unit }) => {
  defaultDecimals2 = (Array.isArray(decimals) ? decimals[0] : decimals) ?? defaultDecimals2;
  defaultUnit2 = (Array.isArray(unit) ? unit[0] : unit) ?? defaultUnit2;
  SI2[SI_MID2].text = defaultUnit2;
};

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/format/formatDate.js
function zeroPad5(value) {
  return value.toString().padStart(2, "0");
}
function formatDate5(date) {
  const year = date.getFullYear().toString();
  const month = zeroPad5(date.getMonth() + 1);
  const day = zeroPad5(date.getDate());
  const hour = zeroPad5(date.getHours());
  const minute = zeroPad5(date.getMinutes());
  const second = zeroPad5(date.getSeconds());
  return `${year}-${month}-${day} ${hour}:${minute}:${second}`;
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/format/formatNumber.js
function formatNumber2(value, { locale = "en" } = {}) {
  const { thousand } = getSeparator2(locale);
  return formatDecimal2(bnToBn3(value).toString(), thousand);
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/is/string.js
function isString6(value) {
  return typeof value === "string" || value instanceof String;
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/is/ascii.js
function isAsciiStr(str) {
  for (let i = 0, count = str.length; i < count; i++) {
    const b = str.charCodeAt(i);
    if (b < 32 || b > 126) {
      return false;
    }
  }
  return true;
}
function isAsciiBytes(u8a) {
  for (let i = 0, count = u8a.length; i < count; i++) {
    const b = u8a[i] | 0;
    if (b < 32 || b > 126) {
      return false;
    }
  }
  return true;
}
function isAscii(value) {
  return isString6(value) ? isHex7(value) ? isAsciiBytes(u8aToU8a7(value)) : isAsciiStr(value) : value ? isAsciiBytes(value) : false;
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/is/codec.js
var checkCodec2 = /* @__PURE__ */ isOnObject4("toHex", "toHuman", "toU8a");
var checkRegistry2 = /* @__PURE__ */ isOnObject4("get");
function isCodec2(value) {
  return checkCodec2(value) && checkRegistry2(value.registry);
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/stringify.js
function replacer5(_, v) {
  return isBigInt6(v) ? v.toString() : v;
}
function stringify5(value, space) {
  return JSON.stringify(value, replacer5, space);
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/is/null.js
function isNull5(value) {
  return value === null;
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/is/number.js
function isNumber6(value) {
  return typeof value === "number";
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/is/undefined.js
function isUndefined7(value) {
  return value === void 0;
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/is/utf8.js
function isUtf8(value) {
  if (!value) {
    return isString6(value);
  }
  const u8a = u8aToU8a7(value);
  const len = u8a.length;
  let i = 0;
  while (i < len) {
    if (u8a[i] <= 127) {
      i += 1;
    } else if (u8a[i] >= 194 && u8a[i] <= 223) {
      if (i + 1 < len) {
        if (u8a[i + 1] < 128 || u8a[i + 1] > 191) {
          return false;
        }
      } else {
        return false;
      }
      i += 2;
    } else if (u8a[i] === 224) {
      if (i + 2 < len) {
        if (u8a[i + 1] < 160 || u8a[i + 1] > 191) {
          return false;
        }
        if (u8a[i + 2] < 128 || u8a[i + 2] > 191) {
          return false;
        }
      } else {
        return false;
      }
      i += 3;
    } else if (u8a[i] >= 225 && u8a[i] <= 236) {
      if (i + 2 < len) {
        if (u8a[i + 1] < 128 || u8a[i + 1] > 191) {
          return false;
        }
        if (u8a[i + 2] < 128 || u8a[i + 2] > 191) {
          return false;
        }
      } else {
        return false;
      }
      i += 3;
    } else if (u8a[i] === 237) {
      if (i + 2 < len) {
        if (u8a[i + 1] < 128 || u8a[i + 1] > 159) {
          return false;
        }
        if (u8a[i + 2] < 128 || u8a[i + 2] > 191) {
          return false;
        }
      } else {
        return false;
      }
      i += 3;
    } else if (u8a[i] >= 238 && u8a[i] <= 239) {
      if (i + 2 < len) {
        if (u8a[i + 1] < 128 || u8a[i + 1] > 191) {
          return false;
        }
        if (u8a[i + 2] < 128 || u8a[i + 2] > 191) {
          return false;
        }
      } else {
        return false;
      }
      i += 3;
    } else if (u8a[i] === 240) {
      if (i + 3 < len) {
        if (u8a[i + 1] < 144 || u8a[i + 1] > 191) {
          return false;
        }
        if (u8a[i + 2] < 128 || u8a[i + 2] > 191) {
          return false;
        }
        if (u8a[i + 3] < 128 || u8a[i + 3] > 191) {
          return false;
        }
      } else {
        return false;
      }
      i += 4;
    } else if (u8a[i] >= 241 && u8a[i] <= 243) {
      if (i + 3 < len) {
        if (u8a[i + 1] < 128 || u8a[i + 1] > 191) {
          return false;
        }
        if (u8a[i + 2] < 128 || u8a[i + 2] > 191) {
          return false;
        }
        if (u8a[i + 3] < 128 || u8a[i + 3] > 191) {
          return false;
        }
      } else {
        return false;
      }
      i += 4;
    } else if (u8a[i] === 244) {
      if (i + 3 < len) {
        if (u8a[i + 1] < 128 || u8a[i + 1] > 143) {
          return false;
        }
        if (u8a[i + 2] < 128 || u8a[i + 2] > 191) {
          return false;
        }
        if (u8a[i + 3] < 128 || u8a[i + 3] > 191) {
          return false;
        }
      } else {
        return false;
      }
      i += 4;
    } else {
      return false;
    }
  }
  return true;
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/noop.js
function identity3(value) {
  return value;
}
function noop6() {
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/logger.js
var logTo5 = {
  debug: "log",
  error: "error",
  log: "log",
  warn: "warn"
};
function formatOther5(value) {
  if (value && isObject6(value) && value.constructor === Object) {
    const result = {};
    for (const [k, v] of Object.entries(value)) {
      result[k] = loggerFormat5(v);
    }
    return result;
  }
  return value;
}
function loggerFormat5(value) {
  if (Array.isArray(value)) {
    return value.map(loggerFormat5);
  } else if (isBn5(value)) {
    return value.toString();
  } else if (isU8a7(value) || isBuffer7(value)) {
    return u8aToHex7(u8aToU8a7(value));
  }
  return formatOther5(value);
}
function formatWithLength5(maxLength) {
  return (v) => {
    if (maxLength <= 0) {
      return v;
    }
    const r = `${v}`;
    return r.length < maxLength ? v : `${r.substring(0, maxLength)} ...`;
  };
}
function apply5(log, type, values, maxSize = -1) {
  if (values.length === 1 && isFunction8(values[0])) {
    const fnResult = values[0]();
    return apply5(log, type, Array.isArray(fnResult) ? fnResult : [fnResult], maxSize);
  }
  console[logTo5[log]](formatDate5(/* @__PURE__ */ new Date()), type, ...values.map(loggerFormat5).map(formatWithLength5(maxSize)));
}
function isDebugOn5(e, type) {
  return !!e && (e === "*" || type === e || e.endsWith("*") && type.startsWith(e.slice(0, -1)));
}
function isDebugOff5(e, type) {
  return !!e && (e.startsWith("-") && (type === e.slice(1) || e.endsWith("*") && type.startsWith(e.slice(1, -1))));
}
function getDebugFlag5(env, type) {
  let flag = false;
  for (const e of env) {
    if (isDebugOn5(e, type)) {
      flag = true;
    } else if (isDebugOff5(e, type)) {
      flag = false;
    }
  }
  return flag;
}
function parseEnv5(type) {
  const maxSize = parseInt(xglobal.process?.env?.["DEBUG_MAX"] || "-1", 10);
  return [
    getDebugFlag5((xglobal.process?.env?.["DEBUG"] || "").toLowerCase().split(","), type),
    isNaN(maxSize) ? -1 : maxSize
  ];
}
function logger5(origin) {
  const type = `${origin.toUpperCase()}:`.padStart(16);
  const [isDebug, maxSize] = parseEnv5(origin.toLowerCase());
  return {
    debug: isDebug ? (...values) => apply5("debug", type, values, maxSize) : noop6,
    error: (...values) => apply5("error", type, values),
    log: (...values) => apply5("log", type, values),
    noop: noop6,
    warn: (...values) => apply5("warn", type, values)
  };
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/object/property.js
function objectProperty2(that, key, getter, getName, index = 0) {
  const name = getName ? getName(key, index) : key;
  if (!(name in that)) {
    Object.defineProperty(that, name, {
      enumerable: true,
      // Unlike in lazy, we always call into the upper function, i.e. this method
      // does not cache old values (it is expected to be used for dynamic values)
      get: function() {
        return getter(key, index, this);
      }
    });
  }
}
function objectProperties2(that, keys2, getter, getName) {
  for (let i = 0, count = keys2.length; i < count; i++) {
    objectProperty2(that, keys2[i], getter, getName, i);
  }
}

// node_modules/@polkadot/types-codec/node_modules/@polkadot/util/string/camelCase.js
var CC_TO_UP3 = new Array(256);
var CC_TO_LO3 = new Array(256);
for (let i = 0, count = CC_TO_UP3.length; i < count; i++) {
  CC_TO_LO3[i] = String.fromCharCode(i).toLowerCase();
  CC_TO_UP3[i] = String.fromCharCode(i).toUpperCase();
}
function formatAllCaps3(w) {
  return w.slice(0, w.length - 1).toLowerCase() + CC_TO_UP3[w.charCodeAt(w.length - 1)];
}
function converter4(format) {
  return (value) => {
    const parts = value.replace(/[-_., ]+/g, " ").trim().split(" ");
    let result = "";
    for (let i = 0, count = parts.length; i < count; i++) {
      const w = parts[i];
      result += format(/^[\dA-Z]+$/.test(w) ? w.toLowerCase() : w.replace(/^[\dA-Z]{2,}[^a-z]/, formatAllCaps3), i);
    }
    return result;
  };
}
var stringCamelCase3 = /* @__PURE__ */ converter4((w, i) => (i ? CC_TO_UP3[w.charCodeAt(0)] : CC_TO_LO3[w.charCodeAt(0)]) + w.slice(1));
var stringPascalCase3 = /* @__PURE__ */ converter4((w) => CC_TO_UP3[w.charCodeAt(0)] + w.slice(1));

// node_modules/@polkadot/types-codec/utils/util.js
function hasEq(o) {
  return isFunction8(o.eq);
}

// node_modules/@polkadot/types-codec/utils/compareArray.js
function compareArray(a, b) {
  if (Array.isArray(b)) {
    return a.length === b.length && isUndefined7(a.find((v, index) => hasEq(v) ? !v.eq(b[index]) : v !== b[index]));
  }
  return false;
}

// node_modules/@polkadot/types-codec/abstract/Array.js
var AbstractArray = class extends Array {
  registry;
  createdAtHash;
  initialU8aLength;
  isStorageFallback;
  /**
   * @description This ensures that operators such as clice, filter, map, etc. return
   * new Array instances (without this we need to apply overrides)
   */
  static get [Symbol.species]() {
    return Array;
  }
  constructor(registry, length) {
    super(length);
    this.registry = registry;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    const count = this.length;
    let total = compactToU8a2(count).length;
    for (let i = 0; i < count; i++) {
      total += this[i].encodedLength;
    }
    return total;
  }
  /**
   * @description returns a hash of the contents
   */
  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Checks if the value is an empty value
   */
  get isEmpty() {
    return this.length === 0;
  }
  /**
   * @description The length of the value
   */
  get length() {
    return super.length;
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  eq(other) {
    return compareArray(this, other);
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    return {
      inner: this.inspectInner(),
      outer: [compactToU8a2(this.length)]
    };
  }
  /**
   * @internal
   * @description Internal per-item inspection of internal values
   */
  inspectInner() {
    const count = this.length;
    const inner = new Array(count);
    for (let i = 0; i < count; i++) {
      inner[i] = this[i].inspect();
    }
    return inner;
  }
  /**
   * @description Converts the Object to an standard JavaScript Array
   */
  toArray() {
    return Array.from(this);
  }
  /**
   * @description Returns a hex string representation of the value
   */
  toHex() {
    return u8aToHex7(this.toU8a());
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman(isExtended, disableAscii) {
    const count = this.length;
    const result = new Array(count);
    for (let i = 0; i < count; i++) {
      result[i] = this[i] && this[i].toHuman(isExtended, disableAscii);
    }
    return result;
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    const count = this.length;
    const result = new Array(count);
    for (let i = 0; i < count; i++) {
      result[i] = this[i] && this[i].toJSON();
    }
    return result;
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive(disableAscii) {
    const count = this.length;
    const result = new Array(count);
    for (let i = 0; i < count; i++) {
      result[i] = this[i] && this[i].toPrimitive(disableAscii);
    }
    return result;
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    const count = this.length;
    const result = new Array(count);
    for (let i = 0; i < count; i++) {
      result[i] = this[i].toString();
    }
    return `[${result.join(", ")}]`;
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  toU8a(isBare) {
    const encoded = this.toU8aInner();
    return isBare ? u8aConcatStrict5(encoded) : u8aConcatStrict5([compactToU8a2(this.length), ...encoded]);
  }
  /**
   * @internal
   * @description Internal per-item SCALE encoding of contained values
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  toU8aInner(isBare) {
    const count = this.length;
    const encoded = new Array(count);
    for (let i = 0; i < count; i++) {
      encoded[i] = this[i].toU8a(isBare);
    }
    return encoded;
  }
};

// node_modules/@polkadot/types-codec/abstract/Base.js
var AbstractBase = class {
  registry;
  createdAtHash;
  initialU8aLength;
  isStorageFallback;
  __internal__raw;
  constructor(registry, value, initialU8aLength) {
    this.initialU8aLength = initialU8aLength;
    this.__internal__raw = value;
    this.registry = registry;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    return this.toU8a().length;
  }
  /**
   * @description returns a hash of the contents
   */
  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description returns the inner (wrapped value)
   */
  get inner() {
    return this.__internal__raw;
  }
  /**
   * @description Checks if the value is an empty value
   */
  get isEmpty() {
    return this.__internal__raw.isEmpty;
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  eq(other) {
    return this.__internal__raw.eq(other);
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    return this.__internal__raw.inspect();
  }
  /**
   * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
   */
  toHex(isLe) {
    return this.__internal__raw.toHex(isLe);
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman(isExtended, disableAscii) {
    return this.__internal__raw.toHuman(isExtended, disableAscii);
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    return this.__internal__raw.toJSON();
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive(disableAscii) {
    return this.__internal__raw.toPrimitive(disableAscii);
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    return this.__internal__raw.toString();
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  toU8a(isBare) {
    return this.__internal__raw.toU8a(isBare);
  }
  /**
   * @description Returns the inner wrapped value (equivalent to valueOf)
   */
  unwrap() {
    return this.__internal__raw;
  }
  /**
   * @description Returns the inner wrapped value
   */
  valueOf() {
    return this.__internal__raw;
  }
};

// node_modules/@polkadot/types-codec/abstract/Int.js
var DEFAULT_UINT_BITS = 64;
var MAX_NUMBER_BITS = 52;
var MUL_P = new import_bn32.default(1e4);
var FORMATTERS = [
  ["Perquintill", BN_QUINTILL4],
  ["Perbill", BN_BILLION4],
  ["Permill", BN_MILLION],
  ["Percent", BN_HUNDRED]
];
function isToBn4(value) {
  return isFunction8(value.toBn);
}
function toPercentage(value, divisor) {
  return `${(value.mul(MUL_P).div(divisor).toNumber() / 100).toFixed(2)}%`;
}
function decodeAbstractInt(value, isNegative) {
  if (isNumber6(value)) {
    if (!Number.isInteger(value) || value > Number.MAX_SAFE_INTEGER || value < Number.MIN_SAFE_INTEGER) {
      throw new Error("Number needs to be an integer <= Number.MAX_SAFE_INTEGER, i.e. 2 ^ 53 - 1");
    }
    return value;
  } else if (isString6(value)) {
    if (isHex7(value, -1, true)) {
      return hexToBn3(value, { isLe: false, isNegative }).toString();
    }
    if (value.includes(".") || value.includes(",") || value.includes("e")) {
      throw new Error("String should not contain decimal points or scientific notation");
    }
    return value;
  } else if (isBn5(value) || isBigInt6(value)) {
    return value.toString();
  } else if (isObject6(value)) {
    if (isToBn4(value)) {
      return value.toBn().toString();
    }
    const keys2 = Object.keys(value);
    if (keys2.length !== 1) {
      throw new Error("Unable to construct number from multi-key object");
    }
    return decodeAbstractInt(value[keys2[0]], isNegative);
  } else if (!value) {
    return 0;
  }
  throw new Error(`Unable to create BN from unknown type ${typeof value}`);
}
var AbstractInt = class extends import_bn32.default {
  registry;
  encodedLength;
  isUnsigned;
  createdAtHash;
  initialU8aLength;
  isStorageFallback;
  __internal__bitLength;
  constructor(registry, value = 0, bitLength = DEFAULT_UINT_BITS, isSigned = false) {
    super(
      // shortcut isU8a as used in SCALE decoding
      isU8a7(value) ? bitLength <= 48 ? u8aToNumber(value.subarray(0, bitLength / 8), { isNegative: isSigned }) : u8aToBn3(value.subarray(0, bitLength / 8), { isLe: true, isNegative: isSigned }).toString() : decodeAbstractInt(value, isSigned)
    );
    this.registry = registry;
    this.__internal__bitLength = bitLength;
    this.encodedLength = this.__internal__bitLength / 8;
    this.initialU8aLength = this.__internal__bitLength / 8;
    this.isUnsigned = !isSigned;
    const isNegative = this.isNeg();
    const maxBits = bitLength - (isSigned && !isNegative ? 1 : 0);
    if (isNegative && !isSigned) {
      throw new Error(`${this.toRawType()}: Negative number passed to unsigned type`);
    } else if (super.bitLength() > maxBits) {
      throw new Error(`${this.toRawType()}: Input too large. Found input with ${super.bitLength()} bits, expected ${maxBits}`);
    }
  }
  /**
   * @description returns a hash of the contents
   */
  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Checks if the value is a zero value (align elsewhere)
   */
  get isEmpty() {
    return this.isZero();
  }
  /**
   * @description Returns the number of bits in the value
   */
  bitLength() {
    return this.__internal__bitLength;
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  eq(other) {
    return super.eq(isHex7(other) ? hexToBn3(other.toString(), { isLe: false, isNegative: !this.isUnsigned }) : bnToBn3(other));
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    return {
      outer: [this.toU8a()]
    };
  }
  /**
   * @description True if this value is the max of the type
   */
  isMax() {
    const u8a = this.toU8a().filter((b) => b === 255);
    return u8a.length === this.__internal__bitLength / 8;
  }
  /**
   * @description Returns a BigInt representation of the number
   */
  toBigInt() {
    return BigInt(this.toString());
  }
  /**
   * @description Returns the BN representation of the number. (Compatibility)
   */
  toBn() {
    return this;
  }
  /**
   * @description Returns a hex string representation of the value
   */
  toHex(isLe = false) {
    return bnToHex(this, {
      bitLength: this.bitLength(),
      isLe,
      isNegative: !this.isUnsigned
    });
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman(_isExpanded) {
    const rawType = this.toRawType();
    if (rawType === "Balance") {
      return this.isMax() ? "everything" : formatBalance2(this, { decimals: this.registry.chainDecimals[0], withSi: true, withUnit: this.registry.chainTokens[0] });
    }
    const [, divisor] = FORMATTERS.find(([type]) => type === rawType) || [];
    return divisor ? toPercentage(this, divisor) : formatNumber2(this);
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON(onlyHex = false) {
    return onlyHex || this.__internal__bitLength > 128 || super.bitLength() > MAX_NUMBER_BITS ? this.toHex() : this.toNumber();
  }
  /**
   * @description Returns the value in a primitive form, either number when <= 52 bits, or string otherwise
   */
  toPrimitive() {
    return super.bitLength() > MAX_NUMBER_BITS ? this.toString() : this.toNumber();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return this instanceof this.registry.createClassUnsafe("Balance") ? "Balance" : `${this.isUnsigned ? "u" : "i"}${this.bitLength()}`;
  }
  /**
   * @description Returns the string representation of the value
   * @param base The base to use for the conversion
   */
  toString(base) {
    return super.toString(base);
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   */
  toU8a(_isBare) {
    return bnToU8a2(this, {
      bitLength: this.bitLength(),
      isLe: true,
      isNegative: !this.isUnsigned
    });
  }
};

// node_modules/@polkadot/types-codec/utils/compareMap.js
function hasMismatch(a, b) {
  return isUndefined7(a) || (hasEq(a) ? !a.eq(b) : a !== b);
}
function notEntry(value) {
  return !Array.isArray(value) || value.length !== 2;
}
function compareMapArray(a, b) {
  return a.size === b.length && !b.some((e) => notEntry(e) || hasMismatch(a.get(e[0]), e[1]));
}
function compareMap(a, b) {
  if (Array.isArray(b)) {
    return compareMapArray(a, b);
  } else if (b instanceof Map) {
    return compareMapArray(a, [...b.entries()]);
  } else if (isObject6(b)) {
    return compareMapArray(a, Object.entries(b));
  }
  return false;
}

// node_modules/@polkadot/types-codec/utils/compareSet.js
function compareSetArray(a, b) {
  return a.size === b.length && !b.some((e) => !a.has(e));
}
function compareSet(a, b) {
  if (Array.isArray(b)) {
    return compareSetArray(a, b);
  } else if (b instanceof Set) {
    return compareSetArray(a, [...b.values()]);
  } else if (isObject6(b)) {
    return compareSetArray(a, Object.values(b));
  }
  return false;
}

// node_modules/@polkadot/types-codec/utils/decodeU8a.js
function formatFailure(registry, fn, _result, { message }, u8a, i, count, Type2, key) {
  let type = "";
  try {
    type = `: ${new Type2(registry).toRawType()}`;
  } catch {
  }
  return `${fn}: failed at ${u8aToHex7(u8a.subarray(0, 16))}\u2026${key ? ` on ${key}` : ""} (index ${i + 1}/${count})${type}:: ${message}`;
}
function decodeU8a(registry, result, u8a, [Types, keys2]) {
  const count = result.length;
  let offset = 0;
  let i = 0;
  try {
    while (i < count) {
      const value = new Types[i](registry, u8a.subarray(offset));
      offset += value.initialU8aLength || value.encodedLength;
      result[i] = value;
      i++;
    }
  } catch (error) {
    throw new Error(formatFailure(registry, "decodeU8a", result, error, u8a.subarray(offset), i, count, Types[i], keys2[i]));
  }
  return [result, offset];
}
function decodeU8aStruct(registry, result, u8a, [Types, keys2]) {
  const count = result.length;
  let offset = 0;
  let i = 0;
  try {
    while (i < count) {
      const value = new Types[i](registry, u8a.subarray(offset));
      offset += value.initialU8aLength || value.encodedLength;
      result[i] = [keys2[i], value];
      i++;
    }
  } catch (error) {
    throw new Error(formatFailure(registry, "decodeU8aStruct", result, error, u8a.subarray(offset), i, count, Types[i], keys2[i]));
  }
  return [result, offset];
}
function decodeU8aVec(registry, result, u8a, startAt, Type2) {
  const count = result.length;
  let offset = startAt;
  let i = 0;
  try {
    while (i < count) {
      const value = new Type2(registry, u8a.subarray(offset));
      offset += value.initialU8aLength || value.encodedLength;
      result[i] = value;
      i++;
    }
  } catch (error) {
    throw new Error(formatFailure(registry, "decodeU8aVec", result, error, u8a.subarray(offset), i, count, Type2));
  }
  return [offset, offset - startAt];
}

// node_modules/@polkadot/types-codec/utils/sanitize.js
var BOUNDED = ["BTreeMap", "BTreeSet", "HashMap", "Vec"];
var ALLOWED_BOXES = BOUNDED.concat(["Compact", "DoNotConstruct", "Int", "Linkage", "Range", "RangeInclusive", "Result", "Opaque", "Option", "UInt", "WrapperKeepOpaque", "WrapperOpaque"]);
var BOX_PRECEDING = ["<", "(", "[", '"', ",", " "];
var mappings = [
  // alias <T::InherentOfflineReport as InherentOfflineReport>::Inherent -> InherentOfflineReport
  alias("<T::InherentOfflineReport as InherentOfflineReport>::Inherent", "InherentOfflineReport", false),
  alias("VecDeque<", "Vec<", false),
  // <T::Balance as HasCompact>
  cleanupCompact(),
  // Change BoundedVec<Type, Size> to Vec<Type>
  removeExtensions("Bounded", true),
  // Change WeakVec<Type> to Vec<Type>
  removeExtensions("Weak", false),
  // Remove all the trait prefixes
  removeTraits(),
  // remove PairOf<T> -> (T, T)
  removePairOf(),
  // remove boxing, `Box<Proposal>` -> `Proposal`
  removeWrap("Box<"),
  // remove generics, `MisbehaviorReport<Hash, BlockNumber>` -> `MisbehaviorReport`
  removeGenerics(),
  // alias String -> Text (compat with jsonrpc methods)
  alias("String", "Text"),
  // alias Vec<u8> -> Bytes
  alias("Vec<u8>", "Bytes"),
  alias("&\\[u8\\]", "Bytes"),
  alias("&'static\\[u8\\]", "Bytes"),
  // alias RawAddress -> Address
  alias("RawAddress", "Address"),
  // lookups, mapped to Address/AccountId as appropriate in runtime
  alias("Lookup::Source", "LookupSource"),
  alias("Lookup::Target", "LookupTarget"),
  // HACK duplication between contracts & primitives, however contracts prefixed with exec
  alias("exec::StorageKey", "ContractStorageKey"),
  // flattens tuples with one value, `(AccountId)` -> `AccountId`
  flattenSingleTuple(),
  // converts ::Type to Type, <T as Trait<I>>::Proposal -> Proposal
  removeColons(),
  // remove all trailing spaces - this should always be the last
  trim()
];
function trim() {
  return (value) => value.trim();
}
function findClosing(value, start) {
  let depth = 0;
  for (let i = start, count = value.length; i < count; i++) {
    if (value[i] === ">") {
      if (!depth) {
        return i;
      }
      depth--;
    } else if (value[i] === "<") {
      depth++;
    }
  }
  throw new Error(`Unable to find closing matching <> on '${value}' (start ${start})`);
}
function alias(src, dest, withChecks = true) {
  const from2 = new RegExp(`(^${src}|${BOX_PRECEDING.map((box) => `\\${box}${src}`).join("|")})`, "g");
  const to = (src2) => {
    from2.lastIndex = 0;
    return withChecks && BOX_PRECEDING.includes(src2[0]) ? `${src2[0]}${dest}` : dest;
  };
  return (value) => value.replace(from2, to);
}
function cleanupCompact() {
  return (value) => {
    if (value.includes(" as HasCompact")) {
      for (let i = 0, count = value.length; i < count; i++) {
        if (value[i] === "<") {
          const end = findClosing(value, i + 1) - 14;
          if (value.substring(end, end + 14) === " as HasCompact") {
            value = `Compact<${value.substring(i + 1, end)}>`;
          }
        }
      }
    }
    return value;
  };
}
function flattenSingleTuple() {
  const from1 = /,\)/g;
  const from2 = /\(([^,]+)\)/;
  return (value) => {
    from1.lastIndex = 0;
    return value.replace(from1, ")").replace(from2, "$1");
  };
}
function replaceTagWith(value, matcher, replacer6) {
  let index = -1;
  while (true) {
    index = value.indexOf(matcher, index + 1);
    if (index === -1) {
      return value;
    }
    const start = index + matcher.length;
    const end = findClosing(value, start);
    value = `${value.substring(0, index)}${replacer6(value.substring(start, end))}${value.substring(end + 1)}`;
  }
}
function removeExtensions(type, isSized) {
  return (value) => {
    for (let i = 0, count = BOUNDED.length; i < count; i++) {
      const tag = BOUNDED[i];
      value = replaceTagWith(value, `${type}${tag}<`, (v) => {
        const parts = v.split(",").map((s) => s.trim()).filter((s) => s);
        if (isSized) {
          parts.pop();
        }
        return `${tag}<${parts.join(",")}>`;
      });
    }
    return value;
  };
}
function removeColons() {
  return (value) => {
    let index = 0;
    while (index !== -1) {
      index = value.indexOf("::");
      if (index === 0) {
        value = value.substring(2);
      } else if (index !== -1) {
        let start = index;
        while (start !== -1 && !BOX_PRECEDING.includes(value[start])) {
          start--;
        }
        value = `${value.substring(0, start + 1)}${value.substring(index + 2)}`;
      }
    }
    return value;
  };
}
function removeGenerics() {
  return (value) => {
    for (let i = 0, count = value.length; i < count; i++) {
      if (value[i] === "<") {
        const box = ALLOWED_BOXES.find((box2) => {
          const start = i - box2.length;
          return start >= 0 && value.substring(start, i) === box2 && // make sure it is stand-alone, i.e. don't catch ElectionResult<...> as Result<...>
          (start === 0 || BOX_PRECEDING.includes(value[start - 1]));
        });
        if (!box) {
          const end = findClosing(value, i + 1);
          value = `${value.substring(0, i)}${value.substring(end + 1)}`;
        }
      }
    }
    return value;
  };
}
function removePairOf() {
  const replacer6 = (v) => `(${v},${v})`;
  return (value) => replaceTagWith(value, "PairOf<", replacer6);
}
function removeTraits() {
  const from1 = /\s/g;
  const from2 = /(T|Self)::/g;
  const from3 = /<(T|Self)asTrait>::/g;
  const from4 = /<Tas[a-z]+::Trait>::/g;
  const from5 = /<LookupasStaticLookup>/g;
  const from6 = /::Type/g;
  return (value) => {
    from1.lastIndex = 0;
    from2.lastIndex = 0;
    from3.lastIndex = 0;
    from4.lastIndex = 0;
    from5.lastIndex = 0;
    from6.lastIndex = 0;
    return value.replace(from1, "").replace(from2, "").replace(from3, "").replace(from4, "").replace(from5, "Lookup").replace(from6, "");
  };
}
function removeWrap(check) {
  const replacer6 = (v) => v;
  return (value) => replaceTagWith(value, check, replacer6);
}
var sanitizeMap = /* @__PURE__ */ new Map();
function sanitize(value) {
  const startValue = value.toString();
  const memoized2 = sanitizeMap.get(startValue);
  if (memoized2) {
    return memoized2;
  }
  let result = startValue;
  for (let i = 0, count = mappings.length; i < count; i++) {
    result = mappings[i](result);
  }
  sanitizeMap.set(startValue, result);
  return result;
}

// node_modules/@polkadot/types-codec/utils/sortValues.js
function isArrayLike2(arg) {
  return arg instanceof Uint8Array || Array.isArray(arg);
}
function isEnum(arg) {
  return isCodec2(arg) && isNumber6(arg.index) && isCodec2(arg.value);
}
function isOption(arg) {
  return isCodec2(arg) && isBoolean2(arg.isSome) && isCodec2(arg.value);
}
function isNumberLike(arg) {
  return isNumber6(arg) || isBn5(arg) || isBigInt6(arg);
}
function sortArray(a, b) {
  let sortRes = 0;
  const minLen = Math.min(a.length, b.length);
  for (let i = 0; i < minLen; ++i) {
    sortRes = sortAsc(a[i], b[i]);
    if (sortRes !== 0) {
      return sortRes;
    }
  }
  return a.length - b.length;
}
function checkForDuplicates(container, seen, arg) {
  if (isCodec2(arg)) {
    const hex8 = arg.toHex();
    if (seen.has(hex8)) {
      throw new Error(`Duplicate value in ${container}: ${stringify5(arg)}`);
    }
    seen.add(hex8);
  }
  return true;
}
function sortAsc(a, b) {
  if (isNumberLike(a) && isNumberLike(b)) {
    return bnToBn3(a).cmp(bnToBn3(b));
  } else if (a instanceof Map && b instanceof Map) {
    return sortAsc(Array.from(a.values()), Array.from(b.values()));
  } else if (isEnum(a) && isEnum(b)) {
    return sortAsc(a.index, b.index) || sortAsc(a.value, b.value);
  } else if (isOption(a) && isOption(b)) {
    return sortAsc(a.isNone ? 0 : 1, b.isNone ? 0 : 1) || sortAsc(a.value, b.value);
  } else if (isArrayLike2(a) && isArrayLike2(b)) {
    return sortArray(a, b);
  } else if (isCodec2(a) && isCodec2(b)) {
    return sortAsc(a.toU8a(true), b.toU8a(true));
  }
  throw new Error(`Attempting to sort unrecognized values: ${stringify5(a)} (typeof ${typeof a}) <-> ${stringify5(b)} (typeof ${typeof b})`);
}
function sortSet(set) {
  const seen = /* @__PURE__ */ new Set();
  return new Set(Array.from(set).filter((value) => checkForDuplicates("BTreeSet", seen, value)).sort(sortAsc));
}
function sortMap(map3) {
  const seen = /* @__PURE__ */ new Set();
  return new Map(Array.from(map3.entries()).filter(([key]) => checkForDuplicates("BTreeMap", seen, key)).sort(([keyA], [keyB]) => sortAsc(keyA, keyB)));
}

// node_modules/@polkadot/types-codec/utils/toConstructors.js
function typeToConstructor(registry, type) {
  return typeof type === "function" ? type : registry.createClassUnsafe(type);
}
function typesToConstructors(registry, types2) {
  const count = types2.length;
  const result = new Array(count);
  for (let i = 0; i < count; i++) {
    result[i] = typeToConstructor(registry, types2[i]);
  }
  return result;
}
function mapToTypeMap(registry, input) {
  const entries = Object.entries(input);
  const count = entries.length;
  const output = [new Array(count), new Array(count)];
  for (let i = 0; i < count; i++) {
    output[1][i] = entries[i][0];
    output[0][i] = typeToConstructor(registry, entries[i][1]);
  }
  return output;
}

// node_modules/@polkadot/types-codec/utils/typesToMap.js
function typesToMap(registry, [Types, keys2]) {
  const result = {};
  for (let i = 0, count = keys2.length; i < count; i++) {
    result[keys2[i]] = registry.getClassName(Types[i]) || new Types[i](registry).toRawType();
  }
  return result;
}

// node_modules/@polkadot/types-codec/base/Compact.js
function decodeCompact(registry, Type2, value) {
  if (isU8a7(value)) {
    const [decodedLength, bn] = (value[0] & 3) < 3 ? compactFromU8aLim2(value) : compactFromU8a3(value);
    return [new Type2(registry, bn), decodedLength];
  } else if (value instanceof Compact) {
    const raw2 = value.unwrap();
    return raw2 instanceof Type2 ? [raw2, 0] : [new Type2(registry, raw2), 0];
  } else if (value instanceof Type2) {
    return [value, 0];
  }
  return [new Type2(registry, value), 0];
}
var Compact = class _Compact {
  registry;
  createdAtHash;
  initialU8aLength;
  isStorageFallback;
  __internal__Type;
  __internal__raw;
  constructor(registry, Type2, value = 0, { definition, setDefinition = identity3 } = {}) {
    this.registry = registry;
    this.__internal__Type = definition || setDefinition(typeToConstructor(registry, Type2));
    const [raw2, decodedLength] = decodeCompact(registry, this.__internal__Type, value);
    this.initialU8aLength = decodedLength;
    this.__internal__raw = raw2;
  }
  static with(Type2) {
    let definition;
    const setDefinition = (d) => definition = d;
    return class extends _Compact {
      constructor(registry, value) {
        super(registry, Type2, value, { definition, setDefinition });
      }
    };
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    return this.toU8a().length;
  }
  /**
   * @description returns a hash of the contents
   */
  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Checks if the value is an empty value
   */
  get isEmpty() {
    return this.__internal__raw.isEmpty;
  }
  /**
   * @description Returns the number of bits in the value
   */
  bitLength() {
    return this.__internal__raw.bitLength();
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  eq(other) {
    return this.__internal__raw.eq(other instanceof _Compact ? other.__internal__raw : other);
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    return {
      outer: [this.toU8a()]
    };
  }
  /**
   * @description Returns a BigInt representation of the number
   */
  toBigInt() {
    return this.__internal__raw.toBigInt();
  }
  /**
   * @description Returns the BN representation of the number
   */
  toBn() {
    return this.__internal__raw.toBn();
  }
  /**
   * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
   */
  toHex(isLe) {
    return this.__internal__raw.toHex(isLe);
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman(isExtended, disableAscii) {
    return this.__internal__raw.toHuman(isExtended, disableAscii);
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    return this.__internal__raw.toJSON();
  }
  /**
   * @description Returns the number representation for the value
   */
  toNumber() {
    return this.__internal__raw.toNumber();
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive(disableAscii) {
    return this.__internal__raw.toPrimitive(disableAscii);
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return `Compact<${this.registry.getClassName(this.__internal__Type) || this.__internal__raw.toRawType()}>`;
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    return this.__internal__raw.toString();
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   */
  toU8a(_isBare) {
    return compactToU8a2(this.__internal__raw.toBn());
  }
  /**
   * @description Returns the embedded [[UInt]] or [[Moment]] value
   */
  unwrap() {
    return this.__internal__raw;
  }
};

// node_modules/@polkadot/types-codec/base/DoNotConstruct.js
var DoNotConstruct = class _DoNotConstruct {
  registry;
  createdAtHash;
  isStorageFallback;
  __internal__neverError;
  constructor(registry, typeName = "DoNotConstruct") {
    this.registry = registry;
    this.__internal__neverError = new Error(`DoNotConstruct: Cannot construct unknown type ${typeName}`);
    throw this.__internal__neverError;
  }
  static with(typeName) {
    return class extends _DoNotConstruct {
      constructor(registry) {
        super(registry, typeName);
      }
    };
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    throw this.__internal__neverError;
  }
  /**
   * @description returns a hash of the contents
   */
  get hash() {
    throw this.__internal__neverError;
  }
  /**
   * @description Checks if the value is an empty value (always true)
   */
  get isEmpty() {
    throw this.__internal__neverError;
  }
  /**
   * @description Unimplemented
   */
  eq() {
    throw this.__internal__neverError;
  }
  /**
   * @description Unimplemented
   */
  inspect() {
    throw this.__internal__neverError;
  }
  /**
   * @description Unimplemented
   */
  toHex() {
    throw this.__internal__neverError;
  }
  /**
   * @description Unimplemented
   */
  toHuman() {
    throw this.__internal__neverError;
  }
  /**
   * @description Unimplemented
   */
  toJSON() {
    throw this.__internal__neverError;
  }
  /**
   * @description Unimplemented
   */
  toPrimitive() {
    throw this.__internal__neverError;
  }
  /**
   * @description Unimplemented
   */
  toRawType() {
    throw this.__internal__neverError;
  }
  /**
   * @description Unimplemented
   */
  toString() {
    throw this.__internal__neverError;
  }
  /**
   * @description Unimplemented
   */
  toU8a() {
    throw this.__internal__neverError;
  }
};

// node_modules/@polkadot/types-codec/base/Null.js
var Null = class _Null {
  encodedLength = 0;
  isEmpty = true;
  registry;
  createdAtHash;
  initialU8aLength = 0;
  isStorageFallback;
  constructor(registry) {
    this.registry = registry;
  }
  /**
   * @description returns a hash of the contents
   */
  get hash() {
    throw new Error(".hash is not implemented on Null");
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  eq(other) {
    return other instanceof _Null || isNull5(other);
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    return {};
  }
  /**
   * @description Returns a hex string representation of the value
   */
  toHex() {
    return "0x";
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman() {
    return this.toJSON();
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    return null;
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive() {
    return null;
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return "Null";
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    return "";
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   */
  toU8a(_isBare) {
    return new Uint8Array();
  }
};

// node_modules/@polkadot/types-codec/base/Enum.js
function isRustEnum(def) {
  const defValues = Object.values(def);
  if (defValues.some((v) => isNumber6(v))) {
    if (!defValues.every((v) => isNumber6(v) && v >= 0 && v <= 255)) {
      throw new Error("Invalid number-indexed enum definition");
    }
    return false;
  }
  return true;
}
function extractDef(registry, _def) {
  const def = {};
  let isBasic;
  let isIndexed;
  if (Array.isArray(_def)) {
    for (let i = 0, count = _def.length; i < count; i++) {
      def[_def[i]] = { Type: Null, index: i };
    }
    isBasic = true;
    isIndexed = false;
  } else if (isRustEnum(_def)) {
    const [Types, keys2] = mapToTypeMap(registry, _def);
    for (let i = 0, count = keys2.length; i < count; i++) {
      def[keys2[i]] = { Type: Types[i], index: i };
    }
    isBasic = !Object.values(def).some(({ Type: Type2 }) => Type2 !== Null);
    isIndexed = false;
  } else {
    const entries = Object.entries(_def);
    for (let i = 0, count = entries.length; i < count; i++) {
      const [key, index] = entries[i];
      def[key] = { Type: Null, index };
    }
    isBasic = true;
    isIndexed = true;
  }
  return {
    def,
    isBasic,
    isIndexed
  };
}
function getEntryType(def, checkIdx) {
  const values = Object.values(def);
  for (let i = 0, count = values.length; i < count; i++) {
    const { Type: Type2, index } = values[i];
    if (index === checkIdx) {
      return Type2;
    }
  }
  throw new Error(`Unable to create Enum via index ${checkIdx}, in ${Object.keys(def).join(", ")}`);
}
function createFromU8a(registry, def, index, value) {
  const Type2 = getEntryType(def, index);
  return {
    index,
    value: new Type2(registry, value)
  };
}
function createFromValue(registry, def, index = 0, value) {
  const Type2 = getEntryType(def, index);
  return {
    index,
    value: value instanceof Type2 ? value : new Type2(registry, value)
  };
}
function decodeFromJSON(registry, def, key, value) {
  const keys2 = Object.keys(def).map((k) => k.toLowerCase());
  const keyLower = key.toLowerCase();
  const index = keys2.indexOf(keyLower);
  if (index === -1) {
    throw new Error(`Cannot map Enum JSON, unable to find '${key}' in ${keys2.join(", ")}`);
  }
  try {
    return createFromValue(registry, def, Object.values(def)[index].index, value);
  } catch (error) {
    throw new Error(`Enum(${key}):: ${error.message}`);
  }
}
function decodeEnum(registry, def, value, index) {
  if (isNumber6(index)) {
    return createFromValue(registry, def, index, value);
  } else if (isU8a7(value) || isHex7(value)) {
    const u8a = u8aToU8a7(value);
    if (u8a.length) {
      return createFromU8a(registry, def, u8a[0], u8a.subarray(1));
    }
  } else if (value instanceof Enum) {
    return createFromValue(registry, def, value.index, value.value);
  } else if (isNumber6(value)) {
    return createFromValue(registry, def, value);
  } else if (isString6(value)) {
    return decodeFromJSON(registry, def, value.toString());
  } else if (isObject6(value)) {
    const key = Object.keys(value)[0];
    return decodeFromJSON(registry, def, key, value[key]);
  }
  return createFromValue(registry, def, Object.values(def)[0].index);
}
var Enum = class _Enum {
  registry;
  createdAtHash;
  initialU8aLength;
  isStorageFallback;
  __internal__def;
  __internal__entryIndex;
  __internal__indexes;
  __internal__isBasic;
  __internal__isIndexed;
  __internal__raw;
  constructor(registry, Types, value, index, { definition, setDefinition = identity3 } = {}) {
    const { def, isBasic, isIndexed } = definition || setDefinition(extractDef(registry, Types));
    const decoded = isU8a7(value) && value.length && !isNumber6(index) ? createFromU8a(registry, def, value[0], value.subarray(1)) : decodeEnum(registry, def, value, index);
    this.registry = registry;
    this.__internal__def = def;
    this.__internal__isBasic = isBasic;
    this.__internal__isIndexed = isIndexed;
    this.__internal__indexes = Object.values(def).map(({ index: index2 }) => index2);
    this.__internal__entryIndex = this.__internal__indexes.indexOf(decoded.index);
    this.__internal__raw = decoded.value;
    if (this.__internal__raw.initialU8aLength) {
      this.initialU8aLength = 1 + this.__internal__raw.initialU8aLength;
    }
  }
  static with(Types) {
    let definition;
    const setDefinition = (d) => definition = d;
    return class extends _Enum {
      static {
        const keys2 = Array.isArray(Types) ? Types : Object.keys(Types);
        const count = keys2.length;
        const asKeys = new Array(count);
        const isKeys = new Array(count);
        for (let i = 0; i < count; i++) {
          const name = stringPascalCase3(keys2[i]);
          asKeys[i] = `as${name}`;
          isKeys[i] = `is${name}`;
        }
        objectProperties2(this.prototype, isKeys, (_, i, self2) => self2.type === keys2[i]);
        objectProperties2(this.prototype, asKeys, (k, i, self2) => {
          if (self2.type !== keys2[i]) {
            throw new Error(`Cannot convert '${self2.type}' via ${k}`);
          }
          return self2.value;
        });
      }
      constructor(registry, value, index) {
        super(registry, Types, value, index, { definition, setDefinition });
      }
    };
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    return 1 + this.__internal__raw.encodedLength;
  }
  /**
   * @description returns a hash of the contents
   */
  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description The index of the enum value
   */
  get index() {
    return this.__internal__indexes[this.__internal__entryIndex];
  }
  /**
   * @description The value of the enum
   */
  get inner() {
    return this.__internal__raw;
  }
  /**
   * @description true if this is a basic enum (no values)
   */
  get isBasic() {
    return this.__internal__isBasic;
  }
  /**
   * @description Checks if the value is an empty value
   */
  get isEmpty() {
    return this.__internal__raw.isEmpty;
  }
  /**
   * @description Checks if the Enum points to a [[Null]] type
   */
  get isNone() {
    return this.__internal__raw instanceof Null;
  }
  /**
   * @description The available keys for this enum
   */
  get defIndexes() {
    return this.__internal__indexes;
  }
  /**
   * @description The available keys for this enum
   */
  get defKeys() {
    return Object.keys(this.__internal__def);
  }
  /**
   * @description The name of the type this enum value represents
   */
  get type() {
    return this.defKeys[this.__internal__entryIndex];
  }
  /**
   * @description The value of the enum
   */
  get value() {
    return this.__internal__raw;
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  eq(other) {
    if (isU8a7(other)) {
      return !this.toU8a().some((entry, index) => entry !== other[index]);
    } else if (isNumber6(other)) {
      return this.toNumber() === other;
    } else if (this.__internal__isBasic && isString6(other)) {
      return this.type === other;
    } else if (isHex7(other)) {
      return this.toHex() === other;
    } else if (other instanceof _Enum) {
      return this.index === other.index && this.value.eq(other.value);
    } else if (isObject6(other)) {
      return this.value.eq(other[this.type]);
    }
    return this.value.eq(other);
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    if (this.__internal__isBasic) {
      return { outer: [new Uint8Array([this.index])] };
    }
    const { inner, outer = [] } = this.__internal__raw.inspect();
    return {
      inner,
      outer: [new Uint8Array([this.index]), ...outer]
    };
  }
  /**
   * @description Returns a hex string representation of the value
   */
  toHex() {
    return u8aToHex7(this.toU8a());
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman(isExtended, disableAscii) {
    return this.__internal__isBasic || this.isNone ? this.type : { [this.type]: this.__internal__raw.toHuman(isExtended, disableAscii) };
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    return this.__internal__isBasic ? this.type : { [stringCamelCase3(this.type)]: this.__internal__raw.toJSON() };
  }
  /**
   * @description Returns the number representation for the value
   */
  toNumber() {
    return this.index;
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive(disableAscii) {
    return this.__internal__isBasic ? this.type : { [stringCamelCase3(this.type)]: this.__internal__raw.toPrimitive(disableAscii) };
  }
  /**
   * @description Returns a raw struct representation of the enum types
   */
  _toRawStruct() {
    if (this.__internal__isBasic) {
      return this.__internal__isIndexed ? this.defKeys.reduce((out, key, index) => {
        out[key] = this.__internal__indexes[index];
        return out;
      }, {}) : this.defKeys;
    }
    const entries = Object.entries(this.__internal__def);
    return typesToMap(this.registry, entries.reduce((out, [key, { Type: Type2 }], i) => {
      out[0][i] = Type2;
      out[1][i] = key;
      return out;
    }, [new Array(entries.length), new Array(entries.length)]));
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return stringify5({ _enum: this._toRawStruct() });
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    return this.isNone ? this.type : stringify5(this.toJSON());
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  toU8a(isBare) {
    return isBare ? this.__internal__raw.toU8a(isBare) : u8aConcatStrict5([
      new Uint8Array([this.index]),
      this.__internal__raw.toU8a(isBare)
    ]);
  }
};

// node_modules/@polkadot/types-codec/base/Int.js
var Int = class _Int extends AbstractInt {
  constructor(registry, value = 0, bitLength) {
    super(registry, value, bitLength, true);
  }
  static with(bitLength, typeName) {
    return class extends _Int {
      constructor(registry, value) {
        super(registry, value, bitLength);
      }
      toRawType() {
        return typeName || super.toRawType();
      }
    };
  }
};

// node_modules/@polkadot/types-codec/base/Option.js
var None = class extends Null {
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return "None";
  }
};
function decodeOption(registry, Type2, value) {
  if (value instanceof Type2) {
    return value;
  } else if (value instanceof Option) {
    if (value.value instanceof Type2) {
      return value.value;
    } else if (value.isNone) {
      return new None(registry);
    }
    return new Type2(registry, value.value);
  } else if (isNull5(value) || isUndefined7(value) || value === "0x" || value instanceof None) {
    return new None(registry);
  } else if (isU8a7(value)) {
    return !value.length || value[0] === 0 ? new None(registry) : new Type2(registry, value.subarray(1));
  }
  return new Type2(registry, value);
}
var Option = class _Option {
  registry;
  createdAtHash;
  initialU8aLength;
  isStorageFallback;
  __internal__Type;
  __internal__raw;
  constructor(registry, typeName, value, { definition, setDefinition = identity3 } = {}) {
    const Type2 = definition || setDefinition(typeToConstructor(registry, typeName));
    const decoded = isU8a7(value) && value.length && !isCodec2(value) ? value[0] === 0 ? new None(registry) : new Type2(registry, value.subarray(1)) : decodeOption(registry, Type2, value);
    this.registry = registry;
    this.__internal__Type = Type2;
    this.__internal__raw = decoded;
    if (decoded?.initialU8aLength) {
      this.initialU8aLength = 1 + decoded.initialU8aLength;
    }
  }
  static with(Type2) {
    let definition;
    const setDefinition = (d) => {
      definition = d;
      return d;
    };
    return class extends _Option {
      constructor(registry, value) {
        super(registry, Type2, value, { definition, setDefinition });
      }
    };
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    return 1 + this.__internal__raw.encodedLength;
  }
  /**
   * @description returns a hash of the contents
   */
  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Checks if the Option has no value
   */
  get isEmpty() {
    return this.isNone;
  }
  /**
   * @description Checks if the Option has no value
   */
  get isNone() {
    return this.__internal__raw instanceof None;
  }
  /**
   * @description Checks if the Option has a value
   */
  get isSome() {
    return !this.isNone;
  }
  /**
   * @description The actual value for the Option
   */
  get value() {
    return this.__internal__raw;
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  eq(other) {
    if (other instanceof _Option) {
      return this.isSome === other.isSome && this.value.eq(other.value);
    }
    return this.value.eq(other);
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    if (this.isNone) {
      return { outer: [new Uint8Array([0])] };
    }
    const { inner, outer = [] } = this.__internal__raw.inspect();
    return {
      inner,
      outer: [new Uint8Array([1]), ...outer]
    };
  }
  /**
   * @description Returns a hex string representation of the value
   */
  toHex() {
    return this.isNone ? "0x" : u8aToHex7(this.toU8a().subarray(1));
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman(isExtended, disableAscii) {
    return this.__internal__raw.toHuman(isExtended, disableAscii);
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    return this.isNone ? null : this.__internal__raw.toJSON();
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive(disableAscii) {
    return this.isNone ? null : this.__internal__raw.toPrimitive(disableAscii);
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType(isBare) {
    const wrapped = this.registry.getClassName(this.__internal__Type) || new this.__internal__Type(this.registry).toRawType();
    return isBare ? wrapped : `Option<${wrapped}>`;
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    return this.__internal__raw.toString();
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  toU8a(isBare) {
    if (isBare) {
      return this.__internal__raw.toU8a(true);
    }
    const u8a = new Uint8Array(this.encodedLength);
    if (this.isSome) {
      u8a.set([1]);
      u8a.set(this.__internal__raw.toU8a(), 1);
    }
    return u8a;
  }
  /**
   * @description Returns the value that the Option represents (if available), throws if null
   */
  unwrap() {
    if (this.isNone) {
      throw new Error("Option: unwrapping a None value");
    }
    return this.__internal__raw;
  }
  /**
   * @description Returns the value that the Option represents (if available) or defaultValue if none
   * @param defaultValue The value to return if the option isNone
   */
  unwrapOr(defaultValue) {
    return this.isSome ? this.unwrap() : defaultValue;
  }
  /**
   * @description Returns the value that the Option represents (if available) or defaultValue if none
   * @param defaultValue The value to return if the option isNone
   */
  unwrapOrDefault() {
    return this.isSome ? this.unwrap() : new this.__internal__Type(this.registry);
  }
};

// node_modules/@polkadot/types-codec/base/Result.js
var Result = class _Result extends Enum {
  constructor(registry, Ok, Err, value) {
    super(registry, { Ok, Err }, value);
  }
  static with(Types) {
    return class extends _Result {
      constructor(registry, value) {
        super(registry, Types.Ok, Types.Err, value);
      }
    };
  }
  /**
   * @description Returns the wrapper Err value (if isErr)
   */
  get asErr() {
    if (!this.isErr) {
      throw new Error("Cannot extract Err value from Ok result, check isErr first");
    }
    return this.value;
  }
  /**
   * @description Returns the wrapper Ok value (if isOk)
   */
  get asOk() {
    if (!this.isOk) {
      throw new Error("Cannot extract Ok value from Err result, check isOk first");
    }
    return this.value;
  }
  /**
   * @description Checks if the Result has no value
   */
  get isEmpty() {
    return this.isOk && this.value.isEmpty;
  }
  /**
   * @description Checks if the Result wraps an Err value
   */
  get isErr() {
    return !this.isOk;
  }
  /**
   * @description Checks if the Result wraps an Ok value
   */
  get isOk() {
    return this.index === 0;
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    const Types = this._toRawStruct();
    return `Result<${Types.Ok},${Types.Err}>`;
  }
};

// node_modules/@polkadot/types-codec/base/Tuple.js
function decodeTuple(registry, result, value, Classes) {
  if (Array.isArray(value)) {
    const Types = Classes[0];
    for (let i = 0, count = Types.length; i < count; i++) {
      try {
        const entry = value?.[i];
        result[i] = entry instanceof Types[i] ? entry : new Types[i](registry, entry);
      } catch (error) {
        throw new Error(`Tuple: failed on ${i}:: ${error.message}`);
      }
    }
    return [result, 0];
  } else if (isHex7(value)) {
    return decodeU8a(registry, result, u8aToU8a7(value), Classes);
  } else if (!value || !result.length) {
    const Types = Classes[0];
    for (let i = 0, count = Types.length; i < count; i++) {
      result[i] = new Types[i](registry);
    }
    return [result, 0];
  }
  throw new Error(`Expected array input to Tuple decoding, found ${typeof value}: ${stringify5(value)}`);
}
var Tuple = class _Tuple extends AbstractArray {
  __internal__Types;
  constructor(registry, Types, value, { definition, setDefinition = identity3 } = {}) {
    const Classes = definition || setDefinition(Array.isArray(Types) ? [typesToConstructors(registry, Types), []] : isFunction8(Types) || isString6(Types) ? [[typeToConstructor(registry, Types)], []] : mapToTypeMap(registry, Types));
    super(registry, Classes[0].length);
    this.initialU8aLength = (isU8a7(value) ? decodeU8a(registry, this, value, Classes) : decodeTuple(registry, this, value, Classes))[1];
    this.__internal__Types = Classes;
  }
  static with(Types) {
    let definition;
    const setDefinition = (d) => definition = d;
    return class extends _Tuple {
      constructor(registry, value) {
        super(registry, Types, value, { definition, setDefinition });
      }
    };
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    let total = 0;
    for (let i = 0, count = this.length; i < count; i++) {
      total += this[i].encodedLength;
    }
    return total;
  }
  /**
   * @description The types definition of the tuple
   */
  get Types() {
    return this.__internal__Types[1].length ? this.__internal__Types[1] : this.__internal__Types[0].map((T) => new T(this.registry).toRawType());
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    return {
      inner: this.inspectInner()
    };
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    const types2 = this.__internal__Types[0].map((T) => this.registry.getClassName(T) || new T(this.registry).toRawType());
    return `(${types2.join(",")})`;
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    return stringify5(this.toJSON());
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  toU8a(isBare) {
    return u8aConcatStrict5(this.toU8aInner(isBare));
  }
};

// node_modules/@polkadot/types-codec/base/UInt.js
var UInt = class _UInt extends AbstractInt {
  static with(bitLength, typeName) {
    return class extends _UInt {
      constructor(registry, value) {
        super(registry, value, bitLength);
      }
      toRawType() {
        return typeName || super.toRawType();
      }
    };
  }
};

// node_modules/@polkadot/types-codec/base/Vec.js
var MAX_LENGTH = 512 * 1024;
var l3 = logger5("Vec");
function decodeVecLength(value) {
  if (Array.isArray(value)) {
    return [value, value.length, 0];
  } else if (isU8a7(value) || isHex7(value)) {
    const u8a = u8aToU8a7(value);
    const [startAt, length] = compactFromU8aLim2(u8a);
    if (length > MAX_LENGTH) {
      throw new Error(`Vec length ${length.toString()} exceeds ${MAX_LENGTH}`);
    }
    return [u8a, length, startAt];
  } else if (!value) {
    return [null, 0, 0];
  }
  throw new Error(`Expected array/hex input to Vec<*> decoding, found ${typeof value}: ${stringify5(value)}`);
}
function decodeVec(registry, result, value, startAt, Type2) {
  if (Array.isArray(value)) {
    const count = result.length;
    for (let i = 0; i < count; i++) {
      const entry = value[i];
      try {
        result[i] = entry instanceof Type2 ? entry : new Type2(registry, entry);
      } catch (error) {
        l3.error(`Unable to decode on index ${i}`, error.message);
        throw error;
      }
    }
    return [0, 0];
  } else if (!value) {
    return [0, 0];
  }
  return decodeU8aVec(registry, result, u8aToU8a7(value), startAt, Type2);
}
var Vec = class _Vec extends AbstractArray {
  __internal__Type;
  constructor(registry, Type2, value = [], { definition, setDefinition = identity3 } = {}) {
    const [decodeFrom, length, startAt] = decodeVecLength(value);
    super(registry, length);
    this.__internal__Type = definition || setDefinition(typeToConstructor(registry, Type2));
    this.initialU8aLength = (isU8a7(decodeFrom) ? decodeU8aVec(registry, this, decodeFrom, startAt, this.__internal__Type) : decodeVec(registry, this, decodeFrom, startAt, this.__internal__Type))[0];
  }
  static with(Type2) {
    let definition;
    const setDefinition = (d) => definition = d;
    return class extends _Vec {
      constructor(registry, value) {
        super(registry, Type2, value, { definition, setDefinition });
      }
    };
  }
  /**
   * @description The type for the items
   */
  get Type() {
    return this.__internal__Type.name;
  }
  /**
   * @description Finds the index of the value in the array
   */
  indexOf(other) {
    const check = other instanceof this.__internal__Type ? other : new this.__internal__Type(this.registry, other);
    for (let i = 0, count = this.length; i < count; i++) {
      if (check.eq(this[i])) {
        return i;
      }
    }
    return -1;
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return `Vec<${this.registry.getClassName(this.__internal__Type) || new this.__internal__Type(this.registry).toRawType()}>`;
  }
};

// node_modules/@polkadot/types-codec/base/VecFixed.js
var VecFixed = class _VecFixed extends AbstractArray {
  __internal__Type;
  constructor(registry, Type2, length, value = [], { definition, setDefinition = identity3 } = {}) {
    super(registry, length);
    this.__internal__Type = definition || setDefinition(typeToConstructor(registry, Type2));
    this.initialU8aLength = (isU8a7(value) ? decodeU8aVec(registry, this, value, 0, this.__internal__Type) : decodeVec(registry, this, value, 0, this.__internal__Type))[1];
  }
  static with(Type2, length) {
    let definition;
    const setDefinition = (d) => definition = d;
    return class extends _VecFixed {
      constructor(registry, value) {
        super(registry, Type2, length, value, { definition, setDefinition });
      }
    };
  }
  /**
   * @description The type for the items
   */
  get Type() {
    return new this.__internal__Type(this.registry).toRawType();
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    let total = 0;
    for (let i = 0, count = this.length; i < count; i++) {
      total += this[i].encodedLength;
    }
    return total;
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    return {
      inner: this.inspectInner()
    };
  }
  toU8a() {
    const encoded = this.toU8aInner();
    return encoded.length ? u8aConcatStrict5(encoded) : new Uint8Array([]);
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return `[${this.Type};${this.length}]`;
  }
};

// node_modules/@polkadot/types-codec/native/Raw.js
var Raw = class extends Uint8Array {
  registry;
  createdAtHash;
  initialU8aLength;
  isStorageFallback;
  /**
   * @description This ensures that operators such as clice, filter, map, etc. return
   * new Array instances (without this we need to apply overrides)
   */
  static get [Symbol.species]() {
    return Uint8Array;
  }
  constructor(registry, value, initialU8aLength) {
    super(u8aToU8a7(value));
    this.registry = registry;
    this.initialU8aLength = initialU8aLength;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    return this.length;
  }
  /**
   * @description returns a hash of the contents
   */
  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Returns true if the wrapped value contains only ASCII printable characters
   */
  get isAscii() {
    return isAscii(this);
  }
  /**
   * @description Returns true if the type wraps an empty/default all-0 value
   */
  get isEmpty() {
    return !this.length || isUndefined7(this.find((b) => !!b));
  }
  /**
   * @description Returns true if the wrapped value contains only utf8 characters
   */
  get isUtf8() {
    return isUtf8(this);
  }
  /**
   * @description Returns the number of bits in the value
   */
  bitLength() {
    return this.length * 8;
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  eq(other) {
    if (other instanceof Uint8Array) {
      return this.length === other.length && !this.some((b, index) => b !== other[index]);
    }
    return this.eq(u8aToU8a7(other));
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    return {
      outer: [this.toU8a()]
    };
  }
  /**
   * @description Returns a hex string representation of the value
   */
  toHex() {
    return u8aToHex7(this);
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman(_isExtended, disableAscii) {
    return this.toPrimitive(disableAscii);
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    return this.toHex();
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive(disableAscii) {
    if (!disableAscii && this.isAscii) {
      const text2 = this.toUtf8();
      if (isAscii(text2)) {
        return text2;
      }
    }
    return this.toJSON();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return "Raw";
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    return this.toHex();
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   */
  toU8a(_isBare) {
    return Uint8Array.from(this);
  }
  /**
   * @description Returns the wrapped data as a UTF-8 string
   */
  toUtf8() {
    if (!this.isUtf8) {
      throw new Error("The character sequence is not a valid Utf8 string");
    }
    return u8aToString4(this);
  }
};

// node_modules/@polkadot/types-codec/extended/BitVec.js
function decodeBitVecU8a(value) {
  if (!value?.length) {
    return [0, new Uint8Array()];
  }
  const [offset, length] = compactFromU8aLim2(value);
  const total = offset + Math.ceil(length / 8);
  if (total > value.length) {
    throw new Error(`BitVec: required length less than remainder, expected at least ${total}, found ${value.length}`);
  }
  return [length, value.subarray(offset, total)];
}
function decodeBitVec(value) {
  if (Array.isArray(value) || isString6(value)) {
    const u8a = u8aToU8a7(value);
    return [u8a.length / 8, u8a];
  }
  return decodeBitVecU8a(value);
}
var BitVec = class extends Raw {
  __internal__decodedLength;
  __internal__isMsb;
  // In lieu of having the Msb/Lsb identifiers passed through, we default to assuming
  // we are dealing with Lsb, which is the default (as of writing) BitVec format used
  // in the Polkadot code (this only affects the toHuman displays)
  constructor(registry, value, isMsb = false) {
    const [decodedLength, u8a] = decodeBitVec(value);
    super(registry, u8a);
    this.__internal__decodedLength = decodedLength;
    this.__internal__isMsb = isMsb;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    return this.length + compactToU8a2(this.__internal__decodedLength).length;
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    return {
      outer: [compactToU8a2(this.__internal__decodedLength), super.toU8a()]
    };
  }
  /**
   * @description Creates a boolean array of the bit values
   */
  toBoolArray() {
    const map3 = [...this.toU8a(true)].map((v) => [
      !!(v & 128),
      !!(v & 64),
      !!(v & 32),
      !!(v & 16),
      !!(v & 8),
      !!(v & 4),
      !!(v & 2),
      !!(v & 1)
    ]);
    const count = map3.length;
    const result = new Array(8 * count);
    for (let i = 0; i < count; i++) {
      const off = i * 8;
      const v = map3[i];
      for (let j = 0; j < 8; j++) {
        result[off + j] = this.__internal__isMsb ? v[j] : v[7 - j];
      }
    }
    return result;
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman() {
    return `0b${[...this.toU8a(true)].map((d) => `00000000${d.toString(2)}`.slice(-8)).map((s) => this.__internal__isMsb ? s : s.split("").reverse().join("")).join("_")}`;
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return "BitVec";
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  toU8a(isBare) {
    const bitVec = super.toU8a(isBare);
    return isBare ? bitVec : u8aConcatStrict5([compactToU8a2(this.__internal__decodedLength), bitVec]);
  }
};

// node_modules/@polkadot/types-codec/native/Struct.js
function noopSetDefinition(d) {
  return d;
}
function decodeStructFromObject(registry, [Types, keys2], value, jsonMap) {
  let jsonObj;
  const typeofArray = Array.isArray(value);
  const typeofMap = value instanceof Map;
  const count = keys2.length;
  if (!typeofArray && !typeofMap && !isObject6(value)) {
    throw new Error(`Struct: Cannot decode value ${stringify5(value)} (typeof ${typeof value}), expected an input object, map or array`);
  } else if (typeofArray && value.length !== count) {
    throw new Error(`Struct: Unable to map ${stringify5(value)} array to object with known keys ${keys2.join(", ")}`);
  }
  const raw2 = new Array(count);
  for (let i = 0; i < count; i++) {
    const key = keys2[i];
    const jsonKey = jsonMap.get(key) || key;
    const Type2 = Types[i];
    let assign;
    try {
      if (typeofArray) {
        assign = value[i];
      } else if (typeofMap) {
        assign = jsonKey && value.get(jsonKey);
      } else {
        assign = jsonKey && value[jsonKey];
        if (isUndefined7(assign)) {
          if (isUndefined7(jsonObj)) {
            const entries = Object.entries(value);
            jsonObj = {};
            for (let e = 0, ecount = entries.length; e < ecount; e++) {
              jsonObj[stringCamelCase3(entries[e][0])] = entries[e][1];
            }
          }
          assign = jsonKey && jsonObj[jsonKey];
        }
      }
      raw2[i] = [
        key,
        assign instanceof Type2 ? assign : new Type2(registry, assign)
      ];
    } catch (error) {
      let type = Type2.name;
      try {
        type = new Type2(registry).toRawType();
      } catch {
      }
      throw new Error(`Struct: failed on ${jsonKey}: ${type}:: ${error.message}`);
    }
  }
  return [raw2, 0];
}
var Struct = class _Struct extends Map {
  registry;
  createdAtHash;
  initialU8aLength;
  isStorageFallback;
  __internal__jsonMap;
  __internal__Types;
  constructor(registry, Types, value, jsonMap = /* @__PURE__ */ new Map(), { definition, setDefinition = noopSetDefinition } = {}) {
    const typeMap = definition || setDefinition(mapToTypeMap(registry, Types));
    const [decoded, decodedLength] = isU8a7(value) || isHex7(value) ? decodeU8aStruct(registry, new Array(typeMap[0].length), u8aToU8a7(value), typeMap) : value instanceof _Struct ? [value, 0] : decodeStructFromObject(registry, typeMap, value || {}, jsonMap);
    super(decoded);
    this.initialU8aLength = decodedLength;
    this.registry = registry;
    this.__internal__jsonMap = jsonMap;
    this.__internal__Types = typeMap;
  }
  static with(Types, jsonMap) {
    let definition;
    const setDefinition = (d) => definition = d;
    return class extends _Struct {
      static {
        const keys2 = Object.keys(Types);
        objectProperties2(this.prototype, keys2, (k, _, self2) => self2.get(k));
      }
      constructor(registry, value) {
        super(registry, Types, value, jsonMap, { definition, setDefinition });
      }
    };
  }
  /**
   * @description The available keys for this struct
   */
  get defKeys() {
    return this.__internal__Types[1];
  }
  /**
   * @description Checks if the value is an empty value
   */
  get isEmpty() {
    for (const v of this.values()) {
      if (!v.isEmpty) {
        return false;
      }
    }
    return true;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    let total = 0;
    for (const v of this.values()) {
      total += v.encodedLength;
    }
    return total;
  }
  /**
   * @description returns a hash of the contents
   */
  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Returns the Type description of the structure
   */
  get Type() {
    const result = {};
    const [Types, keys2] = this.__internal__Types;
    for (let i = 0, count = keys2.length; i < count; i++) {
      result[keys2[i]] = new Types[i](this.registry).toRawType();
    }
    return result;
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  eq(other) {
    return compareMap(this, other);
  }
  /**
   * @description Returns a specific names entry in the structure
   * @param key The name of the entry to retrieve
   */
  get(key) {
    return super.get(key);
  }
  /**
   * @description Returns the values of a member at a specific index (Rather use get(name) for performance)
   */
  getAtIndex(index) {
    return this.toArray()[index];
  }
  /**
   * @description Returns the a types value by name
   */
  getT(key) {
    return super.get(key);
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect(isBare) {
    const inner = [];
    for (const [k, v] of this.entries()) {
      inner.push({
        ...v.inspect(!isBare || isBoolean2(isBare) ? isBare : isBare[k]),
        name: stringCamelCase3(k)
      });
    }
    return {
      inner
    };
  }
  /**
   * @description Converts the Object to an standard JavaScript Array
   */
  toArray() {
    return [...this.values()];
  }
  /**
   * @description Returns a hex string representation of the value
   */
  toHex() {
    return u8aToHex7(this.toU8a());
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman(isExtended, disableAscii) {
    const json = {};
    for (const [k, v] of this.entries()) {
      json[k] = v.toHuman(isExtended, disableAscii);
    }
    return json;
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    const json = {};
    for (const [k, v] of this.entries()) {
      json[this.__internal__jsonMap.get(k) || k] = v.toJSON();
    }
    return json;
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive(disableAscii) {
    const json = {};
    for (const [k, v] of this.entries()) {
      json[k] = v.toPrimitive(disableAscii);
    }
    return json;
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return stringify5(typesToMap(this.registry, this.__internal__Types));
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    return stringify5(this.toJSON());
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  toU8a(isBare) {
    const encoded = [];
    for (const [k, v] of this.entries()) {
      encoded.push(v.toU8a(!isBare || isBoolean2(isBare) ? isBare : isBare[k]));
    }
    return u8aConcatStrict5(encoded);
  }
};

// node_modules/@polkadot/types-codec/extended/Map.js
var l4 = logger5("Map");
function decodeMapFromU8a(registry, KeyClass, ValClass, u8a) {
  const output = /* @__PURE__ */ new Map();
  const [offset, count] = compactFromU8aLim2(u8a);
  const types2 = [];
  for (let i = 0; i < count; i++) {
    types2.push(KeyClass, ValClass);
  }
  const [values, decodedLength] = decodeU8a(registry, new Array(types2.length), u8a.subarray(offset), [types2, []]);
  for (let i = 0, count2 = values.length; i < count2; i += 2) {
    output.set(values[i], values[i + 1]);
  }
  return [KeyClass, ValClass, output, offset + decodedLength];
}
function decodeMapFromMap(registry, KeyClass, ValClass, value) {
  const output = /* @__PURE__ */ new Map();
  for (const [key, val] of value.entries()) {
    const isComplex = KeyClass.prototype instanceof AbstractArray || KeyClass.prototype instanceof Struct || KeyClass.prototype instanceof Enum;
    try {
      output.set(key instanceof KeyClass ? key : new KeyClass(registry, isComplex && typeof key === "string" ? JSON.parse(key) : key), val instanceof ValClass ? val : new ValClass(registry, val));
    } catch (error) {
      l4.error("Failed to decode key or value:", error.message);
      throw error;
    }
  }
  return [KeyClass, ValClass, output, 0];
}
function decodeMap(registry, keyType, valType, value) {
  const KeyClass = typeToConstructor(registry, keyType);
  const ValClass = typeToConstructor(registry, valType);
  if (!value) {
    return [KeyClass, ValClass, /* @__PURE__ */ new Map(), 0];
  } else if (isU8a7(value) || isHex7(value)) {
    return decodeMapFromU8a(registry, KeyClass, ValClass, u8aToU8a7(value));
  } else if (value instanceof Map) {
    return decodeMapFromMap(registry, KeyClass, ValClass, value);
  } else if (isObject6(value)) {
    return decodeMapFromMap(registry, KeyClass, ValClass, new Map(Object.entries(value)));
  }
  throw new Error("Map: cannot decode type");
}
var CodecMap = class extends Map {
  registry;
  createdAtHash;
  initialU8aLength;
  isStorageFallback;
  __internal__KeyClass;
  __internal__ValClass;
  __internal__type;
  constructor(registry, keyType, valType, rawValue, type = "HashMap") {
    const [KeyClass, ValClass, decoded, decodedLength] = decodeMap(registry, keyType, valType, rawValue);
    super(type === "BTreeMap" ? sortMap(decoded) : decoded);
    this.registry = registry;
    this.initialU8aLength = decodedLength;
    this.__internal__KeyClass = KeyClass;
    this.__internal__ValClass = ValClass;
    this.__internal__type = type;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    let len = compactToU8a2(this.size).length;
    for (const [k, v] of this.entries()) {
      len += k.encodedLength + v.encodedLength;
    }
    return len;
  }
  /**
   * @description Returns a hash of the value
   */
  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Checks if the value is an empty value
   */
  get isEmpty() {
    return this.size === 0;
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  eq(other) {
    return compareMap(this, other);
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    const inner = [];
    for (const [k, v] of this.entries()) {
      inner.push(k.inspect());
      inner.push(v.inspect());
    }
    return {
      inner,
      outer: [compactToU8a2(this.size)]
    };
  }
  /**
   * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
   */
  toHex() {
    return u8aToHex7(this.toU8a());
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman(isExtended, disableAscii) {
    const json = {};
    for (const [k, v] of this.entries()) {
      json[k instanceof Raw && !disableAscii && k.isAscii ? k.toUtf8() : k.toString()] = v.toHuman(isExtended, disableAscii);
    }
    return json;
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    const json = {};
    for (const [k, v] of this.entries()) {
      json[k.toString()] = v.toJSON();
    }
    return json;
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive(disableAscii) {
    const json = {};
    for (const [k, v] of this.entries()) {
      json[k instanceof Raw && !disableAscii && k.isAscii ? k.toUtf8() : k.toString()] = v.toPrimitive(disableAscii);
    }
    return json;
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return `${this.__internal__type}<${this.registry.getClassName(this.__internal__KeyClass) || new this.__internal__KeyClass(this.registry).toRawType()},${this.registry.getClassName(this.__internal__ValClass) || new this.__internal__ValClass(this.registry).toRawType()}>`;
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    return stringify5(this.toJSON());
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  toU8a(isBare) {
    const encoded = [];
    if (!isBare) {
      encoded.push(compactToU8a2(this.size));
    }
    for (const [k, v] of this.entries()) {
      encoded.push(k.toU8a(isBare), v.toU8a(isBare));
    }
    return u8aConcatStrict5(encoded);
  }
};

// node_modules/@polkadot/types-codec/extended/BTreeMap.js
var BTreeMap = class _BTreeMap extends CodecMap {
  static with(keyType, valType) {
    return class extends _BTreeMap {
      constructor(registry, value) {
        super(registry, keyType, valType, value, "BTreeMap");
      }
    };
  }
};

// node_modules/@polkadot/types-codec/extended/BTreeSet.js
var l5 = logger5("BTreeSet");
function decodeSetFromU8a(registry, ValClass, u8a) {
  const output = /* @__PURE__ */ new Set();
  const [offset, count] = compactFromU8aLim2(u8a);
  const result = new Array(count);
  const [decodedLength] = decodeU8aVec(registry, result, u8a, offset, ValClass);
  for (let i = 0; i < count; i++) {
    output.add(result[i]);
  }
  return [ValClass, output, decodedLength];
}
function decodeSetFromSet(registry, ValClass, value) {
  const output = /* @__PURE__ */ new Set();
  value.forEach((val) => {
    try {
      output.add(val instanceof ValClass ? val : new ValClass(registry, val));
    } catch (error) {
      l5.error("Failed to decode key or value:", error.message);
      throw error;
    }
  });
  return [ValClass, output, 0];
}
function decodeSet(registry, valType, value) {
  const ValClass = typeToConstructor(registry, valType);
  if (!value) {
    return [ValClass, /* @__PURE__ */ new Set(), 0];
  } else if (isU8a7(value) || isHex7(value)) {
    return decodeSetFromU8a(registry, ValClass, u8aToU8a7(value));
  } else if (Array.isArray(value) || value instanceof Set) {
    return decodeSetFromSet(registry, ValClass, value);
  }
  throw new Error("BTreeSet: cannot decode type");
}
var BTreeSet = class _BTreeSet extends Set {
  registry;
  createdAtHash;
  initialU8aLength;
  isStorageFallback;
  __internal__ValClass;
  constructor(registry, valType, rawValue) {
    const [ValClass, values, decodedLength] = decodeSet(registry, valType, rawValue);
    super(sortSet(values));
    this.registry = registry;
    this.initialU8aLength = decodedLength;
    this.__internal__ValClass = ValClass;
  }
  static with(valType) {
    return class extends _BTreeSet {
      constructor(registry, value) {
        super(registry, valType, value);
      }
    };
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    let len = compactToU8a2(this.size).length;
    for (const v of this.values()) {
      len += v.encodedLength;
    }
    return len;
  }
  /**
   * @description Returns a hash of the value
   */
  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Checks if the value is an empty value
   */
  get isEmpty() {
    return this.size === 0;
  }
  /**
   * @description The actual set values as a string[]
   */
  get strings() {
    return [...super.values()].map((v) => v.toString());
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  eq(other) {
    return compareSet(this, other);
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    const inner = [];
    for (const v of this.values()) {
      inner.push(v.inspect());
    }
    return {
      inner,
      outer: [compactToU8a2(this.size)]
    };
  }
  /**
   * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
   */
  toHex() {
    return u8aToHex7(this.toU8a());
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman(isExtended, disableAscii) {
    const json = [];
    for (const v of this.values()) {
      json.push(v.toHuman(isExtended, disableAscii));
    }
    return json;
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    const json = [];
    for (const v of this.values()) {
      json.push(v.toJSON());
    }
    return json;
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return `BTreeSet<${this.registry.getClassName(this.__internal__ValClass) || new this.__internal__ValClass(this.registry).toRawType()}>`;
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive(disableAscii) {
    const json = [];
    for (const v of this.values()) {
      json.push(v.toPrimitive(disableAscii));
    }
    return json;
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    return stringify5(this.toJSON());
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  toU8a(isBare) {
    const encoded = [];
    if (!isBare) {
      encoded.push(compactToU8a2(this.size));
    }
    for (const v of this.values()) {
      encoded.push(v.toU8a(isBare));
    }
    return u8aConcatStrict5(encoded);
  }
};

// node_modules/@polkadot/types-codec/extended/Bytes.js
var MAX_LENGTH2 = 10 * 1024 * 1024;
function decodeBytesU8a(value) {
  if (!value.length) {
    return [new Uint8Array(), 0];
  }
  const [offset, length] = compactFromU8aLim2(value);
  const total = offset + length;
  if (length > MAX_LENGTH2) {
    throw new Error(`Bytes length ${length.toString()} exceeds ${MAX_LENGTH2}`);
  } else if (total > value.length) {
    throw new Error(`Bytes: required length less than remainder, expected at least ${total}, found ${value.length}`);
  }
  return [value.subarray(offset, total), total];
}
var Bytes = class extends Raw {
  constructor(registry, value) {
    const [u8a, decodedLength] = isU8a7(value) && !(value instanceof Raw) ? decodeBytesU8a(value) : Array.isArray(value) || isString6(value) ? [u8aToU8a7(value), 0] : [value, 0];
    super(registry, u8a, decodedLength);
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    return this.length + compactToU8a2(this.length).length;
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect(isBare) {
    const clength = compactToU8a2(this.length);
    return {
      outer: isBare ? [super.toU8a()] : this.length ? [clength, super.toU8a()] : [clength]
    };
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return "Bytes";
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  toU8a(isBare) {
    return isBare ? super.toU8a(isBare) : compactAddLength2(this);
  }
};

// node_modules/@polkadot/types-codec/extended/HashMap.js
var HashMap = class _HashMap extends CodecMap {
  static with(keyType, valType) {
    return class extends _HashMap {
      constructor(registry, value) {
        super(registry, keyType, valType, value);
      }
    };
  }
};

// node_modules/@polkadot/types-codec/native/Bool.js
var bool = class extends Boolean {
  registry;
  createdAtHash;
  initialU8aLength = 1;
  isStorageFallback;
  constructor(registry, value = false) {
    super(isU8a7(value) ? value[0] === 1 : value instanceof Boolean ? value.valueOf() : !!value);
    this.registry = registry;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    return 1 | 0;
  }
  /**
   * @description returns a hash of the contents
   */
  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Checks if the value is an empty value (true when it wraps false/default)
   */
  get isEmpty() {
    return this.isFalse;
  }
  /**
   * @description Checks if the value is an empty value (always false)
   */
  get isFalse() {
    return !this.isTrue;
  }
  /**
   * @description Checks if the value is an empty value (always false)
   */
  get isTrue() {
    return this.valueOf();
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  eq(other) {
    return this.valueOf() === (other instanceof Boolean ? other.valueOf() : other);
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    return {
      outer: [this.toU8a()]
    };
  }
  /**
   * @description Returns a hex string representation of the value
   */
  toHex() {
    return u8aToHex7(this.toU8a());
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman() {
    return this.toJSON();
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    return this.valueOf();
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive() {
    return this.toJSON();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return "bool";
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    return this.toJSON().toString();
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   */
  toU8a(_isBare) {
    return new Uint8Array([this.valueOf() ? 1 : 0]);
  }
};

// node_modules/@polkadot/types-codec/extended/OptionBool.js
function decodeU8a2(registry, value) {
  return value[0] === 0 ? null : new bool(registry, value[0] === 1);
}
var OptionBool = class extends Option {
  constructor(registry, value) {
    super(registry, bool, isU8a7(value) || isHex7(value) ? decodeU8a2(registry, u8aToU8a7(value)) : value);
    this.initialU8aLength = 1;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    return 1 | 0;
  }
  /**
   * @description Checks if the value is an empty value (always false)
   */
  get isFalse() {
    return this.isSome ? !this.value.valueOf() : false;
  }
  /**
   * @description Checks if the value is an empty value (always false)
   */
  get isTrue() {
    return this.isSome ? this.value.valueOf() : false;
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    return { outer: [this.toU8a()] };
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType(isBare) {
    return isBare ? "bool" : "Option<bool>";
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  toU8a(isBare) {
    if (isBare) {
      return super.toU8a(true);
    }
    return this.isSome ? new Uint8Array([this.isTrue ? 1 : 2]) : new Uint8Array([0]);
  }
};

// node_modules/@polkadot/types-codec/extended/Range.js
var Range = class _Range extends Tuple {
  __internal__rangeName;
  constructor(registry, Type2, value, { rangeName = "Range" } = {}) {
    super(registry, [Type2, Type2], value);
    this.__internal__rangeName = rangeName;
  }
  static with(Type2) {
    return class extends _Range {
      constructor(registry, value) {
        super(registry, Type2, value);
      }
    };
  }
  /**
   * @description Returns the starting range value
   */
  get start() {
    return this[0];
  }
  /**
   * @description Returns the ending range value
   */
  get end() {
    return this[1];
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return `${this.__internal__rangeName}<${this.start.toRawType()}>`;
  }
};

// node_modules/@polkadot/types-codec/extended/RangeInclusive.js
var RangeInclusive = class _RangeInclusive extends Range {
  constructor(registry, Type2, value) {
    super(registry, Type2, value, { rangeName: "RangeInclusive" });
  }
  static with(Type2) {
    return class extends _RangeInclusive {
      constructor(registry, value) {
        super(registry, Type2, value);
      }
    };
  }
};

// node_modules/@polkadot/types-codec/native/Text.js
var MAX_LENGTH3 = 128 * 1024;
function decodeText(value) {
  if (isU8a7(value)) {
    if (!value.length) {
      return ["", 0];
    }
    if (value instanceof Raw) {
      return [u8aToString4(value), 0];
    }
    const [offset, length] = compactFromU8aLim2(value);
    const total = offset + length;
    if (length > MAX_LENGTH3) {
      throw new Error(`Text: length ${length.toString()} exceeds ${MAX_LENGTH3}`);
    } else if (total > value.length) {
      throw new Error(`Text: required length less than remainder, expected at least ${total}, found ${value.length}`);
    }
    return [u8aToString4(value.subarray(offset, total)), total];
  } else if (isHex7(value)) {
    return [u8aToString4(hexToU8a7(value)), 0];
  }
  return [value ? value.toString() : "", 0];
}
var Text = class extends String {
  registry;
  createdAtHash;
  initialU8aLength;
  isStorageFallback;
  __internal__override = null;
  constructor(registry, value) {
    const [str, decodedLength] = decodeText(value);
    super(str);
    this.registry = registry;
    this.initialU8aLength = decodedLength;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    return this.toU8a().length;
  }
  /**
   * @description returns a hash of the contents
   */
  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Checks if the value is an empty value
   */
  get isEmpty() {
    return this.length === 0;
  }
  /**
   * @description The length of the value
   */
  get length() {
    return super.length;
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  eq(other) {
    return isString6(other) ? this.toString() === other.toString() : false;
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    const value = stringToU8a8(super.toString());
    return {
      outer: value.length ? [compactToU8a2(value.length), value] : [compactToU8a2(value.length)]
    };
  }
  /**
   * @description Set an override value for this
   */
  setOverride(override) {
    this.__internal__override = override;
  }
  /**
   * @description Returns a hex string representation of the value
   */
  toHex() {
    return u8aToHex7(this.toU8a(true));
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman() {
    return this.toJSON();
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    return this.toString();
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive() {
    return this.toJSON();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return "Text";
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    return this.__internal__override || super.toString();
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  toU8a(isBare) {
    const encoded = stringToU8a8(super.toString());
    return isBare ? encoded : compactAddLength2(encoded);
  }
};

// node_modules/@polkadot/types-codec/extended/Type.js
var Type = class extends Text {
  constructor(registry, value = "") {
    super(registry, value);
    this.setOverride(sanitize(this.toString()));
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return "Type";
  }
};

// node_modules/@polkadot/types-codec/extended/U8aFixed.js
function decodeU8aFixed(value, bitLength) {
  const u8a = u8aToU8a7(value);
  const byteLength = bitLength / 8;
  if (!u8a.length) {
    return [new Uint8Array(byteLength), 0];
  }
  if (isU8a7(value) ? u8a.length < byteLength : u8a.length !== byteLength) {
    throw new Error(`Expected input with ${byteLength} bytes (${bitLength} bits), found ${u8a.length} bytes`);
  }
  return [u8a.subarray(0, byteLength), byteLength];
}
var U8aFixed = class _U8aFixed extends Raw {
  constructor(registry, value = new Uint8Array(), bitLength = 256) {
    const [u8a, decodedLength] = decodeU8aFixed(value, bitLength);
    super(registry, u8a, decodedLength);
  }
  static with(bitLength, typeName) {
    return class extends _U8aFixed {
      constructor(registry, value) {
        super(registry, value, bitLength);
      }
      toRawType() {
        return typeName || super.toRawType();
      }
    };
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return `[u8;${this.length}]`;
  }
};

// node_modules/@polkadot/types-codec/extended/WrapperKeepOpaque.js
function decodeRaw(registry, typeName, value) {
  const Type2 = typeToConstructor(registry, typeName);
  if (isU8a7(value) || isHex7(value)) {
    try {
      const [, u8a] = isHex7(value) ? [0, u8aToU8a7(value)] : value instanceof Raw ? [0, value.subarray()] : compactStripLength3(value);
      return [Type2, new Type2(registry, u8a), value];
    } catch {
      return [Type2, null, value];
    }
  }
  const instance = new Type2(registry, value);
  return [Type2, instance, compactAddLength2(instance.toU8a())];
}
var WrapperKeepOpaque = class _WrapperKeepOpaque extends Bytes {
  __internal__Type;
  __internal__decoded;
  __internal__opaqueName;
  constructor(registry, typeName, value, { opaqueName = "WrapperKeepOpaque" } = {}) {
    const [Type2, decoded, u8a] = decodeRaw(registry, typeName, value);
    super(registry, u8a);
    this.__internal__Type = Type2;
    this.__internal__decoded = decoded;
    this.__internal__opaqueName = opaqueName;
  }
  static with(Type2) {
    return class extends _WrapperKeepOpaque {
      constructor(registry, value) {
        super(registry, Type2, value);
      }
    };
  }
  /**
   * @description Checks if the wrapper is decodable
   */
  get isDecoded() {
    return !!this.__internal__decoded;
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    return this.__internal__decoded ? {
      inner: [this.__internal__decoded.inspect()],
      outer: [compactToU8a2(this.length)]
    } : {
      outer: [compactToU8a2(this.length), this.toU8a(true)]
    };
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman(isExtended, disableAscii) {
    return this.__internal__decoded ? this.__internal__decoded.toHuman(isExtended, disableAscii) : super.toHuman(isExtended, disableAscii);
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive(disableAscii) {
    return this.__internal__decoded ? this.__internal__decoded.toPrimitive(disableAscii) : super.toPrimitive(disableAscii);
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return `${this.__internal__opaqueName}<${this.registry.getClassName(this.__internal__Type) || (this.__internal__decoded ? this.__internal__decoded.toRawType() : new this.__internal__Type(this.registry).toRawType())}>`;
  }
  /**
   * @description Converts the Object to to a string (either decoded or bytes)
   */
  toString() {
    return this.__internal__decoded ? this.__internal__decoded.toString() : super.toString();
  }
  /**
   * @description Returns the decoded that the WrapperKeepOpaque represents (if available), throws if non-decodable
   */
  unwrap() {
    if (!this.__internal__decoded) {
      throw new Error(`${this.__internal__opaqueName}: unwrapping an undecodable value`);
    }
    return this.__internal__decoded;
  }
};

// node_modules/@polkadot/types-codec/extended/WrapperOpaque.js
var WrapperOpaque = class _WrapperOpaque extends WrapperKeepOpaque {
  constructor(registry, typeName, value) {
    super(registry, typeName, value, { opaqueName: "WrapperOpaque" });
  }
  static with(Type2) {
    return class extends _WrapperOpaque {
      constructor(registry, value) {
        super(registry, Type2, value);
      }
    };
  }
  /**
   * @description The inner value for this wrapper, in all cases it _should_ be decodable (unlike KeepOpaque)
   */
  get inner() {
    return this.unwrap();
  }
};

// node_modules/@polkadot/types-codec/native/Float.js
var Float = class _Float extends Number {
  encodedLength;
  registry;
  createdAtHash;
  initialU8aLength;
  isStorageFallback;
  __internal__bitLength;
  constructor(registry, value, { bitLength = 32 } = {}) {
    super(isU8a7(value) || isHex7(value) ? value.length === 0 ? 0 : u8aToFloat(u8aToU8a7(value), { bitLength }) : value || 0);
    this.__internal__bitLength = bitLength;
    this.encodedLength = bitLength / 8;
    this.initialU8aLength = this.encodedLength;
    this.registry = registry;
  }
  static with(bitLength) {
    return class extends _Float {
      constructor(registry, value) {
        super(registry, value, { bitLength });
      }
    };
  }
  /**
   * @description returns a hash of the contents
   */
  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Returns true if the type wraps an empty/default all-0 value
   */
  get isEmpty() {
    return this.valueOf() === 0;
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  eq(other) {
    return this.valueOf() === Number(other);
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    return {
      outer: [this.toU8a()]
    };
  }
  /**
   * @description Returns a hex string representation of the value
   */
  toHex() {
    return u8aToHex7(this.toU8a());
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman() {
    return this.toString();
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    return this.toHex();
  }
  /**
   * @description Returns the number representation (Same as valueOf)
   */
  toNumber() {
    return this.valueOf();
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive() {
    return this.toNumber();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return `f${this.__internal__bitLength}`;
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   */
  toU8a(_isBare) {
    return floatToU8a(this, {
      bitLength: this.__internal__bitLength
    });
  }
};

// node_modules/@polkadot/types-codec/native/Json.js
function decodeJson(value) {
  return Object.entries(value || {});
}
var Json = class extends Map {
  registry;
  createdAtHash;
  initialU8aLength;
  isStorageFallback;
  constructor(registry, value) {
    const decoded = decodeJson(value);
    super(decoded);
    this.registry = registry;
    objectProperties2(this, decoded.map(([k]) => k), (k) => this.get(k));
  }
  /**
   * @description Always 0, never encodes as a Uint8Array
   */
  get encodedLength() {
    return 0 | 0;
  }
  /**
   * @description returns a hash of the contents
   */
  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Checks if the value is an empty value
   */
  get isEmpty() {
    return [...this.keys()].length === 0;
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  eq(other) {
    return compareMap(this, other);
  }
  /**
   * @description Returns a typed value from the internal map
   */
  getT(key) {
    return this.get(key);
  }
  /**
   * @description Unimplemented, will throw
   */
  inspect() {
    throw new Error("Unimplemented");
  }
  /**
   * @description Unimplemented, will throw
   */
  toHex() {
    throw new Error("Unimplemented");
  }
  /**
   * @description Converts the Object to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman() {
    return [...this.entries()].reduce((json, [key, value]) => {
      json[key] = isFunction8(value?.toHuman) ? value.toHuman() : value;
      return json;
    }, {});
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    return [...this.entries()].reduce((json, [key, value]) => {
      json[key] = value;
      return json;
    }, {});
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive(disableAscii) {
    return [...this.entries()].reduce((json, [key, value]) => {
      json[key] = isFunction8(value.toPrimitive) ? value.toPrimitive(disableAscii) : value;
      return json;
    }, {});
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return "Json";
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    return stringify5(this.toJSON());
  }
  /**
   * @description Unimplemented, will throw
   */
  toU8a(_isBare) {
    throw new Error("Unimplemented");
  }
};

// node_modules/@polkadot/types-codec/native/Set.js
function encodeSet(setValues, values) {
  const encoded = new import_bn32.default(0);
  for (let i = 0, count = values.length; i < count; i++) {
    encoded.ior(bnToBn3(setValues[values[i]] || 0));
  }
  return encoded;
}
function decodeSetArray(setValues, values) {
  const count = values.length;
  const result = new Array(count);
  for (let i = 0; i < count; i++) {
    const key = values[i];
    if (isUndefined7(setValues[key])) {
      throw new Error(`Set: Invalid key '${key}' passed to Set, allowed ${Object.keys(setValues).join(", ")}`);
    }
    result[i] = key;
  }
  return result;
}
function decodeSetNumber(setValues, _value) {
  const bn = bnToBn3(_value);
  const keys2 = Object.keys(setValues);
  const result = [];
  for (let i = 0, count = keys2.length; i < count; i++) {
    const key = keys2[i];
    if (bn.and(bnToBn3(setValues[key])).eq(bnToBn3(setValues[key]))) {
      result.push(key);
    }
  }
  const computed = encodeSet(setValues, result);
  if (!bn.eq(computed)) {
    throw new Error(`Set: Mismatch decoding '${bn.toString()}', computed as '${computed.toString()}' with ${result.join(", ")}`);
  }
  return result;
}
function decodeSet2(setValues, value = 0, bitLength) {
  if (bitLength % 8 !== 0) {
    throw new Error(`Expected valid bitLength, power of 8, found ${bitLength}`);
  }
  const byteLength = bitLength / 8;
  if (isU8a7(value)) {
    return value.length === 0 ? [] : decodeSetNumber(setValues, u8aToBn3(value.subarray(0, byteLength), { isLe: true }));
  } else if (isString6(value)) {
    return decodeSet2(setValues, u8aToU8a7(value), byteLength);
  } else if (value instanceof Set || Array.isArray(value)) {
    const input = Array.isArray(value) ? value : [...value.values()];
    return decodeSetArray(setValues, input);
  }
  return decodeSetNumber(setValues, value);
}
var CodecSet = class _CodecSet extends Set {
  registry;
  createdAtHash;
  initialU8aLength;
  isStorageFallback;
  __internal__allowed;
  __internal__byteLength;
  constructor(registry, setValues, value, bitLength = 8) {
    super(decodeSet2(setValues, value, bitLength));
    this.registry = registry;
    this.__internal__allowed = setValues;
    this.__internal__byteLength = bitLength / 8;
  }
  static with(values, bitLength) {
    return class extends _CodecSet {
      static {
        const keys2 = Object.keys(values);
        const count = keys2.length;
        const isKeys = new Array(count);
        for (let i = 0; i < count; i++) {
          isKeys[i] = `is${stringPascalCase3(keys2[i])}`;
        }
        objectProperties2(this.prototype, isKeys, (_, i, self2) => self2.strings.includes(keys2[i]));
      }
      constructor(registry, value) {
        super(registry, values, value, bitLength);
      }
    };
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    return this.__internal__byteLength;
  }
  /**
   * @description returns a hash of the contents
   */
  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description true is the Set contains no values
   */
  get isEmpty() {
    return this.size === 0;
  }
  /**
   * @description The actual set values as a string[]
   */
  get strings() {
    return [...super.values()];
  }
  /**
   * @description The encoded value for the set members
   */
  get valueEncoded() {
    return encodeSet(this.__internal__allowed, this.strings);
  }
  /**
   * @description adds a value to the Set (extended to allow for validity checking)
   */
  add = (key) => {
    if (this.__internal__allowed && isUndefined7(this.__internal__allowed[key])) {
      throw new Error(`Set: Invalid key '${key}' on add`);
    }
    super.add(key);
    return this;
  };
  /**
   * @description Compares the value of the input to see if there is a match
   */
  eq(other) {
    if (Array.isArray(other)) {
      return compareArray(this.strings.sort(), other.sort());
    } else if (other instanceof Set) {
      return this.eq([...other.values()]);
    } else if (isNumber6(other) || isBn5(other)) {
      return this.valueEncoded.eq(bnToBn3(other));
    }
    return false;
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    return {
      outer: [this.toU8a()]
    };
  }
  /**
   * @description Returns a hex string representation of the value
   */
  toHex() {
    return u8aToHex7(this.toU8a());
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman() {
    return this.toJSON();
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    return this.strings;
  }
  /**
   * @description The encoded value for the set members
   */
  toNumber() {
    return this.valueEncoded.toNumber();
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive() {
    return this.toJSON();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return stringify5({ _set: this.__internal__allowed });
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    return `[${this.strings.join(", ")}]`;
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   */
  toU8a(_isBare) {
    return bnToU8a2(this.valueEncoded, {
      bitLength: this.__internal__byteLength * 8,
      isLe: true
    });
  }
};

// node_modules/@polkadot/types-codec/primitive/F32.js
var f32 = class extends Float.with(32) {
  // NOTE without this, we cannot properly determine extensions
  __FloatType = "f32";
};

// node_modules/@polkadot/types-codec/primitive/F64.js
var f64 = class extends Float.with(64) {
  // NOTE without this, we cannot properly determine extensions
  __FloatType = "f64";
};

// node_modules/@polkadot/types-codec/primitive/I8.js
var i8 = class extends Int.with(8) {
  // NOTE without this, we cannot properly determine extensions
  __IntType = "i8";
};

// node_modules/@polkadot/types-codec/primitive/I16.js
var i16 = class extends Int.with(16) {
  // NOTE without this, we cannot properly determine extensions
  __IntType = "i16";
};

// node_modules/@polkadot/types-codec/primitive/I32.js
var i32 = class extends Int.with(32) {
  // NOTE without this, we cannot properly determine extensions
  __IntType = "i32";
};

// node_modules/@polkadot/types-codec/primitive/I64.js
var i64 = class extends Int.with(64) {
  // NOTE without this, we cannot properly determine extensions
  __IntType = "i64";
};

// node_modules/@polkadot/types-codec/primitive/I128.js
var i128 = class extends Int.with(128) {
  // NOTE without this, we cannot properly determine extensions
  __IntType = "i128";
};

// node_modules/@polkadot/types-codec/primitive/I256.js
var i256 = class extends Int.with(256) {
  // NOTE without this, we cannot properly determine extensions
  __IntType = "i256";
};

// node_modules/@polkadot/types-codec/primitive/ISize.js
var isize = class extends i32 {
  constructor(registry, value) {
    super(registry, value);
    throw new Error("The `isize` type should not be used. Since it is platform-specific, it creates incompatibilities between native (generally i64) and WASM (always i32) code. Use one of the `i32` or `i64` types explicitly.");
  }
};

// node_modules/@polkadot/types-codec/primitive/U8.js
var u82 = class extends UInt.with(8) {
  // NOTE without this, we cannot properly determine extensions
  __UIntType = "u8";
};

// node_modules/@polkadot/types-codec/primitive/U16.js
var u162 = class extends UInt.with(16) {
  // NOTE without this, we cannot properly determine extensions
  __UIntType = "u16";
};

// node_modules/@polkadot/types-codec/primitive/U32.js
var u323 = class extends UInt.with(32) {
  // NOTE without this, we cannot properly determine extensions
  __UIntType = "u32";
};

// node_modules/@polkadot/types-codec/primitive/U64.js
var u64 = class extends UInt.with(64) {
  // NOTE without this, we cannot properly determine extensions
  __UIntType = "u64";
};

// node_modules/@polkadot/types-codec/primitive/U128.js
var u128 = class extends UInt.with(128) {
  // NOTE without this, we cannot properly determine extensions
  __UIntType = "u128";
};

// node_modules/@polkadot/types-codec/primitive/U256.js
var u256 = class extends UInt.with(256) {
  // NOTE without this, we cannot properly determine extensions
  __UIntType = "u256";
};

// node_modules/@polkadot/types-codec/primitive/USize.js
var usize = class extends u323 {
  constructor(registry, value) {
    super(registry, value);
    throw new Error("The `usize` type should not be used. Since it is platform-specific, it creates incompatibilities between native (generally u64) and WASM (always u32) code. Use one of the `u32` or `u64` types explicitly.");
  }
};

// node_modules/@polkadot/types-create/util/typeSplit.js
function typeSplit(type) {
  const result = [];
  let c = 0;
  let f = 0;
  let s = 0;
  let t = 0;
  let start = 0;
  for (let i = 0, count = type.length; i < count; i++) {
    switch (type[i]) {
      case ",": {
        if (!(c || f || s || t)) {
          result.push(type.substring(start, i).trim());
          start = i + 1;
        }
        break;
      }
      case "<":
        c++;
        break;
      case ">":
        c--;
        break;
      case "[":
        f++;
        break;
      case "]":
        f--;
        break;
      case "{":
        s++;
        break;
      case "}":
        s--;
        break;
      case "(":
        t++;
        break;
      case ")":
        t--;
        break;
    }
  }
  if (c || f || s || t) {
    throw new Error(`Invalid definition (missing terminators) found in ${type}`);
  }
  result.push(type.substring(start, type.length).trim());
  return result;
}

// node_modules/@polkadot/types-create/util/getTypeDef.js
var KNOWN_INTERNALS = ["_alias", "_fallback"];
function getTypeString(typeOrObj) {
  return isString5(typeOrObj) ? typeOrObj.toString() : stringify4(typeOrObj);
}
function isRustEnum2(details) {
  const values = Object.values(details);
  if (values.some((v) => isNumber5(v))) {
    if (!values.every((v) => isNumber5(v) && v >= 0 && v <= 255)) {
      throw new Error("Invalid number-indexed enum definition");
    }
    return false;
  }
  return true;
}
function _decodeEnum(value, details, count, fallbackType) {
  value.info = TypeDefInfo.Enum;
  value.fallbackType = fallbackType;
  if (Array.isArray(details)) {
    value.sub = details.map((name, index) => ({
      index,
      info: TypeDefInfo.Plain,
      name,
      type: "Null"
    }));
  } else if (isRustEnum2(details)) {
    value.sub = Object.entries(details).map(([name, typeOrObj], index) => objectSpread6({}, getTypeDef(getTypeString(typeOrObj || "Null"), { name }, count), { index }));
  } else {
    value.sub = Object.entries(details).map(([name, index]) => ({
      index,
      info: TypeDefInfo.Plain,
      name,
      type: "Null"
    }));
  }
  return value;
}
function _decodeSet(value, details, fallbackType) {
  value.info = TypeDefInfo.Set;
  value.fallbackType = fallbackType;
  value.length = details._bitLength;
  value.sub = Object.entries(details).filter(([name]) => !name.startsWith("_")).map(([name, index]) => ({
    index,
    info: TypeDefInfo.Plain,
    name,
    type: "Null"
  }));
  return value;
}
function _decodeStruct(value, type, _, count) {
  const parsed = JSON.parse(type);
  const keys2 = Object.keys(parsed);
  if (parsed._enum) {
    return _decodeEnum(value, parsed._enum, count, parsed._fallback);
  } else if (parsed._set) {
    return _decodeSet(value, parsed._set, parsed._fallback);
  }
  value.alias = parsed._alias ? new Map(Object.entries(parsed._alias)) : void 0;
  value.fallbackType = parsed._fallback;
  value.sub = keys2.filter((name) => !KNOWN_INTERNALS.includes(name)).map((name) => getTypeDef(getTypeString(parsed[name]), { name }, count));
  return value;
}
function _decodeFixedVec(value, type, _, count) {
  const max2 = type.length - 1;
  let index = -1;
  let inner = 0;
  for (let i = 1; i < max2 && index === -1; i++) {
    switch (type[i]) {
      case ";": {
        if (inner === 0) {
          index = i;
        }
        break;
      }
      case "[":
      case "(":
      case "<":
        inner++;
        break;
      case "]":
      case ")":
      case ">":
        inner--;
        break;
    }
  }
  if (index === -1) {
    throw new Error(`${type}: Unable to extract location of ';'`);
  }
  const vecType = type.substring(1, index);
  const [strLength, displayName] = type.substring(index + 1, max2).split(";");
  const length = parseInt(strLength.trim(), 10);
  if (length > 2048) {
    throw new Error(`${type}: Only support for [Type; <length>], where length <= 2048`);
  }
  value.displayName = displayName;
  value.length = length;
  value.sub = getTypeDef(vecType, {}, count);
  return value;
}
function _decodeTuple(value, _, subType, count) {
  value.sub = subType.length === 0 ? [] : typeSplit(subType).map((inner) => getTypeDef(inner, {}, count));
  return value;
}
function _decodeAnyInt(value, type, _, clazz) {
  const [strLength, displayName] = type.substring(clazz.length + 1, type.length - 1).split(",");
  const length = parseInt(strLength.trim(), 10);
  if (length > 8192 || length % 8) {
    throw new Error(`${type}: Only support for ${clazz}<bitLength>, where length <= 8192 and a power of 8, found ${length}`);
  }
  value.displayName = displayName;
  value.length = length;
  return value;
}
function _decodeInt(value, type, subType) {
  return _decodeAnyInt(value, type, subType, "Int");
}
function _decodeUInt(value, type, subType) {
  return _decodeAnyInt(value, type, subType, "UInt");
}
function _decodeDoNotConstruct(value, type, _) {
  const NAME_LENGTH = "DoNotConstruct".length;
  value.displayName = type.substring(NAME_LENGTH + 1, type.length - 1);
  return value;
}
function hasWrapper(type, [start, end]) {
  return type.startsWith(start) && type.slice(-1 * end.length) === end;
}
var nestedExtraction = [
  ["[", "]", TypeDefInfo.VecFixed, _decodeFixedVec],
  ["{", "}", TypeDefInfo.Struct, _decodeStruct],
  ["(", ")", TypeDefInfo.Tuple, _decodeTuple],
  // the inner for these are the same as tuple, multiple values
  ["BTreeMap<", ">", TypeDefInfo.BTreeMap, _decodeTuple],
  ["HashMap<", ">", TypeDefInfo.HashMap, _decodeTuple],
  ["Int<", ">", TypeDefInfo.Int, _decodeInt],
  ["Result<", ">", TypeDefInfo.Result, _decodeTuple],
  ["UInt<", ">", TypeDefInfo.UInt, _decodeUInt],
  ["DoNotConstruct<", ">", TypeDefInfo.DoNotConstruct, _decodeDoNotConstruct]
];
var wrappedExtraction = [
  ["BTreeSet<", ">", TypeDefInfo.BTreeSet],
  ["Compact<", ">", TypeDefInfo.Compact],
  ["Linkage<", ">", TypeDefInfo.Linkage],
  ["Opaque<", ">", TypeDefInfo.WrapperOpaque],
  ["Option<", ">", TypeDefInfo.Option],
  ["Range<", ">", TypeDefInfo.Range],
  ["RangeInclusive<", ">", TypeDefInfo.RangeInclusive],
  ["Vec<", ">", TypeDefInfo.Vec],
  ["WrapperKeepOpaque<", ">", TypeDefInfo.WrapperKeepOpaque],
  ["WrapperOpaque<", ">", TypeDefInfo.WrapperOpaque]
];
function extractSubType(type, [start, end]) {
  return type.substring(start.length, type.length - end.length);
}
function getTypeDef(_type, { displayName, name } = {}, count = 0) {
  const type = sanitize(_type);
  const value = { displayName, info: TypeDefInfo.Plain, name, type };
  if (++count > 64) {
    throw new Error("getTypeDef: Maximum nested limit reached");
  }
  const nested = nestedExtraction.find((nested2) => hasWrapper(type, nested2));
  if (nested) {
    value.info = nested[2];
    return nested[3](value, type, extractSubType(type, nested), count);
  }
  const wrapped = wrappedExtraction.find((wrapped2) => hasWrapper(type, wrapped2));
  if (wrapped) {
    value.info = wrapped[2];
    value.sub = getTypeDef(extractSubType(type, wrapped), {}, count);
  }
  return value;
}

// node_modules/@polkadot/types-create/create/class.js
function getTypeDefType({ lookupName, type }) {
  return lookupName || type;
}
function getSubDefArray(value) {
  if (!Array.isArray(value.sub)) {
    throw new Error(`Expected subtype as TypeDef[] in ${stringify4(value)}`);
  }
  return value.sub;
}
function getSubDef(value) {
  if (!value.sub || Array.isArray(value.sub)) {
    throw new Error(`Expected subtype as TypeDef in ${stringify4(value)}`);
  }
  return value.sub;
}
function getSubType(value) {
  return getTypeDefType(getSubDef(value));
}
function getTypeClassMap(value) {
  const subs = getSubDefArray(value);
  const map3 = {};
  for (let i = 0, count = subs.length; i < count; i++) {
    const sub = subs[i];
    if (!sub.name) {
      throw new Error(`No name found in definition ${stringify4(sub)}`);
    }
    map3[sub.name] = getTypeDefType(sub);
  }
  return map3;
}
function getTypeClassArray(value) {
  return getSubDefArray(value).map(getTypeDefType);
}
function createInt(Clazz, { displayName, length }) {
  if (!isNumber5(length)) {
    throw new Error(`Expected bitLength information for ${displayName || Clazz.constructor.name}<bitLength>`);
  }
  return Clazz.with(length, displayName);
}
function createHashMap(Clazz, value) {
  const [keyType, valueType] = getTypeClassArray(value);
  return Clazz.with(keyType, valueType);
}
function createWithSub(Clazz, value) {
  return Clazz.with(getSubType(value));
}
var infoMapping = {
  [TypeDefInfo.BTreeMap]: (_registry, value) => createHashMap(BTreeMap, value),
  [TypeDefInfo.BTreeSet]: (_registry, value) => createWithSub(BTreeSet, value),
  [TypeDefInfo.Compact]: (_registry, value) => createWithSub(Compact, value),
  [TypeDefInfo.DoNotConstruct]: (_registry, value) => DoNotConstruct.with(value.displayName || value.type),
  [TypeDefInfo.Enum]: (_registry, value) => {
    const subs = getSubDefArray(value);
    return Enum.with(subs.every(({ type }) => type === "Null") ? subs.reduce((out, { index, name }, count) => {
      if (!name) {
        throw new Error("No name found in sub definition");
      }
      out[name] = index || count;
      return out;
    }, {}) : getTypeClassMap(value));
  },
  [TypeDefInfo.HashMap]: (_registry, value) => createHashMap(HashMap, value),
  [TypeDefInfo.Int]: (_registry, value) => createInt(Int, value),
  // We have circular deps between Linkage & Struct
  [TypeDefInfo.Linkage]: (_registry, value) => {
    const type = `Option<${getSubType(value)}>`;
    const Clazz = Struct.with({ previous: type, next: type });
    Clazz.prototype.toRawType = function() {
      return `Linkage<${this.next.toRawType(true)}>`;
    };
    return Clazz;
  },
  [TypeDefInfo.Null]: (_registry, _value) => Null,
  [TypeDefInfo.Option]: (_registry, value) => {
    if (!value.sub || Array.isArray(value.sub)) {
      throw new Error("Expected type information for Option");
    }
    return createWithSub(Option, value);
  },
  [TypeDefInfo.Plain]: (registry, value) => registry.getOrUnknown(value.type),
  [TypeDefInfo.Range]: (_registry, value) => createWithSub(Range, value),
  [TypeDefInfo.RangeInclusive]: (_registry, value) => createWithSub(RangeInclusive, value),
  [TypeDefInfo.Result]: (_registry, value) => {
    const [Ok, Err] = getTypeClassArray(value);
    return Result.with({ Err, Ok });
  },
  [TypeDefInfo.Set]: (_registry, value) => CodecSet.with(getSubDefArray(value).reduce((result, { index, name }) => {
    if (!name || !isNumber5(index)) {
      throw new Error("No name found in sub definition");
    }
    result[name] = index;
    return result;
  }, {}), value.length),
  [TypeDefInfo.Si]: (registry, value) => getTypeClass(registry, registry.lookup.getTypeDef(value.type)),
  [TypeDefInfo.Struct]: (_registry, value) => Struct.with(getTypeClassMap(value), value.alias),
  [TypeDefInfo.Tuple]: (_registry, value) => Tuple.with(getTypeClassArray(value)),
  [TypeDefInfo.UInt]: (_registry, value) => createInt(UInt, value),
  [TypeDefInfo.Vec]: (_registry, { sub }) => {
    if (!sub || Array.isArray(sub)) {
      throw new Error("Expected type information for vector");
    }
    return sub.type === "u8" ? Bytes : Vec.with(getTypeDefType(sub));
  },
  [TypeDefInfo.VecFixed]: (_registry, { displayName, length, sub }) => {
    if (!isNumber5(length) || !sub || Array.isArray(sub)) {
      throw new Error("Expected length & type information for fixed vector");
    }
    return sub.type === "u8" ? U8aFixed.with(length * 8, displayName) : VecFixed.with(getTypeDefType(sub), length);
  },
  [TypeDefInfo.WrapperKeepOpaque]: (_registry, value) => createWithSub(WrapperKeepOpaque, value),
  [TypeDefInfo.WrapperOpaque]: (_registry, value) => createWithSub(WrapperOpaque, value)
};
function constructTypeClass(registry, typeDef) {
  try {
    const Type2 = infoMapping[typeDef.info](registry, typeDef);
    if (!Type2) {
      throw new Error("No class created");
    }
    if (!Type2.__fallbackType && typeDef.fallbackType) {
      Type2.__fallbackType = typeDef.fallbackType;
    }
    return Type2;
  } catch (error) {
    throw new Error(`Unable to construct class from ${stringify4(typeDef)}: ${error.message}`);
  }
}
function getTypeClass(registry, typeDef) {
  return registry.getUnsafe(typeDef.type, false, typeDef);
}
function createClassUnsafe(registry, type) {
  return (
    // just retrieve via name, no creation via typeDef
    registry.getUnsafe(type) || // we don't have an existing type, create the class via typeDef
    getTypeClass(registry, registry.isLookupType(type) ? registry.lookup.getTypeDef(type) : getTypeDef(type))
  );
}

// node_modules/@polkadot/types-create/create/type.js
function checkInstance(created, matcher) {
  const u8a = created.toU8a();
  const rawType = created.toRawType();
  const isOk = (
    // full match, all ok
    u8aEq2(u8a, matcher) || // on a length-prefixed type, just check the actual length
    ["Bytes", "Text", "Type"].includes(rawType) && matcher.length === created.length || // when the created is empty and matcher is also empty, let it slide...
    created.isEmpty && matcher.every((v) => !v)
  );
  if (!isOk) {
    throw new Error(`${rawType}:: Decoded input doesn't match input, received ${u8aToHex6(matcher, 512)} (${matcher.length} bytes), created ${u8aToHex6(u8a, 512)} (${u8a.length} bytes)`);
  }
}
function checkPedantic(created, [value]) {
  if (isU8a6(value)) {
    checkInstance(created, value);
  } else if (isHex6(value)) {
    checkInstance(created, u8aToU8a6(value));
  }
}
function initType(registry, Type2, params = [], { blockHash, isFallback, isOptional, isPedantic } = {}) {
  const created = new (isOptional ? Option.with(Type2) : Type2)(registry, ...params);
  isPedantic && checkPedantic(created, params);
  if (blockHash) {
    created.createdAtHash = createTypeUnsafe(registry, "BlockHash", [blockHash]);
  }
  if (isFallback) {
    created.isStorageFallback = true;
  }
  return created;
}
function createTypeUnsafe(registry, type, params = [], options = {}) {
  let Clazz = null;
  let firstError = null;
  try {
    Clazz = createClassUnsafe(registry, type);
    return initType(registry, Clazz, params, options);
  } catch (error) {
    firstError = new Error(`createType(${type}):: ${error.message}`);
  }
  if (Clazz?.__fallbackType) {
    try {
      Clazz = createClassUnsafe(registry, Clazz.__fallbackType);
      return initType(registry, Clazz, params, options);
    } catch {
    }
  }
  throw firstError;
}

// node_modules/@polkadot/types-create/util/encodeTypes.js
var stringIdentity = (value) => value.toString();
var INFO_WRAP = ["BTreeMap", "BTreeSet", "Compact", "HashMap", "Option", "Result", "Vec"];
function paramsNotation(outer, inner, transform = stringIdentity) {
  return `${outer}${inner ? `<${(Array.isArray(inner) ? inner : [inner]).map(transform).join(", ")}>` : ""}`;
}
function encodeWithParams(registry, typeDef, outer) {
  const { info: info6, sub } = typeDef;
  switch (info6) {
    case TypeDefInfo.BTreeMap:
    case TypeDefInfo.BTreeSet:
    case TypeDefInfo.Compact:
    case TypeDefInfo.HashMap:
    case TypeDefInfo.Linkage:
    case TypeDefInfo.Option:
    case TypeDefInfo.Range:
    case TypeDefInfo.RangeInclusive:
    case TypeDefInfo.Result:
    case TypeDefInfo.Vec:
    case TypeDefInfo.WrapperKeepOpaque:
    case TypeDefInfo.WrapperOpaque:
      return paramsNotation(outer, sub, (p) => encodeTypeDef(registry, p));
  }
  throw new Error(`Unable to encode ${stringify4(typeDef)} with params`);
}
function encodeSubTypes(registry, sub, asEnum, extra) {
  const names = sub.map(({ name }) => name);
  if (!names.every((n) => !!n)) {
    throw new Error(`Subtypes does not have consistent names, ${names.join(", ")}`);
  }
  const inner = objectSpread6({}, extra);
  for (let i = 0, count = sub.length; i < count; i++) {
    const def = sub[i];
    if (!def.name) {
      throw new Error(`No name found in ${stringify4(def)}`);
    }
    inner[def.name] = encodeTypeDef(registry, def);
  }
  return stringify4(asEnum ? { _enum: inner } : inner);
}
var encoders = {
  [TypeDefInfo.BTreeMap]: (registry, typeDef) => encodeWithParams(registry, typeDef, "BTreeMap"),
  [TypeDefInfo.BTreeSet]: (registry, typeDef) => encodeWithParams(registry, typeDef, "BTreeSet"),
  [TypeDefInfo.Compact]: (registry, typeDef) => encodeWithParams(registry, typeDef, "Compact"),
  [TypeDefInfo.DoNotConstruct]: (registry, { displayName, lookupIndex, lookupName }) => `DoNotConstruct<${lookupName || displayName || (isUndefined6(lookupIndex) ? "Unknown" : registry.createLookupType(lookupIndex))}>`,
  [TypeDefInfo.Enum]: (registry, { sub }) => {
    if (!Array.isArray(sub)) {
      throw new Error("Unable to encode Enum type");
    }
    return sub.every(({ type }) => type === "Null") ? stringify4({ _enum: sub.map(({ name }, index) => `${name || `Empty${index}`}`) }) : encodeSubTypes(registry, sub, true);
  },
  [TypeDefInfo.HashMap]: (registry, typeDef) => encodeWithParams(registry, typeDef, "HashMap"),
  [TypeDefInfo.Int]: (_registry, { length = 32 }) => `Int<${length}>`,
  [TypeDefInfo.Linkage]: (registry, typeDef) => encodeWithParams(registry, typeDef, "Linkage"),
  [TypeDefInfo.Null]: (_registry, _typeDef) => "Null",
  [TypeDefInfo.Option]: (registry, typeDef) => encodeWithParams(registry, typeDef, "Option"),
  [TypeDefInfo.Plain]: (_registry, { displayName, type }) => displayName || type,
  [TypeDefInfo.Range]: (registry, typeDef) => encodeWithParams(registry, typeDef, "Range"),
  [TypeDefInfo.RangeInclusive]: (registry, typeDef) => encodeWithParams(registry, typeDef, "RangeInclusive"),
  [TypeDefInfo.Result]: (registry, typeDef) => encodeWithParams(registry, typeDef, "Result"),
  [TypeDefInfo.Set]: (_registry, { length = 8, sub }) => {
    if (!Array.isArray(sub)) {
      throw new Error("Unable to encode Set type");
    }
    return stringify4({
      _set: sub.reduce((all3, { index, name }, count) => objectSpread6(all3, { [`${name || `Unknown${index || count}`}`]: index || count }), { _bitLength: length || 8 })
    });
  },
  [TypeDefInfo.Si]: (_registry, { lookupName, type }) => lookupName || type,
  [TypeDefInfo.Struct]: (registry, { alias: alias2, sub }) => {
    if (!Array.isArray(sub)) {
      throw new Error("Unable to encode Struct type");
    }
    return encodeSubTypes(registry, sub, false, alias2 ? {
      _alias: [...alias2.entries()].reduce((all3, [k, v]) => objectSpread6(all3, { [k]: v }), {})
    } : {});
  },
  [TypeDefInfo.Tuple]: (registry, { sub }) => {
    if (!Array.isArray(sub)) {
      throw new Error("Unable to encode Tuple type");
    }
    return `(${sub.map((type) => encodeTypeDef(registry, type)).join(",")})`;
  },
  [TypeDefInfo.UInt]: (_registry, { length = 32 }) => `UInt<${length}>`,
  [TypeDefInfo.Vec]: (registry, typeDef) => encodeWithParams(registry, typeDef, "Vec"),
  [TypeDefInfo.VecFixed]: (_registry, { length, sub }) => {
    if (!isNumber5(length) || !sub || Array.isArray(sub)) {
      throw new Error("Unable to encode VecFixed type");
    }
    return `[${sub.type};${length}]`;
  },
  [TypeDefInfo.WrapperKeepOpaque]: (registry, typeDef) => encodeWithParams(registry, typeDef, "WrapperKeepOpaque"),
  [TypeDefInfo.WrapperOpaque]: (registry, typeDef) => encodeWithParams(registry, typeDef, "WrapperOpaque")
};
function encodeType(registry, typeDef, withLookup = true) {
  return withLookup && typeDef.lookupName ? typeDef.lookupName : encoders[typeDef.info](registry, typeDef);
}
function encodeTypeDef(registry, typeDef) {
  return typeDef.displayName && !INFO_WRAP.some((i) => typeDef.displayName === i) ? typeDef.displayName : encodeType(registry, typeDef);
}
function withTypeString(registry, typeDef) {
  return objectSpread6({}, typeDef, {
    type: encodeType(registry, typeDef, false)
  });
}

// node_modules/@polkadot/types-create/util/xcm.js
var XCM_MAPPINGS = ["AssetInstance", "Fungibility", "Junction", "Junctions", "MultiAsset", "MultiAssetFilter", "MultiLocation", "Response", "WildFungibility", "WildMultiAsset", "Xcm", "XcmError"];
function mapXcmTypes(version2) {
  return XCM_MAPPINGS.reduce((all3, key) => objectSpread6(all3, { [key]: `${key}${version2}` }), {});
}

// node_modules/@polkadot/types/interfaces/xcm/v0.js
var v02 = {
  FungibilityV0: "FungibilityV1",
  WildFungibilityV0: "WildFungibilityV1",
  AssetInstanceV0: {
    _enum: {
      Undefined: "Null",
      Index8: "u8",
      Index16: "Compact<u16>",
      Index32: "Compact<u32>",
      Index64: "Compact<u64>",
      Index128: "Compact<u128>",
      Array4: "[u8; 4]",
      Array8: "[u8; 8]",
      Array16: "[u8; 16]",
      Array32: "[u8; 32]",
      Blob: "Vec<u8>"
    }
  },
  JunctionV0: {
    _enum: {
      Parent: "Null",
      Parachain: "Compact<u32>",
      AccountId32: {
        network: "NetworkId",
        id: "AccountId"
      },
      AccountIndex64: {
        network: "NetworkId",
        index: "Compact<u64>"
      },
      AccountKey20: {
        network: "NetworkId",
        key: "[u8; 20]"
      },
      PalletInstance: "u8",
      GeneralIndex: "Compact<u128>",
      GeneralKey: "Vec<u8>",
      OnlyChild: "Null",
      Plurality: {
        id: "BodyId",
        part: "BodyPart"
      }
    }
  },
  MultiAssetV0: {
    _enum: {
      None: "Null",
      All: "Null",
      AllFungible: "Null",
      AllNonFungible: "Null",
      AllAbstractFungible: "Vec<u8>",
      AllAbstractNonFungible: "Vec<u8>",
      AllConcreteFungible: "MultiLocationV0",
      AllConcreteNonFungible: "MultiLocationV0",
      AbstractFungible: {
        id: "Vec<u8>",
        instance: "Compact<u128>"
      },
      AbstractNonFungible: {
        class: "Vec<u8>",
        instance: "AssetInstanceV0"
      },
      ConcreteFungible: {
        id: "MultiLocationV0",
        amount: "Compact<u128>"
      },
      ConcreteNonFungible: {
        class: "MultiLocationV0",
        instance: "AssetInstanceV0"
      }
    }
  },
  MultiLocationV0: {
    _enum: {
      Here: "Null",
      X1: "JunctionV0",
      X2: "(JunctionV0, JunctionV0)",
      X3: "(JunctionV0, JunctionV0, JunctionV0)",
      X4: "(JunctionV0, JunctionV0, JunctionV0, JunctionV0)",
      X5: "(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)",
      X6: "(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)",
      X7: "(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)",
      X8: "(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)"
    }
  },
  OriginKindV0: {
    _enum: ["Native", "SovereignAccount", "Superuser", "Xcm"]
  },
  ResponseV0: {
    _enum: {
      Assets: "Vec<MultiAssetV0>"
    }
  },
  XcmV0: {
    _enum: {
      WithdrawAsset: {
        assets: "Vec<MultiAssetV0>",
        effects: "Vec<XcmOrderV0>"
      },
      ReserveAssetDeposit: {
        assets: "Vec<MultiAssetV0>",
        effects: "Vec<XcmOrderV0>"
      },
      ReceiveTeleportedAsset: {
        assets: "Vec<MultiAssetV0>",
        effects: "Vec<XcmOrderV0>"
      },
      QueryResponse: {
        queryId: "Compact<u64>",
        response: "ResponseV0"
      },
      TransferAsset: {
        assets: "Vec<MultiAssetV0>",
        dest: "MultiLocationV0"
      },
      TransferReserveAsset: {
        assets: "Vec<MultiAssetV0>",
        dest: "MultiLocationV0",
        effects: "Vec<XcmOrderV0>"
      },
      Transact: {
        originType: "XcmOriginKind",
        requireWeightAtMost: "u64",
        call: "DoubleEncodedCall"
      },
      HrmpNewChannelOpenRequest: {
        sender: "Compact<u32>",
        maxMessageSize: "Compact<u32>",
        maxCapacity: "Compact<u32>"
      },
      HrmpChannelAccepted: {
        recipient: "Compact<u32>"
      },
      HrmpChannelClosing: {
        initiator: "Compact<u32>",
        sender: "Compact<u32>",
        recipient: "Compact<u32>"
      },
      RelayedFrom: {
        who: "MultiLocationV0",
        message: "XcmV0"
      }
    }
  },
  XcmErrorV0: {
    _enum: {
      Undefined: "Null",
      Overflow: "Null",
      Unimplemented: "Null",
      UnhandledXcmVersion: "Null",
      UnhandledXcmMessage: "Null",
      UnhandledEffect: "Null",
      EscalationOfPrivilege: "Null",
      UntrustedReserveLocation: "Null",
      UntrustedTeleportLocation: "Null",
      DestinationBufferOverflow: "Null",
      SendFailed: "Null",
      CannotReachDestination: "(MultiLocation, Xcm)",
      MultiLocationFull: "Null",
      FailedToDecode: "Null",
      BadOrigin: "Null",
      ExceedsMaxMessageSize: "Null",
      FailedToTransactAsset: "Null",
      WeightLimitReached: "Weight",
      Wildcard: "Null",
      TooMuchWeightRequired: "Null",
      NotHoldingFees: "Null",
      WeightNotComputable: "Null",
      Barrier: "Null",
      NotWithdrawable: "Null",
      LocationCannotHold: "Null",
      TooExpensive: "Null",
      AssetNotFound: "Null",
      RecursionLimitReached: "Null"
    }
  },
  XcmOrderV0: {
    _enum: {
      Null: "Null",
      DepositAsset: {
        assets: "Vec<MultiAssetV0>",
        dest: "MultiLocationV0"
      },
      DepositReserveAsset: {
        assets: "Vec<MultiAssetV0>",
        dest: "MultiLocationV0",
        effects: "Vec<XcmOrderV0>"
      },
      ExchangeAsset: {
        give: "Vec<MultiAssetV0>",
        receive: "Vec<MultiAssetV0>"
      },
      InitiateReserveWithdraw: {
        assets: "Vec<MultiAssetV0>",
        reserve: "MultiLocationV0",
        effects: "Vec<XcmOrderV0>"
      },
      InitiateTeleport: {
        assets: "Vec<MultiAssetV0>",
        dest: "MultiLocationV0",
        effects: "Vec<XcmOrderV0>"
      },
      QueryHolding: {
        queryId: "Compact<u64>",
        dest: "MultiLocationV0",
        assets: "Vec<MultiAssetV0>"
      },
      BuyExecution: {
        fees: "MultiAssetV0",
        weight: "u64",
        debt: "u64",
        haltOnError: "bool",
        xcm: "Vec<XcmV0>"
      }
    }
  }
};

// node_modules/@polkadot/types/interfaces/xcm/v1.js
var v16 = {
  AssetInstanceV1: {
    _enum: {
      Undefined: "Null",
      Index: "Compact<u128>",
      Array4: "[u8; 4]",
      Array8: "[u8; 8]",
      Array16: "[u8; 16]",
      Array32: "[u8; 32]",
      Blob: "Bytes"
    }
  },
  FungibilityV1: {
    _enum: {
      Fungible: "Compact<u128>",
      NonFungible: "AssetInstanceV1"
    }
  },
  JunctionV1: {
    _enum: {
      Parachain: "Compact<u32>",
      AccountId32: {
        network: "NetworkId",
        id: "AccountId"
      },
      AccountIndex64: {
        network: "NetworkId",
        index: "Compact<u64>"
      },
      AccountKey20: {
        network: "NetworkId",
        key: "[u8; 20]"
      },
      PalletInstance: "u8",
      GeneralIndex: "Compact<u128>",
      GeneralKey: "Vec<u8>",
      OnlyChild: "Null",
      Plurality: {
        id: "BodyId",
        part: "BodyPart"
      }
    }
  },
  JunctionsV1: {
    _enum: {
      Here: "Null",
      X1: "JunctionV1",
      X2: "(JunctionV1, JunctionV1)",
      X3: "(JunctionV1, JunctionV1, JunctionV1)",
      X4: "(JunctionV1, JunctionV1, JunctionV1, JunctionV1)",
      X5: "(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)",
      X6: "(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)",
      X7: "(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)",
      X8: "(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)"
    }
  },
  MultiAssetsV1: "Vec<MultiAssetV1>",
  MultiAssetV1: {
    id: "XcmAssetId",
    fungibility: "FungibilityV1"
  },
  MultiAssetFilterV1: {
    _enum: {
      Definite: "MultiAssetsV1",
      Wild: "WildMultiAssetV1"
    }
  },
  MultiLocationV1: {
    parents: "u8",
    interior: "JunctionsV1"
  },
  OriginKindV1: "OriginKindV0",
  ResponseV1: {
    _enum: {
      Assets: "MultiAssetsV1"
    }
  },
  WildFungibilityV1: {
    _enum: ["Fungible", "NonFungible"]
  },
  WildMultiAssetV1: {
    _enum: {
      All: "Null",
      AllOf: {
        id: "XcmAssetId",
        fungibility: "WildFungibilityV1"
      }
    }
  },
  XcmV1: {
    _enum: {
      WithdrawAsset: {
        assets: "MultiAssetsV1",
        effects: "Vec<XcmOrderV1>"
      },
      ReserveAssetDeposit: {
        assets: "MultiAssetsV1",
        effects: "Vec<XcmOrderV1>"
      },
      ReceiveTeleportedAsset: {
        assets: "MultiAssetsV1",
        effects: "Vec<XcmOrderV1>"
      },
      QueryResponse: {
        queryId: "Compact<u64>",
        response: "ResponseV1"
      },
      TransferAsset: {
        assets: "MultiAssetsV1",
        dest: "MultiLocationV1"
      },
      TransferReserveAsset: {
        assets: "MultiAssetsV1",
        dest: "MultiLocationV1",
        effects: "Vec<XcmOrderV1>"
      },
      Transact: {
        originType: "XcmOriginKind",
        requireWeightAtMost: "u64",
        call: "DoubleEncodedCall"
      },
      HrmpNewChannelOpenRequest: {
        sender: "Compact<u32>",
        maxMessageSize: "Compact<u32>",
        maxCapacity: "Compact<u32>"
      },
      HrmpChannelAccepted: {
        recipient: "Compact<u32>"
      },
      HrmpChannelClosing: {
        initiator: "Compact<u32>",
        sender: "Compact<u32>",
        recipient: "Compact<u32>"
      },
      RelayedFrom: {
        who: "MultiLocationV1",
        message: "XcmV1"
      }
    }
  },
  XcmErrorV1: {
    _enum: {
      Undefined: "Null",
      Overflow: "Null",
      Unimplemented: "Null",
      UnhandledXcmVersion: "Null",
      UnhandledXcmMessage: "Null",
      UnhandledEffect: "Null",
      EscalationOfPrivilege: "Null",
      UntrustedReserveLocation: "Null",
      UntrustedTeleportLocation: "Null",
      DestinationBufferOverflow: "Null",
      SendFailed: "Null",
      CannotReachDestination: "(MultiLocationV1, XcmV1)",
      MultiLocationFull: "Null",
      FailedToDecode: "Null",
      BadOrigin: "Null",
      ExceedsMaxMessageSize: "Null",
      FailedToTransactAsset: "Null",
      WeightLimitReached: "Weight",
      Wildcard: "Null",
      TooMuchWeightRequired: "Null",
      NotHoldingFees: "Null",
      WeightNotComputable: "Null",
      Barrier: "Null",
      NotWithdrawable: "Null",
      LocationCannotHold: "Null",
      TooExpensive: "Null",
      AssetNotFound: "Null",
      DestinationUnsupported: "Null",
      RecursionLimitReached: "Null"
    }
  },
  XcmOrderV1: {
    _enum: {
      Noop: "Null",
      DepositAsset: {
        assets: "MultiAssetFilterV1",
        maxAssets: "u32",
        beneficiary: "MultiLocationV1"
      },
      DepositReserveAsset: {
        assets: "MultiAssetFilterV1",
        maxAssets: "u32",
        dest: "MultiLocationV1",
        effects: "Vec<XcmOrderV1>"
      },
      ExchangeAsset: {
        give: "MultiAssetFilterV1",
        receive: "MultiAssetsV1"
      },
      InitiateReserveWithdraw: {
        assets: "MultiAssetFilterV1",
        reserve: "MultiLocationV1",
        effects: "Vec<XcmOrderV1>"
      },
      InitiateTeleport: {
        assets: "MultiAssetFilterV1",
        dest: "MultiLocationV1",
        effects: "Vec<XcmOrderV1>"
      },
      QueryHolding: {
        queryId: "Compact<u64>",
        dest: "MultiLocationV1",
        assets: "MultiAssetFilterV1"
      },
      BuyExecution: {
        fees: "MultiAssetV1",
        weight: "u64",
        debt: "u64",
        haltOnError: "bool",
        instructions: "Vec<XcmV1>"
      }
    }
  }
};

// node_modules/@polkadot/types/interfaces/xcm/v2.js
var v2 = {
  AssetIdV2: {
    _enum: {
      Concrete: "MultiLocationV2",
      Abstract: "Bytes"
    }
  },
  AssetInstanceV2: {
    _enum: {
      Undefined: "Null",
      Index: "Compact<u128>",
      Array4: "[u8;4]",
      Array8: "[u8;8]",
      Array16: "[u8;16]",
      Array32: "[u8;32]",
      Blob: "Bytes"
    }
  },
  BodyIdV2: {
    _enum: {
      Unit: "Null",
      Named: "Bytes",
      Index: "Compact<u32>",
      Executive: "Null",
      Technical: "Null",
      Legislative: "Null",
      Judicial: "Null",
      Defense: "Null",
      Administration: "Null",
      Treasury: "Null"
    }
  },
  BodyPartV2: {
    _enum: {
      Voice: "Null",
      Members: {
        count: "Compact<u32>"
      },
      Fraction: {
        nom: "Compact<u32>",
        denom: "Compact<u32>"
      },
      AtLeastProportion: {
        nom: "Compact<u32>",
        denom: "Compact<u32>"
      },
      MoreThanProportion: {
        nom: "Compact<u32>",
        denom: "Compact<u32>"
      }
    }
  },
  NetworkIdV2: {
    _enum: {
      Any: "Null",
      Named: "Bytes",
      Polkadot: "Null",
      Kusama: "Null"
    }
  },
  JunctionV2: {
    _enum: {
      Parachain: "Compact<u32>",
      AccountId32: {
        network: "NetworkIdV2",
        id: "[u8; 32]"
      },
      AccountIndex64: {
        network: "NetworkIdV2",
        index: "Compact<u64>"
      },
      AccountKey20: {
        network: "NetworkIdV2",
        key: "[u8; 20]"
      },
      PalletInstance: "u8",
      GeneralIndex: "Compact<u128>",
      GeneralKey: "Bytes",
      OnlyChild: "Null",
      Plurality: {
        id: "BodyIdV2",
        part: "BodyPartV2"
      }
    }
  },
  JunctionsV2: {
    _enum: {
      Here: "Null",
      X1: "JunctionV2",
      X2: "(JunctionV2, JunctionV2)",
      X3: "(JunctionV2, JunctionV2, JunctionV2)",
      X4: "(JunctionV2, JunctionV2, JunctionV2, JunctionV2)",
      X5: "(JunctionV2, JunctionV2, JunctionV2, JunctionV2, JunctionV2)",
      X6: "(JunctionV2, JunctionV2, JunctionV2, JunctionV2, JunctionV2, JunctionV2)",
      X7: "(JunctionV2, JunctionV2, JunctionV2, JunctionV2, JunctionV2, JunctionV2, JunctionV2)",
      X8: "(JunctionV2, JunctionV2, JunctionV2, JunctionV2, JunctionV2, JunctionV2, JunctionV2, JunctionV2)"
    }
  },
  FungibilityV2: {
    _enum: {
      Fungible: "Compact<u128>",
      NonFungible: "AssetInstanceV2"
    }
  },
  InteriorMultiLocationV2: "JunctionsV2",
  MultiAssetV2: {
    id: "AssetIdV2",
    fun: "FungibilityV2"
  },
  MultiAssetsV2: "Vec<MultiAssetV2>",
  MultiAssetFilterV2: {
    _enum: {
      Definite: "MultiAssetsV2",
      Wild: "WildMultiAssetV2"
    }
  },
  MultiLocationV2: {
    parents: "u8",
    interior: "JunctionsV2"
  },
  OriginKindV2: {
    _enum: {
      Native: "Null",
      SovereignAccount: "Null",
      Superuser: "Null",
      Xcm: "Null"
    }
  },
  WildFungibilityV2: {
    _enum: {
      Fungible: "Null",
      NonFungible: "Null"
    }
  },
  ResponseV2: {
    _enum: {
      Null: "Null",
      Assets: "MultiAssetsV2",
      ExecutionResult: "Option<(u32, XcmErrorV2)>",
      Version: "u32"
    }
  },
  ResponseV2Error: "(u32, XcmErrorV2)",
  WeightLimitV2: {
    _enum: {
      Unlimited: "Null",
      Limited: "Compact<u64>"
    }
  },
  InstructionV2: {
    _enum: {
      WithdrawAsset: "MultiAssetsV2",
      ReserveAssetDeposited: "MultiAssetsV2",
      ReceiveTeleportedAsset: "MultiAssetsV2",
      QueryResponse: {
        queryId: "Compact<u64>",
        response: "ResponseV2",
        maxWeight: "Compact<u64>"
      },
      TransferAsset: {
        assets: "MultiAssetsV2",
        beneficiary: "MultiLocationV2"
      },
      TransferReserveAsset: {
        assets: "MultiAssetsV2",
        dest: "MultiLocationV2",
        xcm: "XcmV2"
      },
      Transact: {
        originType: "XcmOriginKind",
        requireWeightAtMost: "Compact<u64>",
        call: "DoubleEncodedCall"
      },
      HrmpNewChannelOpenRequest: {
        sender: "Compact<u32>",
        maxMessageSize: "Compact<u32>",
        maxCapacity: "Compact<u32>"
      },
      HrmpChannelAccepted: {
        recipient: "Compact<u32>"
      },
      HrmpChannelClosing: {
        initiator: "Compact<u32>",
        sender: "Compact<u32>",
        recipient: "Compact<u32>"
      },
      ClearOrigin: "Null",
      DescendOrigin: "InteriorMultiLocationV2",
      ReportError: {
        queryId: "Compact<u64>",
        dest: "MultiLocationV2",
        maxResponseWeight: "Compact<u64>"
      },
      DepositAsset: {
        assets: "MultiAssetFilterV2",
        maxAssets: "Compact<u32>",
        beneficiary: "MultiLocationV2"
      },
      DepositReserveAsset: {
        assets: "MultiAssetFilterV2",
        maxAssets: "Compact<u32>",
        dest: "MultiLocationV2",
        xcm: "XcmV2"
      },
      ExchangeAsset: {
        give: "MultiAssetFilterV2",
        receive: "MultiAssetsV2"
      },
      InitiateReserveWithdraw: {
        assets: "MultiAssetFilterV2",
        reserve: "MultiLocationV2",
        xcm: "XcmV2"
      },
      InitiateTeleport: {
        assets: "MultiAssetFilterV2",
        dest: "MultiLocationV2",
        xcm: "XcmV2"
      },
      QueryHolding: {
        queryId: "Compact<u64>",
        dest: "MultiLocationV2",
        assets: "MultiAssetFilterV2",
        maxResponseWeight: "Compact<u64>"
      },
      BuyExecution: {
        fees: "MultiAssetV2",
        weightLimit: "WeightLimitV2"
      },
      RefundSurplus: "Null",
      SetErrorHandler: "XcmV2<RuntimeCall>",
      SetAppendix: "XcmV2<RuntimeCall>",
      ClearError: "Null",
      ClaimAsset: {
        assets: "MultiAssetsV2",
        ticket: "MultiLocationV2"
      },
      Trap: "Compact<u64>",
      SubscribeVersion: {
        queryId: "Compact<u64>",
        maxResponseWeight: "Compact<u64>"
      },
      UnsubscribeVersion: "Null"
    }
  },
  WildMultiAssetV2: {
    _enum: {
      All: "Null",
      AllOf: {
        id: "AssetIdV2",
        fun: "WildFungibilityV2"
      }
    }
  },
  XcmV2: "Vec<InstructionV2>",
  XcmErrorV2: {
    _enum: {
      Overflow: "Null",
      Unimplemented: "Null",
      UntrustedReserveLocation: "Null",
      UntrustedTeleportLocation: "Null",
      MultiLocationFull: "Null",
      MultiLocationNotInvertible: "Null",
      BadOrigin: "Null",
      InvalidLocation: "Null",
      AssetNotFound: "Null",
      FailedToTransactAsset: "Null",
      NotWithdrawable: "Null",
      LocationCannotHold: "Null",
      ExceedsMaxMessageSize: "Null",
      DestinationUnsupported: "Null",
      Transport: "Null",
      Unroutable: "Null",
      UnknownClaim: "Null",
      FailedToDecode: "Null",
      MaxWeightInvalid: "Null",
      NotHoldingFees: "Null",
      TooExpensive: "Null",
      Trap: "u64",
      UnhandledXcmVersion: "Null",
      WeightLimitReached: "Weight",
      Barrier: "Null",
      WeightNotComputable: "Null"
    }
  }
};

// node_modules/@polkadot/types/interfaces/xcm/v3.js
var v3 = {
  AssetIdV3: {
    _enum: {
      Concrete: "MultiLocationV3",
      Abstract: "Bytes"
    }
  },
  BodyIdV3: {
    _enum: {
      Unit: "Null",
      Moniker: "[u8;4]",
      Index: "Compact<u32>",
      Executive: "Null",
      Technical: "Null",
      Legislative: "Null",
      Judicial: "Null",
      Defense: "Null",
      Administration: "Null",
      Treasury: "Null"
    }
  },
  BodyPartV3: {
    _enum: {
      Voice: "Null",
      Members: {
        count: "Compact<u32>"
      },
      Fraction: {
        nom: "Compact<u32>",
        denom: "Compact<u32>"
      },
      AtLeastProportion: {
        nom: "Compact<u32>",
        denom: "Compact<u32>"
      },
      MoreThanProportion: {
        nom: "Compact<u32>",
        denom: "Compact<u32>"
      }
    }
  },
  AssetInstanceV3: {
    _enum: {
      Undefined: "Null",
      Index: "Compact<u128>",
      Array4: "[u8;4]",
      Array8: "[u8;8]",
      Array16: "[u8;16]",
      Array32: "[u8;32]"
    }
  },
  FungibilityV3: {
    _enum: {
      Fungible: "Compact<u128>",
      NonFungible: "AssetInstanceV3"
    }
  },
  InteriorMultiLocationV3: "JunctionsV3",
  JunctionV3: {
    _enum: {
      Parachain: "Compact<u32>",
      AccountId32: {
        network: "Option<NetworkIdV3>",
        id: "[u8;32]"
      },
      AccountIndex64: {
        network: "Option<NetworkIdV3>",
        index: "Compact<u64>"
      },
      AccountKey20: {
        network: "Option<NetworkIdV3>",
        key: "[u8;20]"
      },
      PalletInstance: "u8",
      GeneralIndex: "Compact<u128>",
      GeneralKey: {
        length: "u8",
        data: "[u8;32]"
      },
      OnlyChild: "Null",
      Plurality: {
        id: "BodyIdV3",
        part: "BodyPartV3"
      },
      GlobalConsensus: "NetworkIdV3"
    }
  },
  JunctionsV3: {
    _enum: {
      Here: "Null",
      X1: "JunctionV3",
      X2: "(JunctionV3, JunctionV3)",
      X3: "(JunctionV3, JunctionV3, JunctionV3)",
      X4: "(JunctionV3, JunctionV3, JunctionV3, JunctionV3)",
      X5: "(JunctionV3, JunctionV3, JunctionV3, JunctionV3, JunctionV3)",
      X6: "(JunctionV3, JunctionV3, JunctionV3, JunctionV3, JunctionV3, JunctionV3)",
      X7: "(JunctionV3, JunctionV3, JunctionV3, JunctionV3, JunctionV3, JunctionV3, JunctionV3)",
      X8: "(JunctionV3, JunctionV3, JunctionV3, JunctionV3, JunctionV3, JunctionV3, JunctionV3, JunctionV3)"
    }
  },
  MaybeErrorCodeV3: {
    _enum: {
      Success: "Null",
      Error: "Bytes",
      TruncatedError: "Bytes"
    }
  },
  MaxPalletsInfo: "u32",
  MultiAssetV3: {
    id: "AssetIdV3",
    fun: "FungibilityV3"
  },
  MultiAssetsV3: "Vec<MultiAssetV3>",
  MultiAssetFilterV3: {
    _enum: {
      Definite: "MultiAssetsV3",
      Wild: "WildMultiAssetV3"
    }
  },
  MultiLocationV3: {
    parents: "u8",
    interior: "JunctionsV3"
  },
  MaxPalletNameLen: "u32",
  NetworkIdV3: {
    _enum: {
      ByGenesis: "[u8;32]",
      ByFork: {
        blockNumber: "u64",
        blockHash: "[u8;32]"
      },
      Polkadot: "Null",
      Kusama: "Null",
      Westend: "Null",
      Rococo: "Null",
      Wococo: "Null",
      Ethereum: {
        chainId: "Compact<u64>"
      },
      BitcoinCore: "Null",
      BitcoinCash: "Null",
      PolkadotBulletin: "Null"
    }
  },
  OriginKindV3: "OriginKindV2",
  PalletInfoV3: {
    index: "Compact<u32>",
    name: "Bytes",
    moduleName: "Bytes",
    major: "Compact<u32>",
    minor: "Compact<u32>",
    patch: "Compact<u32>"
  },
  WildFungibilityV3: "WildFungibilityV2",
  QueryResponseInfoV3: {
    destination: "MultiLocationV3",
    queryId: "Compact<u64>",
    maxWeight: "WeightV2"
  },
  ResponseV3: {
    _enum: {
      Null: "Null",
      Assets: "MultiAssetsV3",
      ExecutionResult: "Option<(u32,XcmErrorV3)>",
      Version: "u32",
      PalletsInfo: "Vec<PalletInfoV3>",
      DispatchResult: "MaybeErrorCodeV3"
    }
  },
  XcmErrorV3: {
    _enum: {
      Overflow: "Null",
      Unimplemented: "Null",
      UntrustedReserveLocation: "Null",
      UntrustedTeleportLocation: "Null",
      LocationFull: "Null",
      LocationNotInvertible: "Null",
      BadOrigin: "Null",
      InvalidLocation: "Null",
      AssetNotFound: "Null",
      FailedToTransactAsset: "Null",
      NotWithdrawable: "Null",
      LocationCannotHold: "Null",
      ExceedsMaxMessageSize: "Null",
      DestinationUnsupported: "Null",
      Transport: "Null",
      Unroutable: "Null",
      UnknownClaim: "Null",
      FailedToDecode: "Null",
      MaxWeightInvalid: "Null",
      NotHoldingFees: "Null",
      TooExpensive: "Null",
      Trap: "u64",
      ExpectationFalse: "Null",
      PalletNotFound: "Null",
      NameMismatch: "Null",
      VersionIncompatible: "Null",
      HoldingWouldOverflow: "Null",
      ExportError: "Null",
      ReanchorFailed: "Null",
      NoDeal: "Null",
      FeesNotMet: "Null",
      LockError: "Null",
      NoPermission: "Null",
      Unanchored: "Null",
      NotDepositable: "Null",
      UnhandledXcmVersion: "Null",
      WeightLimitReached: "WeightV2",
      Barrier: "Null",
      ExceedsStackLimit: "Null"
    }
  },
  ResponseV3Error: "(u32, XcmErrorV3)",
  ResponseV3Result: "Option<(u32, ResponseV3Error)>",
  WeightLimitV3: {
    _enum: {
      Unlimited: "Null",
      Limited: "WeightV2"
    }
  },
  InstructionV3: {
    _enum: {
      WithdrawAsset: "MultiAssetsV3",
      ReserveAssetDeposited: "MultiAssetsV3",
      ReceiveTeleportedAsset: "MultiAssetsV3",
      QueryResponse: {
        queryId: "Compact<u64>",
        response: "ResponseV3",
        maxWeight: "WeightV2",
        querier: "Option<MultiLocationV3>"
      },
      TransferAsset: {
        assets: "MultiAssetsV3",
        beneficiary: "MultiLocationV3"
      },
      TransferReserveAsset: {
        assets: "MultiAssetsV3",
        dest: "MultiLocationV3",
        xcm: "XcmV3"
      },
      Transact: {
        originKind: "XcmOriginKind",
        requireWeightAtMost: "WeightV2",
        call: "DoubleEncodedCall"
      },
      HrmpNewChannelOpenRequest: {
        sender: "Compact<u32>",
        maxMessageSize: "Compact<u32>",
        maxCapacity: "Compact<u32>"
      },
      HrmpChannelAccepted: {
        recipient: "Compact<u32>"
      },
      HrmpChannelClosing: {
        initiator: "Compact<u32>",
        sender: "Compact<u32>",
        recipient: "Compact<u32>"
      },
      ClearOrigin: "Null",
      DescendOrigin: "JunctionsV3",
      ReportError: "QueryResponseInfoV3",
      DepositAsset: {
        assets: "MultiAssetFilterV3",
        beneficiary: "MultiLocationV3"
      },
      DepositReserveAsset: {
        assets: "MultiAssetFilterV3",
        dest: "MultiLocationV3",
        xcm: "XcmV3"
      },
      ExchangeAsset: {
        give: "MultiAssetFilterV3",
        want: "MultiAssetsV3",
        maximal: "bool"
      },
      InitiateReserveWithdraw: {
        assets: "MultiAssetFilterV3",
        reserve: "MultiLocationV3",
        xcm: "XcmV3"
      },
      InitiateTeleport: {
        assets: "MultiAssetFilterV3",
        dest: "MultiLocationV3",
        xcm: "XcmV3"
      },
      ReportHolding: {
        responseInfo: "QueryResponseInfoV3",
        assets: "MultiAssetFilterV3"
      },
      BuyExecution: {
        fees: "MultiAssetV3",
        weightLimit: "WeightLimitV3"
      },
      RefundSurplus: "Null",
      SetErrorHandler: "XcmV3<RuntimeCall>",
      SetAppendix: "XcmV3<RuntimeCall>",
      ClearError: "Null",
      ClaimAsset: {
        assets: "MultiAssetsV3",
        ticket: "MultiLocationV3"
      },
      Trap: "Compact<u64>",
      SubscribeVersion: {
        queryId: "Compact<u64>",
        maxResponseWeight: "WeightV2"
      },
      UnsubscribeVersion: "Null",
      BurnAsset: "MultiAssetsV3",
      ExpectAsset: "MultiAssetsV3",
      ExpectOrigin: "Option<MultiLocationV3>",
      ExpectError: "Option<(u32, XcmErrorV3)>",
      ExpectTransactStatus: "MaybeErrorCodeV3",
      QueryPallet: {
        moduleName: "Vec<u8>",
        responseInfo: "QueryResponseInfoV3"
      },
      ExpectPallet: {
        index: "Compact<u32>",
        name: "Vec<u8>",
        moduleName: "Vec<u8>",
        crateMajor: "Compact<u32>",
        minCrateMinor: "Compact<u32>"
      },
      ReportTransactStatus: "QueryResponseInfoV3",
      ClearTransactStatus: "Null",
      UniversalOrigin: "JunctionV3",
      ExportMessage: {
        network: "NetworkIdV3",
        destination: "JunctionsV3",
        xcm: "XcmV3"
      },
      LockAsset: {
        asset: "MultiAssetV3",
        unlocker: "MultiLocationV3"
      },
      UnlockAsset: {
        asset: "MultiAssetV3",
        target: "MultiLocationV3"
      },
      NoteUnlockable: {
        asset: "MultiAssetV3",
        owner: "MultiLocationV3"
      },
      RequestUnlock: {
        asset: "MultiAssetV3",
        locker: "MultiLocationV3"
      },
      SetFeesMode: {
        jitWithdraw: "bool"
      },
      SetTopic: "[u8; 32]",
      ClearTopic: "Null",
      AliasOrigin: "MultiLocationV3",
      UnpaidExecution: {
        weightLimit: "WeightLimitV3",
        checkOrigin: "Option<MultiLocationV3>"
      }
    }
  },
  WildMultiAssetV3: {
    _enum: {
      All: "Null",
      AllOf: {
        id: "AssetIdV3",
        fun: "WildFungibilityV2"
      },
      AllCounted: "Compact<u32>",
      AllOfCounted: {
        id: "AssetIdV3",
        fun: "WildFungibilityV2",
        count: "Compact<u32>"
      }
    }
  },
  VersionV3: "u32",
  XcmV3: "Vec<InstructionV3>"
};

// node_modules/@polkadot/types/interfaces/xcm/v4.js
var v42 = {
  AssetIdV4: "MultiLocationV4",
  AssetInstanceV4: {
    _enum: {
      Undefined: "Null",
      Index: "Compact<u128>",
      Array4: "[u8;4]",
      Array8: "[u8;8]",
      Array16: "[u8;16]",
      Array32: "[u8;32]"
    }
  },
  FungibilityV4: {
    _enum: {
      Fungible: "Compact<u128>",
      NonFungible: "AssetInstanceV4"
    }
  },
  UncheckedFungibilityV4: {
    _enum: {
      Fungible: "Compact<u128>",
      NonFungible: "AssetInstanceV4"
    }
  },
  JunctionV4: {
    _enum: {
      Parachain: "Compact<u32>",
      AccountId32: {
        network: "Option<NetworkIdV4>",
        id: "[u8;32]"
      },
      AccountIndex64: {
        network: "Option<NetworkIdV4>",
        index: "Compact<u64>"
      },
      AccountKey20: {
        network: "Option<NetworkIdV4>",
        key: "[u8;20]"
      },
      PalletInstance: "u8",
      GeneralIndex: "Compact<u128>",
      GeneralKey: {
        length: "u8",
        data: "[u8;32]"
      },
      OnlyChild: "Null",
      Plurality: {
        id: "BodyIdV3",
        part: "BodyPartV3"
      },
      GlobalConsensus: "NetworkIdV4"
    }
  },
  JunctionsV4: {
    _enum: {
      Here: "Null",
      X1: "[JunctionV4;1]",
      X2: "[JunctionV4;2]",
      X3: "[JunctionV4;3]",
      X4: "[JunctionV4;4]",
      X5: "[JunctionV4;5]",
      X6: "[JunctionV4;6]",
      X7: "[JunctionV4;7]",
      X8: "[JunctionV4;8]"
    }
  },
  MaxPalletsInfo: "u32",
  NetworkIdV4: "NetworkIdV3",
  MultiAssetV4: {
    id: "AssetIdV4",
    fun: "FungibilityV4"
  },
  MultiAssetsV4: "Vec<MultiAssetV4>",
  MultiAssetFilterV4: {
    _enum: {
      Definite: "MultiAssetsV4",
      Wild: "WildMultiAssetV4"
    }
  },
  MultiLocationV4: {
    parents: "u8",
    interior: "JunctionsV4"
  },
  OriginKindV4: "XcmOriginKind",
  PalletInfoV4: "PalletInfoV3",
  WildFungibilityV4: "WildFungibilityV2",
  QueryResponseInfoV4: {
    destination: "MultiLocationV4",
    queryId: "Compact<u64>",
    maxWeight: "WeightV2"
  },
  ResponseV4: {
    _enum: {
      Null: "Null",
      Assets: "MultiAssetsV4",
      ExecutionResult: "Option<(u32, XcmErrorV3)>",
      Version: "u32",
      PalletsInfo: "Vec<PalletInfoV4>",
      DispatchResult: "MaybeErrorCodeV3"
    }
  },
  InstructionV4: {
    _enum: {
      WithdrawAsset: "MultiAssetsV4",
      ReserveAssetDeposited: "MultiAssetsV4",
      ReceiveTeleportedAsset: "MultiAssetsV4",
      QueryResponse: {
        queryId: "Compact<u64>",
        response: "ResponseV4",
        maxWeight: "WeightV2",
        querier: "Option<MultiLocationV4>"
      },
      TransferAsset: {
        assets: "MultiAssetsV4",
        beneficiary: "MultiLocationV4"
      },
      TransferReserveAsset: {
        assets: "MultiAssetsV4",
        dest: "MultiLocationV4",
        xcm: "XcmV4"
      },
      Transact: {
        originKind: "OriginKindV4",
        requireWeightAtMost: "WeightV2",
        call: "DoubleEncodedCall"
      },
      HrmpNewChannelOpenRequest: {
        sender: "Compact<u32>",
        maxMessageSize: "Compact<u32>",
        maxCapacity: "Compact<u32>"
      },
      HrmpChannelAccepted: {
        recipient: "Compact<u32>"
      },
      HrmpChannelClosing: {
        initiator: "Compact<u32>",
        sender: "Compact<u32>",
        recipient: "Compact<u32>"
      },
      ClearOrigin: "Null",
      DescendOrigin: "JunctionsV4",
      ReportError: "QueryResponseInfoV4",
      DepositAsset: {
        assets: "MultiAssetFilterV4",
        beneficiary: "MultiLocationV4"
      },
      DepositReserveAsset: {
        assets: "MultiAssetFilterV4",
        dest: "MultiLocationV4",
        xcm: "XcmV4"
      },
      ExchangeAsset: {
        give: "MultiAssetFilterV4",
        want: "MultiAssetsV4",
        maximal: "bool"
      },
      InitiateReserveWithdraw: {
        assets: "MultiAssetFilterV4",
        reserve: "MultiLocationV4",
        xcm: "XcmV4"
      },
      InitiateTeleport: {
        assets: "MultiAssetFilterV4",
        dest: "MultiLocationV4",
        xcm: "XcmV4"
      },
      ReportHolding: {
        responseInfo: "QueryResponseInfoV4",
        assets: "MultiAssetFilterV4"
      },
      BuyExecution: {
        fees: "MultiAssetV4",
        weightLimit: "WeightLimitV3"
      },
      RefundSurplus: "Null",
      SetErrorHandler: "XcmV4",
      SetAppendix: "XcmV4",
      ClearError: "Null",
      ClaimAsset: {
        assets: "MultiAssetsV4",
        ticket: "MultiLocationV4"
      },
      Trap: "Compact<u64>",
      SubscribeVersion: {
        queryId: "Compact<u64>",
        maxResponseWeight: "WeightV2"
      },
      UnsubscribeVersion: "Null",
      BurnAsset: "MultiAssetsV4",
      ExpectAsset: "MultiAssetsV4",
      ExpectOrigin: "Option<MultiLocationV4>",
      ExpectError: "Option<(u32, XcmErrorV3)>",
      ExpectTransactStatus: "MaybeErrorCodeV3",
      QueryPallet: {
        moduleName: "Vec<u8>",
        responseInfo: "QueryResponseInfoV4"
      },
      ExpectPallet: {
        index: "Compact<u32>",
        name: "Vec<u8>",
        moduleName: "Vec<u8>",
        crateMajor: "Compact<u32>",
        minCrateMinor: "Compact<u32>"
      },
      ReportTransactStatus: "QueryResponseInfoV4",
      ClearTransactStatus: "Null",
      UniversalOrigin: "JunctionV4",
      ExportMessage: {
        network: "NetworkIdV4",
        destination: "JunctionsV4",
        xcm: "XcmV4"
      },
      LockAsset: {
        asset: "MultiAssetV4",
        unlocker: "MultiLocationV4"
      },
      UnlockAsset: {
        asset: "MultiAssetV4",
        target: "MultiLocationV4"
      },
      NoteUnlockable: {
        asset: "MultiAssetV4",
        owner: "MultiLocationV4"
      },
      RequestUnlock: {
        asset: "MultiAssetV4",
        locker: "MultiLocationV4"
      },
      SetFeesMode: {
        jitWithdraw: "bool"
      },
      SetTopic: "[u8;32]",
      ClearTopic: "Null",
      AliasOrigin: "MultiLocationV4",
      UnpaidExecution: {
        weightLimit: "WeightLimitV3",
        checkOrigin: "Option<MultiLocationV4>"
      }
    }
  },
  OutcomeV4: {
    _enum: {
      Complete: {
        used: "WeightV2"
      },
      Incomplete: {
        used: "WeightV2",
        error: "XcmErrorV3"
      },
      Error: {
        error: "XcmErrorV3"
      }
    }
  },
  WildMultiAssetV4: {
    _enum: {
      All: "Null",
      AllOf: {
        id: "AssetIdV4",
        fun: "WildFungibilityV4"
      },
      AllCounted: "Compact<u32>",
      AllOfCounted: {
        id: "AssetIdV4",
        fun: "WildFungibilityV4",
        count: "Compact<u32>"
      }
    }
  },
  VersionV4: "u32",
  XcmV4: "Vec<InstructionV4>",
  XcmErrorV4: "XcmErrorV3"
};

// node_modules/@polkadot/types/interfaces/xcm/definitions.js
var XCM_LATEST = "V4";
var xcm = {
  XcmOrigin: {
    _enum: {
      Xcm: "MultiLocation"
    }
  },
  XcmpMessageFormat: {
    _enum: ["ConcatenatedVersionedXcm", "ConcatenatedEncodedBlob", "Signals"]
  },
  XcmAssetId: {
    _enum: {
      Concrete: "MultiLocation",
      Abstract: "Bytes"
    }
  },
  InboundStatus: {
    _enum: ["Ok", "Suspended"]
  },
  OutboundStatus: {
    _enum: ["Ok", "Suspended"]
  },
  MultiAssets: "Vec<MultiAsset>"
};
var location = {
  BodyId: {
    _enum: {
      Unit: "Null",
      Named: "Vec<u8>",
      Index: "Compact<u32>",
      Executive: "Null",
      Technical: "Null",
      Legislative: "Null",
      Judicial: "Null"
    }
  },
  BodyPart: {
    _enum: {
      Voice: "Null",
      Members: "Compact<u32>",
      Fraction: {
        nom: "Compact<u32>",
        denom: "Compact<u32>"
      },
      AtLeastProportion: {
        nom: "Compact<u32>",
        denom: "Compact<u32>"
      },
      MoreThanProportion: {
        nom: "Compact<u32>",
        denom: "Compact<u32>"
      }
    }
  },
  InteriorMultiLocation: "Junctions",
  NetworkId: {
    _enum: {
      Any: "Null",
      Named: "Vec<u8>",
      Polkadot: "Null",
      Kusama: "Null"
    }
  }
};
var definitions_default63 = {
  rpc: {},
  types: {
    ...location,
    ...xcm,
    ...v02,
    ...v16,
    ...v2,
    ...v3,
    ...v42,
    ...mapXcmTypes(XCM_LATEST),
    DoubleEncodedCall: {
      encoded: "Bytes"
    },
    XcmOriginKind: {
      _enum: ["Native", "SovereignAccount", "Superuser", "Xcm"]
    },
    Outcome: {
      _enum: {
        Complete: "Weight",
        Incomplete: "(Weight, XcmErrorV0)",
        Error: "XcmErrorV0"
      }
    },
    QueryId: "u64",
    QueryStatus: {
      _enum: {
        Pending: {
          responder: "VersionedMultiLocation",
          maybeNotify: "Option<(u8, u8)>",
          timeout: "BlockNumber"
        },
        Ready: {
          response: "VersionedResponse",
          at: "BlockNumber"
        }
      }
    },
    QueueConfigData: {
      suspendThreshold: "u32",
      dropThreshold: "u32",
      resumeThreshold: "u32",
      thresholdWeight: "Weight",
      weightRestrictDecay: "Weight"
    },
    VersionMigrationStage: {
      _enum: {
        MigrateSupportedVersion: "Null",
        MigrateVersionNotifiers: "Null",
        NotifyCurrentTargets: "Option<Bytes>",
        MigrateAndNotifyOldTargets: "Null"
      }
    },
    VersionedMultiAsset: {
      _enum: {
        V0: "MultiAssetV0",
        V1: "MultiAssetV1",
        V2: "MultiAssetV2",
        V3: "MultiAssetV3",
        V4: "MultiAssetV4"
      }
    },
    VersionedMultiAssets: {
      _enum: {
        V0: "Vec<MultiAssetV0>",
        V1: "MultiAssetsV1",
        V2: "MultiAssetsV2",
        V3: "MultiAssetsV3",
        V4: "MultiAssetsV4"
      }
    },
    VersionedMultiLocation: {
      _enum: {
        V0: "MultiLocationV0",
        V1: "MultiLocationV1",
        V2: "MultiLocationV2",
        V3: "MultiLocationV3",
        V4: "MultiLocationV4"
      }
    },
    VersionedResponse: {
      V0: "ResponseV0",
      V1: "ResponseV1",
      V2: "ResponseV2",
      V3: "ResponseV3",
      V4: "ResponseV4"
    },
    VersionedXcm: {
      _enum: {
        V0: "XcmV0",
        V1: "XcmV1",
        V2: "XcmV2",
        V3: "XcmV3",
        V4: "XcmV4"
      }
    },
    XcmVersion: "u32"
  }
};

// node_modules/@polkadot/types/interfaces/xcmPaymentApi/runtime.js
var runtime29 = {
  XcmPaymentApi: [
    {
      methods: {
        query_acceptable_payment_assets: {
          description: "The API to query acceptable payment assets",
          params: [
            {
              name: "version",
              type: "u32"
            }
          ],
          type: "Result<Vec<XcmVersionedAssetId>, XcmPaymentApiError>"
        },
        query_weight_to_asset_fee: {
          description: "",
          params: [
            {
              name: "weight",
              type: "WeightV2"
            },
            {
              name: "asset",
              type: "XcmVersionedAssetId"
            }
          ],
          type: "Result<u128, XcmPaymentApiError>"
        },
        query_xcm_weight: {
          description: "",
          params: [
            {
              name: "message",
              type: "XcmVersionedXcm"
            }
          ],
          type: "Result<WeightV2, XcmPaymentApiError>"
        }
      },
      version: 1
    }
  ]
};

// node_modules/@polkadot/types/interfaces/xcmPaymentApi/definitions.js
var definitions_default64 = {
  rpc: {},
  runtime: runtime29,
  types: {
    XcmPaymentApiError: {
      _enum: [
        "Unimplemented",
        "VersionedConversionFailed",
        "WeightNotComputable",
        "UnhandledXcmVersion",
        "AssetNotFound"
      ]
    }
  }
};

// node_modules/@polkadot/types/interfaces/xcmRuntimeApi/runtime.js
var runtime30 = {
  LocationToAccountApi: [
    {
      methods: {
        convert_location: {
          description: "Converts `Location` to `AccountId`",
          params: [
            {
              name: "location",
              type: "XcmVersionedLocation"
            }
          ],
          type: "Result<AccountId, Error>"
        }
      },
      version: 1
    }
  ]
};

// node_modules/@polkadot/types/interfaces/xcmRuntimeApi/definitions.js
var definitions_default65 = {
  rpc: {},
  runtime: runtime30,
  types: {
    Error: {
      _enum: ["Unsupported", "VersionedConversionFailed"]
    }
  }
};

// node_modules/@polkadot/types/interfaces/contractsAbi/definitions.js
var layout = {
  ContractCryptoHasher: {
    _enum: ["Blake2x256", "Sha2x256", "Keccak256"]
  },
  ContractDiscriminant: "u32",
  ContractLayoutArray: {
    offset: "ContractLayoutKey",
    len: "u32",
    cellsPerElem: "u64",
    layout: "ContractStorageLayout"
  },
  ContractLayoutCell: {
    key: "ContractLayoutKey",
    ty: "SiLookupTypeId"
  },
  ContractLayoutEnum: {
    dispatchKey: "ContractLayoutKey",
    variants: "BTreeMap<ContractDiscriminant, ContractLayoutStruct>"
  },
  ContractLayoutHash: {
    offset: "ContractLayoutKey",
    strategy: "ContractLayoutHashingStrategy",
    layout: "ContractStorageLayout"
  },
  ContractLayoutHashingStrategy: {
    hasher: "ContractCryptoHasher",
    postfix: "Vec<u8>",
    prefix: "Vec<u8>"
  },
  ContractLayoutKey: "[u8; 32]",
  ContractLayoutStruct: {
    fields: "Vec<ContractLayoutStructField>"
  },
  ContractLayoutStructField: {
    layout: "ContractStorageLayout",
    name: "Text"
  },
  ContractStorageLayout: {
    _enum: {
      Cell: "ContractLayoutCell",
      Hash: "ContractLayoutHash",
      Array: "ContractLayoutArray",
      Struct: "ContractLayoutStruct",
      Enum: "ContractLayoutEnum"
    }
  }
};
var spec = {
  ContractConstructorSpecV0: {
    name: "Text",
    selector: "ContractSelector",
    args: "Vec<ContractMessageParamSpecV0>",
    docs: "Vec<Text>"
  },
  ContractConstructorSpecV1: {
    name: "Vec<Text>",
    selector: "ContractSelector",
    args: "Vec<ContractMessageParamSpecV0>",
    docs: "Vec<Text>"
  },
  ContractConstructorSpecV2: {
    label: "Text",
    selector: "ContractSelector",
    args: "Vec<ContractMessageParamSpecV2>",
    docs: "Vec<Text>"
  },
  ContractConstructorSpecV3: {
    label: "Text",
    selector: "ContractSelector",
    payable: "bool",
    args: "Vec<ContractMessageParamSpecV2>",
    docs: "Vec<Text>"
  },
  ContractConstructorSpecV4: {
    label: "Text",
    selector: "ContractSelector",
    payable: "bool",
    args: "Vec<ContractMessageParamSpecV2>",
    docs: "Vec<Text>",
    default: "bool",
    returnType: "Option<ContractTypeSpec>"
  },
  ContractContractSpecV0: {
    constructors: "Vec<ContractConstructorSpecV0>",
    messages: "Vec<ContractMessageSpecV0>",
    events: "Vec<ContractEventSpecV0>",
    docs: "Vec<Text>"
  },
  ContractContractSpecV1: {
    constructors: "Vec<ContractConstructorSpecV1>",
    messages: "Vec<ContractMessageSpecV1>",
    events: "Vec<ContractEventSpecV1>",
    docs: "Vec<Text>"
  },
  ContractContractSpecV2: {
    constructors: "Vec<ContractConstructorSpecV2>",
    messages: "Vec<ContractMessageSpecV2>",
    events: "Vec<ContractEventSpecV2>",
    docs: "Vec<Text>"
  },
  ContractContractSpecV3: {
    constructors: "Vec<ContractConstructorSpecV3>",
    messages: "Vec<ContractMessageSpecV2>",
    events: "Vec<ContractEventSpecV2>",
    docs: "Vec<Text>"
  },
  ContractContractSpecV4: {
    constructors: "Vec<ContractConstructorSpecV4>",
    messages: "Vec<ContractMessageSpecV3>",
    events: "Vec<ContractEventSpecV2>",
    docs: "Vec<Text>",
    environment: "ContractEnvironmentV4"
  },
  ContractContractSpecV5: {
    constructors: "Vec<ContractConstructorSpecV4>",
    messages: "Vec<ContractMessageSpecV3>",
    events: "Vec<ContractEventSpecV3>",
    docs: "Vec<Text>",
    environment: "ContractEnvironmentV4"
  },
  ContractDisplayName: "SiPath",
  ContractEventParamSpecV0: {
    name: "Text",
    indexed: "bool",
    type: "ContractTypeSpec",
    docs: "Vec<Text>"
  },
  ContractEventParamSpecV2: {
    label: "Text",
    indexed: "bool",
    type: "ContractTypeSpec",
    docs: "Vec<Text>"
  },
  ContractEventSpecV0: {
    name: "Text",
    args: "Vec<ContractEventParamSpecV0>",
    docs: "Vec<Text>"
  },
  ContractEventSpecV1: {
    name: "Text",
    args: "Vec<ContractEventParamSpecV0>",
    docs: "Vec<Text>"
  },
  ContractEventSpecV2: {
    label: "Text",
    args: "Vec<ContractEventParamSpecV2>",
    docs: "Vec<Text>"
  },
  ContractEventSpecV3: {
    label: "Text",
    args: "Vec<ContractEventParamSpecV2>",
    docs: "Vec<Text>",
    module_path: "Text",
    signature_topic: "Option<[u8; 32]>"
  },
  ContractMessageParamSpecV0: {
    name: "Text",
    type: "ContractTypeSpec"
  },
  ContractMessageParamSpecV2: {
    label: "Text",
    type: "ContractTypeSpec"
  },
  ContractMessageSpecV0: {
    name: "Text",
    selector: "ContractSelector",
    mutates: "bool",
    payable: "bool",
    args: "Vec<ContractMessageParamSpecV0>",
    returnType: "Option<ContractTypeSpec>",
    docs: "Vec<Text>"
  },
  ContractMessageSpecV1: {
    name: "Vec<Text>",
    selector: "ContractSelector",
    mutates: "bool",
    payable: "bool",
    args: "Vec<ContractMessageParamSpecV0>",
    returnType: "Option<ContractTypeSpec>",
    docs: "Vec<Text>"
  },
  ContractMessageSpecV2: {
    label: "Text",
    selector: "ContractSelector",
    mutates: "bool",
    payable: "bool",
    args: "Vec<ContractMessageParamSpecV2>",
    returnType: "Option<ContractTypeSpec>",
    docs: "Vec<Text>"
  },
  ContractMessageSpecV3: {
    label: "Text",
    selector: "ContractSelector",
    mutates: "bool",
    payable: "bool",
    args: "Vec<ContractMessageParamSpecV2>",
    returnType: "Option<ContractTypeSpec>",
    docs: "Vec<Text>",
    default: "bool"
  },
  ContractSelector: "[u8; 4]",
  ContractTypeSpec: {
    type: "SiLookupTypeId",
    displayName: "ContractDisplayName"
  }
};
var latest = {
  ContractConstructorSpecLatest: "ContractConstructorSpecV4",
  ContractEventSpecLatest: "ContractEventSpecV3",
  ContractEventParamSpecLatest: "ContractEventParamSpecV2",
  ContractMessageParamSpecLatest: "ContractMessageParamSpecV2",
  ContractMessageSpecLatest: "ContractMessageSpecV3",
  ContractMetadataLatest: "ContractMetadataV5"
};
var definitions_default66 = {
  rpc: {},
  types: {
    ...layout,
    ...spec,
    ...latest,
    ContractProjectInfo: {
      source: "ContractProjectSource",
      contract: "ContractProjectContract"
    },
    ContractMetadataV0: {
      metadataVersion: "Text",
      types: "Vec<Si0Type>",
      spec: "ContractContractSpecV0"
    },
    ContractMetadataV1: {
      types: "Vec<PortableType>",
      spec: "ContractContractSpecV1"
    },
    ContractMetadataV2: {
      types: "Vec<PortableType>",
      spec: "ContractContractSpecV2"
    },
    ContractMetadataV3: {
      types: "Vec<PortableType>",
      spec: "ContractContractSpecV3"
    },
    ContractMetadataV4: {
      types: "Vec<PortableType>",
      spec: "ContractContractSpecV4",
      version: "Text"
    },
    ContractMetadataV5: {
      types: "Vec<PortableType>",
      spec: "ContractContractSpecV5",
      version: "u64"
    },
    ContractMetadata: {
      _enum: {
        V0: "ContractMetadataV0",
        V1: "ContractMetadataV1",
        V2: "ContractMetadataV2",
        V3: "ContractMetadataV3",
        V4: "ContractMetadataV4",
        V5: "ContractMetadataV5"
      }
    },
    ContractProjectV0: {
      metadataVersion: "Text",
      source: "ContractProjectSource",
      contract: "ContractProjectContract",
      types: "Vec<Si0Type>",
      spec: "ContractContractSpecV0"
    },
    ContractProject: "(ContractProjectInfo, ContractMetadata)",
    ContractProjectContract: {
      _alias: {
        docs: "documentation"
      },
      name: "Text",
      version: "Text",
      authors: "Vec<Text>",
      description: "Option<Text>",
      docs: "Option<Text>",
      repository: "Option<Text>",
      homepage: "Option<Text>",
      license: "Option<Text>"
    },
    ContractProjectSource: {
      _alias: {
        wasmHash: "hash"
      },
      wasmHash: "[u8; 32]",
      language: "Text",
      compiler: "Text",
      wasm: "Raw"
    },
    ContractEnvironmentV4: {
      _alias: {
        hashType: "hash"
      },
      // NOTE These are not marked optional in the Rust code, however since we
      // convert from older versions to newer, we may not have these fields.
      // The Option<...> works since our inputs are always JSON, so it will
      // be None when not specified.
      //
      // Additionally we don't mark the full structure as Option, rather we
      // do it on a per-field basis since fields may be added as the versions
      // progress.
      accountId: "Option<ContractTypeSpec>",
      balance: "Option<ContractTypeSpec>",
      blockNumber: "Option<ContractTypeSpec>",
      hashType: "Option<ContractTypeSpec>",
      timestamp: "Option<ContractTypeSpec>",
      maxEventTopics: "Option<u32>"
    }
  }
};

// node_modules/@polkadot/types/interfaces/eth/rpc.js
var netRpc = {
  listening: {
    aliasSection: "net",
    description: "Returns true if client is actively listening for network connections. Otherwise false.",
    params: [],
    type: "bool"
  },
  peerCount: {
    aliasSection: "net",
    description: "Returns number of peers connected to node.",
    params: [],
    type: "Text"
  },
  version: {
    aliasSection: "net",
    description: "Returns protocol version.",
    params: [],
    type: "Text"
  }
};
var web3Rpc = {
  clientVersion: {
    aliasSection: "web3",
    description: "Returns current client version.",
    params: [],
    type: "Text"
  },
  sha3: {
    aliasSection: "web3",
    description: "Returns sha3 of the given data",
    params: [{ name: "data", type: "Bytes" }],
    type: "H256"
  }
};
var rpc10 = {
  ...netRpc,
  ...web3Rpc,
  accounts: {
    description: "Returns accounts list.",
    params: [],
    type: "Vec<H160>"
  },
  blockNumber: {
    description: "Returns the blockNumber",
    params: [],
    type: "U256"
  },
  call: {
    description: "Call contract, returning the output data.",
    params: [
      {
        name: "request",
        type: "EthCallRequest"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "number",
        type: "BlockNumber"
      }
    ],
    type: "Bytes"
  },
  chainId: {
    description: "Returns the chain ID used for transaction signing at the current best block. None is returned if not available.",
    params: [],
    type: "U64"
  },
  coinbase: {
    description: "Returns block author.",
    params: [],
    type: "H160"
  },
  estimateGas: {
    description: "Estimate gas needed for execution of given contract.",
    params: [
      {
        name: "request",
        type: "EthCallRequest"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "number",
        type: "BlockNumber"
      }
    ],
    type: "U256"
  },
  feeHistory: {
    description: "Returns fee history for given block count & reward percentiles",
    params: [
      {
        name: "blockCount",
        type: "U256"
      },
      {
        name: "newestBlock",
        type: "BlockNumber"
      },
      {
        name: "rewardPercentiles",
        type: "Option<Vec<f64>>"
      }
    ],
    type: "EthFeeHistory"
  },
  gasPrice: {
    description: "Returns current gas price.",
    params: [],
    type: "U256"
  },
  getBalance: {
    description: "Returns balance of the given account.",
    params: [
      {
        name: "address",
        type: "H160"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "number",
        type: "BlockNumber"
      }
    ],
    type: "U256"
  },
  getBlockByHash: {
    description: "Returns block with given hash.",
    params: [
      {
        name: "hash",
        type: "H256"
      },
      {
        name: "full",
        type: "bool"
      }
    ],
    type: "Option<EthRichBlock>"
  },
  getBlockByNumber: {
    description: "Returns block with given number.",
    params: [
      {
        name: "block",
        type: "BlockNumber"
      },
      { name: "full", type: "bool" }
    ],
    type: "Option<EthRichBlock>"
  },
  getBlockTransactionCountByHash: {
    description: "Returns the number of transactions in a block with given hash.",
    params: [
      {
        name: "hash",
        type: "H256"
      }
    ],
    type: "U256"
  },
  getBlockTransactionCountByNumber: {
    description: "Returns the number of transactions in a block with given block number.",
    params: [
      {
        name: "block",
        type: "BlockNumber"
      }
    ],
    type: "U256"
  },
  getCode: {
    description: "Returns the code at given address at given time (block number).",
    params: [
      {
        name: "address",
        type: "H160"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "number",
        type: "BlockNumber"
      }
    ],
    type: "Bytes"
  },
  getFilterChanges: {
    description: "Returns filter changes since last poll.",
    params: [
      {
        name: "index",
        type: "U256"
      }
    ],
    type: "EthFilterChanges"
  },
  getFilterLogs: {
    description: "Returns all logs matching given filter (in a range 'from' - 'to').",
    params: [
      {
        name: "index",
        type: "U256"
      }
    ],
    type: "Vec<EthLog>"
  },
  getLogs: {
    description: "Returns logs matching given filter object.",
    params: [
      {
        name: "filter",
        type: "EthFilter"
      }
    ],
    type: "Vec<EthLog>"
  },
  getProof: {
    description: "Returns proof for account and storage.",
    params: [
      {
        name: "address",
        type: "H160"
      },
      {
        name: "storageKeys",
        type: "Vec<H256>"
      },
      {
        name: "number",
        type: "BlockNumber"
      }
    ],
    type: "EthAccount"
  },
  getStorageAt: {
    description: "Returns content of the storage at given address.",
    params: [
      {
        name: "address",
        type: "H160"
      },
      {
        name: "index",
        type: "U256"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "number",
        type: "BlockNumber"
      }
    ],
    type: "H256"
  },
  getTransactionByBlockHashAndIndex: {
    description: "Returns transaction at given block hash and index.",
    params: [
      {
        name: "hash",
        type: "H256"
      },
      {
        name: "index",
        type: "U256"
      }
    ],
    type: "EthTransaction"
  },
  getTransactionByBlockNumberAndIndex: {
    description: "Returns transaction by given block number and index.",
    params: [
      {
        name: "number",
        type: "BlockNumber"
      },
      {
        name: "index",
        type: "U256"
      }
    ],
    type: "EthTransaction"
  },
  getTransactionByHash: {
    description: "Get transaction by its hash.",
    params: [
      {
        name: "hash",
        type: "H256"
      }
    ],
    type: "EthTransaction"
  },
  getTransactionCount: {
    description: "Returns the number of transactions sent from given address at given time (block number).",
    params: [
      {
        name: "address",
        type: "H160"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "number",
        type: "BlockNumber"
      }
    ],
    type: "U256"
  },
  getTransactionReceipt: {
    description: "Returns transaction receipt by transaction hash.",
    params: [
      {
        name: "hash",
        type: "H256"
      }
    ],
    type: "EthReceipt"
  },
  getUncleByBlockHashAndIndex: {
    description: "Returns an uncles at given block and index.",
    params: [
      {
        name: "hash",
        type: "H256"
      },
      {
        name: "index",
        type: "U256"
      }
    ],
    type: "EthRichBlock"
  },
  getUncleByBlockNumberAndIndex: {
    description: "Returns an uncles at given block and index.",
    params: [
      {
        name: "number",
        type: "BlockNumber"
      },
      {
        name: "index",
        type: "U256"
      }
    ],
    type: "EthRichBlock"
  },
  getUncleCountByBlockHash: {
    description: "Returns the number of uncles in a block with given hash.",
    params: [
      {
        name: "hash",
        type: "H256"
      }
    ],
    type: "U256"
  },
  getUncleCountByBlockNumber: {
    description: "Returns the number of uncles in a block with given block number.",
    params: [
      {
        name: "number",
        type: "BlockNumber"
      }
    ],
    type: "U256"
  },
  getWork: {
    description: "Returns the hash of the current block, the seedHash, and the boundary condition to be met.",
    params: [],
    type: "EthWork"
  },
  hashrate: {
    description: "Returns the number of hashes per second that the node is mining with.",
    params: [],
    type: "U256"
  },
  maxPriorityFeePerGas: {
    description: "Returns max priority fee per gas",
    params: [],
    type: "U256"
  },
  mining: {
    description: "Returns true if client is actively mining new blocks.",
    params: [],
    type: "bool"
  },
  newBlockFilter: {
    description: "Returns id of new block filter.",
    params: [],
    type: "U256"
  },
  newFilter: {
    description: "Returns id of new filter.",
    params: [
      {
        name: "filter",
        type: "EthFilter"
      }
    ],
    type: "U256"
  },
  newPendingTransactionFilter: {
    description: "Returns id of new block filter.",
    params: [],
    type: "U256"
  },
  protocolVersion: {
    description: "Returns protocol version encoded as a string (quotes are necessary).",
    params: [],
    type: "u64"
  },
  sendRawTransaction: {
    description: "Sends signed transaction, returning its hash.",
    params: [
      {
        name: "bytes",
        type: "Bytes"
      }
    ],
    type: "H256"
  },
  sendTransaction: {
    description: "Sends transaction; will block waiting for signer to return the transaction hash",
    params: [
      {
        name: "tx",
        type: "EthTransactionRequest"
      }
    ],
    type: "H256"
  },
  submitHashrate: {
    description: "Used for submitting mining hashrate.",
    params: [
      {
        name: "index",
        type: "U256"
      },
      {
        name: "hash",
        type: "H256"
      }
    ],
    type: "bool"
  },
  submitWork: {
    description: "Used for submitting a proof-of-work solution.",
    params: [
      {
        name: "nonce",
        type: "H64"
      },
      {
        name: "headerHash",
        type: "H256"
      },
      {
        name: "mixDigest",
        type: "H256"
      }
    ],
    type: "bool"
  },
  subscribe: {
    description: "Subscribe to Eth subscription.",
    params: [
      { name: "kind", type: "EthSubKind" },
      {
        isOptional: true,
        name: "params",
        type: "EthSubParams"
      }
    ],
    pubsub: [
      "subscription",
      "subscribe",
      "unsubscribe"
    ],
    type: "Null"
  },
  syncing: {
    description: "Returns an object with data about the sync status or false.",
    params: [],
    type: "EthSyncStatus"
  },
  uninstallFilter: {
    description: "Uninstalls filter.",
    params: [
      {
        name: "index",
        type: "U256"
      }
    ],
    type: "bool"
  }
};

// node_modules/@polkadot/types/interfaces/eth/runtime.js
var ethMethodsV4 = {
  account_basic: {
    description: "Returns pallet_evm::Accounts by address.",
    params: [
      {
        name: "address",
        type: "H160"
      }
    ],
    type: "EvmAccount"
  },
  account_code_at: {
    description: "For a given account address, returns pallet_evm::AccountCodes.",
    params: [
      {
        name: "address",
        type: "H160"
      }
    ],
    type: "Bytes"
  },
  author: {
    description: "Returns the converted FindAuthor::find_author authority id.",
    params: [],
    type: "H160"
  },
  call: {
    description: "Returns a frame_ethereum::call response. If `estimate` is true,",
    params: [
      {
        name: "from",
        type: "H160"
      },
      {
        name: "to",
        type: "H160"
      },
      {
        name: "data",
        type: "Vec<u8>"
      },
      {
        name: "value",
        type: "U256"
      },
      {
        name: "gasLimit",
        type: "U256"
      },
      {
        name: "maxFeePerGas",
        type: "Option<U256>"
      },
      {
        name: "maxPriorityFeePerGas",
        type: "Option<U256>"
      },
      {
        name: "nonce",
        type: "Option<U256>"
      },
      {
        name: "estimate",
        type: "bool"
      },
      {
        name: "accessList",
        type: "Option<Vec<(H160, Vec<H256>)>>"
      }
    ],
    type: "Result<EvmCallInfo, DispatchError>"
  },
  chain_id: {
    description: "Returns runtime defined pallet_evm::ChainId.",
    params: [],
    type: "u64"
  },
  create: {
    description: "Returns a frame_ethereum::call response. If `estimate` is true,",
    params: [
      {
        name: "from",
        type: "H160"
      },
      {
        name: "data",
        type: "Vec<u8>"
      },
      {
        name: "value",
        type: "U256"
      },
      {
        name: "gasLimit",
        type: "U256"
      },
      {
        name: "maxFeePerGas",
        type: "Option<U256>"
      },
      {
        name: "maxPriorityFeePerGas",
        type: "Option<U256>"
      },
      {
        name: "nonce",
        type: "Option<U256>"
      },
      {
        name: "estimate",
        type: "bool"
      },
      {
        name: "accessList",
        type: "Option<Vec<(H160, Vec<H256>)>>"
      }
    ],
    type: "Result<EvmCreateInfo, DispatchError>"
  },
  current_all: {
    description: "Return all the current data for a block in a single runtime call.",
    params: [],
    type: "(Option<BlockV2>, Option<Vec<EthReceiptV3>>, Option<Vec<EthTransactionStatus>>)"
  },
  current_block: {
    description: "Return the current block.",
    params: [],
    type: "BlockV2"
  },
  current_receipts: {
    description: "Return the current receipt.",
    params: [],
    type: "Option<Vec<EthReceiptV3>>"
  },
  current_transaction_statuses: {
    description: "Return the current transaction status.",
    params: [],
    type: "Option<Vec<EthTransactionStatus>>"
  },
  elasticity: {
    description: "Return the elasticity multiplier.",
    params: [],
    type: "Option<Permill>"
  },
  extrinsic_filter: {
    description: "Receives a `Vec<OpaqueExtrinsic>` and filters all the ethereum transactions.",
    params: [
      {
        name: "xts",
        type: "Vec<Extrinsic>"
      }
    ],
    type: "Vec<TransactionV2>"
  },
  gas_price: {
    description: "Returns FixedGasPrice::min_gas_price",
    params: [],
    type: "u256"
  },
  storage_at: {
    description: "For a given account address and index, returns pallet_evm::AccountStorages.",
    params: [
      {
        name: "address",
        type: "H160"
      },
      {
        name: "index",
        type: "u256"
      }
    ],
    type: "H256"
  }
};
var ethMethodsV5 = {
  call: {
    description: "Returns a frame_ethereum::call response. If `estimate` is true,",
    params: [
      {
        name: "from",
        type: "H160"
      },
      {
        name: "to",
        type: "H160"
      },
      {
        name: "data",
        type: "Vec<u8>"
      },
      {
        name: "value",
        type: "U256"
      },
      {
        name: "gasLimit",
        type: "U256"
      },
      {
        name: "maxFeePerGas",
        type: "Option<U256>"
      },
      {
        name: "maxPriorityFeePerGas",
        type: "Option<U256>"
      },
      {
        name: "nonce",
        type: "Option<U256>"
      },
      {
        name: "estimate",
        type: "bool"
      },
      {
        name: "accessList",
        type: "Option<Vec<(H160, Vec<H256>)>>"
      }
    ],
    type: "Result<EvmCallInfoV2, DispatchError>"
  },
  create: {
    description: "Returns a frame_ethereum::call response. If `estimate` is true,",
    params: [
      {
        name: "from",
        type: "H160"
      },
      {
        name: "data",
        type: "Vec<u8>"
      },
      {
        name: "value",
        type: "U256"
      },
      {
        name: "gasLimit",
        type: "U256"
      },
      {
        name: "maxFeePerGas",
        type: "Option<U256>"
      },
      {
        name: "maxPriorityFeePerGas",
        type: "Option<U256>"
      },
      {
        name: "nonce",
        type: "Option<U256>"
      },
      {
        name: "estimate",
        type: "bool"
      },
      {
        name: "accessList",
        type: "Option<Vec<(H160, Vec<H256>)>>"
      }
    ],
    type: "Result<EvmCreateInfoV2, DispatchError>"
  }
};
var runtime31 = {
  ConvertTransactionRuntimeApi: [
    {
      methods: {
        convert_transaction: {
          description: "Converts an Ethereum-style transaction to Extrinsic",
          params: [
            {
              name: "transaction",
              type: "TransactionV2"
            }
          ],
          type: "Extrinsic"
        }
      },
      version: 2
    }
  ],
  DebugRuntimeApi: [
    {
      methods: {
        trace_block: {
          description: "Trace all block extrinsics",
          params: [
            {
              name: "extrinsics",
              type: "Vec<Extrinsic>"
            },
            {
              name: "knownTransactions",
              type: "Vec<H256>"
            }
          ],
          type: "Result<(), DispatchError>"
        },
        trace_transaction: {
          description: "Trace transaction extrinsics",
          params: [
            {
              name: "extrinsics",
              type: "Vec<Extrinsic>"
            },
            {
              name: "transaction",
              type: "EthTransaction"
            }
          ],
          type: "Result<(), DispatchError>"
        }
      },
      version: 4
    }
  ],
  EthereumRuntimeRPCApi: [
    {
      methods: {
        ...ethMethodsV4
      },
      version: 4
    },
    {
      methods: {
        ...ethMethodsV4,
        ...ethMethodsV5
      },
      version: 5
    }
  ]
};

// node_modules/@polkadot/types/interfaces/eth/definitions.js
var V0 = {
  BlockV0: {
    header: "EthHeader",
    transactions: "Vec<TransactionV0>",
    ommers: "Vec<EthHeader>"
  },
  LegacyTransaction: {
    nonce: "U256",
    gasPrice: "U256",
    gasLimit: "U256",
    action: "EthTransactionAction",
    value: "U256",
    input: "Bytes",
    signature: "EthTransactionSignature"
  },
  TransactionV0: "LegacyTransaction"
};
var V1 = {
  BlockV1: {
    header: "EthHeader",
    transactions: "Vec<TransactionV1>",
    ommers: "Vec<EthHeader>"
  },
  EIP2930Transaction: {
    chainId: "u64",
    nonce: "U256",
    gasPrice: "U256",
    gasLimit: "U256",
    action: "EthTransactionAction",
    value: "U256",
    input: "Bytes",
    accessList: "EthAccessList",
    oddYParity: "bool",
    r: "H256",
    s: "H256"
  },
  TransactionV1: {
    _enum: {
      Legacy: "LegacyTransaction",
      EIP2930: "EIP2930Transaction"
    }
  }
};
var V2 = {
  BlockV2: {
    header: "EthHeader",
    transactions: "Vec<TransactionV2>",
    ommers: "Vec<EthHeader>"
  },
  EIP1559Transaction: {
    chainId: "u64",
    nonce: "U256",
    maxPriorityFeePerGas: "U256",
    maxFeePerGas: "U256",
    gasLimit: "U256",
    action: "EthTransactionAction",
    value: "U256",
    input: "Bytes",
    accessList: "EthAccessList",
    oddYParity: "bool",
    r: "H256",
    s: "H256"
  },
  TransactionV2: {
    _enum: {
      Legacy: "LegacyTransaction",
      EIP2930: "EIP2930Transaction",
      EIP1559: "EIP1559Transaction"
    }
  }
};
var types = {
  ...V0,
  ...V1,
  ...V2,
  EthereumAccountId: "GenericEthereumAccountId",
  EthereumAddress: "GenericEthereumAccountId",
  EthereumLookupSource: "GenericEthereumLookupSource",
  EthereumSignature: "[u8; 65]",
  EthAccessListItem: {
    address: "EthAddress",
    slots: "Vec<H256>"
  },
  EthAccessList: "Vec<EthAccessListItem>",
  EthAccount: {
    address: "EthAddress",
    balance: "U256",
    nonce: "U256",
    codeHash: "H256",
    storageHash: "H256",
    accountProof: "Vec<Bytes>",
    storageProof: "Vec<EthStorageProof>"
  },
  EthAddress: "H160",
  EthBlock: {
    header: "EthHeader",
    transactions: "Vec<EthTransaction>",
    ommers: "Vec<EthHeader>"
  },
  EthHeader: {
    parentHash: "H256",
    ommersHash: "H256",
    beneficiary: "EthAddress",
    stateRoot: "H256",
    transactionsRoot: "H256",
    receiptsRoot: "H256",
    logsBloom: "EthBloom",
    difficulty: "U256",
    number: "U256",
    gasLimit: "U256",
    gasUsed: "U256",
    timestamp: "u64",
    extraData: "Bytes",
    mixMash: "H256",
    nonce: "H64"
  },
  EthRichBlock: {
    _alias: {
      blockHash: "hash",
      blockSize: "size"
    },
    blockHash: "Option<H256>",
    parentHash: "H256",
    sha3Uncles: "H256",
    author: "EthAddress",
    miner: "EthAddress",
    stateRoot: "H256",
    transactionsRoot: "H256",
    receiptsRoot: "H256",
    number: "Option<U256>",
    gasUsed: "U256",
    gasLimit: "U256",
    extraData: "Bytes",
    logsBloom: "EthBloom",
    timestamp: "U256",
    difficulty: "U256",
    totalDifficulty: "Option<U256>",
    sealFields: "Vec<Bytes>",
    uncles: "Vec<H256>",
    transactions: "Vec<EthTransaction>",
    blockSize: "Option<U256>"
  },
  EthBloom: "H2048",
  EthCallRequest: {
    from: "Option<EthAddress>",
    to: "Option<EthAddress>",
    gasPrice: "Option<U256>",
    gas: "Option<U256>",
    value: "Option<U256>",
    data: "Option<Bytes>",
    nonce: "Option<U256>"
  },
  EthFeeHistory: {
    oldestBlock: "U256",
    baseFeePerGas: "Vec<U256>",
    gasUsedRatio: "Vec<f64>",
    reward: "Option<Vec<Vec<U256>>>"
  },
  EthFilter: {
    fromBlock: "Option<BlockNumber>",
    toBlock: "Option<BlockNumber>",
    blockHash: "Option<H256>",
    address: "Option<EthFilterAddress>",
    topics: "Option<EthFilterTopic>"
  },
  EthFilterAddress: {
    _enum: {
      Single: "EthAddress",
      Multiple: "Vec<EthAddress>",
      Null: "Null"
    }
  },
  EthFilterChanges: {
    _enum: {
      Logs: "Vec<EthLog>",
      Hashes: "Vec<H256>",
      Empty: "Null"
    }
  },
  EthFilterTopic: {
    _enum: {
      Single: "EthFilterTopicInner",
      Multiple: "Vec<EthFilterTopicInner>",
      Null: "Null"
    }
  },
  EthFilterTopicEntry: "Option<H256>",
  EthFilterTopicInner: {
    _enum: {
      Single: "EthFilterTopicEntry",
      Multiple: "Vec<EthFilterTopicEntry>",
      Null: "Null"
    }
  },
  EthRichHeader: {
    _alias: {
      blockHash: "hash",
      blockSize: "size"
    },
    blockHash: "Option<H256>",
    parentHash: "H256",
    sha3Uncles: "H256",
    author: "EthAddress",
    miner: "EthAddress",
    stateRoot: "H256",
    transactionsRoot: "H256",
    receiptsRoot: "H256",
    number: "Option<U256>",
    gasUsed: "U256",
    gasLimit: "U256",
    extraData: "Bytes",
    logsBloom: "EthBloom",
    timestamp: "U256",
    difficulty: "U256",
    sealFields: "Vec<Bytes>",
    blockSize: "Option<U256>"
  },
  EthLog: {
    address: "EthAddress",
    topics: "Vec<H256>",
    data: "Bytes",
    blockHash: "Option<H256>",
    blockNumber: "Option<U256>",
    transactionHash: "Option<H256>",
    transactionIndex: "Option<U256>",
    logIndex: "Option<U256>",
    transactionLogIndex: "Option<U256>",
    removed: "bool"
  },
  EthReceipt: {
    transactionHash: "Option<H256>",
    transactionIndex: "Option<U256>",
    blockHash: "Option<H256>",
    from: "Option<EthAddress>",
    to: "Option<EthAddress>",
    blockNumber: "Option<U256>",
    cumulativeGasUsed: "U256",
    gasUsed: "Option<U256>",
    contractAddress: "Option<EthAddress>",
    logs: "Vec<EthLog>",
    root: "Option<H256>",
    logsBloom: "EthBloom",
    statusCode: "Option<U64>"
  },
  // not convinced, however the original commit matches, so... (maybe V3 is incorrect?)
  EthReceiptV0: "EthReceipt",
  EthReceiptV3: "EthReceipt",
  EthStorageProof: {
    key: "U256",
    value: "U256",
    proof: "Vec<Bytes>"
  },
  EthSubKind: {
    _enum: ["newHeads", "logs", "newPendingTransactions", "syncing"]
  },
  EthSubParams: {
    _enum: {
      None: "Null",
      Logs: "EthFilter"
    }
  },
  EthSubResult: {
    _enum: {
      Header: "EthRichHeader",
      Log: "EthLog",
      TransactionHash: "H256",
      SyncState: "EthSyncStatus"
    }
  },
  EthSyncInfo: {
    startingBlock: "U256",
    currentBlock: "U256",
    highestBlock: "U256",
    warpChunksAmount: "Option<U256>",
    warpChunksProcessed: "Option<U256>"
  },
  EthSyncStatus: {
    _enum: {
      Info: "EthSyncInfo",
      None: "Null"
    }
  },
  EthTransaction: {
    hash: "H256",
    nonce: "U256",
    blockHash: "Option<H256>",
    blockNumber: "Option<U256>",
    transactionIndex: "Option<U256>",
    from: "H160",
    to: "Option<H160>",
    value: "U256",
    gasPrice: "Option<U256>",
    maxFeePerGas: "Option<U256>",
    maxPriorityFeePerGas: "Option<U256>",
    gas: "U256",
    input: "Bytes",
    creates: "Option<H160>",
    raw: "Bytes",
    publicKey: "Option<H512>",
    chainId: "Option<U64>",
    standardV: "U256",
    v: "U256",
    r: "U256",
    s: "U256",
    accessList: "Option<Vec<EthAccessListItem>>",
    transactionType: "Option<U256>"
  },
  EthTransactionSignature: {
    v: "u64",
    r: "H256",
    s: "H256"
  },
  EthTransactionAction: {
    _enum: {
      Call: "H160",
      Create: "Null"
    }
  },
  EthTransactionCondition: {
    _enum: {
      block: "u64",
      time: "u64"
    }
  },
  EthTransactionRequest: {
    from: "Option<EthAddress>",
    to: "Option<EthAddress>",
    gasPrice: "Option<U256>",
    gas: "Option<U256>",
    value: "Option<U256>",
    data: "Option<Bytes>",
    nonce: "Option<U256>"
  },
  EthTransactionStatus: {
    transactionHash: "H256",
    transactionIndex: "u32",
    from: "EthAddress",
    to: "Option<EthAddress>",
    contractAddress: "Option<EthAddress>",
    logs: "Vec<EthLog>",
    logsBloom: "EthBloom"
  },
  EthWork: {
    powHash: "H256",
    seedHash: "H256",
    target: "H256",
    number: "Option<u64>"
  }
};
var definitions_default67 = { rpc: rpc10, runtime: runtime31, types };

// node_modules/@polkadot/types/interfaces/nimbus/runtime.js
var runtime32 = {
  // deprecated, the NimbusApi is current - this is for backwards compat
  AuthorFilterAPI: [
    {
      methods: {
        can_author: {
          description: "The runtime api used to predict whether an author will be eligible in the given slot",
          params: [
            {
              name: "author",
              type: "AccountId"
            },
            {
              name: "relayParent",
              type: "u32"
            },
            {
              name: "parentHeader",
              type: "Header"
            }
          ],
          type: "bool"
        }
      },
      version: 2
    },
    {
      methods: {
        can_author: {
          description: "The runtime api used to predict whether an author will be eligible in the given slot",
          params: [
            {
              name: "author",
              type: "AccountId"
            },
            {
              name: "relayParent",
              type: "u32"
            }
          ],
          type: "bool"
        }
      },
      version: 1
    }
  ],
  NimbusApi: [
    {
      methods: {
        can_author: {
          description: "The runtime api used to predict whether a Nimbus author will be eligible in the given slot",
          params: [
            {
              name: "author",
              type: "AccountId"
            },
            {
              name: "relayParent",
              type: "u32"
            },
            {
              name: "parentHeader",
              type: "Header"
            }
          ],
          type: "bool"
        }
      },
      version: 1
    }
  ]
};

// node_modules/@polkadot/types/interfaces/nimbus/definitions.js
var definitions_default68 = {
  rpc: {},
  runtime: runtime32,
  types: {}
};

// node_modules/@polkadot/types/interfaces/ormlOracle/runtime.js
var runtime33 = {
  // https://github.com/open-web3-stack/open-runtime-module-library/blob/b57f88b39cd547e2fb51727d8bb9bcc64fddf8b5/oracle/rpc/runtime-api/src/lib.rs#L12-L21
  OracleApi: [
    {
      methods: {
        get_all_values: {
          description: "Retrieves all values",
          params: [
            {
              name: "providerId",
              // This is a Codec type
              type: "Raw"
            }
          ],
          // This won't actually work as expected - since we have
          // no information about the actual Raw sizes, we cannot
          // handle it in this format (it would need an override
          // for the specific Codec). So return the Raw value.
          // type: 'Vec<(Raw, Option<Raw>)>'
          type: "Raw"
        },
        get_value: {
          description: "Retrieves a single value",
          params: [
            {
              name: "providerId",
              // This is a Codec type
              type: "Raw"
            },
            {
              name: "key",
              // This is a Codec type
              type: "Raw"
            }
          ],
          // This is an Option<Codec> type
          type: "Option<Raw>"
        }
      },
      version: 1
    }
  ]
};

// node_modules/@polkadot/types/interfaces/ormlOracle/definitions.js
var definitions_default69 = {
  rpc: {},
  runtime: runtime33,
  types: {}
};

// node_modules/@polkadot/types/interfaces/ormlTokens/runtime.js
var runtime34 = {
  // https://github.com/open-web3-stack/open-runtime-module-library/blob/b57f88b39cd547e2fb51727d8bb9bcc64fddf8b5/tokens/rpc/runtime-api/src/lib.rs#L11-L18
  TokensApi: [
    {
      methods: {
        query_existential_deposit: {
          description: "Query the existential amount for a specific currency",
          params: [
            {
              name: "currencyId",
              // This is CurrencyId, as per the return value, we are unsure
              // if this is specialized and/or global to the chain or not
              type: "Raw"
            }
          ],
          // This is Balance - since we don't understand enough about the way
          // in which this is used, we default to u128 here (it certainly could
          // be a specialized type that doesn't map to the on-chain Balance)
          type: "u128"
        }
      },
      version: 1
    }
  ]
};

// node_modules/@polkadot/types/interfaces/ormlTokens/definitions.js
var definitions_default70 = {
  rpc: {},
  runtime: runtime34,
  types: {}
};

// node_modules/@polkadot/types/interfaces/rpc/rpc.js
var rpc11 = {
  methods: {
    description: "Retrieves the list of RPC methods that are exposed by the node",
    params: [],
    type: "RpcMethods"
  }
};

// node_modules/@polkadot/types/interfaces/rpc/definitions.js
var definitions_default71 = {
  rpc: rpc11,
  types: {
    RpcMethods: {
      version: "u32",
      methods: "Vec<Text>"
    }
  }
};

// node_modules/@polkadot/types/interfaces/author/rpc.js
var rpc12 = {
  hasKey: {
    description: "Returns true if the keystore has private keys for the given public key and key type.",
    isUnsafe: true,
    params: [
      {
        name: "publicKey",
        type: "Bytes"
      },
      {
        name: "keyType",
        type: "Text"
      }
    ],
    type: "bool"
  },
  hasSessionKeys: {
    description: "Returns true if the keystore has private keys for the given session public keys.",
    isUnsafe: true,
    params: [
      {
        name: "sessionKeys",
        type: "Bytes"
      }
    ],
    type: "bool"
  },
  insertKey: {
    description: "Insert a key into the keystore.",
    isUnsafe: true,
    params: [
      {
        name: "keyType",
        type: "Text"
      },
      {
        name: "suri",
        type: "Text"
      },
      {
        name: "publicKey",
        type: "Bytes"
      }
    ],
    type: "Bytes"
  },
  pendingExtrinsics: {
    description: "Returns all pending extrinsics, potentially grouped by sender",
    params: [],
    type: "Vec<Extrinsic>"
  },
  removeExtrinsic: {
    description: "Remove given extrinsic from the pool and temporarily ban it to prevent reimporting",
    isUnsafe: true,
    params: [
      {
        name: "bytesOrHash",
        type: "Vec<ExtrinsicOrHash>"
      }
    ],
    type: "Vec<Hash>"
  },
  rotateKeys: {
    description: "Generate new session keys and returns the corresponding public keys",
    isUnsafe: true,
    params: [],
    type: "Bytes"
  },
  submitAndWatchExtrinsic: {
    description: "Submit and subscribe to watch an extrinsic until unsubscribed",
    isSigned: true,
    params: [
      {
        name: "extrinsic",
        type: "Extrinsic"
      }
    ],
    pubsub: [
      "extrinsicUpdate",
      "submitAndWatchExtrinsic",
      "unwatchExtrinsic"
    ],
    type: "ExtrinsicStatus"
  },
  submitExtrinsic: {
    description: "Submit a fully formatted extrinsic for block inclusion",
    isSigned: true,
    params: [
      {
        name: "extrinsic",
        type: "Extrinsic"
      }
    ],
    type: "Hash"
  }
};

// node_modules/@polkadot/types/interfaces/author/definitions.js
var definitions_default72 = {
  rpc: rpc12,
  types: {
    ExtrinsicOrHash: {
      _enum: {
        Hash: "Hash",
        Extrinsic: "Bytes"
      }
    },
    ExtrinsicStatus: {
      _enum: {
        Future: "Null",
        Ready: "Null",
        Broadcast: "Vec<Text>",
        InBlock: "Hash",
        Retracted: "Hash",
        FinalityTimeout: "Hash",
        Finalized: "Hash",
        Usurped: "Hash",
        Dropped: "Null",
        Invalid: "Null"
      }
    }
  }
};

// node_modules/@polkadot/types/interfaces/chain/rpc.js
var rpc13 = {
  getBlock: {
    description: "Get header and body of a relay chain block",
    params: [
      {
        isHistoric: true,
        isOptional: true,
        name: "hash",
        type: "BlockHash"
      }
    ],
    type: "SignedBlock"
  },
  getBlockHash: {
    description: "Get the block hash for a specific block",
    params: [
      {
        isOptional: true,
        name: "blockNumber",
        type: "BlockNumber"
      }
    ],
    type: "BlockHash"
  },
  getFinalizedHead: {
    alias: ["chain_getFinalisedHead"],
    description: "Get hash of the last finalized block in the canon chain",
    params: [],
    type: "BlockHash"
  },
  getHeader: {
    alias: ["chain_getHead"],
    description: "Retrieves the header for a specific block",
    params: [
      {
        isHistoric: true,
        isOptional: true,
        name: "hash",
        type: "BlockHash"
      }
    ],
    type: "Header"
  },
  subscribeAllHeads: {
    description: "Retrieves the newest header via subscription",
    params: [],
    pubsub: [
      "allHead",
      "subscribeAllHeads",
      "unsubscribeAllHeads"
    ],
    type: "Header"
  },
  subscribeFinalizedHeads: {
    alias: ["chain_subscribeFinalisedHeads", "chain_unsubscribeFinalisedHeads"],
    description: "Retrieves the best finalized header via subscription",
    params: [],
    pubsub: [
      "finalizedHead",
      "subscribeFinalizedHeads",
      "unsubscribeFinalizedHeads"
    ],
    type: "Header"
  },
  subscribeNewHeads: {
    alias: ["chain_unsubscribeNewHeads", "subscribe_newHead", "unsubscribe_newHead"],
    description: "Retrieves the best header via subscription",
    params: [],
    // NOTE These still has the aliassed version, compatible with 1.x
    pubsub: [
      "newHead",
      "subscribeNewHead",
      "unsubscribeNewHead"
    ],
    type: "Header"
  }
};

// node_modules/@polkadot/types/interfaces/chain/definitions.js
var definitions_default73 = {
  rpc: rpc13,
  types: {
    BlockHash: "Hash"
  }
};

// node_modules/@polkadot/types/interfaces/childstate/rpc.js
var rpc14 = {
  getKeys: {
    description: "Returns the keys with prefix from a child storage, leave empty to get all the keys",
    params: [
      {
        name: "childKey",
        type: "PrefixedStorageKey"
      },
      {
        name: "prefix",
        type: "StorageKey"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "Hash"
      }
    ],
    type: "Vec<StorageKey>"
  },
  getKeysPaged: {
    alias: ["childstate_getKeysPagedAt"],
    description: "Returns the keys with prefix from a child storage with pagination support",
    params: [
      {
        name: "childKey",
        type: "PrefixedStorageKey"
      },
      {
        name: "prefix",
        type: "StorageKey"
      },
      {
        name: "count",
        type: "u32"
      },
      {
        isOptional: true,
        name: "startKey",
        type: "StorageKey"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "Hash"
      }
    ],
    type: "Vec<StorageKey>"
  },
  getStorage: {
    description: "Returns a child storage entry at a specific block state",
    params: [
      {
        name: "childKey",
        type: "PrefixedStorageKey"
      },
      {
        name: "key",
        type: "StorageKey"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "Hash"
      }
    ],
    type: "Option<StorageData>"
  },
  getStorageEntries: {
    description: "Returns child storage entries for multiple keys at a specific block state",
    params: [
      {
        name: "childKey",
        type: "PrefixedStorageKey"
      },
      {
        name: "keys",
        type: "Vec<StorageKey>"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "Hash"
      }
    ],
    type: "Vec<Option<StorageData>>"
  },
  getStorageHash: {
    description: "Returns the hash of a child storage entry at a block state",
    params: [
      {
        name: "childKey",
        type: "PrefixedStorageKey"
      },
      {
        name: "key",
        type: "StorageKey"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "Hash"
      }
    ],
    type: "Option<Hash>"
  },
  getStorageSize: {
    description: "Returns the size of a child storage entry at a block state",
    params: [
      {
        name: "childKey",
        type: "PrefixedStorageKey"
      },
      {
        name: "key",
        type: "StorageKey"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "Hash"
      }
    ],
    type: "Option<u64>"
  }
};

// node_modules/@polkadot/types/interfaces/childstate/definitions.js
var definitions_default74 = {
  rpc: rpc14,
  types: {
    // StorageKey extends Bytes
    PrefixedStorageKey: "StorageKey"
  }
};

// node_modules/@polkadot/types/interfaces/offchain/rpc.js
var rpc15 = {
  localStorageGet: {
    description: "Get offchain local storage under given key and prefix",
    isUnsafe: true,
    params: [
      {
        name: "kind",
        type: "StorageKind"
      },
      {
        name: "key",
        type: "Bytes"
      }
    ],
    type: "Option<Bytes>"
  },
  localStorageSet: {
    description: "Set offchain local storage under given key and prefix",
    isUnsafe: true,
    params: [
      {
        name: "kind",
        type: "StorageKind"
      },
      {
        name: "key",
        type: "Bytes"
      },
      {
        name: "value",
        type: "Bytes"
      }
    ],
    type: "Null"
  }
};

// node_modules/@polkadot/types/interfaces/offchain/runtime.js
var runtime35 = {
  OffchainWorkerApi: [
    {
      methods: {
        offchain_worker: {
          description: "Starts the off-chain task for given block header.",
          params: [
            {
              name: "header",
              type: "Header"
            }
          ],
          type: "Null"
        }
      },
      version: 2
    },
    {
      methods: {
        offchain_worker: {
          description: "Starts the off-chain task for given block header.",
          params: [
            {
              name: "number",
              type: "BlockNumber"
            }
          ],
          type: "Null"
        }
      },
      version: 1
    }
  ]
};

// node_modules/@polkadot/types/interfaces/offchain/definitions.js
var definitions_default75 = {
  rpc: rpc15,
  runtime: runtime35,
  types: {
    StorageKind: {
      _enum: {
        PERSISTENT: 1,
        LOCAL: 2
      }
    }
  }
};

// node_modules/@polkadot/types/interfaces/payment/rpc.js
var rpc16 = {
  queryFeeDetails: {
    // NOTE: Not deprecated (yet) in Substrate, but it is the intent to do so
    deprecated: "Use `api.call.transactionPaymentApi.queryFeeDetails` instead",
    description: "Query the detailed fee of a given encoded extrinsic",
    params: [
      {
        name: "extrinsic",
        type: "Bytes"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "FeeDetails"
  },
  queryInfo: {
    // NOTE: Not deprecated (yet) in Substrate, but it is the intent to do so
    deprecated: "Use `api.call.transactionPaymentApi.queryInfo` instead",
    description: "Retrieves the fee information for an encoded extrinsic",
    params: [
      {
        name: "extrinsic",
        type: "Bytes"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    // NOTE: Stuck on V1 forever (at least for the time being)
    type: "RuntimeDispatchInfoV1"
  }
};

// node_modules/@polkadot/types/interfaces/payment/runtime.js
var V1_TO_V4_SHARED_PAY = {
  query_fee_details: {
    description: "The transaction fee details",
    params: [
      {
        name: "uxt",
        type: "Extrinsic"
      },
      {
        name: "len",
        type: "u32"
      }
    ],
    type: "FeeDetails"
  }
};
var V1_TO_V3_SHARED_CALL = {
  query_call_fee_details: {
    description: "The call fee details",
    params: [
      {
        name: "call",
        type: "Call"
      },
      {
        name: "len",
        type: "u32"
      }
    ],
    type: "FeeDetails"
  }
};
var V2_TO_V4_SHARED_PAY = {
  query_info: {
    description: "The transaction info",
    params: [
      {
        name: "uxt",
        type: "Extrinsic"
      },
      {
        name: "len",
        type: "u32"
      }
    ],
    type: "RuntimeDispatchInfo"
  }
};
var V2_V3_SHARED_CALL = {
  query_call_info: {
    description: "The call info",
    params: [
      {
        name: "call",
        type: "Call"
      },
      {
        name: "len",
        type: "u32"
      }
    ],
    type: "RuntimeDispatchInfo"
  }
};
var V3_SHARED_PAY_CALL = {
  query_length_to_fee: {
    description: "Query the output of the current LengthToFee given some input",
    params: [
      {
        name: "length",
        type: "u32"
      }
    ],
    type: "Balance"
  },
  query_weight_to_fee: {
    description: "Query the output of the current WeightToFee given some input",
    params: [
      {
        name: "weight",
        type: "Weight"
      }
    ],
    type: "Balance"
  }
};
var runtime36 = {
  TransactionPaymentApi: [
    {
      // V4 is equivalent to V3 (V4 just dropped all V1 references)
      methods: {
        ...V3_SHARED_PAY_CALL,
        ...V2_TO_V4_SHARED_PAY,
        ...V1_TO_V4_SHARED_PAY
      },
      version: 4
    },
    {
      methods: {
        ...V3_SHARED_PAY_CALL,
        ...V2_TO_V4_SHARED_PAY,
        ...V1_TO_V4_SHARED_PAY
      },
      version: 3
    },
    {
      methods: {
        ...V2_TO_V4_SHARED_PAY,
        ...V1_TO_V4_SHARED_PAY
      },
      version: 2
    },
    {
      methods: {
        query_info: {
          description: "The transaction info",
          params: [
            {
              name: "uxt",
              type: "Extrinsic"
            },
            {
              name: "len",
              type: "u32"
            }
          ],
          // NOTE: _Should_ be V1 (as per current Substrate), however the interface was
          // changed mid-flight between versions. So we have some of each depending on
          // runtime. (We do detect the weight type, so correct)
          type: "RuntimeDispatchInfo"
        },
        ...V1_TO_V4_SHARED_PAY
      },
      version: 1
    }
  ],
  TransactionPaymentCallApi: [
    {
      methods: {
        ...V3_SHARED_PAY_CALL,
        ...V2_V3_SHARED_CALL,
        ...V1_TO_V3_SHARED_CALL
      },
      version: 3
    },
    {
      methods: {
        ...V2_V3_SHARED_CALL,
        ...V1_TO_V3_SHARED_CALL
      },
      version: 2
    },
    {
      methods: {
        CALL: {
          description: "The call info",
          params: [
            {
              name: "call",
              type: "Call"
            },
            {
              name: "len",
              type: "u32"
            }
          ],
          // NOTE: As per the above comment, the below is correct according to Substrate, but
          // _may_ yield fallback decoding on some versions of the runtime
          type: "RuntimeDispatchInfo"
        },
        ...V1_TO_V3_SHARED_CALL
      },
      version: 1
    }
  ]
};

// node_modules/@polkadot/types/interfaces/payment/definitions.js
var definitions_default76 = {
  rpc: rpc16,
  runtime: runtime36,
  types: {
    FeeDetails: {
      inclusionFee: "Option<InclusionFee>"
      // skipped in serde
      // tip: 'Balance'
    },
    InclusionFee: {
      baseFee: "Balance",
      lenFee: "Balance",
      adjustedWeightFee: "Balance"
    },
    RuntimeDispatchInfo: {
      weight: "Weight",
      class: "DispatchClass",
      partialFee: "Balance"
    },
    RuntimeDispatchInfoV1: {
      weight: "WeightV1",
      class: "DispatchClass",
      partialFee: "Balance"
    },
    RuntimeDispatchInfoV2: {
      weight: "WeightV2",
      class: "DispatchClass",
      partialFee: "Balance"
    }
  }
};

// node_modules/@polkadot/types/interfaces/state/rpc.js
var rpc17 = {
  call: {
    alias: ["state_callAt"],
    description: "Perform a call to a builtin on the chain",
    params: [
      {
        name: "method",
        type: "Text"
      },
      {
        name: "data",
        type: "Bytes"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "Bytes"
  },
  getChildKeys: {
    description: "Retrieves the keys with prefix of a specific child storage",
    params: [
      {
        name: "childStorageKey",
        type: "StorageKey"
      },
      {
        name: "childDefinition",
        type: "StorageKey"
      },
      {
        name: "childType",
        type: "u32"
      },
      {
        name: "key",
        type: "StorageKey"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "Vec<StorageKey>"
  },
  getChildReadProof: {
    description: "Returns proof of storage for child key entries at a specific block state.",
    params: [
      {
        name: "childStorageKey",
        type: "PrefixedStorageKey"
      },
      {
        name: "keys",
        type: "Vec<StorageKey>"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "ReadProof"
  },
  getChildStorage: {
    description: "Retrieves the child storage for a key",
    params: [
      {
        name: "childStorageKey",
        type: "StorageKey"
      },
      {
        name: "childDefinition",
        type: "StorageKey"
      },
      {
        name: "childType",
        type: "u32"
      },
      {
        name: "key",
        type: "StorageKey"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "StorageData"
  },
  getChildStorageHash: {
    description: "Retrieves the child storage hash",
    params: [
      {
        name: "childStorageKey",
        type: "StorageKey"
      },
      {
        name: "childDefinition",
        type: "StorageKey"
      },
      {
        name: "childType",
        type: "u32"
      },
      {
        name: "key",
        type: "StorageKey"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "Hash"
  },
  getChildStorageSize: {
    description: "Retrieves the child storage size",
    params: [
      {
        name: "childStorageKey",
        type: "StorageKey"
      },
      {
        name: "childDefinition",
        type: "StorageKey"
      },
      {
        name: "childType",
        type: "u32"
      },
      {
        name: "key",
        type: "StorageKey"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "u64"
  },
  getKeys: {
    deprecated: "Use `api.rpc.state.getKeysPaged` to retrieve keys",
    description: "Retrieves the keys with a certain prefix",
    params: [
      {
        name: "key",
        type: "StorageKey"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "Vec<StorageKey>"
  },
  getKeysPaged: {
    alias: ["state_getKeysPagedAt"],
    description: "Returns the keys with prefix with pagination support.",
    params: [
      {
        name: "key",
        type: "StorageKey"
      },
      {
        name: "count",
        type: "u32"
      },
      {
        isOptional: true,
        name: "startKey",
        type: "StorageKey"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "Vec<StorageKey>"
  },
  getMetadata: {
    description: "Returns the runtime metadata",
    params: [
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "Metadata"
  },
  getPairs: {
    deprecated: "Use `api.rpc.state.getKeysPaged` to retrieve keys",
    description: "Returns the keys with prefix, leave empty to get all the keys (deprecated: Use getKeysPaged)",
    isUnsafe: true,
    params: [
      {
        name: "prefix",
        type: "StorageKey"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "Vec<KeyValue>"
  },
  getReadProof: {
    description: "Returns proof of storage entries at a specific block state",
    params: [
      {
        name: "keys",
        type: "Vec<StorageKey>"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "ReadProof"
  },
  getRuntimeVersion: {
    alias: ["chain_getRuntimeVersion"],
    description: "Get the runtime version",
    params: [
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "RuntimeVersion"
  },
  getStorage: {
    alias: ["state_getStorageAt"],
    description: "Retrieves the storage for a key",
    params: [
      {
        name: "key",
        type: "StorageKey"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "StorageData"
  },
  getStorageHash: {
    alias: ["state_getStorageHashAt"],
    description: "Retrieves the storage hash",
    params: [
      {
        name: "key",
        type: "StorageKey"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "Hash"
  },
  getStorageSize: {
    alias: ["state_getStorageSizeAt"],
    description: "Retrieves the storage size",
    params: [
      {
        name: "key",
        type: "StorageKey"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "u64"
  },
  queryStorage: {
    description: "Query historical storage entries (by key) starting from a start block",
    isUnsafe: true,
    params: [
      {
        name: "keys",
        type: "Vec<StorageKey>"
      },
      {
        name: "fromBlock",
        type: "Hash"
      },
      {
        isOptional: true,
        name: "toBlock",
        type: "BlockHash"
      }
    ],
    type: "Vec<StorageChangeSet>"
  },
  queryStorageAt: {
    description: "Query storage entries (by key) starting at block hash given as the second parameter",
    params: [
      {
        name: "keys",
        type: "Vec<StorageKey>"
      },
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "Vec<StorageChangeSet>"
  },
  subscribeRuntimeVersion: {
    alias: ["chain_subscribeRuntimeVersion", "chain_unsubscribeRuntimeVersion"],
    description: "Retrieves the runtime version via subscription",
    params: [],
    pubsub: [
      "runtimeVersion",
      "subscribeRuntimeVersion",
      "unsubscribeRuntimeVersion"
    ],
    type: "RuntimeVersion"
  },
  subscribeStorage: {
    description: "Subscribes to storage changes for the provided keys",
    // NOTE Just marking it here to follow the logic - this is unsafe when no
    // keys are provided (i.e. subscribing to all), generally this is used
    // extensively with normal subscriptions
    // isUnsafe: true,
    params: [
      {
        isOptional: true,
        name: "keys",
        type: "Vec<StorageKey>"
      }
    ],
    pubsub: [
      "storage",
      "subscribeStorage",
      "unsubscribeStorage"
    ],
    type: "StorageChangeSet"
  },
  traceBlock: {
    description: "Provides a way to trace the re-execution of a single block",
    isUnsafe: true,
    params: [
      {
        name: "block",
        type: "Hash"
      },
      {
        name: "targets",
        type: "Option<Text>"
      },
      {
        name: "storageKeys",
        type: "Option<Text>"
      },
      {
        name: "methods",
        type: "Option<Text>"
      }
    ],
    type: "TraceBlockResponse"
  },
  trieMigrationStatus: {
    description: "Check current migration state",
    isUnsafe: true,
    params: [
      {
        isHistoric: true,
        isOptional: true,
        name: "at",
        type: "BlockHash"
      }
    ],
    type: "MigrationStatusResult"
  }
};

// node_modules/@polkadot/types/interfaces/state/definitions.js
var definitions_default77 = {
  rpc: rpc17,
  types: {
    ApiId: "[u8; 8]",
    BlockTrace: {
      blockHash: "Text",
      parentHash: "Text",
      tracingTargets: "Text",
      storageKeys: "Text",
      spans: "Vec<BlockTraceSpan>",
      events: "Vec<BlockTraceEvent>"
    },
    BlockTraceEvent: {
      target: "Text",
      data: "BlockTraceEventData",
      parentId: "Option<u64>"
    },
    BlockTraceEventData: {
      stringValues: "HashMap<Text, Text>"
    },
    BlockTraceSpan: {
      id: "u64",
      parentId: "Option<u64>",
      name: "Text",
      target: "Text",
      wasm: "bool"
    },
    KeyValueOption: "(StorageKey, Option<StorageData>)",
    MigrationStatusResult: {
      topRemainingToMigrate: "u64",
      childRemainingToMigrate: "u64"
    },
    ReadProof: {
      at: "Hash",
      proof: "Vec<Bytes>"
    },
    RuntimeVersionApi: "(ApiId, u32)",
    RuntimeVersion: {
      specName: "Text",
      implName: "Text",
      authoringVersion: "u32",
      specVersion: "u32",
      implVersion: "u32",
      apis: "Vec<RuntimeVersionApi>",
      transactionVersion: "u32",
      stateVersion: "u8"
    },
    RuntimeVersionPre4: {
      specName: "Text",
      implName: "Text",
      authoringVersion: "u32",
      specVersion: "u32",
      implVersion: "u32",
      apis: "Vec<RuntimeVersionApi>",
      transactionVersion: "u32"
    },
    RuntimeVersionPre3: {
      specName: "Text",
      implName: "Text",
      authoringVersion: "u32",
      specVersion: "u32",
      implVersion: "u32",
      apis: "Vec<RuntimeVersionApi>"
    },
    RuntimeVersionPartial: {
      specName: "Text",
      specVersion: "u32",
      apis: "Vec<RuntimeVersionApi>"
    },
    SpecVersion: "u32",
    StorageChangeSet: {
      block: "Hash",
      changes: "Vec<KeyValueOption>"
    },
    TraceBlockResponse: {
      _enum: {
        TraceError: "TraceError",
        BlockTrace: "BlockTrace"
      }
    },
    TraceError: {
      error: "Text"
    }
  }
};

// node_modules/@polkadot/types/interfaces/jsonrpc.js
var jsonrpc = {};
Object.keys(definitions_exports).forEach((s) => Object.entries(definitions_exports[s].rpc || {}).forEach(([method, def]) => {
  const section2 = def.aliasSection || s;
  if (!jsonrpc[section2]) {
    jsonrpc[section2] = {};
  }
  jsonrpc[section2][method] = objectSpread5({}, def, {
    isSubscription: !!def.pubsub,
    jsonrpc: `${section2}_${method}`,
    method,
    section: section2
  });
}));
var jsonrpc_default = jsonrpc;

// node_modules/@polkadot/types/metadata/PortableRegistry/PortableRegistry.js
var l6 = logger4("PortableRegistry");
var TYPE_UNWRAP = { toNumber: () => -1 };
var PRIMITIVE_ALIAS = {
  Char: "u32",
  // Rust char is 4-bytes
  Str: "Text"
};
var PATHS_ALIAS = splitNamespace([
  // full matching on exact names...
  // these are well-known types with additional encoding
  "sp_core::crypto::AccountId32",
  "sp_runtime::generic::era::Era",
  "sp_runtime::multiaddress::MultiAddress",
  // ethereum overrides (Frontier, Moonbeam, Polkadot claims)
  "fp_account::AccountId20",
  "account::AccountId20",
  "polkadot_runtime_common::claims::EthereumAddress",
  // weights 2 is a structure, however for 1.5. with a single field it
  // should be flatenned (can appear in Compact<Weight> extrinsics)
  "frame_support::weights::weight_v2::Weight",
  "sp_weights::weight_v2::Weight",
  // wildcard matching in place...
  // these have a specific encoding or logic, use a wildcard for {pallet, darwinia}_democracy
  "*_democracy::vote::Vote",
  "*_conviction_voting::vote::Vote",
  "*_identity::types::Data",
  // these are opaque Vec<u8> wrappers
  "sp_core::OpaqueMetadata",
  "sp_core::OpaquePeerId",
  "sp_core::offchain::OpaqueMultiaddr",
  // shorten some well-known types
  "primitive_types::*",
  "sp_arithmetic::per_things::*",
  // runtime
  "*_runtime::RuntimeCall",
  "*_runtime::RuntimeEvent",
  // ink!
  "ink::env::types::*",
  "ink::primitives::types::*",
  "ink_env::types::*",
  "ink_primitives::types::*"
]);
var PATHS_SET = splitNamespace([
  "pallet_identity::types::BitFlags"
]);
var BITVEC_NS_LSB = ["bitvec::order::Lsb0", "BitOrderLsb0"];
var BITVEC_NS_MSB = ["bitvec::order::Msb0", "BitOrderMsb0"];
var BITVEC_NS = [...BITVEC_NS_LSB, ...BITVEC_NS_MSB];
var WRAPPERS = ["BoundedBTreeMap", "BoundedBTreeSet", "BoundedVec", "Box", "BTreeMap", "BTreeSet", "Cow", "Option", "Range", "RangeInclusive", "Result", "WeakBoundedVec", "WrapperKeepOpaque", "WrapperOpaque"];
var RESERVED = [
  // JS reserved words
  "entries",
  "keys",
  "new",
  "size",
  // exposed by all Codec objects
  "hash",
  "registry"
];
var PATH_RM_INDEX_1 = ["generic", "misc", "pallet", "traits", "types"];
function sanitizeDocs(docs) {
  const count = docs.length;
  const result = new Array(count);
  for (let i = 0; i < count; i++) {
    result[i] = docs[i].toString();
  }
  return result;
}
function splitNamespace(values) {
  const count = values.length;
  const result = new Array(count);
  for (let i = 0; i < count; i++) {
    result[i] = values[i].split("::");
  }
  return result;
}
function matchParts(first2, second) {
  return first2.length === second.length && first2.every((a, index) => {
    const b = second[index].toString();
    if (a === "*" || a === b) {
      return true;
    }
    if (a.includes("*") && a.includes("_") && b.includes("_")) {
      let suba = a.split("_");
      let subb = b.split("_");
      if (suba[0] === "*") {
        const indexOf = subb.indexOf(suba[1]);
        if (indexOf !== -1) {
          suba = suba.slice(1);
          subb = subb.slice(indexOf);
        }
      }
      if (suba.length === 2 && suba[1] === "*" && suba[0] === subb[0]) {
        return true;
      }
      return matchParts(suba, subb);
    }
    return false;
  });
}
function getAliasPath({ def, path }) {
  if (["frame_support::weights::weight_v2::Weight", "sp_weights::weight_v2::Weight"].includes(path.join("::"))) {
    return !def.isComposite || def.asComposite.fields.length === 1 ? "WeightV1" : null;
  }
  return path.length && PATHS_ALIAS.some((a) => matchParts(a, path)) ? path[path.length - 1].toString() : null;
}
function extractNameFlat(portable, lookupIndex, params, path, isInternal = false) {
  const count = path.length;
  if (count === 0 || WRAPPERS.includes(path[count - 1].toString())) {
    return null;
  }
  const camels = new Array(count);
  const lowers = new Array(count);
  for (let i = 0; i < count; i++) {
    const c = stringPascalCase2(isInternal ? path[i].replace("pallet_", "") : path[i]);
    const l13 = c.toLowerCase();
    camels[i] = c;
    lowers[i] = l13;
  }
  let name = "";
  for (let i = 0; i < count; i++) {
    const l13 = lowers[i];
    if (i !== 1 || !PATH_RM_INDEX_1.includes(l13)) {
      if (l13 !== lowers[i + 1]) {
        name += camels[i];
      }
    }
  }
  if (camels[1] === "RawOrigin" && count === 2 && params.length === 2 && params[1].type.isSome) {
    const instanceType = portable[params[1].type.unwrap().toNumber()];
    if (instanceType.type.path.length === 2) {
      name = `${name}${instanceType.type.path[1].toString()}`;
    }
  }
  return { lookupIndex, name, params };
}
function extractName(portable, lookupIndex, { type: { params, path } }) {
  return extractNameFlat(portable, lookupIndex, params, path);
}
function nextDupeMatches(name, startAt, names) {
  const result = [names[startAt]];
  for (let i = startAt + 1, count = names.length; i < count; i++) {
    const v = names[i];
    if (v.name === name) {
      result.push(v);
    }
  }
  return result;
}
function rewriteDupes(input, rewrite) {
  const count = input.length;
  for (let i = 0; i < count; i++) {
    const a = input[i];
    for (let j = i + 1; j < count; j++) {
      const b = input[j];
      if (a.lookupIndex !== b.lookupIndex && a.name === b.name) {
        return false;
      }
    }
  }
  for (let i = 0; i < count; i++) {
    const p = input[i];
    rewrite[p.lookupIndex] = p.name;
  }
  return true;
}
function removeDupeNames(lookup, portable, names) {
  const rewrite = {};
  return names.map((original, startAt) => {
    const { lookupIndex, name, params } = original;
    if (!name) {
      return null;
    } else if (rewrite[lookupIndex]) {
      return original;
    }
    const allSame = nextDupeMatches(name, startAt, names);
    if (allSame.length === 1) {
      return original;
    }
    const anyDiff = allSame.some((o) => params.length !== o.params.length || params.some((p, index) => !p.name.eq(o.params[index].name) || p.type.unwrapOr(TYPE_UNWRAP).toNumber() !== o.params[index].type.unwrapOr(TYPE_UNWRAP).toNumber()));
    if (!anyDiff) {
      return original;
    }
    const paramIdx = params.findIndex(({ type }, index) => allSame.every(({ params: params2 }, aIndex) => params2[index].type.isSome && (aIndex === 0 || !params2[index].type.eq(type))));
    if (paramIdx === -1) {
      return original;
    }
    const sameCount = allSame.length;
    const adjusted = new Array(sameCount);
    for (let i = 0; i < sameCount; i++) {
      const { lookupIndex: lookupIndex2, name: name2, params: params2 } = allSame[i];
      const { def, path } = lookup.getSiType(params2[paramIdx].type.unwrap());
      if (!def.isPrimitive && !path.length) {
        return null;
      }
      adjusted[i] = {
        lookupIndex: lookupIndex2,
        name: def.isPrimitive ? `${name2}${def.asPrimitive.toString()}` : `${name2}${path[path.length - 1].toString()}`
      };
    }
    if (rewriteDupes(adjusted, rewrite)) {
      return original;
    }
    for (let i = 0; i < sameCount; i++) {
      const { lookupIndex: lookupIndex2, name: name2, params: params2 } = allSame[i];
      const { def, path } = lookup.getSiType(params2[paramIdx].type.unwrap());
      const flat = extractNameFlat(portable, lookupIndex2, params2, path, true);
      if (def.isPrimitive || !flat) {
        return null;
      }
      adjusted[i] = {
        lookupIndex: lookupIndex2,
        name: `${name2}${flat.name}`
      };
    }
    if (rewriteDupes(adjusted, rewrite)) {
      return original;
    }
    return null;
  }).filter((n) => !!n).map(({ lookupIndex, name, params }) => ({
    lookupIndex,
    name: rewrite[lookupIndex] || name,
    params
  }));
}
function registerTypes(lookup, lookups, names, params) {
  lookup.registry.register(lookups);
  if (params.SpRuntimeUncheckedExtrinsic) {
    const [addrParam, , sigParam] = params.SpRuntimeUncheckedExtrinsic;
    const siAddress = lookup.getSiType(addrParam.type.unwrap());
    const siSignature = lookup.getSiType(sigParam.type.unwrap());
    const nsSignature = siSignature.path.join("::");
    let nsAccountId = siAddress.path.join("::");
    const isMultiAddress = nsAccountId === "sp_runtime::multiaddress::MultiAddress";
    if (isMultiAddress) {
      const [idParam] = siAddress.params;
      nsAccountId = lookup.getSiType(idParam.type.unwrap()).path.join("::");
    }
    lookup.registry.register({
      // known: account::AccountId20, fp_account::AccountId20, primitive_types::H160
      AccountId: nsAccountId.endsWith("::AccountId20") || nsAccountId.endsWith("::H160") ? "AccountId20" : "AccountId32",
      Address: isMultiAddress ? "MultiAddress" : "AccountId",
      ExtrinsicSignature: ["sp_runtime::MultiSignature"].includes(nsSignature) ? "MultiSignature" : names[sigParam.type.unwrap().toNumber()] || "MultiSignature"
    });
  }
}
function extractAliases(params, isContract) {
  const hasParams = Object.keys(params).some((k) => !k.startsWith("Pallet"));
  const alias2 = {};
  if (params.SpRuntimeUncheckedExtrinsic) {
    const [, { type }] = params.SpRuntimeUncheckedExtrinsic;
    alias2[type.unwrap().toNumber()] = "Call";
  } else if (hasParams && !isContract) {
    l6.warn("Unable to determine runtime Call type, cannot inspect sp_runtime::generic::unchecked_extrinsic::UncheckedExtrinsic");
  }
  if (params.FrameSystemEventRecord) {
    const [{ type }] = params.FrameSystemEventRecord;
    alias2[type.unwrap().toNumber()] = "Event";
  } else if (hasParams && !isContract) {
    l6.warn("Unable to determine runtime Event type, cannot inspect frame_system::EventRecord");
  }
  return alias2;
}
function extractTypeInfo(lookup, portable) {
  const nameInfo = [];
  const types2 = {};
  for (let i = 0, count = portable.length; i < count; i++) {
    const type = portable[i];
    const lookupIndex = type.id.toNumber();
    const extracted = extractName(portable, lookupIndex, portable[i]);
    if (extracted) {
      nameInfo.push(extracted);
    }
    types2[lookupIndex] = type;
  }
  const lookups = {};
  const names = {};
  const params = {};
  const dedup = removeDupeNames(lookup, portable, nameInfo);
  for (let i = 0, count = dedup.length; i < count; i++) {
    const { lookupIndex, name, params: p } = dedup[i];
    names[lookupIndex] = name;
    lookups[name] = lookup.registry.createLookupType(lookupIndex);
    params[name] = p;
  }
  return { lookups, names, params, types: types2 };
}
var PortableRegistry = class extends Struct {
  __internal__alias;
  __internal__lookups;
  __internal__names;
  __internal__params;
  __internal__typeDefs = {};
  __internal__types;
  constructor(registry, value, isContract) {
    super(registry, {
      types: "Vec<PortableType>"
    }, value);
    const { lookups, names, params, types: types2 } = extractTypeInfo(this, this.types);
    this.__internal__alias = extractAliases(params, isContract);
    this.__internal__lookups = lookups;
    this.__internal__names = names;
    this.__internal__params = params;
    this.__internal__types = types2;
  }
  /**
   * @description Returns all the available type names for this chain
   **/
  get names() {
    return Object.values(this.__internal__names).sort();
  }
  /**
   * @description Returns all the available parameterized types for this chain
   **/
  get paramTypes() {
    return this.__internal__params;
  }
  /**
   * @description The types of the registry
   */
  get types() {
    return this.getT("types");
  }
  /**
   * @description Register all available types into the registry (generally for internal usage)
   */
  register() {
    registerTypes(this, this.__internal__lookups, this.__internal__names, this.__internal__params);
  }
  /**
   * @description Returns the name for a specific lookup
   */
  getName(lookupId) {
    return this.__internal__names[this.__internal__getLookupId(lookupId)];
  }
  /**
   * @description Finds a specific type in the registry
   */
  getSiType(lookupId) {
    const found = (this.__internal__types || this.types)[this.__internal__getLookupId(lookupId)];
    if (!found) {
      throw new Error(`PortableRegistry: Unable to find type with lookupId ${lookupId.toString()}`);
    }
    return found.type;
  }
  /**
   * @description Lookup the type definition for the index
   */
  getTypeDef(lookupId) {
    const lookupIndex = this.__internal__getLookupId(lookupId);
    if (!this.__internal__typeDefs[lookupIndex]) {
      const lookupName = this.__internal__names[lookupIndex];
      const empty2 = {
        info: TypeDefInfo.DoNotConstruct,
        lookupIndex,
        lookupName,
        type: this.registry.createLookupType(lookupIndex)
      };
      if (lookupName) {
        this.__internal__typeDefs[lookupIndex] = empty2;
      }
      const extracted = this.__internal__extract(this.getSiType(lookupId), lookupIndex);
      if (!lookupName) {
        this.__internal__typeDefs[lookupIndex] = empty2;
      }
      Object.keys(extracted).forEach((k) => {
        if (k !== "lookupName" || extracted[k]) {
          this.__internal__typeDefs[lookupIndex][k] = extracted[k];
        }
      });
      if (extracted.info === TypeDefInfo.Plain) {
        this.__internal__typeDefs[lookupIndex].lookupNameRoot = this.__internal__typeDefs[lookupIndex].lookupName;
        delete this.__internal__typeDefs[lookupIndex].lookupName;
      }
    }
    return this.__internal__typeDefs[lookupIndex];
  }
  /**
   * @description For a specific field, perform adjustments to not have built-in conflicts
   */
  sanitizeField(name) {
    let nameField = null;
    let nameOrig = null;
    if (name.isSome) {
      nameField = stringCamelCase2(name.unwrap());
      if (nameField.includes("#")) {
        nameOrig = nameField;
        nameField = nameOrig.replace(/#/g, "_");
      } else if (RESERVED.includes(nameField)) {
        nameOrig = nameField;
        nameField = `${nameField}_`;
      }
    }
    return [nameField, nameOrig];
  }
  /** @internal Creates a TypeDef based on an internal lookupId */
  __internal__createSiDef(lookupId) {
    const typeDef = this.getTypeDef(lookupId);
    const lookupIndex = lookupId.toNumber();
    return [TypeDefInfo.DoNotConstruct, TypeDefInfo.Enum, TypeDefInfo.Struct].includes(typeDef.info) && typeDef.lookupName ? {
      docs: typeDef.docs,
      info: TypeDefInfo.Si,
      lookupIndex,
      lookupName: this.__internal__names[lookupIndex],
      type: this.registry.createLookupType(lookupId)
    } : typeDef;
  }
  /** @internal Converts a lookupId input to the actual lookup index */
  __internal__getLookupId(lookupId) {
    if (isString4(lookupId)) {
      if (!this.registry.isLookupType(lookupId)) {
        throw new Error(`PortableRegistry: Expected a lookup string type, found ${lookupId}`);
      }
      return parseInt(lookupId.replace("Lookup", ""), 10);
    } else if (isNumber4(lookupId)) {
      return lookupId;
    }
    return lookupId.toNumber();
  }
  /** @internal Converts a type into a TypeDef for Codec usage */
  __internal__extract(type, lookupIndex) {
    const namespace = type.path.join("::");
    let typeDef;
    const aliasType = this.__internal__alias[lookupIndex] || getAliasPath(type);
    try {
      if (aliasType) {
        typeDef = this.__internal__extractAliasPath(lookupIndex, aliasType);
      } else {
        switch (type.def.type) {
          case "Array":
            typeDef = this.__internal__extractArray(lookupIndex, type.def.asArray);
            break;
          case "BitSequence":
            typeDef = this.__internal__extractBitSequence(lookupIndex, type.def.asBitSequence);
            break;
          case "Compact":
            typeDef = this.__internal__extractCompact(lookupIndex, type.def.asCompact);
            break;
          case "Composite":
            typeDef = this.__internal__extractComposite(lookupIndex, type, type.def.asComposite);
            break;
          case "HistoricMetaCompat":
            typeDef = this.__internal__extractHistoric(lookupIndex, type.def.asHistoricMetaCompat);
            break;
          case "Primitive":
            typeDef = this.__internal__extractPrimitive(lookupIndex, type);
            break;
          case "Sequence":
            typeDef = this.__internal__extractSequence(lookupIndex, type.def.asSequence);
            break;
          case "Tuple":
            typeDef = this.__internal__extractTuple(lookupIndex, type.def.asTuple);
            break;
          case "Variant":
            typeDef = this.__internal__extractVariant(lookupIndex, type, type.def.asVariant);
            break;
          default:
            assertUnreachable(type.def.type);
        }
      }
    } catch (error) {
      throw new Error(`PortableRegistry: ${lookupIndex}${namespace ? ` (${namespace})` : ""}: Error extracting ${stringify3(type)}: ${error.message}`);
    }
    return objectSpread5({
      docs: sanitizeDocs(type.docs),
      namespace
    }, typeDef);
  }
  /** @internal Extracts a ScaleInfo Array into TypeDef.VecFixed */
  __internal__extractArray(_, { len, type }) {
    const length = len.toNumber();
    if (length > 2048) {
      throw new Error("Only support for [Type; <length>], where length <= 2048");
    }
    return withTypeString(this.registry, {
      info: TypeDefInfo.VecFixed,
      length,
      sub: this.__internal__createSiDef(type)
    });
  }
  /** @internal Extracts a ScaleInfo BitSequence into TypeDef.Plain */
  __internal__extractBitSequence(_, { bitOrderType, bitStoreType }) {
    const a = this.__internal__createSiDef(bitOrderType);
    const b = this.__internal__createSiDef(bitStoreType);
    const [bitOrder, bitStore] = BITVEC_NS.includes(a.namespace || "") ? [a, b] : [b, a];
    if (!bitOrder.namespace || !BITVEC_NS.includes(bitOrder.namespace)) {
      throw new Error(`Unexpected bitOrder found as ${bitOrder.namespace || "<unknown>"}`);
    } else if (bitStore.info !== TypeDefInfo.Plain || bitStore.type !== "u8") {
      throw new Error(`Only u8 bitStore is currently supported, found ${bitStore.type}`);
    }
    const isLsb = BITVEC_NS_LSB.includes(bitOrder.namespace);
    if (!isLsb) {
    }
    return {
      info: TypeDefInfo.Plain,
      type: "BitVec"
    };
  }
  /** @internal Extracts a ScaleInfo Compact into TypeDef.Compact */
  __internal__extractCompact(_, { type }) {
    return withTypeString(this.registry, {
      info: TypeDefInfo.Compact,
      sub: this.__internal__createSiDef(type)
    });
  }
  /** @internal Extracts a ScaleInfo Composite into TypeDef.{BTree*, Range*, Wrapper*} */
  __internal__extractComposite(lookupIndex, { params, path }, { fields }) {
    if (path.length) {
      const pathFirst = path[0].toString();
      const pathLast = path[path.length - 1].toString();
      if (path.length === 1 && pathFirst === "BTreeMap") {
        if (params.length !== 2) {
          throw new Error(`BTreeMap requires 2 parameters, found ${params.length}`);
        }
        return withTypeString(this.registry, {
          info: TypeDefInfo.BTreeMap,
          sub: params.map(({ type }) => this.__internal__createSiDef(type.unwrap()))
        });
      } else if (path.length === 1 && pathFirst === "BTreeSet") {
        if (params.length !== 1) {
          throw new Error(`BTreeSet requires 1 parameter, found ${params.length}`);
        }
        return withTypeString(this.registry, {
          info: TypeDefInfo.BTreeSet,
          sub: this.__internal__createSiDef(params[0].type.unwrap())
        });
      } else if (["Range", "RangeInclusive"].includes(pathFirst)) {
        if (params.length !== 1) {
          throw new Error(`Range requires 1 parameter, found ${params.length}`);
        }
        return withTypeString(this.registry, {
          info: pathFirst === "Range" ? TypeDefInfo.Range : TypeDefInfo.RangeInclusive,
          sub: this.__internal__createSiDef(params[0].type.unwrap()),
          type: pathFirst
        });
      } else if (["WrapperKeepOpaque", "WrapperOpaque"].includes(pathLast)) {
        if (params.length !== 1) {
          throw new Error(`WrapperOpaque requires 1 parameter, found ${params.length}`);
        }
        return withTypeString(this.registry, {
          info: pathLast === "WrapperKeepOpaque" ? TypeDefInfo.WrapperKeepOpaque : TypeDefInfo.WrapperOpaque,
          sub: this.__internal__createSiDef(params[0].type.unwrap()),
          type: pathLast
        });
      }
    }
    return PATHS_SET.some((p) => matchParts(p, path)) ? this.__internal__extractCompositeSet(lookupIndex, params, fields) : this.__internal__extractFields(lookupIndex, fields);
  }
  /** @internal Extracts a ScaleInfo CompositeSet into TypeDef.Set */
  __internal__extractCompositeSet(_, params, fields) {
    if (params.length !== 1 || fields.length !== 1) {
      throw new Error("Set handling expects param/field as single entries");
    }
    return withTypeString(this.registry, {
      info: TypeDefInfo.Set,
      length: this.registry.createTypeUnsafe(this.registry.createLookupType(fields[0].type), []).bitLength(),
      sub: this.getSiType(params[0].type.unwrap()).def.asVariant.variants.map(({ index, name }) => ({
        // This will be an issue > 2^53 - 1 ... don't have those (yet)
        index: index.toNumber(),
        info: TypeDefInfo.Plain,
        name: name.toString(),
        type: "Null"
      }))
    });
  }
  /** @internal Extracts ScaleInfo enum/struct fields into TypeDef.{Struct, Tuple} */
  __internal__extractFields(lookupIndex, fields) {
    let isStruct = true;
    let isTuple = true;
    const count = fields.length;
    for (let f = 0; f < count; f++) {
      const { name } = fields[f];
      isStruct = isStruct && name.isSome;
      isTuple = isTuple && name.isNone;
    }
    if (!isTuple && !isStruct) {
      throw new Error("Invalid fields type detected, expected either Tuple (all unnamed) or Struct (all named)");
    }
    if (count === 0) {
      return {
        info: TypeDefInfo.Null,
        type: "Null"
      };
    } else if (isTuple && count === 1) {
      const typeDef = this.__internal__createSiDef(fields[0].type);
      return objectSpread5({}, typeDef, lookupIndex === -1 ? null : {
        lookupIndex,
        lookupName: this.__internal__names[lookupIndex],
        lookupNameRoot: typeDef.lookupName
      }, fields[0].typeName.isSome ? { typeName: sanitize(fields[0].typeName.unwrap()) } : null);
    }
    const [sub, alias2] = this.__internal__extractFieldsAlias(fields);
    return withTypeString(this.registry, objectSpread5({
      info: isTuple ? TypeDefInfo.Tuple : TypeDefInfo.Struct,
      sub
    }, alias2.size ? { alias: alias2 } : null, lookupIndex === -1 ? null : {
      lookupIndex,
      lookupName: this.__internal__names[lookupIndex]
    }));
  }
  /** @internal Apply field aliassed (with no JS conflicts) */
  __internal__extractFieldsAlias(fields) {
    const alias2 = /* @__PURE__ */ new Map();
    const count = fields.length;
    const sub = new Array(count);
    for (let i = 0; i < count; i++) {
      const { docs, name, type, typeName } = fields[i];
      const typeDef = this.__internal__createSiDef(type);
      if (name.isNone) {
        sub[i] = typeDef;
      } else {
        const [nameField, nameOrig] = this.sanitizeField(name);
        if (nameField && nameOrig) {
          alias2.set(nameField, nameOrig);
        }
        sub[i] = objectSpread5({
          docs: sanitizeDocs(docs),
          name: nameField
        }, typeDef, typeName.isSome ? { typeName: sanitize(typeName.unwrap()) } : null);
      }
    }
    return [sub, alias2];
  }
  /** @internal Extracts an internal Historic (pre V14) type  */
  __internal__extractHistoric(_, type) {
    return objectSpread5({
      displayName: type.toString(),
      isFromSi: true
    }, getTypeDef(type));
  }
  /** @internal Extracts a ScaleInfo Primitive into TypeDef.Plain */
  __internal__extractPrimitive(_, type) {
    const typeStr = type.def.asPrimitive.type.toString();
    return {
      info: TypeDefInfo.Plain,
      type: PRIMITIVE_ALIAS[typeStr] || typeStr.toLowerCase()
    };
  }
  /** @internal Applies an alias path onto the TypeDef */
  __internal__extractAliasPath(_, type) {
    return {
      info: TypeDefInfo.Plain,
      type
    };
  }
  /** @internal Extracts a ScaleInfo Sequence into TypeDef.Vec (with Bytes shortcut) */
  __internal__extractSequence(lookupIndex, { type }) {
    const sub = this.__internal__createSiDef(type);
    if (sub.type === "u8") {
      return {
        info: TypeDefInfo.Plain,
        type: "Bytes"
      };
    }
    return withTypeString(this.registry, {
      info: TypeDefInfo.Vec,
      lookupIndex,
      lookupName: this.__internal__names[lookupIndex],
      sub
    });
  }
  /** @internal Extracts a ScaleInfo Tuple into TypeDef.Tuple */
  __internal__extractTuple(lookupIndex, ids) {
    if (ids.length === 0) {
      return {
        info: TypeDefInfo.Null,
        type: "Null"
      };
    } else if (ids.length === 1) {
      return this.getTypeDef(ids[0]);
    }
    const sub = ids.map((t) => this.__internal__createSiDef(t));
    return withTypeString(this.registry, {
      info: TypeDefInfo.Tuple,
      lookupIndex,
      lookupName: this.__internal__names[lookupIndex],
      sub
    });
  }
  /** @internal Extracts a ScaleInfo Variant into TypeDef.{Option, Result, Enum} */
  __internal__extractVariant(lookupIndex, { params, path }, { variants }) {
    if (path.length) {
      const specialVariant = path[0].toString();
      if (specialVariant === "Option") {
        if (params.length !== 1) {
          throw new Error(`Option requires 1 parameter, found ${params.length}`);
        }
        return withTypeString(this.registry, {
          info: TypeDefInfo.Option,
          sub: this.__internal__createSiDef(params[0].type.unwrap())
        });
      } else if (specialVariant === "Result") {
        if (params.length !== 2) {
          throw new Error(`Result requires 2 parameters, found ${params.length}`);
        }
        return withTypeString(this.registry, {
          info: TypeDefInfo.Result,
          sub: params.map(({ type }, index) => objectSpread5({
            name: ["Ok", "Error"][index]
          }, this.__internal__createSiDef(type.unwrap())))
        });
      }
    }
    if (variants.length === 0) {
      return {
        info: TypeDefInfo.Null,
        type: "Null"
      };
    }
    return this.__internal__extractVariantEnum(lookupIndex, variants);
  }
  /** @internal Extracts a ScaleInfo Variant into TypeDef.Enum */
  __internal__extractVariantEnum(lookupIndex, variants) {
    const sub = [];
    variants.slice().sort((a, b) => a.index.cmp(b.index)).forEach(({ fields, index: bnIndex, name }) => {
      const index = bnIndex.toNumber();
      while (sub.length !== index) {
        sub.push({
          index: sub.length,
          info: TypeDefInfo.Null,
          name: `__Unused${sub.length}`,
          type: "Null"
        });
      }
      sub.push(objectSpread5(this.__internal__extractFields(-1, fields), {
        index,
        name: name.toString()
      }));
    });
    return withTypeString(this.registry, {
      info: TypeDefInfo.Enum,
      lookupIndex,
      lookupName: this.__internal__names[lookupIndex],
      sub
    });
  }
};

// node_modules/@polkadot/types/metadata/util/flattenUniq.js
function flattenUniq(list, result = []) {
  for (let i = 0, count = list.length; i < count; i++) {
    const entry = list[i];
    if (Array.isArray(entry)) {
      flattenUniq(entry, result);
    } else {
      result.push(entry);
    }
  }
  return [...new Set(result)];
}

// node_modules/@polkadot/types/metadata/util/getSiName.js
function getSiName(lookup, type) {
  const typeDef = lookup.getTypeDef(type);
  return typeDef.lookupName || typeDef.type;
}

// node_modules/@polkadot/types/metadata/util/extractTypes.js
function extractSubSingle(_, { sub }) {
  const { lookupName, type } = sub;
  return extractTypes([lookupName || type]);
}
function extractSubArray(_, { sub }) {
  return extractTypes(sub.map(({ lookupName, type }) => lookupName || type));
}
function unhandled(type, { info: info6 }) {
  throw new Error(`Unhandled: Unable to create and validate type from ${type} (info=${TypeDefInfo[info6]})`);
}
var mapping = {
  [TypeDefInfo.BTreeMap]: extractSubArray,
  [TypeDefInfo.BTreeSet]: extractSubSingle,
  [TypeDefInfo.Compact]: extractSubSingle,
  [TypeDefInfo.DoNotConstruct]: unhandled,
  [TypeDefInfo.Enum]: extractSubArray,
  [TypeDefInfo.HashMap]: extractSubArray,
  [TypeDefInfo.Int]: unhandled,
  [TypeDefInfo.Linkage]: extractSubSingle,
  [TypeDefInfo.Null]: unhandled,
  [TypeDefInfo.Option]: extractSubSingle,
  [TypeDefInfo.Plain]: (_, typeDef) => typeDef.lookupName || typeDef.type,
  [TypeDefInfo.Range]: extractSubSingle,
  [TypeDefInfo.RangeInclusive]: extractSubSingle,
  [TypeDefInfo.Result]: extractSubArray,
  [TypeDefInfo.Set]: extractSubArray,
  [TypeDefInfo.Si]: unhandled,
  [TypeDefInfo.Struct]: extractSubArray,
  [TypeDefInfo.Tuple]: extractSubArray,
  [TypeDefInfo.UInt]: unhandled,
  [TypeDefInfo.Vec]: extractSubSingle,
  [TypeDefInfo.VecFixed]: extractSubSingle,
  [TypeDefInfo.WrapperKeepOpaque]: extractSubSingle,
  [TypeDefInfo.WrapperOpaque]: extractSubSingle
};
function extractTypes(types2) {
  const count = types2.length;
  const result = new Array(count);
  for (let i = 0; i < count; i++) {
    const type = types2[i];
    const typeDef = getTypeDef(type);
    result[i] = mapping[typeDef.info](type, typeDef);
  }
  return result;
}

// node_modules/@polkadot/types/metadata/util/validateTypes.js
var l7 = logger4("metadata");
function validateTypes(registry, throwError, types2) {
  const missing = flattenUniq(extractTypes(types2)).filter((type) => !registry.hasType(type) && !registry.isLookupType(type)).sort();
  if (missing.length !== 0) {
    const message = `Unknown types found, no types for ${missing.join(", ")}`;
    if (throwError) {
      throw new Error(message);
    } else {
      l7.warn(message);
    }
  }
  return types2;
}

// node_modules/@polkadot/types/metadata/util/getUniqTypes.js
function extractTypes2(lookup, types2) {
  return types2.map(({ type }) => lookup.getTypeDef(type).type);
}
function extractFieldTypes(lookup, type) {
  return lookup.getSiType(type).def.asVariant.variants.map(({ fields }) => extractTypes2(lookup, fields));
}
function getPalletNames({ lookup, pallets }) {
  return pallets.reduce((all3, { calls, constants, events: events2, storage }) => {
    all3.push([extractTypes2(lookup, constants)]);
    if (calls.isSome) {
      all3.push(extractFieldTypes(lookup, calls.unwrap().type));
    }
    if (events2.isSome) {
      all3.push(extractFieldTypes(lookup, events2.unwrap().type));
    }
    if (storage.isSome) {
      all3.push(storage.unwrap().items.map(({ type }) => {
        if (type.isPlain) {
          return [lookup.getTypeDef(type.asPlain).type];
        }
        const { hashers, key, value } = type.asMap;
        return hashers.length === 1 ? [
          lookup.getTypeDef(value).type,
          lookup.getTypeDef(key).type
        ] : [
          lookup.getTypeDef(value).type,
          ...lookup.getSiType(key).def.asTuple.map((t) => lookup.getTypeDef(t).type)
        ];
      }));
    }
    return all3;
  }, []);
}
function getUniqTypes(registry, meta, throwError) {
  return validateTypes(registry, throwError, flattenUniq(getPalletNames(meta)));
}

// node_modules/@polkadot/types/metadata/util/toCallsOnly.js
function trimDocs(docs) {
  const strings = docs.map((d) => d.toString().trim());
  const firstEmpty = strings.findIndex((d) => !d.length);
  return firstEmpty === -1 ? strings : strings.slice(0, firstEmpty);
}
function toCallsOnly(registry, { extrinsic, lookup, pallets }) {
  return registry.createTypeUnsafe("MetadataLatest", [{
    extrinsic,
    lookup: {
      types: lookup.types.map(({ id, type }) => registry.createTypeUnsafe("PortableType", [{
        id,
        type: objectSpread5({}, type, { docs: trimDocs(type.docs) })
      }]))
    },
    pallets: pallets.map(({ calls, index, name }) => ({
      calls: registry.createTypeUnsafe("Option<PalletCallMetadataLatest>", [calls.unwrapOr(null)]),
      index,
      name
    }))
  }]).toJSON();
}

// node_modules/@polkadot/types/util/storage.js
function unwrapStorageSi(type) {
  return type.isPlain ? type.asPlain : type.asMap.value;
}
function unwrapStorageType(registry, type, isOptional) {
  const outputType = getSiName(registry.lookup, unwrapStorageSi(type));
  return isOptional ? `Option<${outputType}>` : outputType;
}

// node_modules/@polkadot/types/create/lazy.js
function lazyVariants(lookup, { type }, getName, creator) {
  const result = {};
  const variants = lookup.getSiType(type).def.asVariant.variants;
  for (let i = 0, count = variants.length; i < count; i++) {
    lazyMethod4(result, variants[i], creator, getName, i);
  }
  return result;
}

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/base32/helpers.js
function createDecode({ coder, ipfs }, validate) {
  return (value, ipfsCompat) => {
    validate(value, ipfsCompat);
    return coder.decode(ipfs && ipfsCompat ? value.substring(1) : value);
  };
}
function createEncode({ coder, ipfs }) {
  return (value, ipfsCompat) => {
    const out = coder.encode(u8aToU8a5(value));
    return ipfs && ipfsCompat ? `${ipfs}${out}` : out;
  };
}
function createValidate({ chars, ipfs, type, withPadding }) {
  return (value, ipfsCompat) => {
    if (typeof value !== "string") {
      throw new Error(`Expected ${type} string input`);
    } else if (ipfs && ipfsCompat && !value.startsWith(ipfs)) {
      throw new Error(`Expected ipfs-compatible ${type} to start with '${ipfs}'`);
    }
    for (let i = ipfsCompat ? 1 : 0, count = value.length; i < count; i++) {
      if (chars.includes(value[i])) {
      } else if (withPadding && value[i] === "=") {
        if (i === count - 1) {
        } else if (value[i + 1] === "=") {
        } else {
          throw new Error(`Invalid ${type} padding sequence "${value[i]}${value[i + 1]}" at index ${i}`);
        }
      } else {
        throw new Error(`Invalid ${type} character "${value[i]}" (0x${value.charCodeAt(i).toString(16)}) at index ${i}`);
      }
    }
    return true;
  };
}

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/base58/bs58.js
var config2 = {
  chars: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz",
  coder: base58,
  ipfs: "z",
  type: "base58"
};
var base58Validate = /* @__PURE__ */ createValidate(config2);
var base58Decode = /* @__PURE__ */ createDecode(config2, base58Validate);
var base58Encode = /* @__PURE__ */ createEncode(config2);

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/helpers.js
function createDualHasher(wa, js) {
  return (value, bitLength = 256, onlyJs) => {
    const u8a = u8aToU8a5(value);
    return !hasBigInt5 || !onlyJs && isReady() ? wa[bitLength](u8a) : js[bitLength](u8a);
  };
}

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/blake2/asU8a.js
function blake2AsU8a(data, bitLength = 256, key, onlyJs) {
  const byteLength = Math.ceil(bitLength / 8);
  const u8a = u8aToU8a5(data);
  return !hasBigInt5 || !onlyJs && isReady() ? blake2b(u8a, u8aToU8a5(key), byteLength) : key ? blake2b3(u8a, { dkLen: byteLength, key }) : blake2b3(u8a, { dkLen: byteLength });
}

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/address/sshash.js
var SS58_PREFIX = stringToU8a6("SS58PRE");
function sshash(key) {
  return blake2AsU8a(u8aConcat4(SS58_PREFIX, key), 512);
}

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/address/checksum.js
function checkAddressChecksum(decoded) {
  const ss58Length = decoded[0] & 64 ? 2 : 1;
  const ss58Decoded = ss58Length === 1 ? decoded[0] : (decoded[0] & 63) << 2 | decoded[1] >> 6 | (decoded[1] & 63) << 8;
  const isPublicKey = [34 + ss58Length, 35 + ss58Length].includes(decoded.length);
  const length = decoded.length - (isPublicKey ? 2 : 1);
  const hash = sshash(decoded.subarray(0, length));
  const isValid2 = (decoded[0] & 128) === 0 && ![46, 47].includes(decoded[0]) && (isPublicKey ? decoded[decoded.length - 2] === hash[0] && decoded[decoded.length - 1] === hash[1] : decoded[decoded.length - 1] === hash[0]);
  return [isValid2, length, ss58Length, ss58Decoded];
}

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/address/defaults.js
var defaults = {
  allowedDecodedLengths: [1, 2, 4, 8, 32, 33],
  // publicKey has prefix + 2 checksum bytes, short only prefix + 1 checksum byte
  allowedEncodedLengths: [3, 4, 6, 10, 35, 36, 37, 38],
  allowedPrefix: availableNetworks.map(({ prefix: prefix2 }) => prefix2),
  prefix: 42
};

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/address/decode.js
function decodeAddress(encoded, ignoreChecksum, ss58Format = -1) {
  if (!encoded) {
    throw new Error("Invalid empty address passed");
  }
  if (isU8a5(encoded) || isHex5(encoded)) {
    return u8aToU8a5(encoded);
  }
  try {
    const decoded = base58Decode(encoded);
    if (!defaults.allowedEncodedLengths.includes(decoded.length)) {
      throw new Error("Invalid decoded address length");
    }
    const [isValid2, endPos, ss58Length, ss58Decoded] = checkAddressChecksum(decoded);
    if (!isValid2 && !ignoreChecksum) {
      throw new Error("Invalid decoded address checksum");
    } else if (ss58Format !== -1 && ss58Format !== ss58Decoded) {
      throw new Error(`Expected ss58Format ${ss58Format}, received ${ss58Decoded}`);
    }
    return decoded.slice(ss58Length, endPos);
  } catch (error) {
    throw new Error(`Decoding ${encoded}: ${error.message}`);
  }
}

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/bn.js
var BN_BE_256_OPTS = { bitLength: 256, isLe: false };

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/address/encode.js
function encodeAddress(key, ss58Format = defaults.prefix) {
  const u8a = decodeAddress(key);
  if (ss58Format < 0 || ss58Format > 16383 || [46, 47].includes(ss58Format)) {
    throw new Error("Out of range ss58Format specified");
  } else if (!defaults.allowedDecodedLengths.includes(u8a.length)) {
    throw new Error(`Expected a valid key to convert, with length ${defaults.allowedDecodedLengths.join(", ")}`);
  }
  const input = u8aConcat4(ss58Format < 64 ? [ss58Format] : [
    (ss58Format & 252) >> 2 | 64,
    ss58Format >> 8 | (ss58Format & 3) << 6
  ], u8a);
  return base58Encode(u8aConcat4(input, sshash(input).subarray(0, [32, 33].includes(u8a.length) ? 2 : 1)));
}

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/keccak/asU8a.js
var keccakAsU8a = /* @__PURE__ */ createDualHasher({ 256: keccak256, 512: keccak512 }, { 256: keccak_256, 512: keccak_512 });

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/secp256k1/expand.js
function secp256k1Expand2(publicKey, onlyJs) {
  if (![33, 65].includes(publicKey.length)) {
    throw new Error(`Invalid publicKey provided, received ${publicKey.length} bytes input`);
  }
  if (publicKey.length === 65) {
    return publicKey.subarray(1);
  }
  if (!hasBigInt5 || !onlyJs && isReady()) {
    return secp256k1Expand(publicKey).subarray(1);
  }
  const { px, py } = secp256k1.ProjectivePoint.fromHex(publicKey);
  return u8aConcat4(bnToU8a(px, BN_BE_256_OPTS), bnToU8a(py, BN_BE_256_OPTS));
}

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/ethereum/encode.js
function getH160(u8a) {
  if ([33, 65].includes(u8a.length)) {
    u8a = keccakAsU8a(secp256k1Expand2(u8a));
  }
  return u8a.slice(-20);
}
function ethereumEncode(addressOrPublic) {
  if (!addressOrPublic) {
    return "0x";
  }
  const u8aAddress = u8aToU8a5(addressOrPublic);
  if (![20, 32, 33, 65].includes(u8aAddress.length)) {
    throw new Error(`Invalid address or publicKey provided, received ${u8aAddress.length} bytes input`);
  }
  const address = u8aToHex5(getH160(u8aAddress), -1, false);
  const hash = u8aToHex5(keccakAsU8a(address), -1, false);
  let result = "";
  for (let i = 0; i < 40; i++) {
    result = `${result}${parseInt(hash[i], 16) > 7 ? address[i].toUpperCase() : address[i]}`;
  }
  return `0x${result}`;
}

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/ethereum/isChecksum.js
function isInvalidChar(char, byte) {
  return char !== (byte > 7 ? char.toUpperCase() : char.toLowerCase());
}
function isEthereumChecksum(_address) {
  const address = _address.replace("0x", "");
  const hash = u8aToHex5(keccakAsU8a(address.toLowerCase()), -1, false);
  for (let i = 0; i < 40; i++) {
    if (isInvalidChar(address[i], parseInt(hash[i], 16))) {
      return false;
    }
  }
  return true;
}

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/ethereum/isAddress.js
function isEthereumAddress(address) {
  if (!address || address.length !== 42 || !isHex5(address)) {
    return false;
  } else if (/^(0x)?[0-9a-f]{40}$/.test(address) || /^(0x)?[0-9A-F]{40}$/.test(address)) {
    return true;
  }
  return isEthereumChecksum(address);
}

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/xxhash/xxhash64.js
var P64_1 = BigInt2("11400714785074694791");
var P64_2 = BigInt2("14029467366897019727");
var P64_3 = BigInt2("1609587929392839161");
var P64_4 = BigInt2("9650029242287828579");
var P64_5 = BigInt2("2870177450012600261");
var U64 = BigInt2("0xffffffffffffffff");
var _7n3 = BigInt2(7);
var _11n = BigInt2(11);
var _12n = BigInt2(12);
var _16n2 = BigInt2(16);
var _18n = BigInt2(18);
var _23n = BigInt2(23);
var _27n = BigInt2(27);
var _29n = BigInt2(29);
var _31n = BigInt2(31);
var _32n2 = BigInt2(32);
var _33n = BigInt2(33);
var _64n = BigInt2(64);
var _256n2 = BigInt2(256);
function rotl(a, b) {
  const c = a & U64;
  return (c << b | c >> _64n - b) & U64;
}
function fromU8a(u8a, p, count) {
  const bigints = new Array(count);
  let offset = 0;
  for (let i = 0; i < count; i++, offset += 2) {
    bigints[i] = BigInt2(u8a[p + offset] | u8a[p + 1 + offset] << 8);
  }
  let result = _0n6;
  for (let i = count - 1; i >= 0; i--) {
    result = (result << _16n2) + bigints[i];
  }
  return result;
}
function init(seed, input) {
  const state = {
    seed,
    u8a: new Uint8Array(32),
    u8asize: 0,
    v1: seed + P64_1 + P64_2,
    v2: seed + P64_2,
    v3: seed,
    v4: seed - P64_1
  };
  if (input.length < 32) {
    state.u8a.set(input);
    state.u8asize = input.length;
    return state;
  }
  const limit = input.length - 32;
  let p = 0;
  if (limit >= 0) {
    const adjustV = (v) => P64_1 * rotl(v + P64_2 * fromU8a(input, p, 4), _31n);
    do {
      state.v1 = adjustV(state.v1);
      p += 8;
      state.v2 = adjustV(state.v2);
      p += 8;
      state.v3 = adjustV(state.v3);
      p += 8;
      state.v4 = adjustV(state.v4);
      p += 8;
    } while (p <= limit);
  }
  if (p < input.length) {
    state.u8a.set(input.subarray(p, input.length));
    state.u8asize = input.length - p;
  }
  return state;
}
function xxhash64(input, initSeed) {
  const { seed, u8a, u8asize, v1: v17, v2: v22, v3: v32, v4: v43 } = init(BigInt2(initSeed), input);
  let p = 0;
  let h64 = U64 & BigInt2(input.length) + (input.length >= 32 ? ((((rotl(v17, _1n6) + rotl(v22, _7n3) + rotl(v32, _12n) + rotl(v43, _18n) ^ P64_1 * rotl(v17 * P64_2, _31n)) * P64_1 + P64_4 ^ P64_1 * rotl(v22 * P64_2, _31n)) * P64_1 + P64_4 ^ P64_1 * rotl(v32 * P64_2, _31n)) * P64_1 + P64_4 ^ P64_1 * rotl(v43 * P64_2, _31n)) * P64_1 + P64_4 : seed + P64_5);
  while (p <= u8asize - 8) {
    h64 = U64 & P64_4 + P64_1 * rotl(h64 ^ P64_1 * rotl(P64_2 * fromU8a(u8a, p, 4), _31n), _27n);
    p += 8;
  }
  if (p + 4 <= u8asize) {
    h64 = U64 & P64_3 + P64_2 * rotl(h64 ^ P64_1 * fromU8a(u8a, p, 2), _23n);
    p += 4;
  }
  while (p < u8asize) {
    h64 = U64 & P64_1 * rotl(h64 ^ P64_5 * BigInt2(u8a[p++]), _11n);
  }
  h64 = U64 & P64_2 * (h64 ^ h64 >> _33n);
  h64 = U64 & P64_3 * (h64 ^ h64 >> _29n);
  h64 = U64 & (h64 ^ h64 >> _32n2);
  const result = new Uint8Array(8);
  for (let i = 7; i >= 0; i--) {
    result[i] = Number(h64 % _256n2);
    h64 = h64 / _256n2;
  }
  return result;
}

// node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/xxhash/asU8a.js
function xxhashAsU8a(data, bitLength = 64, onlyJs) {
  const rounds = Math.ceil(bitLength / 64);
  const u8a = u8aToU8a5(data);
  if (!hasBigInt5 || !onlyJs && isReady()) {
    return twox(u8a, rounds);
  }
  const result = new Uint8Array(rounds * 8);
  for (let seed = 0; seed < rounds; seed++) {
    result.set(xxhash64(u8a, seed).reverse(), seed * 8);
  }
  return result;
}

// node_modules/@polkadot/types/extrinsic/signedExtensions/emptyCheck.js
var emptyCheck = {
  extrinsic: {},
  payload: {}
};

// node_modules/@polkadot/types/extrinsic/signedExtensions/polkadot.js
var polkadot = {
  LimitParathreadCommits: emptyCheck,
  OnlyStakingAndClaims: emptyCheck,
  PrevalidateAttests: emptyCheck,
  RestrictFunctionality: emptyCheck,
  TransactionCallFilter: emptyCheck,
  ValidateDoubleVoteReports: emptyCheck
};

// node_modules/@polkadot/types/extrinsic/signedExtensions/shell.js
var shell = {
  DisallowSigned: emptyCheck
};

// node_modules/@polkadot/types/extrinsic/signedExtensions/statemint.js
var statemint = {
  ChargeAssetTxPayment: {
    extrinsic: {
      tip: "Compact<Balance>",
      // eslint-disable-next-line sort-keys
      assetId: "TAssetConversion"
    },
    payload: {}
  }
};

// node_modules/@polkadot/types/extrinsic/signedExtensions/substrate.js
var CheckMetadataHash = {
  extrinsic: {
    mode: "u8"
  },
  payload: {
    metadataHash: "Option<[u8;32]>"
  }
};
var CheckMortality = {
  extrinsic: {
    era: "ExtrinsicEra"
  },
  payload: {
    blockHash: "Hash"
  }
};
var ChargeTransactionPayment = {
  extrinsic: {
    tip: "Compact<Balance>"
  },
  payload: {}
};
var substrate = {
  ChargeTransactionPayment,
  CheckBlockGasLimit: emptyCheck,
  CheckEra: CheckMortality,
  CheckGenesis: {
    extrinsic: {},
    payload: {
      genesisHash: "Hash"
    }
  },
  CheckMetadataHash,
  CheckMortality,
  CheckNonZeroSender: emptyCheck,
  CheckNonce: {
    extrinsic: {
      nonce: "Compact<Index>"
    },
    payload: {}
  },
  CheckSpecVersion: {
    extrinsic: {},
    payload: {
      specVersion: "u32"
    }
  },
  CheckTxVersion: {
    extrinsic: {},
    payload: {
      transactionVersion: "u32"
    }
  },
  CheckVersion: {
    extrinsic: {},
    payload: {
      specVersion: "u32"
    }
  },
  CheckWeight: emptyCheck,
  LockStakingStatus: emptyCheck,
  SkipCheckIfFeeless: ChargeTransactionPayment,
  ValidateEquivocationReport: emptyCheck
};

// node_modules/@polkadot/types/extrinsic/signedExtensions/index.js
var allExtensions = objectSpread5({}, substrate, polkadot, shell, statemint);
var fallbackExtensions = [
  "CheckVersion",
  "CheckGenesis",
  "CheckEra",
  "CheckNonce",
  "CheckWeight",
  "ChargeTransactionPayment",
  "CheckBlockGasLimit"
];
function findUnknownExtensions(extensions, userExtensions = {}) {
  const names = [...Object.keys(allExtensions), ...Object.keys(userExtensions)];
  return extensions.filter((k) => !names.includes(k));
}
function expandExtensionTypes(extensions, type, userExtensions = {}) {
  return extensions.map((k) => userExtensions[k] || allExtensions[k]).filter((info6) => !!info6).reduce((result, info6) => objectSpread5(result, info6[type]), {});
}

// node_modules/@polkadot/types/generic/Event.js
function decodeEvent(registry, value) {
  if (!value?.length) {
    return { DataType: Null };
  }
  const index = value.subarray(0, 2);
  return {
    DataType: registry.findMetaEvent(index),
    value: {
      data: value.subarray(2),
      index
    }
  };
}
var GenericEventData = class extends Tuple {
  __internal__meta;
  __internal__method;
  __internal__names = null;
  __internal__section;
  __internal__typeDef;
  constructor(registry, value, meta, section2 = "<unknown>", method = "<unknown>") {
    const fields = meta?.fields || [];
    super(registry, fields.map(({ type }) => registry.createLookupType(type)), value);
    this.__internal__meta = meta;
    this.__internal__method = method;
    this.__internal__section = section2;
    this.__internal__typeDef = fields.map(({ type }) => registry.lookup.getTypeDef(type));
    const names = fields.map(({ name }) => registry.lookup.sanitizeField(name)[0]).filter((n) => !!n);
    if (names.length === fields.length) {
      this.__internal__names = names;
      objectProperties(this, names, (_, i) => this[i]);
    }
  }
  /**
   * @description The wrapped [[EventMetadata]]
   */
  get meta() {
    return this.__internal__meta;
  }
  /**
   * @description The method as a string
   */
  get method() {
    return this.__internal__method;
  }
  /**
   * @description The field names (as available)
   */
  get names() {
    return this.__internal__names;
  }
  /**
   * @description The section as a string
   */
  get section() {
    return this.__internal__section;
  }
  /**
   * @description The [[TypeDef]] for this event
   */
  get typeDef() {
    return this.__internal__typeDef;
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman(isExtended, disableAscii) {
    if (this.__internal__names !== null) {
      const json = {};
      for (let i = 0, count = this.__internal__names.length; i < count; i++) {
        json[this.__internal__names[i]] = this[i].toHuman(isExtended, disableAscii);
      }
      return json;
    }
    return super.toHuman(isExtended);
  }
};
var GenericEvent = class extends Struct {
  // Currently we _only_ decode from Uint8Array, since we expect it to
  // be used via EventRecord
  constructor(registry, _value) {
    const { DataType, value } = decodeEvent(registry, _value);
    super(registry, {
      index: "EventId",
      // eslint-disable-next-line sort-keys
      data: DataType
    }, value);
  }
  /**
   * @description The wrapped [[EventData]]
   */
  get data() {
    return this.getT("data");
  }
  /**
   * @description The [[EventId]], identifying the raw event
   */
  get index() {
    return this.getT("index");
  }
  /**
   * @description The [[EventMetadata]] with the documentation
   */
  get meta() {
    return this.data.meta;
  }
  /**
   * @description The method string identifying the event
   */
  get method() {
    return this.data.method;
  }
  /**
   * @description The section string identifying the event
   */
  get section() {
    return this.data.section;
  }
  /**
   * @description The [[TypeDef]] for the event
   */
  get typeDef() {
    return this.data.typeDef;
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman(isExpanded, disableAscii) {
    return objectSpread5({
      method: this.method,
      section: this.section
    }, isExpanded ? { docs: this.meta.docs.map((d) => d.toString()) } : null, super.toHuman(isExpanded, disableAscii));
  }
};

// node_modules/@polkadot/types/index.types.js
var index_types_exports = {};
__export(index_types_exports, {
  BitVec: () => BitVec,
  Bool: () => bool,
  Bytes: () => Bytes,
  Data: () => Data,
  F32: () => f32,
  F64: () => f64,
  GeneralExtrinsic: () => GeneralExtrinsic,
  GenericAccountId: () => GenericAccountId,
  GenericAccountId32: () => GenericAccountId,
  GenericAccountId33: () => GenericAccountId33,
  GenericAccountIndex: () => GenericAccountIndex,
  GenericAddress: () => GenericMultiAddress,
  GenericBlock: () => GenericBlock,
  GenericCall: () => GenericCall,
  GenericChainProperties: () => GenericChainProperties,
  GenericConsensusEngineId: () => GenericConsensusEngineId,
  GenericEthereumAccountId: () => GenericEthereumAccountId,
  GenericEthereumLookupSource: () => GenericEthereumLookupSource,
  GenericEvent: () => GenericEvent,
  GenericEventData: () => GenericEventData,
  GenericExtrinsic: () => GenericExtrinsic,
  GenericExtrinsicEra: () => GenericExtrinsicEra,
  GenericExtrinsicPayload: () => GenericExtrinsicPayload,
  GenericExtrinsicPayloadUnknown: () => GenericExtrinsicPayloadUnknown,
  GenericExtrinsicPayloadV4: () => GenericExtrinsicPayloadV4,
  GenericExtrinsicPayloadV5: () => GenericExtrinsicPayloadV5,
  GenericExtrinsicSignatureV4: () => GenericExtrinsicSignatureV4,
  GenericExtrinsicSignatureV5: () => GenericExtrinsicSignatureV5,
  GenericExtrinsicUnknown: () => GenericExtrinsicUnknown,
  GenericExtrinsicV4: () => GenericExtrinsicV4,
  GenericExtrinsicV5: () => GenericExtrinsicV5,
  GenericImmortalEra: () => ImmortalEra,
  GenericLookupSource: () => GenericLookupSource,
  GenericMortalEra: () => MortalEra,
  GenericMultiAddress: () => GenericMultiAddress,
  GenericSignerPayload: () => GenericSignerPayload,
  GenericVote: () => GenericVote,
  I128: () => i128,
  I16: () => i16,
  I256: () => i256,
  I32: () => i32,
  I64: () => i64,
  I8: () => i8,
  ISize: () => isize,
  Null: () => Null,
  OptionBool: () => OptionBool,
  StorageKey: () => StorageKey,
  Text: () => Text,
  Type: () => Type,
  U128: () => u128,
  U16: () => u162,
  U256: () => u256,
  U32: () => u323,
  U64: () => u64,
  U8: () => u82,
  USize: () => usize,
  bool: () => bool,
  f32: () => f32,
  f64: () => f64,
  i128: () => i128,
  i16: () => i16,
  i256: () => i256,
  i32: () => i32,
  i64: () => i64,
  i8: () => i8,
  isize: () => isize,
  u128: () => u128,
  u16: () => u162,
  u256: () => u256,
  u32: () => u323,
  u64: () => u64,
  u8: () => u82,
  usize: () => usize
});

// node_modules/@polkadot/types/extrinsic/constants.js
var BIT_SIGNED = 128;
var BIT_UNSIGNED = 0;
var EMPTY_U8A = new Uint8Array();
var IMMORTAL_ERA = new Uint8Array([0]);
var UNMASK_VERSION = 127;
var DEFAULT_PREAMBLE = "bare";
var LATEST_EXTRINSIC_VERSION = 5;
var VERSION_MASK = 63;
var TYPE_MASK = 192;
var BARE_EXTRINSIC = 0;
var SIGNED_EXTRINSIC = 128;
var GENERAL_EXTRINSIC = 64;
var LOWEST_SUPPORTED_EXTRINSIC_FORMAT_VERSION = 4;

// node_modules/@polkadot/types/extrinsic/Extrinsic.js
var VERSIONS = [
  "ExtrinsicUnknown",
  // v0 is unknown
  "ExtrinsicUnknown",
  "ExtrinsicUnknown",
  "ExtrinsicUnknown",
  "ExtrinsicV4",
  "ExtrinsicV5"
];
var PREAMBLE = {
  bare: "ExtrinsicV5",
  general: "GeneralExtrinsic",
  signed: "ExtrinsicV5"
};
var PreambleMask = {
  bare: BARE_EXTRINSIC,
  general: GENERAL_EXTRINSIC,
  signed: SIGNED_EXTRINSIC
};
var preambleUnMask = {
  0: "bare",
  // eslint-disable-next-line sort-keys
  64: "general",
  // eslint-disable-next-line sort-keys
  128: "signed"
};
function newFromValue(registry, value, version2, preamble) {
  if (value instanceof GenericExtrinsic) {
    return value.unwrap();
  }
  const isSigned = (version2 & BIT_SIGNED) === BIT_SIGNED;
  const type = (version2 & VERSION_MASK) === 5 ? PREAMBLE[preamble] : VERSIONS[version2 & VERSION_MASK] || VERSIONS[0];
  return registry.createTypeUnsafe(type, [value, { isSigned, version: version2 }]);
}
function decodeExtrinsic(registry, value, version2 = LOWEST_SUPPORTED_EXTRINSIC_FORMAT_VERSION, preamble = DEFAULT_PREAMBLE) {
  if (isU8a5(value) || Array.isArray(value) || isHex5(value)) {
    return decodeU8a3(registry, u8aToU8a5(value), version2, preamble);
  } else if (value instanceof registry.createClassUnsafe("Call")) {
    return newFromValue(registry, { method: value }, version2, preamble);
  }
  return newFromValue(registry, value, version2, preamble);
}
function decodeU8a3(registry, value, version2, preamble) {
  if (!value.length) {
    return newFromValue(registry, new Uint8Array(), version2, preamble);
  }
  const [offset, length] = compactFromU8a2(value);
  const total = offset + length.toNumber();
  if (total > value.length) {
    throw new Error(`Extrinsic: length less than remainder, expected at least ${total}, found ${value.length}`);
  }
  const data = value.subarray(offset, total);
  const unmaskedPreamble = data[0] & TYPE_MASK;
  if (preambleUnMask[`${unmaskedPreamble}`] === "general") {
    return newFromValue(registry, value, data[0], preambleUnMask[`${unmaskedPreamble}`] || preamble);
  } else {
    return newFromValue(registry, data.subarray(1), data[0], preambleUnMask[`${unmaskedPreamble}`] || preamble);
  }
}
var ExtrinsicBase = class extends AbstractBase {
  __internal__preamble;
  constructor(registry, value, initialU8aLength, preamble) {
    super(registry, value, initialU8aLength);
    const signKeys = Object.keys(registry.getSignedExtensionTypes());
    if (this.version === 5 && preamble !== "general") {
      const getter = (key) => this.inner.signature[key];
      for (let i = 0, count = signKeys.length; i < count; i++) {
        objectProperty(this, signKeys[i], getter);
      }
    }
    const unmaskedPreamble = this.type & TYPE_MASK;
    this.__internal__preamble = preamble || preambleUnMask[`${unmaskedPreamble}`];
  }
  isGeneral() {
    return this.__internal__preamble === "general";
  }
  /**
   * @description The arguments passed to for the call, exposes args so it is compatible with [[Call]]
   */
  get args() {
    return this.method.args;
  }
  /**
   * @description The argument definitions, compatible with [[Call]]
   */
  get argsDef() {
    return this.method.argsDef;
  }
  /**
   * @description The actual `[sectionIndex, methodIndex]` as used in the Call
   */
  get callIndex() {
    return this.method.callIndex;
  }
  /**
   * @description The actual data for the Call
   */
  get data() {
    return this.method.data;
  }
  /**
   * @description The era for this extrinsic
   */
  get era() {
    return this.isGeneral() ? this.inner.era : this.inner.signature.era;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    return this.toU8a().length;
  }
  /**
   * @description `true` id the extrinsic is signed
   */
  get isSigned() {
    return this.isGeneral() ? false : this.inner.signature.isSigned;
  }
  /**
   * @description The length of the actual data, excluding prefix
   */
  get length() {
    return this.toU8a(true).length;
  }
  /**
   * @description The [[FunctionMetadataLatest]] that describes the extrinsic
   */
  get meta() {
    return this.method.meta;
  }
  /**
   * @description The [[Call]] this extrinsic wraps
   */
  get method() {
    return this.inner.method;
  }
  /**
   * @description The nonce for this extrinsic
   */
  get nonce() {
    return this.isGeneral() ? this.inner.nonce : this.inner.signature.nonce;
  }
  /**
   * @description The actual [[EcdsaSignature]], [[Ed25519Signature]] or [[Sr25519Signature]]
   */
  get signature() {
    if (this.isGeneral()) {
      throw new Error("Extrinsic: GeneralExtrinsic does not have signature implemented");
    }
    return this.inner.signature.signature;
  }
  /**
   * @description The [[Address]] that signed
   */
  get signer() {
    if (this.isGeneral()) {
      throw new Error("Extrinsic: GeneralExtrinsic does not have signer implemented");
    }
    return this.inner.signature.signer;
  }
  /**
   * @description Forwards compat
   */
  get tip() {
    return this.isGeneral() ? this.inner.tip : this.inner.signature.tip;
  }
  /**
   * @description Forward compat
   */
  get assetId() {
    return this.isGeneral() ? this.inner.assetId : this.inner.signature.assetId;
  }
  /**
   * @description Forward compat
   */
  get metadataHash() {
    return this.isGeneral() ? this.inner.metadataHash : this.inner.signature.metadataHash;
  }
  /**
   * @description Forward compat
   */
  get mode() {
    return this.isGeneral() ? this.inner.mode : this.inner.signature.mode;
  }
  /**
   * @description Returns the raw transaction version (not flagged with signing information)
  */
  get type() {
    return this.inner.version;
  }
  get inner() {
    return this.unwrap();
  }
  /**
   * @description Returns the encoded version flag
  */
  get version() {
    if (this.type <= LOWEST_SUPPORTED_EXTRINSIC_FORMAT_VERSION) {
      return this.type | (this.isSigned ? BIT_SIGNED : BIT_UNSIGNED);
    } else {
      return this.type | (this.isSigned ? PreambleMask.signed : this.isGeneral() ? PreambleMask.general : PreambleMask.bare);
    }
  }
  /**
   * @description Checks if the source matches this in type
   */
  is(other) {
    return this.method.is(other);
  }
  unwrap() {
    return super.unwrap();
  }
};
var GenericExtrinsic = class extends ExtrinsicBase {
  __internal__hashCache;
  static LATEST_EXTRINSIC_VERSION = LATEST_EXTRINSIC_VERSION;
  constructor(registry, value, { preamble, version: version2 } = {}) {
    super(registry, decodeExtrinsic(registry, value, version2 || registry.metadata.extrinsic.version?.toNumber(), preamble), void 0, preamble);
  }
  /**
   * @description returns a hash of the contents
   */
  get hash() {
    if (!this.__internal__hashCache) {
      this.__internal__hashCache = super.hash;
    }
    return this.__internal__hashCache;
  }
  /**
   * @description Injects an already-generated signature into the extrinsic
   */
  addSignature(signer, signature, payload) {
    this.inner.addSignature(signer, signature, payload);
    this.__internal__hashCache = void 0;
    return this;
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    const encoded = u8aConcat4(...this.toU8aInner());
    return {
      inner: this.isSigned ? this.inner.inspect().inner : this.inner.method.inspect().inner,
      outer: [compactToU8a(encoded.length), new Uint8Array([this.version])]
    };
  }
  /**
   * @description Sign the extrinsic with a specific keypair
   */
  sign(account3, options) {
    this.inner.sign(account3, options);
    this.__internal__hashCache = void 0;
    return this;
  }
  /**
   * @describe Adds a fake signature to the extrinsic
   */
  signFake(signer, options) {
    this.inner.signFake(signer, options);
    this.__internal__hashCache = void 0;
    return this;
  }
  /**
   * @description Returns a hex string representation of the value
   */
  toHex(isBare) {
    return u8aToHex5(this.toU8a(isBare));
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman(isExpanded, disableAscii) {
    return objectSpread5({}, {
      isSigned: this.isSigned,
      method: this.method.toHuman(isExpanded, disableAscii)
    }, this.isSigned ? {
      assetId: this.assetId ? this.assetId.toHuman(isExpanded, disableAscii) : null,
      era: this.era.toHuman(isExpanded, disableAscii),
      metadataHash: this.metadataHash ? this.metadataHash.toHex() : null,
      mode: this.mode ? this.mode.toHuman() : null,
      nonce: this.nonce.toHuman(isExpanded, disableAscii),
      signature: this.signature.toHex(),
      signer: this.signer.toHuman(isExpanded, disableAscii),
      tip: this.tip.toHuman(isExpanded, disableAscii)
    } : null);
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    return this.toHex();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return "Extrinsic";
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value is not length-prefixed
   */
  toU8a(isBare) {
    const encoded = u8aConcat4(...this.toU8aInner());
    return isBare ? encoded : compactAddLength(encoded);
  }
  toU8aInner() {
    return [
      new Uint8Array([this.version]),
      this.inner.toU8a()
    ];
  }
};

// node_modules/@polkadot/types/extrinsic/ExtrinsicEra.js
function getTrailingZeros(period) {
  const binary = period.toString(2);
  let index = 0;
  while (binary[binary.length - 1 - index] === "0") {
    index++;
  }
  return index;
}
function decodeMortalEra(registry, value) {
  if (isU8a5(value) || isHex5(value) || Array.isArray(value)) {
    return decodeMortalU8a(registry, u8aToU8a5(value));
  } else if (!value) {
    return [new u64(registry), new u64(registry)];
  } else if (isObject5(value)) {
    return decodeMortalObject(registry, value);
  }
  throw new Error("Invalid data passed to Mortal era");
}
function decodeMortalObject(registry, value) {
  const { current, period } = value;
  let calPeriod = Math.pow(2, Math.ceil(Math.log2(period)));
  calPeriod = Math.min(Math.max(calPeriod, 4), 1 << 16);
  const phase = current % calPeriod;
  const quantizeFactor = Math.max(calPeriod >> 12, 1);
  const quantizedPhase = phase / quantizeFactor * quantizeFactor;
  return [new u64(registry, calPeriod), new u64(registry, quantizedPhase)];
}
function decodeMortalU8a(registry, value) {
  if (value.length === 0) {
    return [new u64(registry), new u64(registry)];
  }
  const first2 = u8aToBn2(value.subarray(0, 1)).toNumber();
  const second = u8aToBn2(value.subarray(1, 2)).toNumber();
  const encoded = first2 + (second << 8);
  const period = 2 << encoded % (1 << 4);
  const quantizeFactor = Math.max(period >> 12, 1);
  const phase = (encoded >> 4) * quantizeFactor;
  if (period < 4 || phase >= period) {
    throw new Error("Invalid data passed to Mortal era");
  }
  return [new u64(registry, period), new u64(registry, phase)];
}
function decodeExtrinsicEra(value = new Uint8Array()) {
  if (isU8a5(value)) {
    return !value.length || value[0] === 0 ? new Uint8Array([0]) : new Uint8Array([1, value[0], value[1]]);
  } else if (!value) {
    return new Uint8Array([0]);
  } else if (value instanceof GenericExtrinsicEra) {
    return decodeExtrinsicEra(value.toU8a());
  } else if (isHex5(value)) {
    return decodeExtrinsicEra(hexToU8a5(value));
  } else if (isObject5(value)) {
    const entries = Object.entries(value).map(([k, v]) => [k.toLowerCase(), v]);
    const mortal = entries.find(([k]) => k.toLowerCase() === "mortalera");
    const immortal = entries.find(([k]) => k.toLowerCase() === "immortalera");
    return mortal ? { MortalEra: mortal[1] } : immortal ? { ImmortalEra: immortal[1] } : { MortalEra: value };
  }
  throw new Error("Invalid data passed to Era");
}
var ImmortalEra = class extends Raw {
  constructor(registry, _value) {
    super(registry, IMMORTAL_ERA);
  }
};
var MortalEra = class extends Tuple {
  constructor(registry, value) {
    super(registry, {
      period: u64,
      phase: u64
    }, decodeMortalEra(registry, value));
  }
  /**
   * @description Encoded length for mortals occupy 2 bytes, different from the actual Tuple since it is encoded. This is a shortcut fro `toU8a().length`
   */
  get encodedLength() {
    return 2 | 0;
  }
  /**
   * @description The period of this Mortal wraps as a [[U64]]
   */
  get period() {
    return this[0];
  }
  /**
   * @description The phase of this Mortal wraps as a [[U64]]
   */
  get phase() {
    return this[1];
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman() {
    return {
      period: formatNumber(this.period),
      phase: formatNumber(this.phase)
    };
  }
  /**
   * @description Returns a JSON representation of the actual value
   */
  toJSON() {
    return this.toHex();
  }
  /**
   * @description Encodes the value as a Uint8Array as per the parity-codec specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   * Period and phase are encoded:
   *   - The period of validity from the block hash found in the signing material.
   *   - The phase in the period that this transaction's lifetime begins (and, importantly,
   *     implies which block hash is included in the signature material). If the `period` is
   *     greater than 1 << 12, then it will be a factor of the times greater than 1<<12 that
   *     `period` is.
   */
  toU8a(_isBare) {
    const period = this.period.toNumber();
    const encoded = Math.min(15, Math.max(1, getTrailingZeros(period) - 1)) + (this.phase.toNumber() / Math.max(period >> 12, 1) << 4);
    return new Uint8Array([
      encoded & 255,
      encoded >> 8
    ]);
  }
  /**
   * @description Get the block number of the start of the era whose properties this object describes that `current` belongs to.
   */
  birth(current) {
    const phase = this.phase.toNumber();
    const period = this.period.toNumber();
    return ~~((Math.max(bnToBn2(current).toNumber(), phase) - phase) / period) * period + phase;
  }
  /**
   * @description Get the block number of the first block at which the era has ended.
   */
  death(current) {
    return this.birth(current) + this.period.toNumber();
  }
};
var GenericExtrinsicEra = class extends Enum {
  constructor(registry, value) {
    super(registry, {
      ImmortalEra,
      MortalEra
    }, decodeExtrinsicEra(value));
  }
  /**
   * @description Override the encoded length method
   */
  get encodedLength() {
    return this.isImmortalEra ? this.asImmortalEra.encodedLength : this.asMortalEra.encodedLength;
  }
  /**
   * @description Returns the item as a [[ImmortalEra]]
   */
  get asImmortalEra() {
    if (!this.isImmortalEra) {
      throw new Error(`Cannot convert '${this.type}' via asImmortalEra`);
    }
    return this.inner;
  }
  /**
   * @description Returns the item as a [[MortalEra]]
   */
  get asMortalEra() {
    if (!this.isMortalEra) {
      throw new Error(`Cannot convert '${this.type}' via asMortalEra`);
    }
    return this.inner;
  }
  /**
   * @description `true` if Immortal
   */
  get isImmortalEra() {
    return this.index === 0;
  }
  /**
   * @description `true` if Mortal
   */
  get isMortalEra() {
    return this.index > 0;
  }
  /**
   * @description Encodes the value as a Uint8Array as per the parity-codec specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  toU8a(isBare) {
    return this.isMortalEra ? this.asMortalEra.toU8a(isBare) : this.asImmortalEra.toU8a(isBare);
  }
};

// node_modules/@polkadot/types/extrinsic/ExtrinsicPayload.js
var VERSIONS2 = [
  "ExtrinsicPayloadUnknown",
  // v0 is unknown
  "ExtrinsicPayloadUnknown",
  "ExtrinsicPayloadUnknown",
  "ExtrinsicPayloadUnknown",
  "ExtrinsicPayloadV4",
  "ExtrinsicPayloadV5"
];
var PREAMBLES = {
  bare: "ExtrinsicPayloadV5",
  // Not supported yet
  general: "ExtrinsicPayloadV5",
  signed: "ExtrinsicPayloadV5"
};
function decodeExtrinsicPayload(registry, value, version2 = LATEST_EXTRINSIC_VERSION, preamble = DEFAULT_PREAMBLE) {
  if (value instanceof GenericExtrinsicPayload) {
    return value.unwrap();
  }
  const extVersion = version2 === 5 ? PREAMBLES[preamble] : VERSIONS2[version2] || VERSIONS2[0];
  if (value && value.assetId && isHex5(value.assetId)) {
    const adjustedPayload = {
      ...value,
      assetId: registry.createType("TAssetConversion", hexToU8a5(value.assetId)).toJSON()
    };
    return registry.createTypeUnsafe(extVersion, [adjustedPayload, { version: version2 }]);
  }
  return registry.createTypeUnsafe(extVersion, [value, { version: version2 }]);
}
var GenericExtrinsicPayload = class extends AbstractBase {
  constructor(registry, value, { preamble, version: version2 } = {}) {
    super(registry, decodeExtrinsicPayload(registry, value, version2, preamble));
  }
  /**
   * @description The block [[BlockHash]] the signature applies to (mortal/immortal)
   */
  get blockHash() {
    return this.inner.blockHash;
  }
  /**
   * @description The [[ExtrinsicEra]]
   */
  get era() {
    return this.inner.era;
  }
  /**
   * @description The genesis block [[BlockHash]] the signature applies to
   */
  get genesisHash() {
    return this.inner.genesisHash || this.registry.createTypeUnsafe("Hash", []);
  }
  /**
   * @description The [[Bytes]] contained in the payload
   */
  get method() {
    return this.inner.method;
  }
  /**
   * @description The [[Index]]
   */
  get nonce() {
    return this.inner.nonce;
  }
  /**
   * @description The specVersion as a [[u32]] for this payload
   */
  get specVersion() {
    return this.inner.specVersion || this.registry.createTypeUnsafe("u32", []);
  }
  /**
   * @description The [[Balance]]
   */
  get tip() {
    return this.inner.tip || this.registry.createTypeUnsafe("Compact<Balance>", []);
  }
  /**
   * @description The transaction version as a [[u32]] for this payload
   */
  get transactionVersion() {
    return this.inner.transactionVersion || this.registry.createTypeUnsafe("u32", []);
  }
  /**
   * @description The (optional) asset id as a [[u32]] or [[MultiLocation]] for this payload
   */
  get assetId() {
    return this.inner.assetId;
  }
  /**
   * @description The (optional) [[Hash]] of the genesis metadata for this payload
   */
  get metadataHash() {
    return this.inner.metadataHash;
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  eq(other) {
    return this.inner.eq(other);
  }
  /**
   * @description Sign the payload with the keypair
   */
  sign(signerPair) {
    const signature = this.inner.sign(signerPair);
    return {
      signature: u8aToHex5(signature)
    };
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman(isExtended, disableAscii) {
    return this.inner.toHuman(isExtended, disableAscii);
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    return this.toHex();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return "ExtrinsicPayload";
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    return this.toHex();
  }
  /**
   * @description Returns a serialized u8a form
   */
  toU8a(isBare) {
    return super.toU8a(isBare ? { method: true } : false);
  }
};

// node_modules/@polkadot/types/extrinsic/ExtrinsicPayloadUnknown.js
var GenericExtrinsicPayloadUnknown = class extends Struct {
  constructor(registry, _value, { version: version2 = 0 } = {}) {
    super(registry, {});
    throw new Error(`Unsupported extrinsic payload version ${version2}`);
  }
};

// node_modules/@polkadot/types/extrinsic/ExtrinsicUnknown.js
var GenericExtrinsicUnknown = class extends Struct {
  constructor(registry, _value, { isSigned = false, version: version2 = 0 } = {}) {
    super(registry, {});
    throw new Error(`Unsupported ${isSigned ? "" : "un"}signed extrinsic version ${version2 & UNMASK_VERSION}`);
  }
};

// node_modules/@polkadot/types/extrinsic/SignerPayload.js
var knownTypes = {
  address: "Address",
  assetId: "Option<TAssetConversion>",
  blockHash: "Hash",
  blockNumber: "BlockNumber",
  era: "ExtrinsicEra",
  genesisHash: "Hash",
  metadataHash: "Option<[u8;32]>",
  method: "Call",
  mode: "u8",
  nonce: "Compact<Index>",
  runtimeVersion: "RuntimeVersion",
  signedExtensions: "Vec<Text>",
  tip: "Compact<Balance>",
  version: "u8"
};
var GenericSignerPayload = class extends Struct {
  __internal__extraTypes;
  constructor(registry, value) {
    const extensionTypes = objectSpread5({}, registry.getSignedExtensionTypes(), registry.getSignedExtensionExtra());
    super(registry, objectSpread5({}, extensionTypes, knownTypes, { withSignedTransaction: "bool" }), value);
    this.__internal__extraTypes = {};
    const getter = (key) => this.get(key);
    for (const [key, type] of Object.entries(extensionTypes)) {
      if (!knownTypes[key]) {
        this.__internal__extraTypes[key] = type;
      }
      objectProperty(this, key, getter);
    }
  }
  get address() {
    return this.getT("address");
  }
  get blockHash() {
    return this.getT("blockHash");
  }
  get blockNumber() {
    return this.getT("blockNumber");
  }
  get era() {
    return this.getT("era");
  }
  get genesisHash() {
    return this.getT("genesisHash");
  }
  get method() {
    return this.getT("method");
  }
  get nonce() {
    return this.getT("nonce");
  }
  get runtimeVersion() {
    return this.getT("runtimeVersion");
  }
  get signedExtensions() {
    return this.getT("signedExtensions");
  }
  get tip() {
    return this.getT("tip");
  }
  get assetId() {
    return this.getT("assetId");
  }
  get version() {
    return this.getT("version");
  }
  get mode() {
    return this.getT("mode");
  }
  get metadataHash() {
    return this.getT("metadataHash");
  }
  get withSignedTransaction() {
    const val = this.getT("withSignedTransaction");
    return val.isTrue;
  }
  /**
   * @description Creates an representation of the structure as an ISignerPayload JSON
   */
  toPayload() {
    const result = {};
    const keys2 = Object.keys(this.__internal__extraTypes);
    for (let i = 0, count = keys2.length; i < count; i++) {
      const key = keys2[i];
      const value = this.getT(key);
      if (!(value instanceof Option) || value.isSome) {
        result[key] = value.toJSON();
      }
    }
    return objectSpread5(result, {
      // the known defaults as managed explicitly and has different
      // formatting in cases, e.g. we mostly expose a hex format here
      address: this.address.toString(),
      assetId: this.assetId && this.assetId.isSome ? this.assetId.toHex() : null,
      blockHash: this.blockHash.toHex(),
      blockNumber: this.blockNumber.toHex(),
      era: this.era.toHex(),
      genesisHash: this.genesisHash.toHex(),
      metadataHash: this.metadataHash.isSome ? this.metadataHash.toHex() : null,
      method: this.method.toHex(),
      mode: this.mode.toNumber(),
      nonce: this.nonce.toHex(),
      signedExtensions: this.signedExtensions.map((e) => e.toString()),
      specVersion: this.runtimeVersion.specVersion.toHex(),
      tip: this.tip.toHex(),
      transactionVersion: this.runtimeVersion.transactionVersion.toHex(),
      version: this.version.toNumber(),
      withSignedTransaction: this.withSignedTransaction
    });
  }
  /**
   * @description Creates a representation of the payload in raw Exrinsic form
   */
  toRaw() {
    const payload = this.toPayload();
    const data = u8aToHex5(this.registry.createTypeUnsafe("ExtrinsicPayload", [payload, { version: payload.version }]).toU8a({ method: true }));
    return {
      address: payload.address,
      data,
      type: "payload"
    };
  }
};

// node_modules/@polkadot/types/extrinsic/v4/Extrinsic.js
var EXTRINSIC_VERSION = 4;
var GenericExtrinsicV4 = class _GenericExtrinsicV4 extends Struct {
  constructor(registry, value, { isSigned } = {}) {
    super(registry, {
      signature: "ExtrinsicSignatureV4",
      // eslint-disable-next-line sort-keys
      method: "Call"
    }, _GenericExtrinsicV4.decodeExtrinsic(registry, value, isSigned));
  }
  /** @internal */
  static decodeExtrinsic(registry, value, isSigned = false) {
    if (value instanceof _GenericExtrinsicV4) {
      return value;
    } else if (value instanceof registry.createClassUnsafe("Call")) {
      return { method: value };
    } else if (isU8a5(value)) {
      const signature = registry.createTypeUnsafe("ExtrinsicSignatureV4", [value, { isSigned }]);
      const method = registry.createTypeUnsafe("Call", [value.subarray(signature.encodedLength)]);
      return {
        method,
        signature
      };
    }
    return value || {};
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    return this.toU8a().length;
  }
  /**
   * @description The [[Call]] this extrinsic wraps
   */
  get method() {
    return this.getT("method");
  }
  /**
   * @description The [[ExtrinsicSignatureV4]]
   */
  get signature() {
    return this.getT("signature");
  }
  /**
   * @description The version for the signature
   */
  get version() {
    return EXTRINSIC_VERSION;
  }
  /**
   * @description Add an [[ExtrinsicSignatureV4]] to the extrinsic (already generated)
   */
  addSignature(signer, signature, payload) {
    this.signature.addSignature(signer, signature, payload);
    return this;
  }
  /**
   * @description Sign the extrinsic with a specific keypair
   */
  sign(account3, options) {
    this.signature.sign(this.method, account3, options);
    return this;
  }
  /**
   * @describe Adds a fake signature to the extrinsic
   */
  signFake(signer, options) {
    this.signature.signFake(this.method, signer, options);
    return this;
  }
};

// node_modules/@polkadot/types/extrinsic/util.js
function sign(registry, signerPair, u8a, options) {
  const encoded = u8a.length > 256 ? registry.hash(u8a) : u8a;
  return signerPair.sign(encoded, options);
}
function signV5(registry, signerPair, u8a, options) {
  const encoded = registry.hash(u8a);
  return signerPair.sign(encoded, options);
}

// node_modules/@polkadot/types/extrinsic/v4/ExtrinsicPayload.js
var GenericExtrinsicPayloadV4 = class extends Struct {
  __internal__signOptions;
  constructor(registry, value) {
    super(registry, objectSpread5({ method: "Bytes" }, registry.getSignedExtensionTypes(), registry.getSignedExtensionExtra()), value);
    this.__internal__signOptions = {
      withType: registry.createTypeUnsafe("ExtrinsicSignature", []) instanceof Enum
    };
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    return super.inspect({ method: true });
  }
  /**
   * @description The block [[BlockHash]] the signature applies to (mortal/immortal)
   */
  get blockHash() {
    return this.getT("blockHash");
  }
  /**
   * @description The [[ExtrinsicEra]]
   */
  get era() {
    return this.getT("era");
  }
  /**
   * @description The genesis [[BlockHash]] the signature applies to (mortal/immortal)
   */
  get genesisHash() {
    return this.getT("genesisHash");
  }
  /**
   * @description The [[Bytes]] contained in the payload
   */
  get method() {
    return this.getT("method");
  }
  /**
   * @description The [[Index]]
   */
  get nonce() {
    return this.getT("nonce");
  }
  /**
   * @description The specVersion for this signature
   */
  get specVersion() {
    return this.getT("specVersion");
  }
  /**
   * @description The tip [[Balance]]
   */
  get tip() {
    return this.getT("tip");
  }
  /**
   * @description The transactionVersion for this signature
   */
  get transactionVersion() {
    return this.getT("transactionVersion");
  }
  /**
   * @description The (optional) asset id for this signature for chains that support transaction fees in assets
   */
  get assetId() {
    return this.getT("assetId");
  }
  /**
   * @description The (optional) asset id for this signature for chains that support transaction fees in assets
   */
  get metadataHash() {
    return this.getT("metadataHash");
  }
  /**
   * @description Sign the payload with the keypair
   */
  sign(signerPair) {
    return sign(this.registry, signerPair, this.toU8a({ method: true }), this.__internal__signOptions);
  }
};

// node_modules/@polkadot/types/extrinsic/v4/ExtrinsicSignature.js
var FAKE_SIGNATURE = new Uint8Array(256).fill(1);
function toAddress(registry, address) {
  return registry.createTypeUnsafe("Address", [isU8a5(address) ? u8aToHex5(address) : address]);
}
var GenericExtrinsicSignatureV4 = class _GenericExtrinsicSignatureV4 extends Struct {
  __internal__signKeys;
  constructor(registry, value, { isSigned } = {}) {
    const signTypes = registry.getSignedExtensionTypes();
    super(registry, objectSpread5(
      // eslint-disable-next-line sort-keys
      { signer: "Address", signature: "ExtrinsicSignature" },
      signTypes
    ), _GenericExtrinsicSignatureV4.decodeExtrinsicSignature(value, isSigned));
    this.__internal__signKeys = Object.keys(signTypes);
    objectProperties(this, this.__internal__signKeys, (k) => this.get(k));
  }
  /** @internal */
  static decodeExtrinsicSignature(value, isSigned = false) {
    if (!value) {
      return EMPTY_U8A;
    } else if (value instanceof _GenericExtrinsicSignatureV4) {
      return value;
    }
    return isSigned ? value : EMPTY_U8A;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    return this.isSigned ? super.encodedLength : 0;
  }
  /**
   * @description `true` if the signature is valid
   */
  get isSigned() {
    return !this.signature.isEmpty;
  }
  /**
   * @description The [[ExtrinsicEra]] (mortal or immortal) this signature applies to
   */
  get era() {
    return this.getT("era");
  }
  /**
   * @description The [[Index]] for the signature
   */
  get nonce() {
    return this.getT("nonce");
  }
  /**
   * @description The actual [[EcdsaSignature]], [[Ed25519Signature]] or [[Sr25519Signature]]
   */
  get signature() {
    return this.multiSignature.value || this.multiSignature;
  }
  /**
   * @description The raw [[ExtrinsicSignature]]
   */
  get multiSignature() {
    return this.getT("signature");
  }
  /**
   * @description The [[Address]] that signed
   */
  get signer() {
    return this.getT("signer");
  }
  /**
   * @description The [[Balance]] tip
   */
  get tip() {
    return this.getT("tip");
  }
  /**
   * @description The [[u32]] or [[MultiLocation]] assetId
   */
  get assetId() {
    return this.getT("assetId");
  }
  /**
   * @description the [[u32]] mode
   */
  get mode() {
    return this.getT("mode");
  }
  /**
   * @description The [[Hash]] for the metadata
   */
  get metadataHash() {
    return this.getT("metadataHash");
  }
  _injectSignature(signer, signature, payload) {
    for (let i = 0, count = this.__internal__signKeys.length; i < count; i++) {
      const k = this.__internal__signKeys[i];
      const v = payload.get(k);
      if (!isUndefined5(v)) {
        this.set(k, v);
      }
    }
    this.set("signer", signer);
    this.set("signature", signature);
    return this;
  }
  /**
   * @description Adds a raw signature
   */
  addSignature(signer, signature, payload) {
    return this._injectSignature(toAddress(this.registry, signer), this.registry.createTypeUnsafe("ExtrinsicSignature", [signature]), new GenericExtrinsicPayloadV4(this.registry, payload));
  }
  /**
   * @description Creates a payload from the supplied options
   */
  createPayload(method, options) {
    const { era, runtimeVersion: { specVersion, transactionVersion } } = options;
    return new GenericExtrinsicPayloadV4(this.registry, objectSpread5({}, options, {
      era: era || IMMORTAL_ERA,
      method: method.toHex(),
      specVersion,
      transactionVersion
    }));
  }
  /**
   * @description Generate a payload and applies the signature from a keypair
   */
  sign(method, account3, options) {
    if (!account3?.addressRaw) {
      throw new Error(`Expected a valid keypair for signing, found ${stringify3(account3)}`);
    }
    const payload = this.createPayload(method, options);
    return this._injectSignature(toAddress(this.registry, account3.addressRaw), this.registry.createTypeUnsafe("ExtrinsicSignature", [payload.sign(account3)]), payload);
  }
  /**
   * @description Generate a payload and applies a fake signature
   */
  signFake(method, address, options) {
    if (!address) {
      throw new Error(`Expected a valid address for signing, found ${stringify3(address)}`);
    }
    const payload = this.createPayload(method, options);
    return this._injectSignature(toAddress(this.registry, address), this.registry.createTypeUnsafe("ExtrinsicSignature", [FAKE_SIGNATURE]), payload);
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  toU8a(isBare) {
    return this.isSigned ? super.toU8a(isBare) : EMPTY_U8A;
  }
};

// node_modules/@polkadot/types/extrinsic/v5/Extrinsic.js
var EXTRINSIC_VERSION2 = 5;
var GenericExtrinsicV5 = class _GenericExtrinsicV5 extends Struct {
  constructor(registry, value, { isSigned } = {}) {
    super(registry, {
      signature: "ExtrinsicSignatureV5",
      // eslint-disable-next-line sort-keys
      method: "Call"
    }, _GenericExtrinsicV5.decodeExtrinsic(registry, value, isSigned));
  }
  /** @internal */
  static decodeExtrinsic(registry, value, isSigned = false) {
    if (value instanceof _GenericExtrinsicV5) {
      return value;
    } else if (value instanceof registry.createClassUnsafe("Call")) {
      return { method: value };
    } else if (isU8a5(value)) {
      const signature = registry.createTypeUnsafe("ExtrinsicSignatureV5", [value, { isSigned }]);
      const method = registry.createTypeUnsafe("Call", [value.subarray(signature.encodedLength)]);
      return {
        method,
        signature
      };
    }
    return value || {};
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    return this.toU8a().length;
  }
  /**
   * @description The [[Call]] this extrinsic wraps
   */
  get method() {
    return this.getT("method");
  }
  /**
   * @description The [[ExtrinsicSignatureV5]]
   */
  get signature() {
    return this.getT("signature");
  }
  /**
   * @description The version for the signature
   */
  get version() {
    return EXTRINSIC_VERSION2;
  }
  /**
   * @description The [[Preamble]] for the extrinsic
   */
  get preamble() {
    return this.getT("preamble");
  }
  /**
   * @description Add an [[ExtrinsicSignatureV5]] to the extrinsic (already generated)
   */
  addSignature(signer, signature, payload) {
    this.signature.addSignature(signer, signature, payload);
    return this;
  }
  /**
   * @description Sign the extrinsic with a specific keypair
   */
  sign(account3, options) {
    this.signature.sign(this.method, account3, options);
    return this;
  }
  /**
   * @describe Adds a fake signature to the extrinsic
   */
  signFake(signer, options) {
    this.signature.signFake(this.method, signer, options);
    return this;
  }
};

// node_modules/@polkadot/types/extrinsic/v5/ExtrinsicPayload.js
var GenericExtrinsicPayloadV5 = class extends Struct {
  __internal__signOptions;
  constructor(registry, value) {
    super(registry, objectSpread5({ method: "Bytes" }, registry.getSignedExtensionTypes(), registry.getSignedExtensionExtra()), value);
    this.__internal__signOptions = {
      withType: registry.createTypeUnsafe("ExtrinsicSignature", []) instanceof Enum
    };
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    return super.inspect({ method: true });
  }
  /**
   * @description The block [[BlockHash]] the signature applies to (mortal/immortal)
   */
  get blockHash() {
    return this.getT("blockHash");
  }
  /**
   * @description The [[ExtrinsicEra]]
   */
  get era() {
    return this.getT("era");
  }
  /**
   * @description The genesis [[BlockHash]] the signature applies to (mortal/immortal)
   */
  get genesisHash() {
    return this.getT("genesisHash");
  }
  /**
   * @description The [[Bytes]] contained in the payload
   */
  get method() {
    return this.getT("method");
  }
  /**
   * @description The [[Index]]
   */
  get nonce() {
    return this.getT("nonce");
  }
  /**
   * @description The specVersion for this signature
   */
  get specVersion() {
    return this.getT("specVersion");
  }
  /**
   * @description The tip [[Balance]]
   */
  get tip() {
    return this.getT("tip");
  }
  /**
   * @description The transactionVersion for this signature
   */
  get transactionVersion() {
    return this.getT("transactionVersion");
  }
  /**
   * @description The (optional) asset id for this signature for chains that support transaction fees in assets
   */
  get assetId() {
    return this.getT("assetId");
  }
  /**
   * @description The (optional) metadataHash proof for the CheckMetadataHash TransactionExtension
   */
  get metadataHash() {
    return this.getT("metadataHash");
  }
  /**
   * @description Sign the payload with the keypair
   */
  sign(signerPair) {
    return signV5(this.registry, signerPair, this.toU8a({ method: true }), this.__internal__signOptions);
  }
};

// node_modules/@polkadot/types/extrinsic/v5/ExtrinsicSignature.js
var FAKE_SIGNATURE2 = new Uint8Array(256).fill(1);
function toAddress2(registry, address) {
  return registry.createTypeUnsafe("Address", [isU8a5(address) ? u8aToHex5(address) : address]);
}
var GenericExtrinsicSignatureV5 = class _GenericExtrinsicSignatureV5 extends Struct {
  __internal__signKeys;
  __internal__transactionExtensionVersion;
  constructor(registry, value, { isSigned } = {}) {
    const signTypes = registry.getSignedExtensionTypes();
    const signedVersion = registry.getTransactionExtensionVersion();
    super(registry, objectSpread5(
      // eslint-disable-next-line sort-keys
      { signer: "Address", signature: "ExtrinsicSignature", transactionExtensionVersion: "u8" },
      signTypes
    ), _GenericExtrinsicSignatureV5.decodeExtrinsicSignature(value, isSigned));
    this.__internal__transactionExtensionVersion = signedVersion;
    this.__internal__signKeys = Object.keys(signTypes);
    objectProperties(this, this.__internal__signKeys, (k) => this.get(k));
  }
  /** @internal */
  static decodeExtrinsicSignature(value, isSigned = false) {
    if (!value) {
      return EMPTY_U8A;
    } else if (value instanceof _GenericExtrinsicSignatureV5) {
      return value;
    }
    return isSigned ? value : EMPTY_U8A;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    return this.isSigned ? super.encodedLength : 0;
  }
  /**
   * @description `true` if the signature is valid
   */
  get isSigned() {
    return !this.signature.isEmpty;
  }
  /**
   * @description The [[ExtrinsicEra]] (mortal or immortal) this signature applies to
   */
  get era() {
    return this.getT("era");
  }
  /**
   * @description The [[Index]] for the signature
   */
  get nonce() {
    return this.getT("nonce");
  }
  /**
   * @description The actual [[EcdsaSignature]], [[Ed25519Signature]] or [[Sr25519Signature]]
   */
  get signature() {
    return this.multiSignature.value || this.multiSignature;
  }
  /**
   * @description The raw [[ExtrinsicSignature]]
   */
  get multiSignature() {
    return this.getT("signature");
  }
  /**
   * @description The [[Address]] that signed
   */
  get signer() {
    return this.getT("signer");
  }
  /**
   * @description The [[Balance]] tip
   */
  get tip() {
    return this.getT("tip");
  }
  /**
   * @description The [[u32]] or [[MultiLocation]] assetId
   */
  get assetId() {
    return this.getT("assetId");
  }
  /**
   * @description the [[u32]] mode
   */
  get mode() {
    return this.getT("mode");
  }
  /**
   * @description The (optional)  [[Hash]] for the metadata proof
   */
  get metadataHash() {
    return this.getT("metadataHash");
  }
  /**
   * @description The [[u8]] for the TransactionExtension version
   */
  get transactionExtensionVersion() {
    return this.getT("transactionExtensionVersion");
  }
  _injectSignature(signer, signature, payload) {
    for (let i = 0, count = this.__internal__signKeys.length; i < count; i++) {
      const k = this.__internal__signKeys[i];
      const v = payload.get(k);
      if (k === "transactionExtensionVersion") {
        this.set(k, this.registry.createType("u8", this.__internal__transactionExtensionVersion));
      } else if (!isUndefined5(v)) {
        this.set(k, v);
      }
    }
    this.set("signer", signer);
    this.set("signature", signature);
    return this;
  }
  /**
   * @description Adds a raw signature
   */
  addSignature(signer, signature, payload) {
    return this._injectSignature(toAddress2(this.registry, signer), this.registry.createTypeUnsafe("ExtrinsicSignature", [signature]), new GenericExtrinsicPayloadV5(this.registry, payload));
  }
  /**
   * @description Creates a payload from the supplied options
   */
  createPayload(method, options) {
    const { era, runtimeVersion: { specVersion, transactionVersion } } = options;
    return new GenericExtrinsicPayloadV5(this.registry, objectSpread5({}, options, {
      era: era || IMMORTAL_ERA,
      method: method.toHex(),
      specVersion,
      transactionVersion
    }));
  }
  /**
   * @description Generate a payload and applies the signature from a keypair
   */
  sign(method, account3, options) {
    if (!account3?.addressRaw) {
      throw new Error(`Expected a valid keypair for signing, found ${stringify3(account3)}`);
    }
    const payload = this.createPayload(method, options);
    return this._injectSignature(toAddress2(this.registry, account3.addressRaw), this.registry.createTypeUnsafe("ExtrinsicSignature", [payload.sign(account3)]), payload);
  }
  /**
   * @description Generate a payload and applies a fake signature
   */
  signFake(method, address, options) {
    if (!address) {
      throw new Error(`Expected a valid address for signing, found ${stringify3(address)}`);
    }
    const payload = this.createPayload(method, options);
    return this._injectSignature(toAddress2(this.registry, address), this.registry.createTypeUnsafe("ExtrinsicSignature", [FAKE_SIGNATURE2]), payload);
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  toU8a(isBare) {
    return this.isSigned ? super.toU8a(isBare) : EMPTY_U8A;
  }
};

// node_modules/@polkadot/types/extrinsic/v5/GeneralExtrinsic.js
function decodeU8a4(u8a) {
  if (!u8a.length) {
    return new Uint8Array();
  }
  const [offset, length] = compactFromU8a2(u8a);
  const total = offset + length.toNumber();
  if (total > u8a.length) {
    throw new Error(`Extrinsic: length less than remainder, expected at least ${total}, found ${u8a.length}`);
  }
  const data = u8a.subarray(offset, total);
  if (data[0] !== 69) {
    throw new Error(`Extrinsic: incorrect version for General Transactions, expected 5, found ${data[0] & UNMASK_VERSION}`);
  }
  return data.subarray(1);
}
var GeneralExtrinsic = class _GeneralExtrinsic extends Struct {
  __internal__version;
  __internal__preamble;
  constructor(registry, value, opt) {
    const extTypes = registry.getSignedExtensionTypes();
    super(registry, objectSpread5({
      transactionExtensionVersion: "u8"
    }, extTypes, {
      method: "Call"
    }), _GeneralExtrinsic.decodeExtrinsic(registry, value));
    this.__internal__version = opt?.version || 5;
    this.__internal__preamble = 64;
  }
  static decodeExtrinsic(registry, value) {
    if (!value) {
      return EMPTY_U8A;
    } else if (value instanceof _GeneralExtrinsic) {
      return value;
    } else if (isU8a5(value) || Array.isArray(value) || isHex5(value)) {
      return decodeU8a4(u8aToU8a5(value));
    } else if (isObject5(value)) {
      const { payload, transactionExtensionVersion } = value;
      return objectSpread5(payload || {}, {
        transactionExtensionVersion: transactionExtensionVersion || registry.getTransactionExtensionVersion()
      });
    }
    return {};
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    return super.encodedLength;
  }
  /**
   * @description The [[ExtrinsicEra]]
   */
  get era() {
    return this.getT("era");
  }
  /**
   * @description The [[Index]]
   */
  get nonce() {
    return this.getT("nonce");
  }
  /**
   * @description The tip [[Balance]]
   */
  get tip() {
    return this.getT("tip");
  }
  /**
   * @description The (optional) asset id for this signature for chains that support transaction fees in assets
   */
  get assetId() {
    return this.getT("assetId");
  }
  /**
   * @description The mode used for the CheckMetadataHash TransactionExtension
   */
  get mode() {
    return this.getT("mode");
  }
  /**
   * @description The (optional) [[Hash]] for the metadata proof
   */
  get metadataHash() {
    return this.getT("metadataHash");
  }
  /**
   * @description The version of the TransactionExtensions used in this extrinsic
   */
  get transactionExtensionVersion() {
    return this.getT("transactionExtensionVersion");
  }
  /**
   * @description The [[Call]] this extrinsic wraps
   */
  get method() {
    return this.getT("method");
  }
  /**
   * @description The extrinsic's version
   */
  get version() {
    return this.__internal__version;
  }
  /**
   * @description The [[Preamble]] for the extrinsic
   */
  get preamble() {
    return this.__internal__preamble;
  }
  toHex(isBare) {
    return u8aToHex5(this.toU8a(isBare));
  }
  toU8a(isBare) {
    return isBare ? this.encode() : compactAddLength(this.encode());
  }
  toRawType() {
    return "GeneralExt";
  }
  /**
   *
   * @description Returns an encoded GeneralExtrinsic
   */
  encode() {
    return u8aConcat4(new Uint8Array([this.version | this.preamble]), super.toU8a());
  }
  signFake() {
    throw new Error("Extrinsic: Type GeneralExtrinsic does not have signFake implemented");
  }
  addSignature() {
    throw new Error("Extrinsic: Type GeneralExtrinsic does not have addSignature implemented");
  }
  sign() {
    throw new Error("Extrinsic: Type GeneralExtrinsic does not have sign implemented");
  }
  signature() {
    throw new Error("Extrinsic: Type GeneralExtrinsic does not have the signature getter");
  }
};

// node_modules/@polkadot/types/generic/AccountId.js
function decodeAccountId(value) {
  if (isU8a5(value) || Array.isArray(value)) {
    return u8aToU8a5(value);
  } else if (!value) {
    return new Uint8Array();
  } else if (isHex5(value)) {
    return hexToU8a5(value);
  } else if (isString4(value)) {
    return decodeAddress(value.toString());
  }
  throw new Error(`Unknown type passed to AccountId constructor, found typeof ${typeof value}`);
}
var BaseAccountId = class extends U8aFixed {
  constructor(registry, allowedBits = 256 | 264, value) {
    const decoded = decodeAccountId(value);
    const decodedBits = decoded.length * 8;
    if (decodedBits < allowedBits && decoded.some((b) => b)) {
      throw new Error(`Invalid AccountId provided, expected ${allowedBits >> 3} bytes, found ${decoded.length}`);
    }
    super(registry, decoded, allowedBits);
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  eq(other) {
    return super.eq(decodeAccountId(other));
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman() {
    return this.toJSON();
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    return this.toString();
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive() {
    return this.toJSON();
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    return encodeAddress(this, this.registry.chainSS58);
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return "AccountId";
  }
};
var GenericAccountId = class extends BaseAccountId {
  constructor(registry, value) {
    super(registry, 256, value);
  }
};
var GenericAccountId33 = class extends BaseAccountId {
  constructor(registry, value) {
    super(registry, 264, value);
  }
};

// node_modules/@polkadot/types/generic/AccountIndex.js
var PREFIX_1BYTE = 239;
var PREFIX_2BYTE = 252;
var PREFIX_4BYTE = 253;
var PREFIX_8BYTE = 254;
var MAX_1BYTE = new import_bn21.default(PREFIX_1BYTE);
var MAX_2BYTE = new import_bn21.default(1).shln(16);
var MAX_4BYTE = new import_bn21.default(1).shln(32);
function decodeAccountIndex(value) {
  if (value instanceof GenericAccountIndex) {
    return value.toBn();
  } else if (isBn4(value) || isNumber4(value) || isHex5(value) || isU8a5(value) || isBigInt4(value)) {
    return value;
  }
  return decodeAccountIndex(decodeAddress(value));
}
var GenericAccountIndex = class _GenericAccountIndex extends u323 {
  constructor(registry, value = new import_bn21.default(0)) {
    super(registry, decodeAccountIndex(value));
  }
  static calcLength(_value) {
    const value = bnToBn2(_value);
    if (value.lte(MAX_1BYTE)) {
      return 1;
    } else if (value.lt(MAX_2BYTE)) {
      return 2;
    } else if (value.lt(MAX_4BYTE)) {
      return 4;
    }
    return 8;
  }
  static readLength(input) {
    const first2 = input[0];
    if (first2 === PREFIX_2BYTE) {
      return [1, 2];
    } else if (first2 === PREFIX_4BYTE) {
      return [1, 4];
    } else if (first2 === PREFIX_8BYTE) {
      return [1, 8];
    }
    return [0, 1];
  }
  static writeLength(input) {
    switch (input.length) {
      case 2:
        return new Uint8Array([PREFIX_2BYTE]);
      case 4:
        return new Uint8Array([PREFIX_4BYTE]);
      case 8:
        return new Uint8Array([PREFIX_8BYTE]);
      default:
        return new Uint8Array([]);
    }
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  eq(other) {
    if (isBn4(other) || isNumber4(other)) {
      return super.eq(other);
    }
    return super.eq(this.registry.createTypeUnsafe("AccountIndex", [other]));
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman() {
    return this.toJSON();
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    return this.toString();
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive() {
    return this.toJSON();
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    const length = _GenericAccountIndex.calcLength(this);
    return encodeAddress(this.toU8a().subarray(0, length), this.registry.chainSS58);
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return "AccountIndex";
  }
};

// node_modules/@polkadot/types/generic/Block.js
var GenericBlock = class extends Struct {
  constructor(registry, value) {
    super(registry, {
      header: "Header",
      // eslint-disable-next-line sort-keys
      extrinsics: "Vec<Extrinsic>"
    }, value);
  }
  /**
   * @description Encodes a content [[Hash]] for the block
   */
  get contentHash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description The [[Extrinsic]] contained in the block
   */
  get extrinsics() {
    return this.getT("extrinsics");
  }
  /**
   * @description Block/header [[Hash]]
   */
  get hash() {
    return this.header.hash;
  }
  /**
   * @description The [[Header]] of the block
   */
  get header() {
    return this.getT("header");
  }
};

// node_modules/@polkadot/types/generic/Call.js
function getArgsDef(registry, meta) {
  return meta.fields.reduce((result, { name, type }, index) => {
    result[name.unwrapOr(`param${index}`).toString()] = registry.createLookupType(type);
    return result;
  }, {});
}
function decodeCallViaObject(registry, value, _meta) {
  const { args, callIndex } = value;
  const lookupIndex = callIndex instanceof GenericCallIndex ? callIndex.toU8a() : callIndex;
  const meta = _meta || registry.findMetaCall(lookupIndex).meta;
  return {
    args,
    argsDef: getArgsDef(registry, meta),
    callIndex,
    meta
  };
}
function decodeCallViaU8a(registry, value, _meta) {
  const callIndex = registry.firstCallIndex.slice();
  callIndex.set(value.subarray(0, 2), 0);
  const meta = _meta || registry.findMetaCall(callIndex).meta;
  return {
    args: value.subarray(2),
    argsDef: getArgsDef(registry, meta),
    callIndex,
    meta
  };
}
function decodeCall(registry, value = new Uint8Array(), _meta) {
  if (isU8a5(value) || isHex5(value)) {
    return decodeCallViaU8a(registry, u8aToU8a5(value), _meta);
  } else if (isObject5(value) && value.callIndex && value.args) {
    return decodeCallViaObject(registry, value, _meta);
  }
  throw new Error(`Call: Cannot decode value '${value}' of type ${typeof value}`);
}
var GenericCallIndex = class extends U8aFixed {
  constructor(registry, value) {
    super(registry, value, 16);
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive() {
    return this.toHex();
  }
};
var GenericCall = class extends Struct {
  _meta;
  constructor(registry, value, meta) {
    const decoded = decodeCall(registry, value, meta);
    try {
      super(registry, {
        callIndex: GenericCallIndex,
        // eslint-disable-next-line sort-keys
        args: Struct.with(decoded.argsDef)
      }, decoded);
    } catch (error) {
      let method = "unknown.unknown";
      try {
        const c = registry.findMetaCall(decoded.callIndex);
        method = `${c.section}.${c.method}`;
      } catch {
      }
      throw new Error(`Call: failed decoding ${method}:: ${error.message}`);
    }
    this._meta = decoded.meta;
  }
  /**
   * @description The arguments for the function call
   */
  get args() {
    return [...this.getT("args").values()];
  }
  /**
   * @description The argument definitions
   */
  get argsDef() {
    return getArgsDef(this.registry, this.meta);
  }
  /**
   * @description The argument entries
   */
  get argsEntries() {
    return [...this.getT("args").entries()];
  }
  /**
   * @description The encoded `[sectionIndex, methodIndex]` identifier
   */
  get callIndex() {
    return this.getT("callIndex").toU8a();
  }
  /**
   * @description The encoded data
   */
  get data() {
    return this.getT("args").toU8a();
  }
  /**
   * @description The [[FunctionMetadata]]
   */
  get meta() {
    return this._meta;
  }
  /**
   * @description Returns the name of the method
   */
  get method() {
    return this.registry.findMetaCall(this.callIndex).method;
  }
  /**
   * @description Returns the module containing the method
   */
  get section() {
    return this.registry.findMetaCall(this.callIndex).section;
  }
  /**
   * @description Checks if the source matches this in type
   */
  is(other) {
    return other.callIndex[0] === this.callIndex[0] && other.callIndex[1] === this.callIndex[1];
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman(isExpanded, disableAscii) {
    let call;
    try {
      call = this.registry.findMetaCall(this.callIndex);
    } catch {
    }
    return objectSpread5({
      args: this.argsEntries.reduce((args, [n, a]) => objectSpread5(args, { [n]: a.toHuman(isExpanded, disableAscii) }), {}),
      method: call?.method,
      section: call?.section
    }, isExpanded && call ? { docs: call.meta.docs.map((d) => d.toString()) } : null);
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return "Call";
  }
};

// node_modules/@polkadot/types/generic/ChainProperties.js
function createValue(registry, type, value, asArray = true) {
  if (value && isFunction6(value.unwrapOrDefault)) {
    return value;
  }
  return registry.createTypeUnsafe(type, [
    asArray ? isNull4(value) || isUndefined5(value) ? null : Array.isArray(value) ? value : [value] : value
  ]);
}
function decodeValue(registry, key, value) {
  return key === "ss58Format" ? createValue(registry, "Option<u32>", value, false) : key === "tokenDecimals" ? createValue(registry, "Option<Vec<u32>>", value) : key === "tokenSymbol" ? createValue(registry, "Option<Vec<Text>>", value) : key === "isEthereum" ? createValue(registry, "Bool", value, false) : value;
}
function decode(registry, value) {
  return (
    // allow decoding from a map as well (ourselves)
    (value && isFunction6(value.entries) ? [...value.entries()] : Object.entries(value || {})).reduce((all3, [key, value2]) => {
      all3[key] = decodeValue(registry, key, value2);
      return all3;
    }, {
      isEthereum: registry.createTypeUnsafe("Bool", []),
      ss58Format: registry.createTypeUnsafe("Option<u32>", []),
      tokenDecimals: registry.createTypeUnsafe("Option<Vec<u32>>", []),
      tokenSymbol: registry.createTypeUnsafe("Option<Vec<Text>>", [])
    })
  );
}
var GenericChainProperties = class extends Json {
  constructor(registry, value) {
    super(registry, decode(registry, value));
  }
  /**
   * @description The chain uses Ethereum addresses
   */
  get isEthereum() {
    return this.getT("isEthereum");
  }
  /**
   * @description The chain ss58Format
   */
  get ss58Format() {
    return this.getT("ss58Format");
  }
  /**
   * @description The decimals for each of the tokens
   */
  get tokenDecimals() {
    return this.getT("tokenDecimals");
  }
  /**
   * @description The symbols for the tokens
   */
  get tokenSymbol() {
    return this.getT("tokenSymbol");
  }
};

// node_modules/@polkadot/types/generic/ConsensusEngineId.js
var CID_AURA = /* @__PURE__ */ stringToU8a6("aura");
var CID_BABE = /* @__PURE__ */ stringToU8a6("BABE");
var CID_GRPA = /* @__PURE__ */ stringToU8a6("FRNK");
var CID_POW = /* @__PURE__ */ stringToU8a6("pow_");
var CID_NMBS = /* @__PURE__ */ stringToU8a6("nmbs");
function getAuraAuthor(registry, bytes2, sessionValidators) {
  return sessionValidators[registry.createTypeUnsafe("RawAuraPreDigest", [bytes2.toU8a(true)]).slotNumber.mod(new import_bn21.default(sessionValidators.length)).toNumber()];
}
function getBabeAuthor(registry, bytes2, sessionValidators) {
  const digest = registry.createTypeUnsafe("RawBabePreDigestCompat", [bytes2.toU8a(true)]);
  return sessionValidators[digest.value.toNumber()];
}
function getBytesAsAuthor(registry, bytes2) {
  return registry.createTypeUnsafe("AccountId", [bytes2]);
}
var GenericConsensusEngineId = class extends U8aFixed {
  constructor(registry, value) {
    super(registry, isNumber4(value) ? bnToU8a(value, { isLe: false }) : value, 32);
  }
  /**
   * @description `true` if the engine matches aura
   */
  get isAura() {
    return this.eq(CID_AURA);
  }
  /**
   * @description `true` is the engine matches babe
   */
  get isBabe() {
    return this.eq(CID_BABE);
  }
  /**
   * @description `true` is the engine matches grandpa
   */
  get isGrandpa() {
    return this.eq(CID_GRPA);
  }
  /**
   * @description `true` is the engine matches pow
   */
  get isPow() {
    return this.eq(CID_POW);
  }
  /**
   * @description `true` is the engine matches nimbus
   */
  get isNimbus() {
    return this.eq(CID_NMBS);
  }
  /**
   * @description From the input bytes, decode into an author
   */
  extractAuthor(bytes2, sessionValidators) {
    if (sessionValidators?.length) {
      if (this.isAura) {
        return getAuraAuthor(this.registry, bytes2, sessionValidators);
      } else if (this.isBabe) {
        return getBabeAuthor(this.registry, bytes2, sessionValidators);
      }
    }
    if (this.isPow || this.isNimbus) {
      return getBytesAsAuthor(this.registry, bytes2);
    }
    return void 0;
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman() {
    return this.toString();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return "ConsensusEngineId";
  }
  /**
   * @description Override the default toString to return a 4-byte string
   */
  toString() {
    return this.isAscii ? u8aToString3(this) : u8aToHex5(this);
  }
};

// node_modules/@polkadot/types/generic/LookupSource.js
var ACCOUNT_ID_PREFIX = new Uint8Array([255]);
function decodeString(registry, value) {
  const decoded = decodeAddress(value);
  return decoded.length === 32 ? registry.createTypeUnsafe("AccountId", [decoded]) : registry.createTypeUnsafe("AccountIndex", [u8aToBn2(decoded)]);
}
function decodeU8a5(registry, value) {
  if (value.length === 32) {
    return registry.createTypeUnsafe("AccountId", [value]);
  } else if (value[0] === 255) {
    return registry.createTypeUnsafe("AccountId", [value.subarray(1)]);
  }
  const [offset, length] = GenericAccountIndex.readLength(value);
  return registry.createTypeUnsafe("AccountIndex", [u8aToBn2(value.subarray(offset, offset + length))]);
}
function decodeAddressOrIndex(registry, value) {
  return value instanceof GenericLookupSource ? value.inner : value instanceof GenericAccountId || value instanceof GenericAccountIndex ? value : isBn4(value) || isNumber4(value) || isBigInt4(value) ? registry.createTypeUnsafe("AccountIndex", [value]) : Array.isArray(value) || isHex5(value) || isU8a5(value) ? decodeU8a5(registry, u8aToU8a5(value)) : decodeString(registry, value);
}
var GenericLookupSource = class extends AbstractBase {
  constructor(registry, value = new Uint8Array()) {
    super(registry, decodeAddressOrIndex(registry, value));
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    const rawLength = this._rawLength;
    return rawLength + // for 1 byte AccountIndexes, we are not adding a specific prefix
    (rawLength > 1 ? 1 : 0);
  }
  /**
   * @description The length of the raw value, either AccountIndex or AccountId
   */
  get _rawLength() {
    return this.inner instanceof GenericAccountIndex ? GenericAccountIndex.calcLength(this.inner) : this.inner.encodedLength;
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    const value = this.inner.toU8a().subarray(0, this._rawLength);
    return {
      outer: [
        new Uint8Array(this.inner instanceof GenericAccountIndex ? GenericAccountIndex.writeLength(value) : ACCOUNT_ID_PREFIX),
        value
      ]
    };
  }
  /**
   * @description Returns a hex string representation of the value
   */
  toHex() {
    return u8aToHex5(this.toU8a());
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return "Address";
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  toU8a(isBare) {
    const encoded = this.inner.toU8a().subarray(0, this._rawLength);
    return isBare ? encoded : u8aConcat4(this.inner instanceof GenericAccountIndex ? GenericAccountIndex.writeLength(encoded) : ACCOUNT_ID_PREFIX, encoded);
  }
};

// node_modules/@polkadot/types/generic/MultiAddress.js
function decodeU8a6(registry, u8a) {
  if ([0, 32].includes(u8a.length)) {
    return { Id: u8a };
  } else if (u8a.length === 20) {
    return { Address20: u8a };
  } else if (u8a.length <= 8) {
    return { Index: registry.createTypeUnsafe("AccountIndex", [u8a]).toNumber() };
  }
  return u8a;
}
function decodeMultiAny(registry, value) {
  if (value instanceof GenericAccountId) {
    return { Id: value };
  } else if (isU8a5(value)) {
    return decodeU8a6(registry, value);
  } else if (value instanceof GenericMultiAddress) {
    return value;
  } else if (value instanceof GenericAccountIndex || isBn4(value) || isNumber4(value)) {
    return { Index: isNumber4(value) ? value : value.toNumber() };
  } else if (isString4(value)) {
    return decodeU8a6(registry, decodeAddress(value.toString()));
  }
  return value;
}
var GenericMultiAddress = class extends Enum {
  constructor(registry, value) {
    super(registry, {
      Id: "AccountId",
      Index: "Compact<AccountIndex>",
      Raw: "Bytes",
      // eslint-disable-next-line sort-keys
      Address32: "H256",
      // eslint-disable-next-line sort-keys
      Address20: "H160"
    }, decodeMultiAny(registry, value));
  }
  /**
   * @description Returns a breakdown of the hex encoding for this Codec
   */
  inspect() {
    const { inner, outer = [] } = this.inner.inspect();
    return {
      inner,
      outer: [new Uint8Array([this.index]), ...outer]
    };
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    return this.value.toString();
  }
};

// node_modules/@polkadot/types/generic/Vote.js
var AYE_BITS = 128;
var NAY_BITS = 0;
var CON_MASK = 127;
var DEF_CONV = 0;
function decodeVoteBool(value) {
  return value ? new Uint8Array([AYE_BITS | DEF_CONV]) : new Uint8Array([NAY_BITS]);
}
function decodeVoteU8a(value) {
  return value.length ? value.subarray(0, 1) : new Uint8Array([NAY_BITS]);
}
function decodeVoteType(registry, value) {
  return new Uint8Array([
    (new bool(registry, value.aye).isTrue ? AYE_BITS : NAY_BITS) | registry.createTypeUnsafe("Conviction", [value.conviction || DEF_CONV]).index
  ]);
}
function decodeVote(registry, value) {
  if (isU8a5(value)) {
    return decodeVoteU8a(value);
  } else if (isUndefined5(value) || value instanceof Boolean || isBoolean(value)) {
    return decodeVoteBool(new bool(registry, value).isTrue);
  } else if (isNumber4(value)) {
    return decodeVoteBool(value < 0);
  }
  return decodeVoteType(registry, value);
}
var GenericVote = class extends U8aFixed {
  __internal__aye;
  __internal__conviction;
  constructor(registry, value) {
    const decoded = decodeVote(registry, value);
    super(registry, decoded, 8);
    this.__internal__aye = (decoded[0] & AYE_BITS) === AYE_BITS;
    this.__internal__conviction = this.registry.createTypeUnsafe("Conviction", [decoded[0] & CON_MASK]);
  }
  /**
   * @description returns a V2 conviction
   */
  get conviction() {
    return this.__internal__conviction;
  }
  /**
   * @description true if the wrapped value is a positive vote
   */
  get isAye() {
    return this.__internal__aye;
  }
  /**
   * @description true if the wrapped value is a negative vote
   */
  get isNay() {
    return !this.isAye;
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman(isExpanded) {
    return {
      conviction: this.conviction.toHuman(isExpanded),
      vote: this.isAye ? "Aye" : "Nay"
    };
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive() {
    return {
      aye: this.isAye,
      conviction: this.conviction.toPrimitive()
    };
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return "Vote";
  }
};

// node_modules/@polkadot/types/ethereum/AccountId.js
function decodeAccountId2(value) {
  if (isU8a5(value) || Array.isArray(value)) {
    return u8aToU8a5(value);
  } else if (isHex5(value) || isEthereumAddress(value.toString())) {
    return hexToU8a5(value.toString());
  } else if (isString4(value)) {
    return u8aToU8a5(value);
  }
  return value;
}
var GenericEthereumAccountId = class extends U8aFixed {
  constructor(registry, value = new Uint8Array()) {
    super(registry, decodeAccountId2(value), 160);
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  eq(other) {
    return !!other && super.eq(decodeAccountId2(other));
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  toHuman() {
    return this.toJSON();
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    return this.toString();
  }
  /**
   * @description Converts the value in a best-fit primitive form
   */
  toPrimitive() {
    return this.toJSON();
  }
  /**
   * @description Returns the string representation of the value
   */
  toString() {
    return ethereumEncode(this);
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return "AccountId";
  }
};

// node_modules/@polkadot/types/ethereum/LookupSource.js
var ACCOUNT_ID_PREFIX2 = new Uint8Array([255]);
function decodeString2(registry, value) {
  const decoded = decodeAddress(value);
  return decoded.length === 20 ? registry.createTypeUnsafe("EthereumAccountId", [decoded]) : registry.createTypeUnsafe("AccountIndex", [u8aToBn2(decoded)]);
}
function decodeU8a7(registry, value) {
  if (value.length === 20) {
    return registry.createTypeUnsafe("EthereumAccountId", [value]);
  } else if (value[0] === 255) {
    return registry.createTypeUnsafe("EthereumAccountId", [value.subarray(1)]);
  }
  const [offset, length] = GenericAccountIndex.readLength(value);
  return registry.createTypeUnsafe("AccountIndex", [u8aToBn2(value.subarray(offset, offset + length))]);
}
function decodeAddressOrIndex2(registry, value) {
  return value instanceof GenericEthereumLookupSource ? value.inner : value instanceof GenericEthereumAccountId || value instanceof GenericAccountIndex ? value : isU8a5(value) || Array.isArray(value) || isHex5(value) ? decodeU8a7(registry, u8aToU8a5(value)) : isBn4(value) || isNumber4(value) || isBigInt4(value) ? registry.createTypeUnsafe("AccountIndex", [value]) : decodeString2(registry, value);
}
var GenericEthereumLookupSource = class extends AbstractBase {
  constructor(registry, value = new Uint8Array()) {
    super(registry, decodeAddressOrIndex2(registry, value));
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */
  get encodedLength() {
    const rawLength = this._rawLength;
    return rawLength + // for 1 byte AccountIndexes, we are not adding a specific prefix
    (rawLength > 1 ? 1 : 0);
  }
  /**
   * @description The length of the raw value, either AccountIndex or AccountId
   */
  get _rawLength() {
    return this.inner instanceof GenericAccountIndex ? GenericAccountIndex.calcLength(this.inner) : this.inner.encodedLength;
  }
  /**
   * @description Returns a hex string representation of the value
   */
  toHex() {
    return u8aToHex5(this.toU8a());
  }
  /**
   * @description Returns the base runtime type name for this instance
   */
  toRawType() {
    return "Address";
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  toU8a(isBare) {
    const encoded = this.inner.toU8a().subarray(0, this._rawLength);
    return isBare ? encoded : u8aConcat4(this.inner instanceof GenericAccountIndex ? GenericAccountIndex.writeLength(encoded) : ACCOUNT_ID_PREFIX2, encoded);
  }
};

// node_modules/@polkadot/types/primitive/Data.js
function decodeDataU8a(registry, value) {
  const indicator = value[0];
  if (!indicator) {
    return [void 0, void 0];
  } else if (indicator >= 1 && indicator <= 33) {
    const length = indicator - 1;
    const data = value.subarray(1, length + 1);
    return [registry.createTypeUnsafe("Raw", [data]), 1];
  } else if (indicator >= 34 && indicator <= 37) {
    return [value.subarray(1, 32 + 1), indicator - 32];
  }
  throw new Error(`Unable to decode Data, invalid indicator byte ${indicator}`);
}
function decodeData(registry, value) {
  if (isU8a5(value) || isString4(value)) {
    return decodeDataU8a(registry, u8aToU8a5(value));
  } else if (!value) {
    return [void 0, void 0];
  }
  return [value, void 0];
}
var Data = class extends Enum {
  constructor(registry, value) {
    super(registry, {
      None: "Null",
      // 0
      Raw: "Bytes",
      // 1
      // eslint-disable-next-line sort-keys
      BlakeTwo256: "H256",
      // 2
      Sha256: "H256",
      // 3
      // eslint-disable-next-line sort-keys
      Keccak256: "H256",
      // 4
      ShaThree256: "H256"
      // 5
    }, ...decodeData(registry, value));
    if (this.isRaw && this.asRaw.length > 32) {
      throw new Error("Data.Raw values are limited to a maximum length of 32 bytes");
    }
  }
  get asBlakeTwo256() {
    return this.value;
  }
  get asKeccak256() {
    return this.value;
  }
  get asRaw() {
    return this.value;
  }
  get asSha256() {
    return this.value;
  }
  get asShaThree256() {
    return this.value;
  }
  get isBlakeTwo256() {
    return this.index === 2;
  }
  get isKeccak256() {
    return this.index === 4;
  }
  get isNone() {
    return this.index === 0;
  }
  get isRaw() {
    return this.index === 1;
  }
  get isSha256() {
    return this.index === 3;
  }
  get isShaThree256() {
    return this.index === 5;
  }
  /**
   * @description The encoded length
   */
  get encodedLength() {
    return this.toU8a().length;
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   */
  toU8a() {
    if (this.index === 0) {
      return new Uint8Array(1);
    } else if (this.index === 1) {
      const data = this.value.toU8a(true);
      const length = Math.min(data.length, 32);
      const u8a2 = new Uint8Array(length + 1);
      u8a2.set([length + 1], 0);
      u8a2.set(data.subarray(0, length), 1);
      return u8a2;
    }
    const u8a = new Uint8Array(33);
    u8a.set([this.index + 32], 0);
    u8a.set(this.value.toU8a(), 1);
    return u8a;
  }
};

// node_modules/@polkadot/types/primitive/StorageKey.js
var HASHER_MAP = {
  // opaque
  Blake2_128: [16, false],
  // eslint-disable-line camelcase
  Blake2_128Concat: [16, true],
  // eslint-disable-line camelcase
  Blake2_256: [32, false],
  // eslint-disable-line camelcase
  Identity: [0, true],
  Twox128: [16, false],
  Twox256: [32, false],
  Twox64Concat: [8, true]
};
function decodeStorageKey(value) {
  if (isU8a5(value) || !value || isString4(value)) {
    return { key: value };
  } else if (value instanceof StorageKey) {
    return {
      key: value,
      method: value.method,
      section: value.section
    };
  } else if (isFunction6(value)) {
    return {
      key: value(),
      method: value.method,
      section: value.section
    };
  } else if (Array.isArray(value)) {
    const [fn, args = []] = value;
    if (!isFunction6(fn)) {
      throw new Error("Expected function input for key construction");
    }
    if (fn.meta && fn.meta.type.isMap) {
      const map3 = fn.meta.type.asMap;
      if (!Array.isArray(args) || args.length !== map3.hashers.length) {
        throw new Error(`Expected an array of ${map3.hashers.length} values as params to a Map query`);
      }
    }
    return {
      key: fn(...args),
      method: fn.method,
      section: fn.section
    };
  }
  throw new Error(`Unable to convert input ${value} to StorageKey`);
}
function decodeHashers(registry, value, hashers) {
  let offset = 32;
  const count = hashers.length;
  const result = new Array(count);
  for (let i = 0; i < count; i++) {
    const [hasher, type] = hashers[i];
    const [hashLen, canDecode] = HASHER_MAP[hasher.type];
    const decoded = canDecode ? registry.createTypeUnsafe(getSiName(registry.lookup, type), [value.subarray(offset + hashLen)]) : registry.createTypeUnsafe("Raw", [value.subarray(offset, offset + hashLen)]);
    offset += hashLen + (canDecode ? decoded.encodedLength : 0);
    result[i] = decoded;
  }
  return result;
}
function decodeArgsFromMeta(registry, value, meta) {
  if (!meta || !meta.type.isMap) {
    return [];
  }
  const { hashers, key } = meta.type.asMap;
  const keys2 = hashers.length === 1 ? [key] : registry.lookup.getSiType(key).def.asTuple;
  return decodeHashers(registry, value, hashers.map((h, i) => [h, keys2[i]]));
}
function getMeta(value) {
  if (value instanceof StorageKey) {
    return value.meta;
  } else if (isFunction6(value)) {
    return value.meta;
  } else if (Array.isArray(value)) {
    const [fn] = value;
    return fn.meta;
  }
  return void 0;
}
function getType(registry, value) {
  if (value instanceof StorageKey) {
    return value.outputType;
  } else if (isFunction6(value)) {
    return unwrapStorageType(registry, value.meta.type);
  } else if (Array.isArray(value)) {
    const [fn] = value;
    if (fn.meta) {
      return unwrapStorageType(registry, fn.meta.type);
    }
  }
  return "Raw";
}
var StorageKey = class extends Bytes {
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore This is assigned via this.decodeArgsFromMeta()
  __internal__args;
  __internal__meta;
  __internal__outputType;
  __internal__method;
  __internal__section;
  constructor(registry, value, override = {}) {
    const { key, method, section: section2 } = decodeStorageKey(value);
    super(registry, key);
    this.__internal__outputType = getType(registry, value);
    this.setMeta(getMeta(value), override.section || section2, override.method || method);
  }
  /**
   * @description Return the decoded arguments (applicable to map with decodable values)
   */
  get args() {
    return this.__internal__args;
  }
  /**
   * @description The metadata or `undefined` when not available
   */
  get meta() {
    return this.__internal__meta;
  }
  /**
   * @description The key method or `undefined` when not specified
   */
  get method() {
    return this.__internal__method;
  }
  /**
   * @description The output type
   */
  get outputType() {
    return this.__internal__outputType;
  }
  /**
   * @description The key section or `undefined` when not specified
   */
  get section() {
    return this.__internal__section;
  }
  is(key) {
    return key.section === this.section && key.method === this.method;
  }
  /**
   * @description Sets the meta for this key
   */
  setMeta(meta, section2, method) {
    this.__internal__meta = meta;
    this.__internal__method = method || this.__internal__method;
    this.__internal__section = section2 || this.__internal__section;
    if (meta) {
      this.__internal__outputType = unwrapStorageType(this.registry, meta.type);
    }
    try {
      this.__internal__args = decodeArgsFromMeta(this.registry, this.toU8a(true), meta);
    } catch {
    }
    return this;
  }
  /**
   * @description Returns the Human representation for this type
   */
  toHuman(_isExtended, disableAscii) {
    return this.__internal__args.length ? this.__internal__args.map((a) => a.toHuman(void 0, disableAscii)) : super.toHuman(void 0, disableAscii);
  }
  /**
   * @description Returns the raw type for this
   */
  toRawType() {
    return "StorageKey";
  }
};

// node_modules/@polkadot/types/metadata/decorate/util.js
function convert(fn) {
  return ({ name }) => fn(name);
}
var objectNameToCamel = /* @__PURE__ */ convert(stringCamelCase2);
var objectNameToString = /* @__PURE__ */ convert((n) => n.toString());

// node_modules/@polkadot/types/metadata/decorate/extrinsics/createUnchecked.js
function isTx(tx2, callIndex) {
  return tx2.callIndex[0] === callIndex[0] && tx2.callIndex[1] === callIndex[1];
}
function createUnchecked(registry, section2, callIndex, callMetadata) {
  const expectedArgs = callMetadata.fields;
  const funcName = stringCamelCase2(callMetadata.name);
  const extrinsicFn = (...args) => {
    if (expectedArgs.length !== args.length) {
      throw new Error(`Extrinsic ${section2}.${funcName} expects ${expectedArgs.length} arguments, got ${args.length}.`);
    }
    return registry.createTypeUnsafe("Call", [{ args, callIndex }, callMetadata]);
  };
  extrinsicFn.is = (tx2) => isTx(tx2, callIndex);
  extrinsicFn.callIndex = callIndex;
  extrinsicFn.meta = callMetadata;
  extrinsicFn.method = funcName;
  extrinsicFn.section = section2;
  extrinsicFn.toJSON = () => callMetadata.toJSON();
  return extrinsicFn;
}

// node_modules/@polkadot/types/metadata/decorate/extrinsics/index.js
function filterCallsSome({ calls }) {
  return calls.isSome;
}
function createCallFunction(registry, lookup, variant, sectionName, sectionIndex) {
  const { fields, index } = variant;
  const count = fields.length;
  const args = new Array(count);
  for (let i = 0; i < count; i++) {
    const { name, type, typeName } = fields[i];
    args[i] = objectSpread5({
      name: stringCamelCase2(name.unwrapOr(`param${i}`)),
      type: getSiName(lookup, type)
    }, typeName.isSome ? { typeName: typeName.unwrap() } : null);
  }
  return createUnchecked(registry, sectionName, new Uint8Array([sectionIndex, index.toNumber()]), registry.createTypeUnsafe("FunctionMetadataLatest", [objectSpread5({ args }, variant)]));
}
function decorateExtrinsics(registry, { lookup, pallets }, version2) {
  const result = {};
  const filtered = pallets.filter(filterCallsSome);
  for (let i = 0, count = filtered.length; i < count; i++) {
    const { calls, index, name } = filtered[i];
    const sectionName = stringCamelCase2(name);
    const sectionIndex = version2 >= 12 ? index.toNumber() : i;
    lazyMethod4(result, sectionName, () => lazyVariants(lookup, calls.unwrap(), objectNameToCamel, (variant) => createCallFunction(registry, lookup, variant, sectionName, sectionIndex)));
  }
  return result;
}

// node_modules/@polkadot/types/metadata/v9/toV10.js
function createStorageHasher(registry, hasher) {
  if (hasher.toNumber() >= 2) {
    return registry.createTypeUnsafe("StorageHasherV10", [hasher.toNumber() + 1]);
  }
  return registry.createTypeUnsafe("StorageHasherV10", [hasher]);
}
function createStorageType(registry, entryType) {
  if (entryType.isMap) {
    return [objectSpread5({}, entryType.asMap, {
      hasher: createStorageHasher(registry, entryType.asMap.hasher)
    }), 1];
  }
  if (entryType.isDoubleMap) {
    return [objectSpread5({}, entryType.asDoubleMap, {
      hasher: createStorageHasher(registry, entryType.asDoubleMap.hasher),
      key2Hasher: createStorageHasher(registry, entryType.asDoubleMap.key2Hasher)
    }), 2];
  }
  return [entryType.asPlain, 0];
}
function convertModule(registry, mod2) {
  const storage = mod2.storage.unwrapOr(null);
  return registry.createTypeUnsafe("ModuleMetadataV10", [objectSpread5({}, mod2, {
    storage: storage ? objectSpread5({}, storage, {
      items: storage.items.map((item) => objectSpread5({}, item, {
        type: registry.createTypeUnsafe("StorageEntryTypeV10", createStorageType(registry, item.type))
      }))
    }) : null
  })]);
}
function toV10(registry, { modules }) {
  return registry.createTypeUnsafe("MetadataV10", [{
    modules: modules.map((mod2) => convertModule(registry, mod2))
  }]);
}

// node_modules/@polkadot/types/metadata/v10/toV11.js
function toV11(registry, { modules }) {
  return registry.createTypeUnsafe("MetadataV11", [{
    // This is new in V11, pass V0 here - something non-existing, telling the API to use
    // the fallback for this information (on-chain detection)
    extrinsic: {
      signedExtensions: [],
      version: 0
    },
    modules
  }]);
}

// node_modules/@polkadot/types/metadata/v11/toV12.js
function toV12(registry, { extrinsic, modules }) {
  return registry.createTypeUnsafe("MetadataV12", [{
    extrinsic,
    modules: modules.map((mod2) => registry.createTypeUnsafe("ModuleMetadataV12", [objectSpread5({}, mod2, { index: 255 })]))
  }]);
}

// node_modules/@polkadot/types/metadata/v12/toV13.js
function toV13(registry, v122) {
  return registry.createTypeUnsafe("MetadataV13", [v122]);
}

// node_modules/@polkadot/types/interfaces/alias.js
var typesAlias = {
  assets: {
    Approval: "AssetApproval",
    ApprovalKey: "AssetApprovalKey",
    Balance: "TAssetBalance",
    DestroyWitness: "AssetDestroyWitness"
  },
  babe: {
    EquivocationProof: "BabeEquivocationProof"
  },
  balances: {
    Status: "BalanceStatus"
  },
  beefy: {
    AuthorityId: "BeefyId"
  },
  contracts: {
    StorageKey: "ContractStorageKey"
  },
  electionProviderMultiPhase: {
    Phase: "ElectionPhase"
  },
  ethereum: {
    Block: "EthBlock",
    Header: "EthHeader",
    Receipt: "EthReceipt",
    Transaction: "EthTransaction",
    TransactionStatus: "EthTransactionStatus"
  },
  evm: {
    Account: "EvmAccount",
    Log: "EvmLog",
    Vicinity: "EvmVicinity"
  },
  grandpa: {
    Equivocation: "GrandpaEquivocation",
    EquivocationProof: "GrandpaEquivocationProof"
  },
  identity: {
    Judgement: "IdentityJudgement"
  },
  inclusion: {
    ValidatorIndex: "ParaValidatorIndex"
  },
  paraDisputes: {
    ValidatorIndex: "ParaValidatorIndex"
  },
  paraInclusion: {
    ValidatorIndex: "ParaValidatorIndex"
  },
  paraScheduler: {
    ValidatorIndex: "ParaValidatorIndex"
  },
  paraShared: {
    ValidatorIndex: "ParaValidatorIndex"
  },
  parachains: {
    Id: "ParaId"
  },
  parasDisputes: {
    ValidatorIndex: "ParaValidatorIndex"
  },
  parasInclusion: {
    ValidatorIndex: "ParaValidatorIndex"
  },
  parasScheduler: {
    ValidatorIndex: "ParaValidatorIndex"
  },
  parasShared: {
    ValidatorIndex: "ParaValidatorIndex"
  },
  proposeParachain: {
    Proposal: "ParachainProposal"
  },
  proxy: {
    Announcement: "ProxyAnnouncement"
  },
  scheduler: {
    ValidatorIndex: "ParaValidatorIndex"
  },
  shared: {
    ValidatorIndex: "ParaValidatorIndex"
  },
  society: {
    Judgement: "SocietyJudgement",
    Vote: "SocietyVote"
  },
  staking: {
    Compact: "CompactAssignments"
  },
  treasury: {
    Proposal: "TreasuryProposal"
  },
  xcm: {
    AssetId: "XcmAssetId"
  },
  xcmPallet: {
    AssetId: "XcmAssetId"
  }
};
function getAliasTypes({ knownTypes: knownTypes2 }, section2) {
  return {
    ...typesAlias[section2] ?? {},
    ...knownTypes2.typesAlias?.[section2] ?? {}
  };
}

// node_modules/@polkadot/types/metadata/v13/toV14.js
var BOXES = [["<", ">"], ["<", ","], [",", ">"], ["(", ")"], ["(", ","], [",", ","], [",", ")"]];
function compatType(specs, _type) {
  const type = _type.toString();
  const index = specs.findIndex(({ def }) => def.HistoricMetaCompat === type);
  if (index !== -1) {
    return index;
  }
  return specs.push({
    def: {
      HistoricMetaCompat: type
    }
  }) - 1;
}
function compatTypes(specs, ...types2) {
  for (let i = 0, count = types2.length; i < count; i++) {
    compatType(specs, types2[i]);
  }
}
function makeTupleType(specs, entries) {
  return specs.push({
    def: {
      Tuple: entries
    }
  }) - 1;
}
function makeVariantType(modName, variantType, specs, variants) {
  return specs.push({
    def: {
      Variant: { variants }
    },
    path: [`pallet_${modName.toString()}`, "pallet", variantType]
  }) - 1;
}
function registerOriginCaller(registry, modules, metaVersion) {
  registry.register({
    OriginCaller: {
      _enum: modules.map((mod2, index) => [
        mod2.name.toString(),
        metaVersion >= 12 ? mod2.index.toNumber() : index
      ]).sort((a, b) => a[1] - b[1]).reduce((result, [name, index]) => {
        for (let i = Object.keys(result).length; i < index; i++) {
          result[`Empty${i}`] = "Null";
        }
        result[name] = knownOrigins[name] || "Null";
        return result;
      }, {})
    }
  });
}
function setTypeOverride(sectionTypes, types2) {
  types2.forEach((type) => {
    const override = Object.keys(sectionTypes).find((aliased) => type.eq(aliased));
    if (override) {
      type.setOverride(sectionTypes[override]);
    } else {
      const orig = type.toString();
      const alias2 = Object.entries(sectionTypes).reduce((result, [src, dst]) => BOXES.reduce((result2, [a, z]) => result2.replace(`${a}${src}${z}`, `${a}${dst}${z}`), result), orig);
      if (orig !== alias2) {
        type.setOverride(alias2);
      }
    }
  });
}
function convertCalls(specs, registry, modName, calls, sectionTypes) {
  const variants = calls.map(({ args, docs, name }, index) => {
    setTypeOverride(sectionTypes, args.map(({ type }) => type));
    return registry.createTypeUnsafe("SiVariant", [{
      docs,
      fields: args.map(({ name: name2, type }) => registry.createTypeUnsafe("SiField", [{ name: name2, type: compatType(specs, type) }])),
      index,
      name
    }]);
  });
  return registry.createTypeUnsafe("PalletCallMetadataV14", [{
    type: makeVariantType(modName, "Call", specs, variants)
  }]);
}
function convertConstants(specs, registry, constants, sectionTypes) {
  return constants.map(({ docs, name, type, value }) => {
    setTypeOverride(sectionTypes, [type]);
    return registry.createTypeUnsafe("PalletConstantMetadataV14", [{
      docs,
      name,
      type: compatType(specs, type),
      value
    }]);
  });
}
function convertErrors(specs, registry, modName, errors, _sectionTypes) {
  const variants = errors.map(({ docs, name }, index) => registry.createTypeUnsafe("SiVariant", [{
    docs,
    fields: [],
    index,
    name
  }]));
  return registry.createTypeUnsafe("PalletErrorMetadataV14", [{
    type: makeVariantType(modName, "Error", specs, variants)
  }]);
}
function convertEvents(specs, registry, modName, events2, sectionTypes) {
  const variants = events2.map(({ args, docs, name }, index) => {
    setTypeOverride(sectionTypes, args);
    return registry.createTypeUnsafe("SiVariant", [{
      docs,
      fields: args.map((t) => registry.createTypeUnsafe("SiField", [{ type: compatType(specs, t) }])),
      index,
      name
    }]);
  });
  return registry.createTypeUnsafe("PalletEventMetadataV14", [{
    type: makeVariantType(modName, "Event", specs, variants)
  }]);
}
function createMapEntry(specs, registry, sectionTypes, { hashers, isLinked, isOptional, keys: keys2, value }) {
  setTypeOverride(sectionTypes, [value, ...Array.isArray(keys2) ? keys2 : [keys2]]);
  return registry.createTypeUnsafe("StorageEntryTypeV14", [{
    Map: {
      hashers,
      key: hashers.length === 1 ? compatType(specs, keys2[0]) : makeTupleType(specs, keys2.map((t) => compatType(specs, t))),
      value: isLinked ? compatType(specs, `(${isOptional ? `Option<${value.toString()}>` : value.toString()}, Linkage<${keys2[0].toString()}>)`) : compatType(specs, value)
    }
  }]);
}
function convertStorage(specs, registry, { items, prefix: prefix2 }, sectionTypes) {
  return registry.createTypeUnsafe("PalletStorageMetadataV14", [{
    items: items.map(({ docs, fallback, modifier, name, type }) => {
      let entryType;
      if (type.isPlain) {
        const plain = type.asPlain;
        setTypeOverride(sectionTypes, [plain]);
        entryType = registry.createTypeUnsafe("StorageEntryTypeV14", [{
          Plain: compatType(specs, plain)
        }]);
      } else if (type.isMap) {
        const map3 = type.asMap;
        entryType = createMapEntry(specs, registry, sectionTypes, {
          hashers: [map3.hasher],
          isLinked: map3.linked.isTrue,
          isOptional: modifier.isOptional,
          keys: [map3.key],
          value: map3.value
        });
      } else if (type.isDoubleMap) {
        const dm = type.asDoubleMap;
        entryType = createMapEntry(specs, registry, sectionTypes, {
          hashers: [dm.hasher, dm.key2Hasher],
          isLinked: false,
          isOptional: modifier.isOptional,
          keys: [dm.key1, dm.key2],
          value: dm.value
        });
      } else {
        const nm = type.asNMap;
        entryType = createMapEntry(specs, registry, sectionTypes, {
          hashers: nm.hashers,
          isLinked: false,
          isOptional: modifier.isOptional,
          keys: nm.keyVec,
          value: nm.value
        });
      }
      return registry.createTypeUnsafe("StorageEntryMetadataV14", [{
        docs,
        fallback,
        modifier,
        name,
        type: entryType
      }]);
    }),
    prefix: prefix2
  }]);
}
function convertExtrinsic(registry, { signedExtensions, version: version2 }) {
  return registry.createTypeUnsafe("ExtrinsicMetadataV14", [{
    signedExtensions: signedExtensions.map((identifier) => ({
      identifier,
      type: 0
      // we don't map the fields at all
    })),
    type: 0,
    // Map to extrinsic like in v14?
    version: version2
  }]);
}
function createPallet(specs, registry, mod2, { calls, constants, errors, events: events2, storage }) {
  const sectionTypes = getAliasTypes(registry, stringCamelCase2(mod2.name));
  return registry.createTypeUnsafe("PalletMetadataV14", [{
    calls: calls && convertCalls(specs, registry, mod2.name, calls, sectionTypes),
    constants: convertConstants(specs, registry, constants, sectionTypes),
    errors: errors && convertErrors(specs, registry, mod2.name, errors, sectionTypes),
    events: events2 && convertEvents(specs, registry, mod2.name, events2, sectionTypes),
    index: mod2.index,
    name: mod2.name,
    storage: storage && convertStorage(specs, registry, storage, sectionTypes)
  }]);
}
function toV14(registry, v132, metaVersion) {
  const specs = [];
  compatTypes(specs, "Null", "u8", "u16", "u32", "u64");
  registerOriginCaller(registry, v132.modules, metaVersion);
  const extrinsic = convertExtrinsic(registry, v132.extrinsic);
  const pallets = v132.modules.map((mod2) => createPallet(specs, registry, mod2, {
    calls: mod2.calls.unwrapOr(null),
    constants: mod2.constants,
    errors: mod2.errors.length ? mod2.errors : null,
    events: mod2.events.unwrapOr(null),
    storage: mod2.storage.unwrapOr(null)
  }));
  return registry.createTypeUnsafe("MetadataV14", [{
    extrinsic,
    lookup: {
      types: specs.map((type, id) => registry.createTypeUnsafe("PortableType", [{ id, type }]))
    },
    pallets
  }]);
}

// node_modules/@polkadot/types/metadata/v14/toV15.js
function toV15(registry, v142, _) {
  const unchecked = v142.lookup.paramTypes.SpRuntimeUncheckedExtrinsic;
  return registry.createTypeUnsafe("MetadataV15", [
    objectSpread5({}, v142, {
      extrinsic: registry.createTypeUnsafe("ExtrinsicMetadataV15", [
        objectSpread5({}, v142.extrinsic, {
          addressType: unchecked?.[0].type.unwrapOr(0),
          callType: unchecked?.[1].type.unwrapOr(0),
          extraType: unchecked?.[3].type.unwrapOr(0),
          signatureType: unchecked?.[2].type.unwrapOr(0)
        })
      ]),
      outerEnums: registry.createTypeUnsafe("OuterEnums15", [{
        // FIXME We need to extract & add the errorType in here
        // (these doesn't seem to be an esay way to detect & extract it)
        callType: unchecked?.[1].type.unwrapOr(0),
        eventType: v142.lookup.paramTypes.FrameSystemEventRecord?.[0].type.unwrapOr(0)
      }])
    })
  ]);
}

// node_modules/@polkadot/types/metadata/v15/toLatest.js
function toLatest(_registry, v152, _metaVersion) {
  return v152;
}

// node_modules/@polkadot/types/metadata/MagicNumber.js
var MAGIC_NUMBER = 1635018093;
var MagicNumber = class extends u323 {
  constructor(registry, value) {
    super(registry, value);
    if (!this.isEmpty && !this.eq(MAGIC_NUMBER)) {
      throw new Error(`MagicNumber mismatch: expected ${registry.createTypeUnsafe("u32", [MAGIC_NUMBER]).toHex()}, found ${this.toHex()}`);
    }
  }
};

// node_modules/@polkadot/types/metadata/versions.js
var KNOWN_VERSIONS = [15, 14, 13, 12, 11, 10, 9];
var LATEST_VERSION = KNOWN_VERSIONS[0];
var TO_CALLS_VERSION = 14;

// node_modules/@polkadot/types/metadata/MetadataVersioned.js
var MetadataVersioned = class _MetadataVersioned extends Struct {
  __internal__converted = /* @__PURE__ */ new Map();
  constructor(registry, value) {
    super(registry, {
      magicNumber: MagicNumber,
      metadata: "MetadataAll"
    }, value);
  }
  __internal__assertVersion = (version2) => {
    if (this.version > version2) {
      throw new Error(`Cannot convert metadata from version ${this.version} to ${version2}`);
    }
    return this.version === version2;
  };
  __internal__getVersion = (version2, fromPrev) => {
    if (version2 !== "latest" && this.__internal__assertVersion(version2)) {
      const asCurr = `asV${version2}`;
      return this.__internal__metadata()[asCurr];
    }
    if (!this.__internal__converted.has(version2)) {
      const asPrev = version2 === "latest" ? `asV${LATEST_VERSION}` : `asV${version2 - 1}`;
      this.__internal__converted.set(version2, fromPrev(this.registry, this[asPrev], this.version));
    }
    return this.__internal__converted.get(version2);
  };
  /**
   * @description the metadata wrapped
   */
  __internal__metadata = () => {
    return this.getT("metadata");
  };
  /**
   * @description Returns the wrapped metadata as a limited calls-only (latest) version
   */
  get asCallsOnly() {
    return new _MetadataVersioned(this.registry, {
      magicNumber: this.magicNumber,
      metadata: this.registry.createTypeUnsafe("MetadataAll", [toCallsOnly(this.registry, this.asLatest), TO_CALLS_VERSION])
    });
  }
  /**
   * @description Returns the wrapped metadata as a V9 object
   */
  get asV9() {
    this.__internal__assertVersion(9);
    return this.__internal__metadata().asV9;
  }
  /**
   * @description Returns the wrapped values as a V10 object
   */
  get asV10() {
    return this.__internal__getVersion(10, toV10);
  }
  /**
   * @description Returns the wrapped values as a V11 object
   */
  get asV11() {
    return this.__internal__getVersion(11, toV11);
  }
  /**
   * @description Returns the wrapped values as a V12 object
   */
  get asV12() {
    return this.__internal__getVersion(12, toV12);
  }
  /**
   * @description Returns the wrapped values as a V13 object
   */
  get asV13() {
    return this.__internal__getVersion(13, toV13);
  }
  /**
   * @description Returns the wrapped values as a V14 object
   */
  get asV14() {
    return this.__internal__getVersion(14, toV14);
  }
  /**
   * @description Returns the wrapped values as a V14 object
   */
  get asV15() {
    return this.__internal__getVersion(15, toV15);
  }
  /**
   * @description Returns the wrapped values as a latest version object
   */
  get asLatest() {
    return this.__internal__getVersion("latest", toLatest);
  }
  /**
   * @description The magicNumber for the Metadata (known constant)
   */
  get magicNumber() {
    return this.getT("magicNumber");
  }
  /**
   * @description the metadata version this structure represents
   */
  get version() {
    return this.__internal__metadata().index;
  }
  getUniqTypes(throwError) {
    return getUniqTypes(this.registry, this.asLatest, throwError);
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */
  toJSON() {
    this.asLatest;
    return super.toJSON();
  }
};

// node_modules/@polkadot/types/metadata/Metadata.js
var EMPTY_METADATA = new Uint8Array([109, 101, 116, 97, 9]);
var VERSION_IDX = EMPTY_METADATA.length - 1;
function decodeU8a8(registry, u8a) {
  if (u8a.length === 0) {
    return EMPTY_METADATA;
  } else if (u8a[VERSION_IDX] === 9) {
    try {
      return new MetadataVersioned(registry, u8a);
    } catch {
      u8a[VERSION_IDX] = 10;
    }
  }
  return u8a;
}
var Metadata = class extends MetadataVersioned {
  constructor(registry, value) {
    super(registry, isU8a5(value) || isString4(value) ? decodeU8a8(registry, u8aToU8a5(value)) : value);
  }
};

// node_modules/@polkadot/types/metadata/decorate/constants/index.js
function decorateConstants(registry, { pallets }, _version) {
  const result = {};
  for (let i = 0, count = pallets.length; i < count; i++) {
    const { constants, name } = pallets[i];
    if (!constants.isEmpty) {
      lazyMethod4(result, stringCamelCase2(name), () => lazyMethods3({}, constants, (constant) => {
        const codec = registry.createTypeUnsafe(registry.createLookupType(constant.type), [hexToU8a5(constant.value.toHex())]);
        codec.meta = constant;
        return codec;
      }, objectNameToCamel));
    }
  }
  return result;
}

// node_modules/@polkadot/types/metadata/decorate/errors/index.js
function variantToMeta(lookup, variant) {
  return objectSpread5({ args: variant.fields.map(({ type }) => lookup.getTypeDef(type).type) }, variant);
}
function decorateErrors(registry, { lookup, pallets }, version2) {
  const result = {};
  for (let i = 0, count = pallets.length; i < count; i++) {
    const { errors, index, name } = pallets[i];
    if (errors.isSome) {
      const sectionIndex = version2 >= 12 ? index.toNumber() : i;
      lazyMethod4(result, stringCamelCase2(name), () => lazyVariants(lookup, errors.unwrap(), objectNameToString, (variant) => ({
        // We sprinkle in isCodec & isU8a to ensure we are dealing with the correct objects
        is: (errorMod) => isCodec(errorMod) && isCodec(errorMod.index) && errorMod.index.eq(sectionIndex) && (isU8a5(errorMod.error) ? errorMod.error[0] === variant.index.toNumber() : isCodec(errorMod.error) && errorMod.error.eq(variant.index)),
        meta: registry.createTypeUnsafe("ErrorMetadataLatest", [variantToMeta(lookup, variant)])
      })));
    }
  }
  return result;
}

// node_modules/@polkadot/types/metadata/decorate/events/index.js
function filterEventsSome({ events: events2 }) {
  return events2.isSome;
}
function decorateEvents(registry, { lookup, pallets }, version2) {
  const result = {};
  const filtered = pallets.filter(filterEventsSome);
  for (let i = 0, count = filtered.length; i < count; i++) {
    const { events: events2, index, name } = filtered[i];
    const sectionIndex = version2 >= 12 ? index.toNumber() : i;
    lazyMethod4(result, stringCamelCase2(name), () => lazyVariants(lookup, events2.unwrap(), objectNameToString, (variant) => ({
      // We sprinkle in isCodec & isU8a to ensure we are dealing with the correct objects
      is: (eventRecord) => isCodec(eventRecord) && isU8a5(eventRecord.index) && sectionIndex === eventRecord.index[0] && variant.index.eq(eventRecord.index[1]),
      meta: registry.createTypeUnsafe("EventMetadataLatest", [variantToMeta(lookup, variant)])
    })));
  }
  return result;
}

// node_modules/@polkadot/types/metadata/decorate/storage/getHasher.js
var DEFAULT_FN = (data) => xxhashAsU8a(data, 128);
var HASHERS = {
  Blake2_128: (data) => (
    // eslint-disable-line camelcase
    blake2AsU8a(data, 128)
  ),
  Blake2_128Concat: (data) => (
    // eslint-disable-line camelcase
    u8aConcat4(blake2AsU8a(data, 128), u8aToU8a5(data))
  ),
  Blake2_256: (data) => (
    // eslint-disable-line camelcase
    blake2AsU8a(data, 256)
  ),
  Identity: (data) => u8aToU8a5(data),
  Twox128: (data) => xxhashAsU8a(data, 128),
  Twox256: (data) => xxhashAsU8a(data, 256),
  Twox64Concat: (data) => u8aConcat4(xxhashAsU8a(data, 64), u8aToU8a5(data))
};
function getHasher(hasher) {
  return HASHERS[hasher.type] || DEFAULT_FN;
}

// node_modules/@polkadot/types/metadata/decorate/storage/createFunction.js
var NO_RAW_ARGS = {
  args: [],
  hashers: [],
  keys: []
};
function filterDefined(a) {
  return !isUndefined5(a);
}
function assertArgs({ method, section: section2 }, { args, keys: keys2 }) {
  if (!Array.isArray(args)) {
    throw new Error(`Call to ${stringCamelCase2(section2 || "unknown")}.${stringCamelCase2(method || "unknown")} needs ${keys2.length} arguments`);
  } else if (args.filter(filterDefined).length !== keys2.length) {
    throw new Error(`Call to ${stringCamelCase2(section2 || "unknown")}.${stringCamelCase2(method || "unknown")} needs ${keys2.length} arguments, found [${args.join(", ")}]`);
  }
}
function createKeyRawParts(registry, itemFn, { args, hashers, keys: keys2 }) {
  const count = keys2.length;
  const extra = new Array(count);
  for (let i = 0; i < count; i++) {
    extra[i] = getHasher(hashers[i])(registry.createTypeUnsafe(registry.createLookupType(keys2[i]), [args[i]]).toU8a());
  }
  return [
    [
      xxhashAsU8a(itemFn.prefix, 128),
      xxhashAsU8a(itemFn.method, 128)
    ],
    extra
  ];
}
function createKeyInspect(registry, itemFn, args) {
  assertArgs(itemFn, args);
  const { meta } = itemFn;
  const [prefix2, extra] = createKeyRawParts(registry, itemFn, args);
  let types2 = [];
  if (meta.type.isMap) {
    const { hashers, key } = meta.type.asMap;
    types2 = hashers.length === 1 ? [`${hashers[0].type}(${getSiName(registry.lookup, key)})`] : registry.lookup.getSiType(key).def.asTuple.map((k, i) => `${hashers[i].type}(${getSiName(registry.lookup, k)})`);
  }
  const names = ["module", "method"].concat(...args.args.map((_, i) => types2[i]));
  return {
    inner: prefix2.concat(...extra).map((v, i) => ({ name: names[i], outer: [v] }))
  };
}
function createKeyRaw(registry, itemFn, args) {
  const [prefix2, extra] = createKeyRawParts(registry, itemFn, args);
  return u8aConcat4(...prefix2, ...extra);
}
function createKey(registry, itemFn, args) {
  assertArgs(itemFn, args);
  return compactAddLength(createKeyRaw(registry, itemFn, args));
}
function createStorageInspect(registry, itemFn, options) {
  const { meta: { type } } = itemFn;
  return (...args) => {
    if (type.isPlain) {
      return options.skipHashing ? { inner: [], name: "wellKnown", outer: [u8aToU8a5(options.key)] } : createKeyInspect(registry, itemFn, NO_RAW_ARGS);
    }
    const { hashers, key } = type.asMap;
    return hashers.length === 1 ? createKeyInspect(registry, itemFn, { args, hashers, keys: [key] }) : createKeyInspect(registry, itemFn, { args, hashers, keys: registry.lookup.getSiType(key).def.asTuple });
  };
}
function createStorageFn(registry, itemFn, options) {
  const { meta: { type } } = itemFn;
  let cacheKey = null;
  return (...args) => {
    if (type.isPlain) {
      if (!cacheKey) {
        cacheKey = options.skipHashing ? compactAddLength(u8aToU8a5(options.key)) : createKey(registry, itemFn, NO_RAW_ARGS);
      }
      return cacheKey;
    }
    const { hashers, key } = type.asMap;
    return hashers.length === 1 ? createKey(registry, itemFn, { args, hashers, keys: [key] }) : createKey(registry, itemFn, { args, hashers, keys: registry.lookup.getSiType(key).def.asTuple });
  };
}
function createWithMeta(registry, itemFn, options) {
  const { meta, method, prefix: prefix2, section: section2 } = itemFn;
  const storageFn = createStorageFn(registry, itemFn, options);
  storageFn.inspect = createStorageInspect(registry, itemFn, options);
  storageFn.meta = meta;
  storageFn.method = stringCamelCase2(method);
  storageFn.prefix = prefix2;
  storageFn.section = section2;
  storageFn.toJSON = () => objectSpread5({ storage: { method, prefix: prefix2, section: section2 } }, meta.toJSON());
  return storageFn;
}
function extendHeadMeta(registry, { meta: { docs, name, type }, section: section2 }, { method }, iterFn) {
  const meta = registry.createTypeUnsafe("StorageEntryMetadataLatest", [{
    docs,
    fallback: registry.createTypeUnsafe("Bytes", []),
    modifier: registry.createTypeUnsafe("StorageEntryModifierLatest", [1]),
    // required
    name,
    type: registry.createTypeUnsafe("StorageEntryTypeLatest", [type.asMap.key, 0])
  }]);
  iterFn.meta = meta;
  const fn = (...args) => registry.createTypeUnsafe("StorageKey", [iterFn(...args), { method, section: section2 }]);
  fn.meta = meta;
  return fn;
}
function extendPrefixedMap(registry, itemFn, storageFn) {
  const { meta: { type }, method, section: section2 } = itemFn;
  storageFn.iterKey = extendHeadMeta(registry, itemFn, storageFn, (...args) => {
    if (args.length && (type.isPlain || args.length >= type.asMap.hashers.length)) {
      throw new Error(`Iteration of ${stringCamelCase2(section2 || "unknown")}.${stringCamelCase2(method || "unknown")} needs arguments to be at least one less than the full arguments, found [${args.join(", ")}]`);
    }
    if (args.length) {
      if (type.isMap) {
        const { hashers, key } = type.asMap;
        const keysVec = hashers.length === 1 ? [key] : registry.lookup.getSiType(key).def.asTuple;
        return new Raw(registry, createKeyRaw(registry, itemFn, { args, hashers: hashers.slice(0, args.length), keys: keysVec.slice(0, args.length) }));
      }
    }
    return new Raw(registry, createKeyRaw(registry, itemFn, NO_RAW_ARGS));
  });
  return storageFn;
}
function createFunction(registry, itemFn, options) {
  const { meta: { type } } = itemFn;
  const storageFn = createWithMeta(registry, itemFn, options);
  if (type.isMap) {
    extendPrefixedMap(registry, itemFn, storageFn);
  }
  storageFn.keyPrefix = (...args) => storageFn.iterKey && storageFn.iterKey(...args) || compactStripLength2(storageFn())[1];
  return storageFn;
}

// node_modules/@polkadot/types/metadata/decorate/storage/util.js
function findSiPrimitive(registry, type) {
  const prim = type.toLowerCase();
  return registry.lookup.types.find((t) => t.type.def.isPrimitive && t.type.def.asPrimitive.toString().toLowerCase() === prim || t.type.def.isHistoricMetaCompat && t.type.def.asHistoricMetaCompat.toString().toLowerCase() === prim);
}
function findSiType(registry, type) {
  let portable = findSiPrimitive(registry, type);
  if (!portable && (type === "Bytes" || type.startsWith("[u8;"))) {
    const u83 = findSiPrimitive(registry, "u8");
    if (u83) {
      if (type === "Bytes") {
        portable = registry.lookup.types.find((t) => t.type.def.isSequence && t.type.def.asSequence.type.eq(u83.id) || t.type.def.isHistoricMetaCompat && t.type.def.asHistoricMetaCompat.eq(type));
      } else {
        const td = getTypeDef(type);
        portable = registry.lookup.types.find((t) => t.type.def.isArray && t.type.def.asArray.eq({
          len: td.length,
          type: u83.id
        }) || t.type.def.isHistoricMetaCompat && t.type.def.asHistoricMetaCompat.eq(type));
      }
    }
  }
  if (!portable) {
    console.warn(`Unable to map ${type} to a lookup index`);
  }
  return portable;
}
function createRuntimeFunction({ method, prefix: prefix2, section: section2 }, key, { docs, type }) {
  return (registry) => createFunction(registry, {
    meta: registry.createTypeUnsafe("StorageEntryMetadataLatest", [{
      docs: registry.createTypeUnsafe("Vec<Text>", [[docs]]),
      modifier: registry.createTypeUnsafe("StorageEntryModifierLatest", ["Required"]),
      name: registry.createTypeUnsafe("Text", [method]),
      toJSON: () => key,
      type: registry.createTypeUnsafe("StorageEntryTypeLatest", [{ Plain: findSiType(registry, type)?.id || 0 }])
    }]),
    method,
    prefix: prefix2,
    section: section2
  }, { key, skipHashing: true });
}

// node_modules/@polkadot/types/metadata/decorate/storage/substrate.js
var prefix = "Substrate";
var section = "substrate";
function createSubstrateFn(method, key, meta) {
  return createRuntimeFunction({ method, prefix, section }, key, meta);
}
var substrate2 = {
  changesTrieConfig: createSubstrateFn("changesTrieConfig", ":changes_trie", {
    docs: "Changes trie configuration is stored under this key.",
    type: "u32"
  }),
  childStorageKeyPrefix: createSubstrateFn("childStorageKeyPrefix", ":child_storage:", {
    docs: "Prefix of child storage keys.",
    type: "u32"
  }),
  code: createSubstrateFn("code", ":code", {
    docs: "Wasm code of the runtime.",
    type: "Bytes"
  }),
  extrinsicIndex: createSubstrateFn("extrinsicIndex", ":extrinsic_index", {
    docs: "Current extrinsic index (u32) is stored under this key.",
    type: "u32"
  }),
  heapPages: createSubstrateFn("heapPages", ":heappages", {
    docs: "Number of wasm linear memory pages required for execution of the runtime.",
    type: "u64"
  }),
  intrablockEntropy: createSubstrateFn("intrablockEntropy", ":intrablock_entropy", {
    docs: "Current intra-block entropy (a universally unique `[u8; 32]` value) is stored here.",
    type: "[u8; 32]"
  })
};

// node_modules/@polkadot/types/metadata/decorate/storage/getStorage.js
function getStorage(registry) {
  const storage = {};
  const entries = Object.entries(substrate2);
  for (let e = 0, count = entries.length; e < count; e++) {
    storage[entries[e][0]] = entries[e][1](registry);
  }
  return { substrate: storage };
}

// node_modules/@polkadot/types/metadata/decorate/storage/index.js
var VERSION_NAME = "palletVersion";
var VERSION_KEY = ":__STORAGE_VERSION__:";
var VERSION_DOCS = { docs: "Returns the current pallet version from storage", type: "u16" };
function decorateStorage(registry, { pallets }, _metaVersion) {
  const result = getStorage(registry);
  for (let i = 0, count = pallets.length; i < count; i++) {
    const { name, storage } = pallets[i];
    if (storage.isSome) {
      const section2 = stringCamelCase2(name);
      const { items, prefix: _prefix } = storage.unwrap();
      const prefix2 = _prefix.toString();
      lazyMethod4(result, section2, () => lazyMethods3({
        palletVersion: createRuntimeFunction({ method: VERSION_NAME, prefix: prefix2, section: section2 }, createKeyRaw(registry, { method: VERSION_KEY, prefix: name.toString() }, NO_RAW_ARGS), VERSION_DOCS)(registry)
      }, items, (meta) => createFunction(registry, { meta, method: meta.name.toString(), prefix: prefix2, section: section2 }, {}), objectNameToCamel));
    }
  }
  return result;
}

// node_modules/@polkadot/types/metadata/decorate/index.js
function expandMetadata(registry, metadata) {
  if (!(metadata instanceof Metadata)) {
    throw new Error("You need to pass a valid Metadata instance to Decorated");
  }
  const latest2 = metadata.asLatest;
  const version2 = metadata.version;
  return {
    consts: decorateConstants(registry, latest2, version2),
    errors: decorateErrors(registry, latest2, version2),
    events: decorateEvents(registry, latest2, version2),
    query: decorateStorage(registry, latest2, version2),
    registry,
    tx: decorateExtrinsics(registry, latest2, version2)
  };
}

// node_modules/@polkadot/types/create/registry.js
var DEFAULT_FIRST_CALL_IDX = new Uint8Array(2);
var l8 = logger4("registry");
function sortDecimalStrings(a, b) {
  return parseInt(a, 10) - parseInt(b, 10);
}
function valueToString(v) {
  return v.toString();
}
function getFieldArgs(lookup, fields) {
  const count = fields.length;
  const args = new Array(count);
  for (let i = 0; i < count; i++) {
    args[i] = lookup.getTypeDef(fields[i].type).type;
  }
  return args;
}
function clearRecord(record) {
  const keys2 = Object.keys(record);
  for (let i = 0, count = keys2.length; i < count; i++) {
    delete record[keys2[i]];
  }
}
function getVariantStringIdx({ index }) {
  return index.toString();
}
function injectErrors(_, { lookup, pallets }, version2, result) {
  clearRecord(result);
  for (let i = 0, count = pallets.length; i < count; i++) {
    const { errors, index, name } = pallets[i];
    if (errors.isSome) {
      const sectionName = stringCamelCase2(name);
      lazyMethod4(result, version2 >= 12 ? index.toNumber() : i, () => lazyVariants(lookup, errors.unwrap(), getVariantStringIdx, ({ docs, fields, index: index2, name: name2 }) => ({
        args: getFieldArgs(lookup, fields),
        docs: docs.map(valueToString),
        fields,
        index: index2.toNumber(),
        method: name2.toString(),
        name: name2.toString(),
        section: sectionName
      })));
    }
  }
}
function injectEvents(registry, { lookup, pallets }, version2, result) {
  const filtered = pallets.filter(filterEventsSome);
  clearRecord(result);
  for (let i = 0, count = filtered.length; i < count; i++) {
    const { events: events2, index, name } = filtered[i];
    lazyMethod4(result, version2 >= 12 ? index.toNumber() : i, () => lazyVariants(lookup, events2.unwrap(), getVariantStringIdx, (variant) => {
      const meta = registry.createType("EventMetadataLatest", objectSpread5({}, variant, { args: getFieldArgs(lookup, variant.fields) }));
      return class extends GenericEventData {
        constructor(registry2, value) {
          super(registry2, value, meta, stringCamelCase2(name), variant.name.toString());
        }
      };
    }));
  }
}
function injectExtrinsics(registry, { lookup, pallets }, version2, result, mapping2) {
  const filtered = pallets.filter(filterCallsSome);
  clearRecord(result);
  clearRecord(mapping2);
  for (let i = 0, count = filtered.length; i < count; i++) {
    const { calls, index, name } = filtered[i];
    const sectionIndex = version2 >= 12 ? index.toNumber() : i;
    const sectionName = stringCamelCase2(name);
    const allCalls = calls.unwrap();
    lazyMethod4(result, sectionIndex, () => lazyVariants(lookup, allCalls, getVariantStringIdx, (variant) => createCallFunction(registry, lookup, variant, sectionName, sectionIndex)));
    const { path } = registry.lookup.getSiType(allCalls.type);
    const palletIdx = path.findIndex((v) => v.eq("pallet"));
    if (palletIdx !== -1) {
      const name2 = stringCamelCase2(path.slice(0, palletIdx).map((p, i2) => i2 === 0 ? p.replace(/^(frame|pallet)_/, "") : p).join(" "));
      if (!mapping2[name2]) {
        mapping2[name2] = [sectionName];
      } else {
        mapping2[name2].push(sectionName);
      }
    }
  }
}
function extractProperties(registry, metadata) {
  const original = registry.getChainProperties();
  const constants = decorateConstants(registry, metadata.asLatest, metadata.version);
  const ss58Format = constants["system"] && (constants["system"]["sS58Prefix"] || constants["system"]["ss58Prefix"]);
  if (!ss58Format) {
    return original;
  }
  const { isEthereum, tokenDecimals, tokenSymbol } = original || {};
  return registry.createTypeUnsafe("ChainProperties", [{ isEthereum, ss58Format, tokenDecimals, tokenSymbol }]);
}
var TypeRegistry = class {
  __internal__chainProperties;
  __internal__classes = /* @__PURE__ */ new Map();
  __internal__definitions = /* @__PURE__ */ new Map();
  __internal__firstCallIndex = null;
  __internal__hasher = blake2AsU8a;
  __internal__knownTypes = {};
  __internal__lookup;
  __internal__metadata;
  __internal__metadataVersion = 0;
  __internal__signedExtensions = fallbackExtensions;
  __internal__unknownTypes = /* @__PURE__ */ new Map();
  __internal__userExtensions;
  __internal__knownDefaults;
  __internal__knownDefaultsEntries;
  __internal__knownDefinitions;
  __internal__metadataCalls = {};
  __internal__metadataErrors = {};
  __internal__metadataEvents = {};
  __internal__moduleMap = {};
  createdAtHash;
  constructor(createdAtHash) {
    this.__internal__knownDefaults = objectSpread5({ Json, Metadata, PortableRegistry, Raw }, index_types_exports);
    this.__internal__knownDefaultsEntries = Object.entries(this.__internal__knownDefaults);
    this.__internal__knownDefinitions = definitions_exports;
    const allKnown = Object.values(this.__internal__knownDefinitions);
    for (let i = 0, count = allKnown.length; i < count; i++) {
      this.register(allKnown[i].types);
    }
    if (createdAtHash) {
      this.createdAtHash = this.createType("BlockHash", createdAtHash);
    }
  }
  get chainDecimals() {
    if (this.__internal__chainProperties?.tokenDecimals.isSome) {
      const allDecimals = this.__internal__chainProperties.tokenDecimals.unwrap();
      if (allDecimals.length) {
        return allDecimals.map((b) => b.toNumber());
      }
    }
    return [12];
  }
  get chainIsEthereum() {
    return this.__internal__chainProperties?.isEthereum.isTrue || false;
  }
  get chainSS58() {
    return this.__internal__chainProperties?.ss58Format.isSome ? this.__internal__chainProperties.ss58Format.unwrap().toNumber() : void 0;
  }
  get chainTokens() {
    if (this.__internal__chainProperties?.tokenSymbol.isSome) {
      const allTokens = this.__internal__chainProperties.tokenSymbol.unwrap();
      if (allTokens.length) {
        return allTokens.map(valueToString);
      }
    }
    return [formatBalance.getDefaults().unit];
  }
  get firstCallIndex() {
    return this.__internal__firstCallIndex || DEFAULT_FIRST_CALL_IDX;
  }
  /**
   * @description Returns true if the type is in a Compat format
   */
  isLookupType(value) {
    return /Lookup\d+$/.test(value);
  }
  /**
   * @description Creates a lookup string from the supplied id
   */
  createLookupType(lookupId) {
    return `Lookup${typeof lookupId === "number" ? lookupId : lookupId.toNumber()}`;
  }
  get knownTypes() {
    return this.__internal__knownTypes;
  }
  get lookup() {
    return assertReturn3(this.__internal__lookup, "PortableRegistry has not been set on this registry");
  }
  get metadata() {
    return assertReturn3(this.__internal__metadata, "Metadata has not been set on this registry");
  }
  get unknownTypes() {
    return [...this.__internal__unknownTypes.keys()];
  }
  get signedExtensions() {
    return this.__internal__signedExtensions;
  }
  clearCache() {
    this.__internal__classes = /* @__PURE__ */ new Map();
  }
  /**
   * @describe Creates an instance of the class
   */
  createClass(type) {
    return createClassUnsafe(this, type);
  }
  /**
   * @describe Creates an instance of the class
   */
  createClassUnsafe(type) {
    return createClassUnsafe(this, type);
  }
  /**
   * @description Creates an instance of a type as registered
   */
  createType(type, ...params) {
    return createTypeUnsafe(this, type, params);
  }
  /**
   * @description Creates an instance of a type as registered
   */
  createTypeUnsafe(type, params, options) {
    return createTypeUnsafe(this, type, params, options);
  }
  // find a specific call
  findMetaCall(callIndex) {
    const [section2, method] = [callIndex[0], callIndex[1]];
    return assertReturn3(this.__internal__metadataCalls[`${section2}`] && this.__internal__metadataCalls[`${section2}`][`${method}`], () => `findMetaCall: Unable to find Call with index [${section2}, ${method}]/[${callIndex.toString()}]`);
  }
  // finds an error
  findMetaError(errorIndex) {
    const [section2, method] = isU8a5(errorIndex) ? [errorIndex[0], errorIndex[1]] : [
      errorIndex.index.toNumber(),
      isU8a5(errorIndex.error) ? errorIndex.error[0] : errorIndex.error.toNumber()
    ];
    return assertReturn3(this.__internal__metadataErrors[`${section2}`] && this.__internal__metadataErrors[`${section2}`][`${method}`], () => `findMetaError: Unable to find Error with index [${section2}, ${method}]/[${errorIndex.toString()}]`);
  }
  findMetaEvent(eventIndex) {
    const [section2, method] = [eventIndex[0], eventIndex[1]];
    return assertReturn3(this.__internal__metadataEvents[`${section2}`] && this.__internal__metadataEvents[`${section2}`][`${method}`], () => `findMetaEvent: Unable to find Event with index [${section2}, ${method}]/[${eventIndex.toString()}]`);
  }
  get(name, withUnknown, knownTypeDef) {
    return this.getUnsafe(name, withUnknown, knownTypeDef);
  }
  getUnsafe(name, withUnknown, knownTypeDef) {
    let Type2 = this.__internal__classes.get(name) || this.__internal__knownDefaults[name];
    if (!Type2) {
      const definition = this.__internal__definitions.get(name);
      let BaseType;
      if (definition) {
        BaseType = createClassUnsafe(this, definition);
      } else if (knownTypeDef) {
        BaseType = constructTypeClass(this, knownTypeDef);
      } else if (withUnknown) {
        l8.warn(`Unable to resolve type ${name}, it will fail on construction`);
        this.__internal__unknownTypes.set(name, true);
        BaseType = DoNotConstruct.with(name);
      }
      if (BaseType) {
        Type2 = class extends BaseType {
        };
        this.__internal__classes.set(name, Type2);
        if (knownTypeDef && isNumber4(knownTypeDef.lookupIndex)) {
          this.__internal__classes.set(this.createLookupType(knownTypeDef.lookupIndex), Type2);
        }
      }
    }
    return Type2;
  }
  getChainProperties() {
    return this.__internal__chainProperties;
  }
  getClassName(Type2) {
    const names = [];
    for (const [name, Clazz] of this.__internal__knownDefaultsEntries) {
      if (Type2 === Clazz) {
        names.push(name);
      }
    }
    for (const [name, Clazz] of this.__internal__classes.entries()) {
      if (Type2 === Clazz) {
        names.push(name);
      }
    }
    return names.length ? names.sort().reverse()[0] : void 0;
  }
  getDefinition(typeName) {
    return this.__internal__definitions.get(typeName);
  }
  getModuleInstances(specName, moduleName) {
    return this.__internal__knownTypes?.typesBundle?.spec?.[specName.toString()]?.instances?.[moduleName] || this.__internal__moduleMap[moduleName];
  }
  getOrThrow(name) {
    const Clazz = this.get(name);
    if (!Clazz) {
      throw new Error(`type ${name} not found`);
    }
    return Clazz;
  }
  getOrUnknown(name) {
    return this.get(name, true);
  }
  // Only used in extrinsic version 5
  getTransactionExtensionVersion() {
    return 0;
  }
  getSignedExtensionExtra() {
    return expandExtensionTypes(this.__internal__signedExtensions, "payload", this.__internal__userExtensions);
  }
  getSignedExtensionTypes() {
    return expandExtensionTypes(this.__internal__signedExtensions, "extrinsic", this.__internal__userExtensions);
  }
  hasClass(name) {
    return this.__internal__classes.has(name) || !!this.__internal__knownDefaults[name];
  }
  hasDef(name) {
    return this.__internal__definitions.has(name);
  }
  hasType(name) {
    return !this.__internal__unknownTypes.get(name) && (this.hasClass(name) || this.hasDef(name));
  }
  hash(data) {
    return this.createType("CodecHash", this.__internal__hasher(data));
  }
  // eslint-disable-next-line no-dupe-class-members
  register(arg1, arg2) {
    if (isFunction6(arg1)) {
      this.__internal__classes.set(arg1.name, arg1);
    } else if (isString4(arg1)) {
      if (!isFunction6(arg2)) {
        throw new Error(`Expected class definition passed to '${arg1}' registration`);
      } else if (arg1 === arg2.toString()) {
        throw new Error(`Unable to register circular ${arg1} === ${arg1}`);
      }
      this.__internal__classes.set(arg1, arg2);
    } else {
      this.__internal__registerObject(arg1);
    }
  }
  __internal__registerObject = (obj) => {
    const entries = Object.entries(obj);
    for (let e = 0, count = entries.length; e < count; e++) {
      const [name, type] = entries[e];
      if (isFunction6(type)) {
        this.__internal__classes.set(name, type);
      } else {
        const def = isString4(type) ? type : stringify3(type);
        if (name === def) {
          throw new Error(`Unable to register circular ${name} === ${def}`);
        }
        if (this.__internal__classes.has(name)) {
          this.__internal__classes.delete(name);
        }
        this.__internal__definitions.set(name, def);
      }
    }
  };
  // sets the chain properties
  setChainProperties(properties) {
    if (properties) {
      this.__internal__chainProperties = properties;
    }
  }
  setHasher(hasher) {
    this.__internal__hasher = hasher || blake2AsU8a;
  }
  setKnownTypes(knownTypes2) {
    this.__internal__knownTypes = knownTypes2;
  }
  setLookup(lookup) {
    this.__internal__lookup = lookup;
    lookup.register();
  }
  // register alias types alongside the portable/lookup setup
  // (we don't combine this into setLookup since that would/could
  // affect stand-along lookups, such as ABIs which don't have
  // actual on-chain metadata)
  __internal__registerLookup = (lookup) => {
    this.setLookup(lookup);
    let Weight = null;
    if (this.hasType("SpWeightsWeightV2Weight")) {
      const weightv2 = this.createType("SpWeightsWeightV2Weight");
      Weight = weightv2.refTime && weightv2.proofSize ? "SpWeightsWeightV2Weight" : "WeightV1";
    } else if (!isBn4(this.createType("Weight"))) {
      Weight = "WeightV1";
    }
    if (Weight) {
      this.register({ Weight });
    }
  };
  // sets the metadata
  setMetadata(metadata, signedExtensions, userExtensions, noInitWarn) {
    this.__internal__metadata = metadata.asLatest;
    this.__internal__metadataVersion = metadata.version;
    this.__internal__firstCallIndex = null;
    this.__internal__registerLookup(this.__internal__metadata.lookup);
    injectExtrinsics(this, this.__internal__metadata, this.__internal__metadataVersion, this.__internal__metadataCalls, this.__internal__moduleMap);
    injectErrors(this, this.__internal__metadata, this.__internal__metadataVersion, this.__internal__metadataErrors);
    injectEvents(this, this.__internal__metadata, this.__internal__metadataVersion, this.__internal__metadataEvents);
    const [defSection] = Object.keys(this.__internal__metadataCalls).sort(sortDecimalStrings);
    if (defSection) {
      const [defMethod] = Object.keys(this.__internal__metadataCalls[defSection]).sort(sortDecimalStrings);
      if (defMethod) {
        this.__internal__firstCallIndex = new Uint8Array([parseInt(defSection, 10), parseInt(defMethod, 10)]);
      }
    }
    this.setSignedExtensions(signedExtensions || (this.__internal__metadata.extrinsic.version.gt(BN_ZERO3) ? this.__internal__metadata.extrinsic.signedExtensions.map(({ identifier }) => identifier.toString()) : fallbackExtensions), userExtensions, noInitWarn);
    this.setChainProperties(extractProperties(this, metadata));
  }
  // sets the available signed extensions
  setSignedExtensions(signedExtensions = fallbackExtensions, userExtensions, noInitWarn) {
    this.__internal__signedExtensions = signedExtensions;
    this.__internal__userExtensions = userExtensions;
    if (!noInitWarn) {
      const unknown = findUnknownExtensions(this.__internal__signedExtensions, this.__internal__userExtensions);
      if (unknown.length) {
        l8.warn(`Unknown signed extensions ${unknown.join(", ")} found, treating them as no-effect`);
      }
    }
  }
};

// node_modules/@polkadot/rpc-core/util/refCountDelay.js
function refCountDelay(delay = 1750) {
  return (source) => {
    let [state, refCount2, connection, scheduler] = [0, 0, Subscription.EMPTY, Subscription.EMPTY];
    return new Observable((ob) => {
      source.subscribe(ob);
      if (refCount2++ === 0) {
        if (state === 1) {
          scheduler.unsubscribe();
        } else {
          connection = source.connect();
        }
        state = 3;
      }
      return () => {
        if (--refCount2 === 0) {
          if (state === 2) {
            state = 0;
            scheduler.unsubscribe();
          } else {
            state = 1;
            scheduler = asapScheduler.schedule(() => {
              state = 0;
              connection.unsubscribe();
            }, delay);
          }
        }
      };
    });
  };
}

// node_modules/@polkadot/rpc-core/util/drr.js
function CMP(a, b) {
  return stringify2({ t: a }) === stringify2({ t: b });
}
function ERR(error) {
  throw error;
}
function NOOP() {
}
function drr({ delay, skipChange = false, skipTimeout = false } = {}) {
  return (source$) => source$.pipe(
    catchError(ERR),
    skipChange ? tap(NOOP) : distinctUntilChanged(CMP),
    // eslint-disable-next-line deprecation/deprecation
    publishReplay(1),
    skipTimeout ? refCount() : refCountDelay(delay)
  );
}

// node_modules/@polkadot/rpc-core/util/memo.js
function memo(instanceId, inner) {
  const options = { getInstanceId: () => instanceId };
  const cached = memoize((...params) => new Observable((observer) => {
    const subscription = inner(...params).subscribe(observer);
    return () => {
      cached.unmemoize(...params);
      subscription.unsubscribe();
    };
  }).pipe(drr()), options);
  return cached;
}

// node_modules/@polkadot/rpc-core/bundle.js
var l9 = logger3("rpc-core");
var EMPTY_META = {
  fallback: void 0,
  modifier: { isOptional: true },
  type: {
    asMap: { linked: { isTrue: false } },
    isMap: false
  }
};
var RPC_CORE_DEFAULT_CAPACITY = 1024 * 10 * 10;
function logErrorMessage(method, { noErrorLog, params, type }, error) {
  if (noErrorLog) {
    return;
  }
  l9.error(`${method}(${params.map(({ isOptional, name, type: type2 }) => `${name}${isOptional ? "?" : ""}: ${type2}`).join(", ")}): ${type}:: ${error.message}`);
}
function isTreatAsHex(key) {
  return ["0x3a636f6465"].includes(key.toHex());
}
var RpcCore = class {
  __internal__instanceId;
  __internal__isPedantic;
  __internal__registryDefault;
  __internal__storageCache;
  __internal__storageCacheHits = 0;
  __internal__getBlockRegistry;
  __internal__getBlockHash;
  mapping = /* @__PURE__ */ new Map();
  provider;
  sections = [];
  /**
   * @constructor
   * Default constructor for the core RPC handler
   * @param  {ProviderInterface} provider An API provider using any of the supported providers (HTTP, SC or WebSocket)
   */
  constructor(instanceId, registry, { isPedantic = true, provider, rpcCacheCapacity, userRpc = {} }) {
    if (!provider || !isFunction5(provider.send)) {
      throw new Error("Expected Provider to API create");
    }
    this.__internal__instanceId = instanceId;
    this.__internal__isPedantic = isPedantic;
    this.__internal__registryDefault = registry;
    this.provider = provider;
    const sectionNames = Object.keys(jsonrpc_default);
    this.sections.push(...sectionNames);
    this.__internal__storageCache = new LRUCache(rpcCacheCapacity || RPC_CORE_DEFAULT_CAPACITY);
    this.addUserInterfaces(userRpc);
  }
  /**
   * @description Returns the connected status of a provider
   */
  get isConnected() {
    return this.provider.isConnected;
  }
  /**
   * @description Manually connect from the attached provider
   */
  connect() {
    return this.provider.connect();
  }
  /**
   * @description Manually disconnect from the attached provider
   */
  async disconnect() {
    return this.provider.disconnect();
  }
  /**
   * @description Returns the underlying core stats, including those from teh provider
   */
  get stats() {
    const stats = this.provider.stats;
    return stats ? {
      ...stats,
      core: {
        cacheHits: this.__internal__storageCacheHits,
        cacheSize: this.__internal__storageCache.length
      }
    } : void 0;
  }
  /**
   * @description Sets a registry swap (typically from Api)
   */
  setRegistrySwap(registrySwap) {
    this.__internal__getBlockRegistry = memoize(registrySwap, {
      getInstanceId: () => this.__internal__instanceId
    });
  }
  /**
   * @description Sets a function to resolve block hash from block number
   */
  setResolveBlockHash(resolveBlockHash) {
    this.__internal__getBlockHash = memoize(resolveBlockHash, {
      getInstanceId: () => this.__internal__instanceId
    });
  }
  addUserInterfaces(userRpc) {
    this.sections.push(...Object.keys(userRpc).filter((k) => !this.sections.includes(k)));
    for (let s = 0, scount = this.sections.length; s < scount; s++) {
      const section2 = this.sections[s];
      const defs = objectSpread4({}, jsonrpc_default[section2], userRpc[section2]);
      const methods = Object.keys(defs);
      for (let m = 0, mcount = methods.length; m < mcount; m++) {
        const method = methods[m];
        const def = defs[method];
        const jsonrpc2 = def.endpoint || `${section2}_${method}`;
        if (!this.mapping.has(jsonrpc2)) {
          const isSubscription2 = !!def.pubsub;
          if (!this[section2]) {
            this[section2] = {};
          }
          this.mapping.set(jsonrpc2, objectSpread4({}, def, { isSubscription: isSubscription2, jsonrpc: jsonrpc2, method, section: section2 }));
          lazyMethod3(this[section2], method, () => isSubscription2 ? this._createMethodSubscribe(section2, method, def) : this._createMethodSend(section2, method, def));
        }
      }
    }
  }
  _memomize(creator, def) {
    const memoOpts = { getInstanceId: () => this.__internal__instanceId };
    const memoized2 = memoize(creator(true), memoOpts);
    memoized2.raw = memoize(creator(false), memoOpts);
    memoized2.meta = def;
    return memoized2;
  }
  _formatResult(isScale, registry, blockHash, method, def, params, result) {
    return isScale ? this._formatOutput(registry, blockHash, method, def, params, result) : result;
  }
  _createMethodSend(section2, method, def) {
    const rpcName = def.endpoint || `${section2}_${method}`;
    const hashIndex = def.params.findIndex(({ isHistoric }) => isHistoric);
    let memoized2 = null;
    const callWithRegistry = async (isScale, values) => {
      const blockId = hashIndex === -1 ? null : values[hashIndex];
      const blockHash = blockId && def.params[hashIndex].type === "BlockNumber" ? await this.__internal__getBlockHash?.(blockId) : blockId;
      const { registry } = isScale && blockHash && this.__internal__getBlockRegistry ? await this.__internal__getBlockRegistry(u8aToU8a4(blockHash)) : { registry: this.__internal__registryDefault };
      const params = this._formatParams(registry, null, def, values);
      const result = await this.provider.send(rpcName, params.map((p) => p.toJSON()), !!blockHash);
      return this._formatResult(isScale, registry, blockHash, method, def, params, result);
    };
    const creator = (isScale) => (...values) => {
      const isDelayed = isScale && hashIndex !== -1 && !!values[hashIndex];
      return new Observable((observer) => {
        callWithRegistry(isScale, values).then((value) => {
          observer.next(value);
          observer.complete();
        }).catch((error) => {
          logErrorMessage(method, def, error);
          observer.error(error);
          observer.complete();
        });
        return () => {
          if (isScale) {
            memoized2?.unmemoize(...values);
          } else {
            memoized2?.raw.unmemoize(...values);
          }
        };
      }).pipe(
        // eslint-disable-next-line deprecation/deprecation
        publishReplay(1),
        // create a Replay(1)
        isDelayed ? refCountDelay() : refCount()
      );
    };
    memoized2 = this._memomize(creator, def);
    return memoized2;
  }
  // create a subscriptor, it subscribes once and resolves with the id as subscribe
  _createSubscriber({ paramsJson, subName, subType, update }, errorHandler2) {
    return new Promise((resolve, reject) => {
      this.provider.subscribe(subType, subName, paramsJson, update).then(resolve).catch((error) => {
        errorHandler2(error);
        reject(error);
      });
    });
  }
  _createMethodSubscribe(section2, method, def) {
    const [updateType, subMethod, unsubMethod] = def.pubsub;
    const subName = `${section2}_${subMethod}`;
    const unsubName = `${section2}_${unsubMethod}`;
    const subType = `${section2}_${updateType}`;
    let memoized2 = null;
    const creator = (isScale) => (...values) => {
      return new Observable((observer) => {
        let subscriptionPromise = Promise.resolve(null);
        const registry = this.__internal__registryDefault;
        const errorHandler2 = (error) => {
          logErrorMessage(method, def, error);
          observer.error(error);
        };
        try {
          const params = this._formatParams(registry, null, def, values);
          const update = (error, result) => {
            if (error) {
              logErrorMessage(method, def, error);
              return;
            }
            try {
              observer.next(this._formatResult(isScale, registry, null, method, def, params, result));
            } catch (error2) {
              observer.error(error2);
            }
          };
          subscriptionPromise = this._createSubscriber({ paramsJson: params.map((p) => p.toJSON()), subName, subType, update }, errorHandler2);
        } catch (error) {
          errorHandler2(error);
        }
        return () => {
          if (isScale) {
            memoized2?.unmemoize(...values);
          } else {
            memoized2?.raw.unmemoize(...values);
          }
          subscriptionPromise.then((subscriptionId) => isNull3(subscriptionId) ? Promise.resolve(false) : this.provider.unsubscribe(subType, unsubName, subscriptionId)).catch((error) => logErrorMessage(method, def, error));
        };
      }).pipe(drr());
    };
    memoized2 = this._memomize(creator, def);
    return memoized2;
  }
  _formatParams(registry, blockHash, def, inputs) {
    const count = inputs.length;
    const reqCount = def.params.filter(({ isOptional }) => !isOptional).length;
    if (count < reqCount || count > def.params.length) {
      throw new Error(`Expected ${def.params.length} parameters${reqCount === def.params.length ? "" : ` (${def.params.length - reqCount} optional)`}, ${count} found instead`);
    }
    const params = new Array(count);
    for (let i = 0; i < count; i++) {
      params[i] = registry.createTypeUnsafe(def.params[i].type, [inputs[i]], { blockHash });
    }
    return params;
  }
  _formatOutput(registry, blockHash, method, rpc18, params, result) {
    if (rpc18.type === "StorageData") {
      const key = params[0];
      return this._formatStorageData(registry, blockHash, key, result);
    } else if (rpc18.type === "StorageChangeSet") {
      const keys2 = params[0];
      return keys2 ? this._formatStorageSet(registry, result.block, keys2, result.changes) : registry.createType("StorageChangeSet", result);
    } else if (rpc18.type === "Vec<StorageChangeSet>") {
      const jsonSet = result;
      const count = jsonSet.length;
      const mapped = new Array(count);
      for (let i = 0; i < count; i++) {
        const { block, changes } = jsonSet[i];
        mapped[i] = [
          registry.createType("BlockHash", block),
          this._formatStorageSet(registry, block, params[0], changes)
        ];
      }
      return method === "queryStorageAt" ? mapped[0][1] : mapped;
    }
    return registry.createTypeUnsafe(rpc18.type, [result], { blockHash });
  }
  _formatStorageData(registry, blockHash, key, value) {
    const isEmpty = isNull3(value);
    const input = isEmpty ? null : isTreatAsHex(key) ? value : u8aToU8a4(value);
    return this._newType(registry, blockHash, key, input, isEmpty);
  }
  _formatStorageSet(registry, blockHash, keys2, changes) {
    const count = keys2.length;
    const withCache = count !== 1;
    const values = new Array(count);
    for (let i = 0; i < count; i++) {
      values[i] = this._formatStorageSetEntry(registry, blockHash, keys2[i], changes, withCache, i);
    }
    return values;
  }
  _formatStorageSetEntry(registry, blockHash, key, changes, withCache, entryIndex) {
    const hexKey = key.toHex();
    const found = changes.find(([key2]) => key2 === hexKey);
    const isNotFound = isUndefined4(found);
    if (isNotFound && withCache) {
      const cached = this.__internal__storageCache.get(hexKey);
      if (cached) {
        this.__internal__storageCacheHits++;
        return cached;
      }
    }
    const value = isNotFound ? null : found[1];
    const isEmpty = isNull3(value);
    const input = isEmpty || isTreatAsHex(key) ? value : u8aToU8a4(value);
    const codec = this._newType(registry, blockHash, key, input, isEmpty, entryIndex);
    this._setToCache(hexKey, codec);
    return codec;
  }
  _setToCache(key, value) {
    this.__internal__storageCache.set(key, value);
  }
  _newType(registry, blockHash, key, input, isEmpty, entryIndex = -1) {
    const type = key.outputType || "Raw";
    const meta = key.meta || EMPTY_META;
    const entryNum = entryIndex === -1 ? "" : ` entry ${entryIndex}:`;
    try {
      return registry.createTypeUnsafe(type, [
        isEmpty ? meta.fallback ? type.includes("Linkage<") ? u8aConcat3(hexToU8a4(meta.fallback.toHex()), new Uint8Array(2)) : hexToU8a4(meta.fallback.toHex()) : void 0 : meta.modifier.isOptional ? registry.createTypeUnsafe(type, [input], { blockHash, isPedantic: this.__internal__isPedantic }) : input
      ], { blockHash, isFallback: isEmpty && !!meta.fallback, isOptional: meta.modifier.isOptional, isPedantic: this.__internal__isPedantic && !meta.modifier.isOptional });
    } catch (error) {
      throw new Error(`Unable to decode storage ${key.section || "unknown"}.${key.method || "unknown"}:${entryNum}: ${error.message}`);
    }
  }
};

// node_modules/@polkadot/api-derive/util/blockNumber.js
function unwrapBlockNumber(hdr) {
  return isCompact2(hdr.number) ? hdr.number.unwrap() : hdr.number;
}

// node_modules/@polkadot/api-derive/util/cacheImpl.js
var deriveNoopCache = {
  del: () => void 0,
  forEach: () => void 0,
  get: () => void 0,
  set: (_, value) => value
};

// node_modules/@polkadot/api-derive/util/cache.js
var CACHE_EXPIRY = 7 * (24 * 60) * (60 * 1e3);
var deriveCache;
function wrapCache(keyStart, cache) {
  return {
    del: (partial) => cache.del(`${keyStart}${partial}`),
    forEach: cache.forEach,
    get: (partial) => {
      const key = `${keyStart}${partial}`;
      const cached = cache.get(key);
      if (cached) {
        cached.x = Date.now();
        cache.set(key, cached);
        return cached.v;
      }
      return void 0;
    },
    set: (partial, v) => {
      cache.set(`${keyStart}${partial}`, { v, x: Date.now() });
    }
  };
}
function clearCache(cache) {
  const now = Date.now();
  const all3 = [];
  cache.forEach((key, { x }) => {
    now - x > CACHE_EXPIRY && all3.push(key);
  });
  all3.forEach((key) => cache.del(key));
}
function setDeriveCache(prefix2 = "", cache) {
  deriveCache = cache ? wrapCache(`derive:${prefix2}:`, cache) : deriveNoopCache;
  if (cache) {
    clearCache(cache);
  }
}
setDeriveCache();

// node_modules/@polkadot/api-derive/util/first.js
function firstObservable(obs) {
  return obs.pipe(map2(([a]) => a));
}
function firstMemo(fn) {
  return (instanceId, api) => memo(instanceId, (...args) => firstObservable(fn(api, ...args)));
}

// node_modules/@polkadot/api-derive/util/lazy.js
function lazyDeriveSection(result, section2, getKeys2, creator) {
  lazyMethod2(result, section2, () => lazyMethods2({}, getKeys2(section2), (method) => creator(section2, method)));
}

// node_modules/@polkadot/api-derive/accounts/index.js
var accounts_exports = {};
__export(accounts_exports, {
  _flags: () => _flags,
  _identity: () => _identity,
  accountId: () => accountId,
  flags: () => flags,
  hasIdentity: () => hasIdentity,
  hasIdentityMulti: () => hasIdentityMulti,
  idAndIndex: () => idAndIndex,
  idToIndex: () => idToIndex,
  identity: () => identity4,
  indexToId: () => indexToId,
  indexes: () => indexes,
  info: () => info
});

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/base32/helpers.js
function createDecode2({ coder, ipfs }, validate) {
  return (value, ipfsCompat) => {
    validate(value, ipfsCompat);
    return coder.decode(ipfs && ipfsCompat ? value.substring(1) : value);
  };
}
function createValidate2({ chars, ipfs, type, withPadding }) {
  return (value, ipfsCompat) => {
    if (typeof value !== "string") {
      throw new Error(`Expected ${type} string input`);
    } else if (ipfs && ipfsCompat && !value.startsWith(ipfs)) {
      throw new Error(`Expected ipfs-compatible ${type} to start with '${ipfs}'`);
    }
    for (let i = ipfsCompat ? 1 : 0, count = value.length; i < count; i++) {
      if (chars.includes(value[i])) {
      } else if (withPadding && value[i] === "=") {
        if (i === count - 1) {
        } else if (value[i + 1] === "=") {
        } else {
          throw new Error(`Invalid ${type} padding sequence "${value[i]}${value[i + 1]}" at index ${i}`);
        }
      } else {
        throw new Error(`Invalid ${type} character "${value[i]}" (0x${value.charCodeAt(i).toString(16)}) at index ${i}`);
      }
    }
    return true;
  };
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/base58/bs58.js
var config3 = {
  chars: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz",
  coder: base58,
  ipfs: "z",
  type: "base58"
};
var base58Validate2 = /* @__PURE__ */ createValidate2(config3);
var base58Decode2 = /* @__PURE__ */ createDecode2(config3, base58Validate2);

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/blake2/asU8a.js
function blake2AsU8a2(data, bitLength = 256, key, onlyJs) {
  const byteLength = Math.ceil(bitLength / 8);
  const u8a = u8aToU8a3(data);
  return !hasBigInt3 || !onlyJs && isReady() ? blake2b(u8a, u8aToU8a3(key), byteLength) : key ? blake2b3(u8a, { dkLen: byteLength, key }) : blake2b3(u8a, { dkLen: byteLength });
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/address/sshash.js
var SS58_PREFIX2 = stringToU8a4("SS58PRE");
function sshash2(key) {
  return blake2AsU8a2(u8aConcat2(SS58_PREFIX2, key), 512);
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/address/checksum.js
function checkAddressChecksum2(decoded) {
  const ss58Length = decoded[0] & 64 ? 2 : 1;
  const ss58Decoded = ss58Length === 1 ? decoded[0] : (decoded[0] & 63) << 2 | decoded[1] >> 6 | (decoded[1] & 63) << 8;
  const isPublicKey = [34 + ss58Length, 35 + ss58Length].includes(decoded.length);
  const length = decoded.length - (isPublicKey ? 2 : 1);
  const hash = sshash2(decoded.subarray(0, length));
  const isValid2 = (decoded[0] & 128) === 0 && ![46, 47].includes(decoded[0]) && (isPublicKey ? decoded[decoded.length - 2] === hash[0] && decoded[decoded.length - 1] === hash[1] : decoded[decoded.length - 1] === hash[0]);
  return [isValid2, length, ss58Length, ss58Decoded];
}

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/address/defaults.js
var defaults2 = {
  allowedDecodedLengths: [1, 2, 4, 8, 32, 33],
  // publicKey has prefix + 2 checksum bytes, short only prefix + 1 checksum byte
  allowedEncodedLengths: [3, 4, 6, 10, 35, 36, 37, 38],
  allowedPrefix: availableNetworks.map(({ prefix: prefix2 }) => prefix2),
  prefix: 42
};

// node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/address/decode.js
function decodeAddress2(encoded, ignoreChecksum, ss58Format = -1) {
  if (!encoded) {
    throw new Error("Invalid empty address passed");
  }
  if (isU8a3(encoded) || isHex3(encoded)) {
    return u8aToU8a3(encoded);
  }
  try {
    const decoded = base58Decode2(encoded);
    if (!defaults2.allowedEncodedLengths.includes(decoded.length)) {
      throw new Error("Invalid decoded address length");
    }
    const [isValid2, endPos, ss58Length, ss58Decoded] = checkAddressChecksum2(decoded);
    if (!isValid2 && !ignoreChecksum) {
      throw new Error("Invalid decoded address checksum");
    } else if (ss58Format !== -1 && ss58Format !== ss58Decoded) {
      throw new Error(`Expected ss58Format ${ss58Format}, received ${ss58Decoded}`);
    }
    return decoded.slice(ss58Length, endPos);
  } catch (error) {
    throw new Error(`Decoding ${encoded}: ${error.message}`);
  }
}

// node_modules/@polkadot/api-derive/accounts/accountId.js
function accountId(instanceId, api) {
  return memo(instanceId, (address) => {
    const decoded = isU8a3(address) ? address : decodeAddress2((address || "").toString());
    if (decoded.length > 8) {
      return of(api.registry.createType(decoded.length === 20 ? "AccountId20" : "AccountId", decoded));
    }
    const accountIndex = api.registry.createType("AccountIndex", decoded);
    return api.derive.accounts.indexToId(accountIndex.toString()).pipe(map2((a) => assertReturn2(a, "Unable to retrieve accountId")));
  });
}

// node_modules/@polkadot/api-derive/accounts/flags.js
function parseFlags(address, [electionsMembers, councilMembers, technicalCommitteeMembers, societyMembers, sudoKey]) {
  const addrStr = address?.toString();
  const isIncluded = (id) => id.toString() === addrStr;
  return {
    isCouncil: (electionsMembers?.map((r) => Array.isArray(r) ? r[0] : r.who) || councilMembers || []).some(isIncluded),
    isSociety: (societyMembers || []).some(isIncluded),
    isSudo: sudoKey?.toString() === addrStr,
    isTechCommittee: (technicalCommitteeMembers || []).some(isIncluded)
  };
}
function _flags(instanceId, api) {
  return memo(instanceId, () => {
    const results = [void 0, [], [], [], void 0];
    const calls = [
      (api.query.elections || api.query["phragmenElection"] || api.query["electionsPhragmen"])?.members,
      api.query.council?.members,
      api.query.technicalCommittee?.members,
      api.query.society?.members,
      api.query.sudo?.key
    ];
    const filtered = calls.filter((c) => c);
    if (!filtered.length) {
      return of(results);
    }
    return api.queryMulti(filtered).pipe(map2((values) => {
      let resultIndex = -1;
      for (let i = 0, count = calls.length; i < count; i++) {
        if (isFunction4(calls[i])) {
          results[i] = values[++resultIndex];
        }
      }
      return results;
    }));
  });
}
function flags(instanceId, api) {
  return memo(instanceId, (address) => api.derive.accounts._flags().pipe(map2((r) => parseFlags(address, r))));
}

// node_modules/@polkadot/api-derive/accounts/idAndIndex.js
function idAndIndex(instanceId, api) {
  return memo(instanceId, (address) => {
    try {
      const decoded = isU8a3(address) ? address : decodeAddress2((address || "").toString());
      if (decoded.length > 8) {
        const accountId2 = api.registry.createType(decoded.length === 20 ? "AccountId20" : "AccountId", decoded);
        return api.derive.accounts.idToIndex(accountId2).pipe(map2((accountIndex2) => [accountId2, accountIndex2]));
      }
      const accountIndex = api.registry.createType("AccountIndex", decoded);
      return api.derive.accounts.indexToId(accountIndex.toString()).pipe(map2((accountId2) => [accountId2, accountIndex]));
    } catch {
      return of([void 0, void 0]);
    }
  });
}

// node_modules/@polkadot/api-derive/accounts/identity.js
var UNDEF_HEX = { toHex: () => void 0 };
function dataAsString(data) {
  if (!data) {
    return data;
  }
  return data.isRaw ? u8aToString2(data.asRaw.toU8a(true)) : data.isNone ? void 0 : data.toHex();
}
function extractOther(additional) {
  return additional.reduce((other, [_key, _value]) => {
    const key = dataAsString(_key);
    const value = dataAsString(_value);
    if (key && value) {
      other[key] = value;
    }
    return other;
  }, {});
}
function identityCompat(identityOfOpt) {
  const identity5 = identityOfOpt.unwrap();
  return Array.isArray(identity5) ? identity5[0] : identity5;
}
function extractIdentity(identityOfOpt, superOf) {
  if (!identityOfOpt?.isSome) {
    return { judgements: [] };
  }
  const { info: info6, judgements } = identityCompat(identityOfOpt);
  const topDisplay = dataAsString(info6.display);
  return {
    discord: dataAsString(info6.discord),
    display: superOf && dataAsString(superOf[1]) || topDisplay,
    displayParent: superOf && topDisplay,
    email: dataAsString(info6.email),
    github: dataAsString(info6.github),
    image: dataAsString(info6.image),
    judgements,
    legal: dataAsString(info6.legal),
    matrix: dataAsString(info6.matrix),
    other: info6.additional ? extractOther(info6.additional) : {},
    parent: superOf?.[0],
    pgp: info6.pgpFingerprint.unwrapOr(UNDEF_HEX).toHex(),
    riot: dataAsString(info6.riot),
    twitter: dataAsString(info6.twitter),
    web: dataAsString(info6.web)
  };
}
function getParent(api, identityOfOpt, superOfOpt) {
  if (identityOfOpt?.isSome) {
    return of([identityOfOpt, void 0]);
  } else if (superOfOpt?.isSome) {
    const superOf = superOfOpt.unwrap();
    return combineLatest([
      api.derive.accounts._identity(superOf[0]).pipe(map2(([info6]) => info6)),
      of(superOf)
    ]);
  }
  return of([void 0, void 0]);
}
function _identity(instanceId, api) {
  return memo(instanceId, (accountId2) => accountId2 && api.query.identity?.identityOf ? combineLatest([
    api.query.identity.identityOf(accountId2),
    api.query.identity.superOf(accountId2)
  ]) : of([void 0, void 0]));
}
function identity4(instanceId, api) {
  return memo(instanceId, (accountId2) => api.derive.accounts._identity(accountId2).pipe(switchMap(([identityOfOpt, superOfOpt]) => getParent(api, identityOfOpt, superOfOpt)), map2(([identityOfOpt, superOf]) => extractIdentity(identityOfOpt, superOf))));
}
var hasIdentity = /* @__PURE__ */ firstMemo((api, accountId2) => api.derive.accounts.hasIdentityMulti([accountId2]));
function hasIdentityMulti(instanceId, api) {
  return memo(instanceId, (accountIds) => api.query.identity?.identityOf ? combineLatest([
    api.query.identity.identityOf.multi(accountIds),
    api.query.identity.superOf.multi(accountIds)
  ]).pipe(map2(([identities, supers]) => identities.map((identityOfOpt, index) => {
    const superOfOpt = supers[index];
    const parentId = superOfOpt && superOfOpt.isSome ? superOfOpt.unwrap()[0].toString() : void 0;
    let display;
    if (identityOfOpt && identityOfOpt.isSome) {
      const value = dataAsString(identityCompat(identityOfOpt).info.display);
      if (value && !isHex3(value)) {
        display = value;
      }
    }
    return { display, hasIdentity: !!(display || parentId), parentId };
  }))) : of(accountIds.map(() => ({ hasIdentity: false }))));
}

// node_modules/@polkadot/api-derive/accounts/idToIndex.js
function idToIndex(instanceId, api) {
  return memo(instanceId, (accountId2) => api.derive.accounts.indexes().pipe(map2((indexes3) => indexes3[accountId2.toString()])));
}

// node_modules/@polkadot/api-derive/accounts/indexes.js
var indicesCache = null;
function queryAccounts(api) {
  return api.query.indices.accounts.entries().pipe(map2((entries) => entries.reduce((indexes3, [key, idOpt]) => {
    if (idOpt.isSome) {
      indexes3[idOpt.unwrap()[0].toString()] = api.registry.createType("AccountIndex", key.args[0]);
    }
    return indexes3;
  }, {})));
}
function indexes(instanceId, api) {
  return memo(instanceId, () => indicesCache ? of(indicesCache) : (api.query.indices ? queryAccounts(api).pipe(startWith({})) : of({})).pipe(map2((indices) => {
    indicesCache = indices;
    return indices;
  })));
}

// node_modules/@polkadot/api-derive/accounts/indexToId.js
function indexToId(instanceId, api) {
  return memo(instanceId, (accountIndex) => api.query.indices ? api.query.indices.accounts(accountIndex).pipe(map2((optResult) => optResult.unwrapOr([])[0])) : of(void 0));
}

// node_modules/@polkadot/api-derive/accounts/info.js
function retrieveNick(api, accountId2) {
  return (accountId2 && api.query["nicks"]?.["nameOf"] ? api.query["nicks"]["nameOf"](accountId2) : of(void 0)).pipe(map2((nameOf) => nameOf?.isSome ? u8aToString2(nameOf.unwrap()[0]).substring(0, api.consts["nicks"]["maxLength"].toNumber()) : void 0));
}
function info(instanceId, api) {
  return memo(instanceId, (address) => api.derive.accounts.idAndIndex(address).pipe(switchMap(([accountId2, accountIndex]) => combineLatest([
    of({ accountId: accountId2, accountIndex }),
    api.derive.accounts.identity(accountId2),
    retrieveNick(api, accountId2)
  ])), map2(([{ accountId: accountId2, accountIndex }, identity5, nickname]) => ({
    accountId: accountId2,
    accountIndex,
    identity: identity5,
    nickname
  }))));
}

// node_modules/@polkadot/api-derive/alliance/index.js
var alliance_exports = {};
__export(alliance_exports, {
  hasProposals: () => hasProposals2,
  members: () => members2,
  prime: () => prime2,
  proposal: () => proposal2,
  proposalCount: () => proposalCount2,
  proposalHashes: () => proposalHashes2,
  proposals: () => proposals2
});

// node_modules/@polkadot/api-derive/collective/helpers.js
function getInstance(api, section2) {
  const instances = api.registry.getModuleInstances(api.runtimeVersion.specName, section2);
  const name = instances?.length ? instances[0] : section2;
  return api.query[name];
}
function withSection(section2, fn) {
  return (instanceId, api) => memo(instanceId, fn(getInstance(api, section2), api, instanceId));
}
function callMethod(method, empty2) {
  return (section2) => withSection(section2, (query2) => () => isFunction4(query2?.[method]) ? query2[method]() : of(empty2));
}

// node_modules/@polkadot/api-derive/collective/members.js
var members = /* @__PURE__ */ callMethod("members", []);

// node_modules/@polkadot/api-derive/collective/prime.js
function prime(section2) {
  return withSection(section2, (query2) => () => isFunction4(query2?.prime) ? query2.prime().pipe(map2((o) => o.unwrapOr(null))) : of(null));
}

// node_modules/@polkadot/api-derive/collective/proposals.js
function parse(api, [hashes, proposals8, votes2]) {
  return proposals8.map((o, index) => ({
    hash: api.registry.createType("Hash", hashes[index]),
    proposal: o && o.isSome ? o.unwrap() : null,
    votes: votes2[index].unwrapOr(null)
  }));
}
function _proposalsFrom(api, query2, hashes) {
  return (isFunction4(query2?.proposals) && hashes.length ? combineLatest([
    of(hashes),
    // this should simply be api.query[section].proposalOf.multi<Option<Proposal>>(hashes),
    // however we have had cases on Edgeware where the indices have moved around after an
    // upgrade, which results in invalid on-chain data
    query2.proposalOf.multi(hashes).pipe(catchError(() => of(hashes.map(() => null)))),
    query2.voting.multi(hashes)
  ]) : of([[], [], []])).pipe(map2((r) => parse(api, r)));
}
function hasProposals(section2) {
  return withSection(section2, (query2) => () => of(isFunction4(query2?.proposals)));
}
function proposals(section2) {
  return withSection(section2, (query2, api) => () => api.derive[section2].proposalHashes().pipe(switchMap((all3) => _proposalsFrom(api, query2, all3))));
}
function proposal(section2) {
  return withSection(section2, (query2, api) => (hash) => isFunction4(query2?.proposals) ? firstObservable(_proposalsFrom(api, query2, [hash])) : of(null));
}
var proposalCount = /* @__PURE__ */ callMethod("proposalCount", null);
var proposalHashes = /* @__PURE__ */ callMethod("proposals", []);

// node_modules/@polkadot/api-derive/alliance/index.js
var members2 = /* @__PURE__ */ members("allianceMotion");
var hasProposals2 = /* @__PURE__ */ hasProposals("allianceMotion");
var proposal2 = /* @__PURE__ */ proposal("allianceMotion");
var proposalCount2 = /* @__PURE__ */ proposalCount("allianceMotion");
var proposalHashes2 = /* @__PURE__ */ proposalHashes("allianceMotion");
var proposals2 = /* @__PURE__ */ proposals("allianceMotion");
var prime2 = /* @__PURE__ */ prime("allianceMotion");

// node_modules/@polkadot/api-derive/bagsList/index.js
var bagsList_exports = {};
__export(bagsList_exports, {
  _getIds: () => _getIds,
  all: () => all,
  expand: () => expand,
  get: () => get,
  getExpanded: () => getExpanded,
  listNodes: () => listNodes
});

// node_modules/@polkadot/api-derive/bagsList/util.js
function getQueryInterface(api) {
  return (
    // latest substrate & polkadot
    api.query.voterList || // previous substrate
    api.query["voterBagsList"] || api.query["bagsList"]
  );
}

// node_modules/@polkadot/api-derive/bagsList/get.js
function orderBags(ids, bags) {
  const sorted = ids.map((id, index) => ({
    bag: bags[index].unwrapOr(null),
    id,
    key: id.toString()
  })).sort((a, b) => b.id.cmp(a.id));
  const max2 = sorted.length - 1;
  return sorted.map((entry, index) => objectSpread3(entry, {
    bagLower: index === max2 ? BN_ZERO2 : sorted[index + 1].id,
    bagUpper: entry.id,
    index
  }));
}
function _getIds(instanceId, api) {
  const query2 = getQueryInterface(api);
  return memo(instanceId, (_ids) => {
    const ids = _ids.map((id) => bnToBn(id));
    return ids.length ? query2.listBags.multi(ids).pipe(map2((bags) => orderBags(ids, bags))) : of([]);
  });
}
function all(instanceId, api) {
  const query2 = getQueryInterface(api);
  return memo(instanceId, () => query2.listBags.keys().pipe(switchMap((keys2) => api.derive.bagsList._getIds(keys2.map(({ args: [id] }) => id))), map2((list) => list.filter(({ bag }) => bag))));
}
function get(instanceId, api) {
  return memo(instanceId, (id) => api.derive.bagsList._getIds([bnToBn(id)]).pipe(map2((bags) => bags[0])));
}

// node_modules/@polkadot/api-derive/bagsList/getExpanded.js
function expand(instanceId, api) {
  return memo(instanceId, (bag) => api.derive.bagsList.listNodes(bag.bag).pipe(map2((nodes) => objectSpread3({ nodes }, bag))));
}
function getExpanded(instanceId, api) {
  return memo(instanceId, (id) => api.derive.bagsList.get(id).pipe(switchMap((bag) => api.derive.bagsList.expand(bag))));
}

// node_modules/@polkadot/api-derive/bagsList/listNodes.js
function traverseLinks(api, head) {
  const subject = new BehaviorSubject(head);
  const query2 = getQueryInterface(api);
  return subject.pipe(
    switchMap((account3) => query2.listNodes(account3)),
    tap((node) => {
      nextTick2(() => {
        node.isSome && node.value.next.isSome ? subject.next(node.unwrap().next.unwrap()) : subject.complete();
      });
    }),
    toArray(),
    // toArray since we want to startSubject to be completed
    map2((all3) => all3.map((o) => o.unwrap()))
  );
}
function listNodes(instanceId, api) {
  return memo(instanceId, (bag) => bag && bag.head.isSome ? traverseLinks(api, bag.head.unwrap()) : of([]));
}

// node_modules/@polkadot/api-derive/balances/index.js
var balances_exports = {};
__export(balances_exports, {
  account: () => account,
  all: () => all2,
  votingBalance: () => votingBalance,
  votingBalances: () => votingBalances
});

// node_modules/@polkadot/api-derive/balances/all.js
var VESTING_ID = "0x76657374696e6720";
function calcLocked(api, bestNumber2, locks2) {
  let lockedBalance = api.registry.createType("Balance");
  let lockedBreakdown = [];
  let vestingLocked = api.registry.createType("Balance");
  let allLocked = false;
  if (Array.isArray(locks2)) {
    lockedBreakdown = locks2.filter(({ until }) => !until || bestNumber2 && until.gt(bestNumber2));
    allLocked = lockedBreakdown.some(({ amount }) => amount && amount.isMax());
    vestingLocked = api.registry.createType("Balance", lockedBreakdown.filter(({ id }) => id.eq(VESTING_ID)).reduce((result, { amount }) => result.iadd(amount), new import_bn12.default(0)));
    const notAll = lockedBreakdown.filter(({ amount }) => amount && !amount.isMax());
    if (notAll.length) {
      lockedBalance = api.registry.createType("Balance", bnMax(...notAll.map(({ amount }) => amount)));
    }
  }
  return { allLocked, lockedBalance, lockedBreakdown, vestingLocked };
}
function calcShared(api, bestNumber2, data, locks2) {
  const { allLocked, lockedBalance, lockedBreakdown, vestingLocked } = calcLocked(api, bestNumber2, locks2);
  let transferable = null;
  if (data?.frameSystemAccountInfo?.frozen) {
    const { frameSystemAccountInfo, freeBalance, reservedBalance } = data;
    const noFrozenReserved = frameSystemAccountInfo.frozen.isZero() && reservedBalance.isZero();
    const ED = api.consts.balances.existentialDeposit;
    const maybeED = noFrozenReserved ? new import_bn12.default(0) : ED;
    const frozenReserveDif = frameSystemAccountInfo.frozen.sub(reservedBalance);
    transferable = api.registry.createType("Balance", allLocked ? 0 : freeBalance.sub(bnMax(maybeED, frozenReserveDif)));
  }
  return objectSpread3({}, data, {
    availableBalance: api.registry.createType("Balance", allLocked ? 0 : bnMax(new import_bn12.default(0), data?.freeBalance ? data.freeBalance.sub(lockedBalance) : new import_bn12.default(0))),
    lockedBalance,
    lockedBreakdown,
    transferable,
    vestingLocked
  });
}
function calcVesting(bestNumber2, shared, _vesting) {
  const vesting = _vesting || [];
  const isVesting = !shared.vestingLocked.isZero();
  const vestedBalances = vesting.map(({ locked, perBlock, startingBlock }) => bestNumber2.gt(startingBlock) ? bnMin(locked, perBlock.mul(bestNumber2.sub(startingBlock))) : BN_ZERO2);
  const vestedBalance = vestedBalances.reduce((all3, value) => all3.iadd(value), new import_bn12.default(0));
  const vestingTotal = vesting.reduce((all3, { locked }) => all3.iadd(locked), new import_bn12.default(0));
  return {
    isVesting,
    vestedBalance,
    vestedClaimable: isVesting ? shared.vestingLocked.sub(vestingTotal.sub(vestedBalance)) : BN_ZERO2,
    vesting: vesting.map(({ locked, perBlock, startingBlock }, index) => ({
      endBlock: locked.div(perBlock).iadd(startingBlock),
      locked,
      perBlock,
      startingBlock,
      vested: vestedBalances[index]
    })).filter(({ locked }) => !locked.isZero()),
    vestingTotal
  };
}
function calcBalances(api, result) {
  const [data, [vesting, allLocks, namedReserves], bestNumber2] = result;
  const shared = calcShared(api, bestNumber2, data, allLocks[0]);
  return objectSpread3(shared, calcVesting(bestNumber2, shared, vesting), {
    accountId: data.accountId,
    accountNonce: data.accountNonce,
    additional: allLocks.slice(1).map((l13, index) => calcShared(api, bestNumber2, data.additional[index], l13)),
    namedReserves
  });
}
function queryOld(api, accountId2) {
  return combineLatest([
    api.query.balances.locks(accountId2),
    api.query.balances["vesting"](accountId2)
  ]).pipe(map2(([locks2, optVesting]) => {
    let vestingNew = null;
    if (optVesting.isSome) {
      const { offset: locked, perBlock, startingBlock } = optVesting.unwrap();
      vestingNew = api.registry.createType("VestingInfo", { locked, perBlock, startingBlock });
    }
    return [
      vestingNew ? [vestingNew] : null,
      [locks2],
      []
    ];
  }));
}
var isNonNullable = (nullable) => !!nullable;
function createCalls(calls) {
  return [
    calls.map((c) => !c),
    calls.filter(isNonNullable)
  ];
}
function queryCurrent(api, accountId2, balanceInstances = ["balances"]) {
  const [lockEmpty, lockQueries] = createCalls(balanceInstances.map((m) => api.derive[m]?.customLocks || api.query[m]?.locks));
  const [reserveEmpty, reserveQueries] = createCalls(balanceInstances.map((m) => api.query[m]?.reserves));
  return combineLatest([
    api.query.vesting?.vesting ? api.query.vesting.vesting(accountId2) : of(api.registry.createType("Option<VestingInfo>")),
    lockQueries.length ? combineLatest(lockQueries.map((c) => c(accountId2))) : of([]),
    reserveQueries.length ? combineLatest(reserveQueries.map((c) => c(accountId2))) : of([])
  ]).pipe(map2(([opt, locks2, reserves]) => {
    let offsetLock = -1;
    let offsetReserve = -1;
    const vesting = opt.unwrapOr(null);
    return [
      vesting ? Array.isArray(vesting) ? vesting : [vesting] : null,
      lockEmpty.map((e) => e ? api.registry.createType("Vec<BalanceLock>") : locks2[++offsetLock]),
      reserveEmpty.map((e) => e ? api.registry.createType("Vec<PalletBalancesReserveData>") : reserves[++offsetReserve])
    ];
  }));
}
function all2(instanceId, api) {
  const balanceInstances = api.registry.getModuleInstances(api.runtimeVersion.specName, "balances");
  return memo(instanceId, (address) => combineLatest([
    api.derive.balances.account(address),
    isFunction4(api.query.system?.account) || isFunction4(api.query.balances?.account) ? queryCurrent(api, address, balanceInstances) : queryOld(api, address)
  ]).pipe(switchMap(([account3, locks2]) => combineLatest([
    of(account3),
    of(locks2),
    api.derive.chain.bestNumber()
  ])), map2((result) => calcBalances(api, result))));
}

// node_modules/@polkadot/api-derive/balances/account.js
function zeroBalance(api) {
  return api.registry.createType("Balance");
}
function getBalance(api, [freeBalance, reservedBalance, frozenFeeOrFrozen, frozenMiscOrFlags], accType) {
  const votingBalance2 = api.registry.createType("Balance", freeBalance.toBn());
  if (accType.isFrameAccountData) {
    return {
      frameSystemAccountInfo: {
        flags: frozenMiscOrFlags,
        frozen: frozenFeeOrFrozen
      },
      freeBalance,
      frozenFee: api.registry.createType("Balance", 0),
      frozenMisc: api.registry.createType("Balance", 0),
      reservedBalance,
      votingBalance: votingBalance2
    };
  }
  return {
    freeBalance,
    frozenFee: frozenFeeOrFrozen,
    frozenMisc: frozenMiscOrFlags,
    reservedBalance,
    votingBalance: votingBalance2
  };
}
function calcBalances2(api, [accountId2, [accountNonce, [primary, ...additional], accType]]) {
  return objectSpread3({
    accountId: accountId2,
    accountNonce,
    additional: additional.map((b) => getBalance(api, b, accType))
  }, getBalance(api, primary, accType));
}
function queryBalancesFree(api, accountId2) {
  return combineLatest([
    api.query.balances["freeBalance"](accountId2),
    api.query.balances["reservedBalance"](accountId2),
    api.query.system["accountNonce"](accountId2)
  ]).pipe(map2(([freeBalance, reservedBalance, accountNonce]) => [
    accountNonce,
    [[freeBalance, reservedBalance, zeroBalance(api), zeroBalance(api)]],
    { isFrameAccountData: false }
  ]));
}
function queryNonceOnly(api, accountId2) {
  const fill = (nonce) => [
    nonce,
    [[zeroBalance(api), zeroBalance(api), zeroBalance(api), zeroBalance(api)]],
    { isFrameAccountData: false }
  ];
  return isFunction4(api.query.system.account) ? api.query.system.account(accountId2).pipe(map2(({ nonce }) => fill(nonce))) : isFunction4(api.query.system["accountNonce"]) ? api.query.system["accountNonce"](accountId2).pipe(map2((nonce) => fill(nonce))) : of(fill(api.registry.createType("Index")));
}
function queryBalancesAccount(api, accountId2, modules = ["balances"]) {
  const balances = modules.map((m) => api.derive[m]?.customAccount || api.query[m]?.account).filter((q) => isFunction4(q));
  const extract = (nonce, data) => [
    nonce,
    data.map(({ feeFrozen, free, miscFrozen, reserved }) => [free, reserved, feeFrozen, miscFrozen]),
    { isFrameAccountData: false }
  ];
  return balances.length ? isFunction4(api.query.system.account) ? combineLatest([
    api.query.system.account(accountId2),
    ...balances.map((c) => c(accountId2))
  ]).pipe(map2(([{ nonce }, ...balances2]) => extract(nonce, balances2))) : combineLatest([
    api.query.system["accountNonce"](accountId2),
    ...balances.map((c) => c(accountId2))
  ]).pipe(map2(([nonce, ...balances2]) => extract(nonce, balances2))) : queryNonceOnly(api, accountId2);
}
function querySystemAccount(api, accountId2) {
  return api.query.system.account(accountId2).pipe(map2((infoOrTuple) => {
    const data = infoOrTuple.nonce ? infoOrTuple.data : infoOrTuple[1];
    const nonce = infoOrTuple.nonce || infoOrTuple[0];
    if (!data || data.isEmpty) {
      return [
        nonce,
        [[zeroBalance(api), zeroBalance(api), zeroBalance(api), zeroBalance(api)]],
        { isFrameAccountData: false }
      ];
    }
    const isFrameType = !!infoOrTuple.data.frozen;
    if (isFrameType) {
      const { flags: flags2, free, frozen, reserved } = data;
      return [
        nonce,
        [[free, reserved, frozen, flags2]],
        { isFrameAccountData: true }
      ];
    } else {
      const { feeFrozen, free, miscFrozen, reserved } = data;
      return [
        nonce,
        [[free, reserved, feeFrozen, miscFrozen]],
        { isFrameAccountData: false }
      ];
    }
  }));
}
function account(instanceId, api) {
  const balanceInstances = api.registry.getModuleInstances(api.runtimeVersion.specName, "balances");
  const nonDefaultBalances = balanceInstances && balanceInstances[0] !== "balances";
  return memo(instanceId, (address) => api.derive.accounts.accountId(address).pipe(switchMap((accountId2) => accountId2 ? combineLatest([
    of(accountId2),
    nonDefaultBalances ? queryBalancesAccount(api, accountId2, balanceInstances) : isFunction4(api.query.system?.account) ? querySystemAccount(api, accountId2) : isFunction4(api.query.balances?.account) ? queryBalancesAccount(api, accountId2) : isFunction4(api.query.balances?.["freeBalance"]) ? queryBalancesFree(api, accountId2) : queryNonceOnly(api, accountId2)
  ]) : of([api.registry.createType("AccountId"), [
    api.registry.createType("Index"),
    [[zeroBalance(api), zeroBalance(api), zeroBalance(api), zeroBalance(api)]],
    { isFrameAccountData: false }
  ]])), map2((result) => calcBalances2(api, result))));
}

// node_modules/@polkadot/api-derive/balances/votingBalances.js
function votingBalances(instanceId, api) {
  return memo(instanceId, (addresses) => !addresses?.length ? of([]) : combineLatest(addresses.map((accountId2) => api.derive.balances.account(accountId2))));
}

// node_modules/@polkadot/api-derive/balances/index.js
var votingBalance = all2;

// node_modules/@polkadot/api-derive/bounties/index.js
var bounties_exports = {};
__export(bounties_exports, {
  bounties: () => bounties
});

// node_modules/@polkadot/api-derive/bounties/helpers/filterBountyProposals.js
function filterBountiesProposals(api, allProposals) {
  const bountyTxBase = api.tx.bounties ? api.tx.bounties : api.tx.treasury;
  const bountyProposalCalls = [bountyTxBase.approveBounty, bountyTxBase.closeBounty, bountyTxBase.proposeCurator, bountyTxBase.unassignCurator];
  return allProposals.filter((proposal6) => bountyProposalCalls.find((bountyCall) => proposal6.proposal && bountyCall.is(proposal6.proposal)));
}

// node_modules/@polkadot/api-derive/bounties/bounties.js
function parseResult([maybeBounties, maybeDescriptions, ids, bountyProposals]) {
  const bounties2 = [];
  maybeBounties.forEach((bounty, index) => {
    if (bounty.isSome) {
      bounties2.push({
        bounty: bounty.unwrap(),
        description: maybeDescriptions[index].unwrapOrDefault().toUtf8(),
        index: ids[index],
        proposals: bountyProposals.filter((bountyProposal) => bountyProposal.proposal && ids[index].eq(bountyProposal.proposal.args[0]))
      });
    }
  });
  return bounties2;
}
function bounties(instanceId, api) {
  const bountyBase = api.query.bounties || api.query.treasury;
  return memo(instanceId, () => bountyBase.bounties ? combineLatest([
    bountyBase.bountyCount(),
    api.query.council ? api.query.council.proposalCount() : of(0)
  ]).pipe(switchMap(() => combineLatest([
    bountyBase.bounties.keys(),
    api.derive.council ? api.derive.council.proposals() : of([])
  ])), switchMap(([keys2, proposals8]) => {
    const ids = keys2.map(({ args: [id] }) => id);
    return combineLatest([
      bountyBase.bounties.multi(ids),
      bountyBase.bountyDescriptions.multi(ids),
      of(ids),
      of(filterBountiesProposals(api, proposals8))
    ]);
  }), map2(parseResult)) : of(parseResult([[], [], [], []])));
}

// node_modules/@polkadot/api-derive/chain/index.js
var chain_exports = {};
__export(chain_exports, {
  _getHeaderRange: () => _getHeaderRange,
  bestNumber: () => bestNumber,
  bestNumberFinalized: () => bestNumberFinalized,
  bestNumberLag: () => bestNumberLag,
  getBlock: () => getBlock,
  getBlockByNumber: () => getBlockByNumber,
  getHeader: () => getHeader,
  subscribeFinalizedBlocks: () => subscribeFinalizedBlocks,
  subscribeFinalizedHeads: () => subscribeFinalizedHeads,
  subscribeNewBlocks: () => subscribeNewBlocks,
  subscribeNewHeads: () => subscribeNewHeads
});

// node_modules/@polkadot/api-derive/chain/util.js
function createBlockNumberDerive(fn) {
  return (instanceId, api) => memo(instanceId, () => fn(api).pipe(map2(unwrapBlockNumber)));
}
function getAuthorDetailsWithAt(header, queryAt) {
  const validators2 = queryAt.session?.validators ? queryAt.session.validators() : of(null);
  const { logs: [log] } = header.digest;
  const loggedAuthor = log && (log.isConsensus && log.asConsensus[0].isNimbus && log.asConsensus[1] || log.isPreRuntime && log.asPreRuntime[0].isNimbus && log.asPreRuntime[1]);
  if (loggedAuthor) {
    if (queryAt["authorMapping"]?.["mappingWithDeposit"]) {
      return combineLatest([
        of(header),
        validators2,
        queryAt["authorMapping"]["mappingWithDeposit"](loggedAuthor).pipe(map2((o) => o.unwrapOr({ account: null }).account))
      ]);
    }
    if (queryAt["parachainStaking"]?.["selectedCandidates"] && queryAt.session?.nextKeys) {
      const loggedHex = loggedAuthor.toHex();
      return combineLatest([
        of(header),
        validators2,
        queryAt["parachainStaking"]["selectedCandidates"]().pipe(mergeMap((selectedCandidates) => combineLatest([
          of(selectedCandidates),
          queryAt.session.nextKeys.multi(selectedCandidates).pipe(map2((nextKeys) => nextKeys.findIndex((o) => o.unwrapOrDefault().nimbus.toHex() === loggedHex)))
        ])), map2(([selectedCandidates, index]) => index === -1 ? null : selectedCandidates[index]))
      ]);
    }
  }
  return combineLatest([
    of(header),
    validators2,
    of(null)
  ]);
}
function getAuthorDetails(api, header, blockHash) {
  return api.queryAt(header.parentHash.isEmpty ? blockHash || header.hash : header.parentHash).pipe(switchMap((queryAt) => getAuthorDetailsWithAt(header, queryAt)));
}

// node_modules/@polkadot/api-derive/chain/bestNumber.js
var bestNumber = /* @__PURE__ */ createBlockNumberDerive((api) => api.rpc.chain.subscribeNewHeads());

// node_modules/@polkadot/api-derive/chain/bestNumberFinalized.js
var bestNumberFinalized = /* @__PURE__ */ createBlockNumberDerive((api) => api.rpc.chain.subscribeFinalizedHeads());

// node_modules/@polkadot/api-derive/chain/bestNumberLag.js
function bestNumberLag(instanceId, api) {
  return memo(instanceId, () => combineLatest([
    api.derive.chain.bestNumber(),
    api.derive.chain.bestNumberFinalized()
  ]).pipe(map2(([bestNumber2, bestNumberFinalized2]) => api.registry.createType("BlockNumber", bestNumber2.sub(bestNumberFinalized2)))));
}

// node_modules/@polkadot/api-derive/type/util.js
function extractAuthor(digest, sessionValidators) {
  const [citem] = digest.logs.filter((e) => e.isConsensus);
  const [pitem] = digest.logs.filter((e) => e.isPreRuntime);
  const [sitem] = digest.logs.filter((e) => e.isSeal);
  let accountId2;
  try {
    if (pitem) {
      const [engine, data] = pitem.asPreRuntime;
      accountId2 = engine.extractAuthor(data, sessionValidators);
    }
    if (!accountId2 && citem) {
      const [engine, data] = citem.asConsensus;
      accountId2 = engine.extractAuthor(data, sessionValidators);
    }
    if (!accountId2 && sitem) {
      const [engine, data] = sitem.asSeal;
      accountId2 = engine.extractAuthor(data, sessionValidators);
    }
  } catch {
  }
  return accountId2;
}

// node_modules/@polkadot/api-derive/type/HeaderExtended.js
function createHeaderExtended(registry, header, validators2, author) {
  const HeaderBase = registry.createClass("Header");
  class Implementation extends HeaderBase {
    __internal__author;
    constructor(registry2, header2, validators3, author2) {
      super(registry2, header2);
      this.__internal__author = author2 || extractAuthor(this.digest, validators3 || []);
      this.createdAtHash = header2?.createdAtHash;
    }
    /**
     * @description Convenience method, returns the author for the block
     */
    get author() {
      return this.__internal__author;
    }
  }
  return new Implementation(registry, header, validators2, author);
}

// node_modules/@polkadot/api-derive/type/SignedBlockExtended.js
function mapExtrinsics(extrinsics, records) {
  return extrinsics.map((extrinsic, index) => {
    let dispatchError;
    let dispatchInfo;
    const events2 = records.filter(({ phase }) => phase.isApplyExtrinsic && phase.asApplyExtrinsic.eq(index)).map(({ event }) => {
      if (event.section === "system") {
        if (event.method === "ExtrinsicSuccess") {
          dispatchInfo = event.data[0];
        } else if (event.method === "ExtrinsicFailed") {
          dispatchError = event.data[0];
          dispatchInfo = event.data[1];
        }
      }
      return event;
    });
    return { dispatchError, dispatchInfo, events: events2, extrinsic };
  });
}
function createSignedBlockExtended(registry, block, events2, validators2, author) {
  const SignedBlockBase = registry.createClass("SignedBlock");
  class Implementation extends SignedBlockBase {
    __internal__author;
    __internal__events;
    __internal__extrinsics;
    constructor(registry2, block2, events3, validators3, author2) {
      super(registry2, block2);
      this.__internal__author = author2 || extractAuthor(this.block.header.digest, validators3 || []);
      this.__internal__events = events3 || [];
      this.__internal__extrinsics = mapExtrinsics(this.block.extrinsics, this.__internal__events);
      this.createdAtHash = block2?.createdAtHash;
    }
    /**
     * @description Convenience method, returns the author for the block
     */
    get author() {
      return this.__internal__author;
    }
    /**
     * @description Convenience method, returns the events associated with the block
     */
    get events() {
      return this.__internal__events;
    }
    /**
     * @description Returns the extrinsics and their events, mapped
     */
    get extrinsics() {
      return this.__internal__extrinsics;
    }
  }
  return new Implementation(registry, block, events2, validators2, author);
}

// node_modules/@polkadot/api-derive/chain/getBlock.js
function getBlock(instanceId, api) {
  return memo(instanceId, (blockHash) => combineLatest([
    api.rpc.chain.getBlock(blockHash),
    api.queryAt(blockHash)
  ]).pipe(switchMap(([signedBlock, queryAt]) => combineLatest([
    of(signedBlock),
    queryAt.system.events(),
    getAuthorDetails(api, signedBlock.block.header, blockHash)
  ])), map2(([signedBlock, events2, [, validators2, author]]) => createSignedBlockExtended(events2.registry, signedBlock, events2, validators2, author))));
}

// node_modules/@polkadot/api-derive/chain/getBlockByNumber.js
function getBlockByNumber(instanceId, api) {
  return memo(instanceId, (blockNumber) => api.rpc.chain.getBlockHash(blockNumber).pipe(switchMap((h) => api.derive.chain.getBlock(h))));
}

// node_modules/@polkadot/api-derive/chain/getHeader.js
function getHeader(instanceId, api) {
  return memo(instanceId, (blockHash) => api.rpc.chain.getHeader(blockHash).pipe(switchMap((header) => getAuthorDetails(api, header, blockHash)), map2(([header, validators2, author]) => createHeaderExtended((validators2 || header).registry, header, validators2, author))));
}

// node_modules/@polkadot/api-derive/chain/subscribeFinalizedBlocks.js
function subscribeFinalizedBlocks(instanceId, api) {
  return memo(instanceId, () => api.derive.chain.subscribeFinalizedHeads().pipe(switchMap((header) => api.derive.chain.getBlock(header.createdAtHash || header.hash))));
}

// node_modules/@polkadot/api-derive/chain/subscribeFinalizedHeads.js
function _getHeaderRange(instanceId, api) {
  return memo(instanceId, (startHash, endHash, prev = []) => api.rpc.chain.getHeader(startHash).pipe(switchMap((header) => header.parentHash.eq(endHash) ? of([header, ...prev]) : api.derive.chain._getHeaderRange(header.parentHash, endHash, [header, ...prev]))));
}
function subscribeFinalizedHeads(instanceId, api) {
  return memo(instanceId, () => {
    let prevHash = null;
    return api.rpc.chain.subscribeFinalizedHeads().pipe(switchMap((header) => {
      const endHash = prevHash;
      const startHash = header.parentHash;
      prevHash = header.createdAtHash = header.hash;
      return endHash === null || startHash.eq(endHash) ? of(header) : api.derive.chain._getHeaderRange(startHash, endHash, [header]).pipe(switchMap((headers) => from(headers)));
    }));
  });
}

// node_modules/@polkadot/api-derive/chain/subscribeNewBlocks.js
function subscribeNewBlocks(instanceId, api) {
  return memo(instanceId, () => api.derive.chain.subscribeNewHeads().pipe(switchMap((header) => api.derive.chain.getBlock(header.createdAtHash || header.hash))));
}

// node_modules/@polkadot/api-derive/chain/subscribeNewHeads.js
function subscribeNewHeads(instanceId, api) {
  return memo(instanceId, () => api.rpc.chain.subscribeNewHeads().pipe(switchMap((header) => getAuthorDetails(api, header)), map2(([header, validators2, author]) => {
    header.createdAtHash = header.hash;
    return createHeaderExtended(header.registry, header, validators2, author);
  })));
}

// node_modules/@polkadot/api-derive/contracts/index.js
var contracts_exports = {};
__export(contracts_exports, {
  fees: () => fees
});

// node_modules/@polkadot/api-derive/contracts/fees.js
function queryConstants(api) {
  return of([
    // deprecated
    api.consts.contracts["callBaseFee"] || api.registry.createType("Balance"),
    api.consts.contracts["contractFee"] || api.registry.createType("Balance"),
    api.consts.contracts["creationFee"] || api.registry.createType("Balance"),
    api.consts.contracts["transactionBaseFee"] || api.registry.createType("Balance"),
    api.consts.contracts["transactionByteFee"] || api.registry.createType("Balance"),
    api.consts.contracts["transferFee"] || api.registry.createType("Balance"),
    // current
    api.consts.contracts["rentByteFee"] || api.registry.createType("Balance"),
    api.consts.contracts["rentDepositOffset"] || api.registry.createType("Balance"),
    api.consts.contracts["surchargeReward"] || api.registry.createType("Balance"),
    api.consts.contracts["tombstoneDeposit"] || api.registry.createType("Balance")
  ]);
}
function fees(instanceId, api) {
  return memo(instanceId, () => {
    return queryConstants(api).pipe(map2(([callBaseFee, contractFee, creationFee, transactionBaseFee, transactionByteFee, transferFee, rentByteFee, rentDepositOffset, surchargeReward, tombstoneDeposit]) => ({
      callBaseFee,
      contractFee,
      creationFee,
      rentByteFee,
      rentDepositOffset,
      surchargeReward,
      tombstoneDeposit,
      transactionBaseFee,
      transactionByteFee,
      transferFee
    })));
  });
}

// node_modules/@polkadot/api-derive/council/index.js
var council_exports = {};
__export(council_exports, {
  hasProposals: () => hasProposals3,
  members: () => members3,
  prime: () => prime3,
  proposal: () => proposal3,
  proposalCount: () => proposalCount3,
  proposalHashes: () => proposalHashes3,
  proposals: () => proposals3,
  votes: () => votes,
  votesOf: () => votesOf
});

// node_modules/@polkadot/api-derive/council/votes.js
function isVoter(value) {
  return !Array.isArray(value);
}
function retrieveStakeOf(elections) {
  return elections["stakeOf"].entries().pipe(map2((entries) => entries.map(([{ args: [accountId2] }, stake]) => [accountId2, stake])));
}
function retrieveVoteOf(elections) {
  return elections["votesOf"].entries().pipe(map2((entries) => entries.map(([{ args: [accountId2] }, votes2]) => [accountId2, votes2])));
}
function retrievePrev(api, elections) {
  return combineLatest([
    retrieveStakeOf(elections),
    retrieveVoteOf(elections)
  ]).pipe(map2(([stakes, votes2]) => {
    const result = [];
    votes2.forEach(([voter, votes3]) => {
      result.push([voter, { stake: api.registry.createType("Balance"), votes: votes3 }]);
    });
    stakes.forEach(([staker, stake]) => {
      const entry = result.find(([voter]) => voter.eq(staker));
      if (entry) {
        entry[1].stake = stake;
      } else {
        result.push([staker, { stake, votes: [] }]);
      }
    });
    return result;
  }));
}
function retrieveCurrent(elections) {
  return elections.voting.entries().pipe(map2((entries) => entries.map(([{ args: [accountId2] }, value]) => [
    accountId2,
    isVoter(value) ? { stake: value.stake, votes: value.votes } : { stake: value[0], votes: value[1] }
  ])));
}
function votes(instanceId, api) {
  const elections = api.query.elections || api.query["phragmenElection"] || api.query["electionsPhragmen"];
  return memo(instanceId, () => elections ? elections["stakeOf"] ? retrievePrev(api, elections) : retrieveCurrent(elections) : of([]));
}

// node_modules/@polkadot/api-derive/council/votesOf.js
function votesOf(instanceId, api) {
  return memo(instanceId, (accountId2) => api.derive.council.votes().pipe(map2((votes2) => (votes2.find(([from2]) => from2.eq(accountId2)) || [null, { stake: api.registry.createType("Balance"), votes: [] }])[1])));
}

// node_modules/@polkadot/api-derive/council/index.js
var members3 = /* @__PURE__ */ members("council");
var hasProposals3 = /* @__PURE__ */ hasProposals("council");
var proposal3 = /* @__PURE__ */ proposal("council");
var proposalCount3 = /* @__PURE__ */ proposalCount("council");
var proposalHashes3 = /* @__PURE__ */ proposalHashes("council");
var proposals3 = /* @__PURE__ */ proposals("council");
var prime3 = /* @__PURE__ */ prime("council");

// node_modules/@polkadot/api-derive/crowdloan/index.js
var crowdloan_exports = {};
__export(crowdloan_exports, {
  childKey: () => childKey,
  contributions: () => contributions,
  ownContributions: () => ownContributions
});

// node_modules/@polkadot/api-derive/crowdloan/childKey.js
function createChildKey(info6) {
  return u8aToHex3(u8aConcat2(":child_storage:default:", blake2AsU8a2(u8aConcat2("crowdloan", (info6.fundIndex || info6.trieIndex).toU8a()))));
}
function childKey(instanceId, api) {
  return memo(instanceId, (paraId) => api.query["crowdloan"]["funds"](paraId).pipe(map2((optInfo) => optInfo.isSome ? createChildKey(optInfo.unwrap()) : null)));
}

// node_modules/@polkadot/api-derive/crowdloan/util.js
function extractContributed(paraId, events2) {
  const added = [];
  const removed = [];
  return events2.filter(({ event: { data: [, eventParaId], method, section: section2 } }) => section2 === "crowdloan" && ["Contributed", "Withdrew"].includes(method) && eventParaId.eq(paraId)).reduce((result, { event: { data: [accountId2], method } }) => {
    if (method === "Contributed") {
      result.added.push(accountId2.toHex());
    } else {
      result.removed.push(accountId2.toHex());
    }
    return result;
  }, { added, blockHash: events2.createdAtHash?.toHex() || "-", removed });
}

// node_modules/@polkadot/api-derive/crowdloan/contributions.js
var PAGE_SIZE_K = 1e3;
function _getUpdates(api, paraId) {
  let added = [];
  let removed = [];
  return api.query.system.events().pipe(switchMap((events2) => {
    const changes = extractContributed(paraId, events2);
    if (changes.added.length || changes.removed.length) {
      added = added.concat(...changes.added);
      removed = removed.concat(...changes.removed);
      return of({ added, addedDelta: changes.added, blockHash: events2.createdAtHash?.toHex() || "-", removed, removedDelta: changes.removed });
    }
    return EMPTY;
  }), startWith({ added, addedDelta: [], blockHash: "-", removed, removedDelta: [] }));
}
function _eventTriggerAll(api, paraId) {
  return api.query.system.events().pipe(switchMap((events2) => {
    const items = events2.filter(({ event: { data: [eventParaId], method, section: section2 } }) => section2 === "crowdloan" && ["AllRefunded", "Dissolved", "PartiallyRefunded"].includes(method) && eventParaId.eq(paraId));
    return items.length ? of(events2.createdAtHash?.toHex() || "-") : EMPTY;
  }), startWith("-"));
}
function _getKeysPaged(api, childKey2) {
  const subject = new BehaviorSubject(void 0);
  return subject.pipe(
    switchMap((startKey) => api.rpc.childstate.getKeysPaged(childKey2, "0x", PAGE_SIZE_K, startKey)),
    tap((keys2) => {
      nextTick2(() => {
        keys2.length === PAGE_SIZE_K ? subject.next(keys2[PAGE_SIZE_K - 1].toHex()) : subject.complete();
      });
    }),
    toArray(),
    // toArray since we want to startSubject to be completed
    map2((keyArr) => arrayFlatten2(keyArr))
  );
}
function _getAll(api, paraId, childKey2) {
  return _eventTriggerAll(api, paraId).pipe(switchMap(() => isFunction4(api.rpc.childstate.getKeysPaged) ? _getKeysPaged(api, childKey2) : api.rpc.childstate.getKeys(childKey2, "0x")), map2((keys2) => keys2.map((k) => k.toHex())));
}
function _contributions(api, paraId, childKey2) {
  return combineLatest([
    _getAll(api, paraId, childKey2),
    _getUpdates(api, paraId)
  ]).pipe(map2(([keys2, { added, blockHash, removed }]) => {
    const contributorsMap = {};
    keys2.forEach((k) => {
      contributorsMap[k] = true;
    });
    added.forEach((k) => {
      contributorsMap[k] = true;
    });
    removed.forEach((k) => {
      delete contributorsMap[k];
    });
    return {
      blockHash,
      contributorsHex: Object.keys(contributorsMap)
    };
  }));
}
function contributions(instanceId, api) {
  return memo(instanceId, (paraId) => api.derive.crowdloan.childKey(paraId).pipe(switchMap((childKey2) => childKey2 ? _contributions(api, paraId, childKey2) : of({ blockHash: "-", contributorsHex: [] }))));
}

// node_modules/@polkadot/api-derive/crowdloan/ownContributions.js
function _getValues(api, childKey2, keys2) {
  return combineLatest(keys2.map((k) => api.rpc.childstate.getStorage(childKey2, k))).pipe(map2((values) => values.map((v) => api.registry.createType("Option<StorageData>", v)).map((o) => o.isSome ? api.registry.createType("Balance", o.unwrap()) : api.registry.createType("Balance")).reduce((all3, b, index) => objectSpread3(all3, { [keys2[index]]: b }), {})));
}
function _watchOwnChanges(api, paraId, childkey, keys2) {
  return api.query.system.events().pipe(switchMap((events2) => {
    const changes = extractContributed(paraId, events2);
    const filtered = keys2.filter((k) => changes.added.includes(k) || changes.removed.includes(k));
    return filtered.length ? _getValues(api, childkey, filtered) : EMPTY;
  }), startWith({}));
}
function _contributions2(api, paraId, childKey2, keys2) {
  return combineLatest([
    _getValues(api, childKey2, keys2),
    _watchOwnChanges(api, paraId, childKey2, keys2)
  ]).pipe(map2(([all3, latest2]) => objectSpread3({}, all3, latest2)));
}
function ownContributions(instanceId, api) {
  return memo(instanceId, (paraId, keys2) => api.derive.crowdloan.childKey(paraId).pipe(switchMap((childKey2) => childKey2 && keys2.length ? _contributions2(api, paraId, childKey2, keys2) : of({}))));
}

// node_modules/@polkadot/api-derive/democracy/index.js
var democracy_exports = {};
__export(democracy_exports, {
  _referendumInfo: () => _referendumInfo,
  _referendumVotes: () => _referendumVotes,
  _referendumsVotes: () => _referendumsVotes,
  dispatchQueue: () => dispatchQueue,
  locks: () => locks,
  nextExternal: () => nextExternal,
  preimage: () => preimage,
  preimages: () => preimages,
  proposals: () => proposals4,
  referendumIds: () => referendumIds,
  referendums: () => referendums,
  referendumsActive: () => referendumsActive,
  referendumsFinished: () => referendumsFinished,
  referendumsInfo: () => referendumsInfo,
  sqrtElectorate: () => sqrtElectorate
});

// node_modules/@polkadot/api-derive/democracy/util.js
function isOldInfo(info6) {
  return !!info6.proposalHash;
}
function isCurrentStatus(status) {
  return !!status.tally;
}
function compareRationals(n1, d1, n2, d2) {
  while (true) {
    const q1 = n1.div(d1);
    const q2 = n2.div(d2);
    if (q1.lt(q2)) {
      return true;
    } else if (q2.lt(q1)) {
      return false;
    }
    const r1 = n1.mod(d1);
    const r2 = n2.mod(d2);
    if (r2.isZero()) {
      return false;
    } else if (r1.isZero()) {
      return true;
    }
    n1 = d2;
    n2 = d1;
    d1 = r2;
    d2 = r1;
  }
}
function calcPassingOther(threshold, sqrtElectorate2, { votedAye, votedNay, votedTotal }) {
  const sqrtVoters = bnSqrt(votedTotal);
  return sqrtVoters.isZero() ? false : threshold.isSuperMajorityApprove ? compareRationals(votedNay, sqrtVoters, votedAye, sqrtElectorate2) : compareRationals(votedNay, sqrtElectorate2, votedAye, sqrtVoters);
}
function calcPassing(threshold, sqrtElectorate2, state) {
  return threshold.isSimpleMajority ? state.votedAye.gt(state.votedNay) : calcPassingOther(threshold, sqrtElectorate2, state);
}
function calcVotesPrev(votesFor) {
  return votesFor.reduce((state, derived) => {
    const { balance, vote } = derived;
    const isDefault = vote.conviction.index === 0;
    const counted = balance.muln(isDefault ? 1 : vote.conviction.index).divn(isDefault ? 10 : 1);
    if (vote.isAye) {
      state.allAye.push(derived);
      state.voteCountAye++;
      state.votedAye.iadd(counted);
    } else {
      state.allNay.push(derived);
      state.voteCountNay++;
      state.votedNay.iadd(counted);
    }
    state.voteCount++;
    state.votedTotal.iadd(counted);
    return state;
  }, { allAye: [], allNay: [], voteCount: 0, voteCountAye: 0, voteCountNay: 0, votedAye: new import_bn12.default(0), votedNay: new import_bn12.default(0), votedTotal: new import_bn12.default(0) });
}
function calcVotesCurrent(tally, votes2) {
  const allAye = [];
  const allNay = [];
  votes2.forEach((derived) => {
    if (derived.vote.isAye) {
      allAye.push(derived);
    } else {
      allNay.push(derived);
    }
  });
  return {
    allAye,
    allNay,
    voteCount: allAye.length + allNay.length,
    voteCountAye: allAye.length,
    voteCountNay: allNay.length,
    votedAye: tally.ayes,
    votedNay: tally.nays,
    votedTotal: tally.turnout
  };
}
function calcVotes(sqrtElectorate2, referendum, votes2) {
  const state = isCurrentStatus(referendum.status) ? calcVotesCurrent(referendum.status.tally, votes2) : calcVotesPrev(votes2);
  return objectSpread3({}, state, {
    isPassing: calcPassing(referendum.status.threshold, sqrtElectorate2, state),
    votes: votes2
  });
}
function getStatus(info6) {
  if (info6.isNone) {
    return null;
  }
  const unwrapped = info6.unwrap();
  return isOldInfo(unwrapped) ? unwrapped : unwrapped.isOngoing ? unwrapped.asOngoing : null;
}
function getImageHashBounded(hash) {
  return hash.isLegacy ? hash.asLegacy.hash_.toHex() : hash.isLookup ? hash.asLookup.hash_.toHex() : hash.isInline ? hash.asInline.hash.toHex() : isString3(hash) ? isHex3(hash) ? hash : stringToHex(hash) : isU8a3(hash) ? u8aToHex3(hash) : hash.toHex();
}
function getImageHash(status) {
  return getImageHashBounded(status.proposal || status.proposalHash);
}

// node_modules/@polkadot/api-derive/democracy/dispatchQueue.js
var DEMOCRACY_ID = stringToHex("democrac");
function isMaybeHashedOrBounded(call) {
  return call instanceof Enum;
}
function isBounded(call) {
  return call.isInline || call.isLegacy || call.isLookup;
}
function queryQueue(api) {
  return api.query.democracy["dispatchQueue"]().pipe(switchMap((dispatches) => combineLatest([
    of(dispatches),
    api.derive.democracy.preimages(dispatches.map(([, hash]) => hash))
  ])), map2(([dispatches, images]) => dispatches.map(([at, imageHash, index], dispatchIndex) => ({
    at,
    image: images[dispatchIndex],
    imageHash: getImageHashBounded(imageHash),
    index
  }))));
}
function schedulerEntries(api) {
  return api.derive.democracy.referendumsFinished().pipe(switchMap(() => api.query.scheduler.agenda.keys()), switchMap((keys2) => {
    const blockNumbers = keys2.map(({ args: [blockNumber] }) => blockNumber);
    return blockNumbers.length ? combineLatest([
      of(blockNumbers),
      // this should simply be api.query.scheduler.agenda.multi,
      // however we have had cases on Darwinia where the indices have moved around after an
      // upgrade, which results in invalid on-chain data
      api.query.scheduler.agenda.multi(blockNumbers).pipe(catchError(() => of(blockNumbers.map(() => []))))
    ]) : of([[], []]);
  }));
}
function queryScheduler(api) {
  return schedulerEntries(api).pipe(switchMap(([blockNumbers, agendas]) => {
    const result = [];
    blockNumbers.forEach((at, index) => {
      (agendas[index] || []).filter((o) => o.isSome).forEach((o) => {
        const scheduled2 = o.unwrap();
        if (scheduled2.maybeId.isSome) {
          const id = scheduled2.maybeId.unwrap().toHex();
          if (id.startsWith(DEMOCRACY_ID)) {
            const imageHash = isMaybeHashedOrBounded(scheduled2.call) ? isBounded(scheduled2.call) ? getImageHashBounded(scheduled2.call) : scheduled2.call.isHash ? scheduled2.call.asHash.toHex() : scheduled2.call.asValue.args[0].toHex() : scheduled2.call.args[0].toHex();
            result.push({ at, imageHash, index: api.registry.createType("(u64, ReferendumIndex)", id)[1] });
          }
        }
      });
    });
    return combineLatest([
      of(result),
      result.length ? api.derive.democracy.preimages(result.map(({ imageHash }) => imageHash)) : of([])
    ]);
  }), map2(([infos, images]) => infos.map((info6, index) => objectSpread3({ image: images[index] }, info6))));
}
function dispatchQueue(instanceId, api) {
  return memo(instanceId, () => isFunction4(api.query.scheduler?.agenda) ? queryScheduler(api) : api.query.democracy["dispatchQueue"] ? queryQueue(api) : of([]));
}

// node_modules/@polkadot/api-derive/democracy/locks.js
var LOCKUPS = [0, 1, 2, 4, 8, 16, 32];
function parseEnd(api, vote, { approved, end }) {
  return [
    end,
    approved.isTrue && vote.isAye || approved.isFalse && vote.isNay ? end.add((api.consts.democracy.voteLockingPeriod || api.consts.democracy.enactmentPeriod).muln(LOCKUPS[vote.conviction.index])) : BN_ZERO2
  ];
}
function parseLock(api, [referendumId, accountVote], referendum) {
  const { balance, vote } = accountVote.asStandard;
  const [referendumEnd, unlockAt] = referendum.isFinished ? parseEnd(api, vote, referendum.asFinished) : [BN_ZERO2, BN_ZERO2];
  return { balance, isDelegated: false, isFinished: referendum.isFinished, referendumEnd, referendumId, unlockAt, vote };
}
function delegateLocks(api, { balance, conviction, target }) {
  return api.derive.democracy.locks(target).pipe(map2((available) => available.map(({ isFinished, referendumEnd, referendumId, unlockAt, vote }) => ({
    balance,
    isDelegated: true,
    isFinished,
    referendumEnd,
    referendumId,
    unlockAt: unlockAt.isZero() ? unlockAt : referendumEnd.add((api.consts.democracy.voteLockingPeriod || api.consts.democracy.enactmentPeriod).muln(LOCKUPS[conviction.index])),
    vote: api.registry.createType("Vote", { aye: vote.isAye, conviction })
  }))));
}
function directLocks(api, { votes: votes2 }) {
  if (!votes2.length) {
    return of([]);
  }
  return api.query.democracy.referendumInfoOf.multi(votes2.map(([referendumId]) => referendumId)).pipe(map2((referendums2) => votes2.map((vote, index) => [vote, referendums2[index].unwrapOr(null)]).filter((item) => !!item[1] && isUndefined3(item[1].end) && item[0][1].isStandard).map(([directVote, referendum]) => parseLock(api, directVote, referendum))));
}
function locks(instanceId, api) {
  return memo(instanceId, (accountId2) => api.query.democracy.votingOf ? api.query.democracy.votingOf(accountId2).pipe(switchMap((voting) => voting.isDirect ? directLocks(api, voting.asDirect) : voting.isDelegating ? delegateLocks(api, voting.asDelegating) : of([]))) : of([]));
}

// node_modules/@polkadot/api-derive/democracy/nextExternal.js
function withImage(api, nextOpt) {
  if (nextOpt.isNone) {
    return of(null);
  }
  const [hash, threshold] = nextOpt.unwrap();
  return api.derive.democracy.preimage(hash).pipe(map2((image) => ({
    image,
    imageHash: getImageHashBounded(hash),
    threshold
  })));
}
function nextExternal(instanceId, api) {
  return memo(instanceId, () => api.query.democracy?.nextExternal ? api.query.democracy.nextExternal().pipe(switchMap((nextOpt) => withImage(api, nextOpt))) : of(null));
}

// node_modules/@polkadot/api-derive/democracy/preimages.js
function getUnrequestedTicket(status) {
  return status.ticket || status.deposit;
}
function getRequestedTicket(status) {
  return (status.maybeTicket || status.deposit).unwrapOrDefault();
}
function isDemocracyPreimage(api, imageOpt) {
  return !!imageOpt && !api.query.democracy["dispatchQueue"];
}
function constructProposal(api, [bytes2, proposer, balance, at]) {
  let proposal6;
  try {
    proposal6 = api.registry.createType("Call", bytes2.toU8a(true));
  } catch (error) {
    console.error(error);
  }
  return { at, balance, proposal: proposal6, proposer };
}
function parseDemocracy(api, imageOpt) {
  if (imageOpt.isNone) {
    return;
  }
  if (isDemocracyPreimage(api, imageOpt)) {
    const status = imageOpt.unwrap();
    if (status.isMissing) {
      return;
    }
    const { data, deposit, provider, since } = status.asAvailable;
    return constructProposal(api, [data, provider, deposit, since]);
  }
  return constructProposal(api, imageOpt.unwrap());
}
function parseImage(api, [proposalHash, status, bytes2]) {
  if (!status) {
    return void 0;
  }
  const [proposer, balance] = status.isUnrequested ? getUnrequestedTicket(status.asUnrequested) : getRequestedTicket(status.asRequested);
  let proposal6;
  if (bytes2) {
    try {
      proposal6 = api.registry.createType("Call", bytes2.toU8a(true));
    } catch (error) {
      console.error(error);
    }
  }
  return { at: BN_ZERO2, balance, proposal: proposal6, proposalHash, proposer };
}
function getDemocracyImages(api, bounded) {
  const hashes = bounded.map((b) => getImageHashBounded(b));
  return api.query.democracy["preimages"].multi(hashes).pipe(map2((images) => images.map((imageOpt) => parseDemocracy(api, imageOpt))));
}
function getImages(api, bounded) {
  const hashes = bounded.map((b) => getImageHashBounded(b));
  const bytesType = api.registry.lookup.getTypeDef(api.query.preimage.preimageFor.creator.meta.type.asMap.key).type;
  return api.query.preimage.statusFor.multi(hashes).pipe(switchMap((optStatus) => {
    const statuses = optStatus.map((o) => o.unwrapOr(null));
    const keys2 = statuses.map((s, i) => s ? bytesType === "H256" ? hashes[i] : s.isRequested ? [hashes[i], s.asRequested.len.unwrapOr(0)] : [hashes[i], s.asUnrequested.len] : null).filter((p) => !!p);
    return api.query.preimage.preimageFor.multi(keys2).pipe(map2((optBytes) => {
      let ptr = -1;
      return statuses.map((s, i) => s ? [hashes[i], s, optBytes[++ptr].unwrapOr(null)] : [hashes[i], null, null]).map((v) => parseImage(api, v));
    }));
  }));
}
function preimages(instanceId, api) {
  return memo(instanceId, (hashes) => hashes.length ? isFunction4(api.query.democracy["preimages"]) ? getDemocracyImages(api, hashes) : isFunction4(api.query.preimage.preimageFor) ? getImages(api, hashes) : of([]) : of([]));
}
var preimage = /* @__PURE__ */ firstMemo((api, hash) => api.derive.democracy.preimages([hash]));

// node_modules/@polkadot/api-derive/democracy/proposals.js
function isNewDepositors(depositors) {
  return isFunction4(depositors[1].mul);
}
function parse2([proposals8, images, optDepositors]) {
  return proposals8.filter(([, , proposer], index) => !!optDepositors[index]?.isSome && !proposer.isEmpty).map(([index, hash, proposer], proposalIndex) => {
    const depositors = optDepositors[proposalIndex].unwrap();
    return objectSpread3({
      image: images[proposalIndex],
      imageHash: getImageHashBounded(hash),
      index,
      proposer
    }, isNewDepositors(depositors) ? { balance: depositors[1], seconds: depositors[0] } : { balance: depositors[0], seconds: depositors[1] });
  });
}
function proposals4(instanceId, api) {
  return memo(instanceId, () => isFunction4(api.query.democracy?.publicProps) ? api.query.democracy.publicProps().pipe(switchMap((proposals8) => proposals8.length ? combineLatest([
    of(proposals8),
    api.derive.democracy.preimages(proposals8.map(([, hash]) => hash)),
    api.query.democracy.depositOf.multi(proposals8.map(([index]) => index))
  ]) : of([[], [], []])), map2(parse2)) : of([]));
}

// node_modules/@polkadot/api-derive/democracy/referendumIds.js
function referendumIds(instanceId, api) {
  return memo(instanceId, () => api.query.democracy?.lowestUnbaked ? api.queryMulti([
    api.query.democracy.lowestUnbaked,
    api.query.democracy.referendumCount
  ]).pipe(map2(([first2, total]) => total.gt(first2) ? [...Array(total.sub(first2).toNumber())].map((_, i) => first2.addn(i)) : [])) : of([]));
}

// node_modules/@polkadot/api-derive/democracy/referendums.js
function referendums(instanceId, api) {
  return memo(instanceId, () => api.derive.democracy.referendumsActive().pipe(switchMap((referendums2) => referendums2.length ? combineLatest([
    of(referendums2),
    api.derive.democracy._referendumsVotes(referendums2)
  ]) : of([[], []])), map2(([referendums2, votes2]) => referendums2.map((referendum, index) => objectSpread3({}, referendum, votes2[index])))));
}

// node_modules/@polkadot/api-derive/democracy/referendumsActive.js
function referendumsActive(instanceId, api) {
  return memo(instanceId, () => api.derive.democracy.referendumIds().pipe(switchMap((ids) => ids.length ? api.derive.democracy.referendumsInfo(ids) : of([]))));
}

// node_modules/@polkadot/api-derive/democracy/referendumsFinished.js
function referendumsFinished(instanceId, api) {
  return memo(instanceId, () => api.derive.democracy.referendumIds().pipe(switchMap((ids) => api.query.democracy.referendumInfoOf.multi(ids)), map2((infos) => infos.map((o) => o.unwrapOr(null)).filter((info6) => !!info6 && info6.isFinished).map((info6) => info6.asFinished))));
}

// node_modules/@polkadot/api-derive/democracy/referendumsInfo.js
function votesPrev(api, referendumId) {
  return api.query.democracy["votersFor"](referendumId).pipe(switchMap((votersFor) => combineLatest([
    of(votersFor),
    votersFor.length ? api.query.democracy["voteOf"].multi(votersFor.map((accountId2) => [referendumId, accountId2])) : of([]),
    api.derive.balances.votingBalances(votersFor)
  ])), map2(([votersFor, votes2, balances]) => votersFor.map((accountId2, index) => ({
    accountId: accountId2,
    balance: balances[index].votingBalance || api.registry.createType("Balance"),
    isDelegating: false,
    vote: votes2[index] || api.registry.createType("Vote")
  }))));
}
function extractVotes(mapped, referendumId) {
  return mapped.filter(([, voting]) => voting.isDirect).map(([accountId2, voting]) => [
    accountId2,
    voting.asDirect.votes.filter(([idx]) => idx.eq(referendumId))
  ]).filter(([, directVotes]) => !!directVotes.length).reduce((result, [accountId2, votes2]) => (
    // FIXME We are ignoring split votes
    votes2.reduce((result2, [, vote]) => {
      if (vote.isStandard) {
        result2.push(objectSpread3({
          accountId: accountId2,
          isDelegating: false
        }, vote.asStandard));
      }
      return result2;
    }, result)
  ), []);
}
function votesCurr(api, referendumId) {
  return api.query.democracy.votingOf.entries().pipe(map2((allVoting) => {
    const mapped = allVoting.map(([{ args: [accountId2] }, voting]) => [accountId2, voting]);
    const votes2 = extractVotes(mapped, referendumId);
    const delegations = mapped.filter(([, voting]) => voting.isDelegating).map(([accountId2, voting]) => [accountId2, voting.asDelegating]);
    delegations.forEach(([accountId2, { balance, conviction, target }]) => {
      const toDelegator = delegations.find(([accountId3]) => accountId3.eq(target));
      const to = votes2.find(({ accountId: accountId3 }) => accountId3.eq(toDelegator ? toDelegator[0] : target));
      if (to) {
        votes2.push({
          accountId: accountId2,
          balance,
          isDelegating: true,
          vote: api.registry.createType("Vote", { aye: to.vote.isAye, conviction })
        });
      }
    });
    return votes2;
  }));
}
function _referendumVotes(instanceId, api) {
  return memo(instanceId, (referendum) => combineLatest([
    api.derive.democracy.sqrtElectorate(),
    isFunction4(api.query.democracy.votingOf) ? votesCurr(api, referendum.index) : votesPrev(api, referendum.index)
  ]).pipe(map2(([sqrtElectorate2, votes2]) => calcVotes(sqrtElectorate2, referendum, votes2))));
}
function _referendumsVotes(instanceId, api) {
  return memo(instanceId, (referendums2) => referendums2.length ? combineLatest(referendums2.map((referendum) => api.derive.democracy._referendumVotes(referendum))) : of([]));
}
function _referendumInfo(instanceId, api) {
  return memo(instanceId, (index, info6) => {
    const status = getStatus(info6);
    return status ? api.derive.democracy.preimage(status.proposal || status.proposalHash).pipe(map2((image) => ({
      image,
      imageHash: getImageHash(status),
      index: api.registry.createType("ReferendumIndex", index),
      status
    }))) : of(null);
  });
}
function referendumsInfo(instanceId, api) {
  return memo(instanceId, (ids) => ids.length ? api.query.democracy.referendumInfoOf.multi(ids).pipe(switchMap((infos) => combineLatest(ids.map((id, index) => api.derive.democracy._referendumInfo(id, infos[index])))), map2((infos) => infos.filter((r) => !!r))) : of([]));
}

// node_modules/@polkadot/api-derive/democracy/sqrtElectorate.js
function sqrtElectorate(instanceId, api) {
  return memo(instanceId, () => api.query.balances.totalIssuance().pipe(map2(bnSqrt)));
}

// node_modules/@polkadot/api-derive/elections/index.js
var elections_exports = {};
__export(elections_exports, {
  info: () => info2
});

// node_modules/@polkadot/api-derive/elections/info.js
function isSeatHolder(value) {
  return !Array.isArray(value);
}
function isCandidateTuple(value) {
  return Array.isArray(value);
}
function getAccountTuple(value) {
  return isSeatHolder(value) ? [value.who, value.stake] : value;
}
function getCandidate(value) {
  return isCandidateTuple(value) ? value[0] : value;
}
function sortAccounts([, balanceA], [, balanceB]) {
  return balanceB.cmp(balanceA);
}
function getConstants(api, elections) {
  return elections ? {
    candidacyBond: api.consts[elections].candidacyBond,
    desiredRunnersUp: api.consts[elections].desiredRunnersUp,
    desiredSeats: api.consts[elections].desiredMembers,
    termDuration: api.consts[elections].termDuration,
    votingBond: api.consts[elections]["votingBond"],
    votingBondBase: api.consts[elections].votingBondBase,
    votingBondFactor: api.consts[elections].votingBondFactor
  } : {};
}
function getModules(api) {
  const [council] = api.registry.getModuleInstances(api.runtimeVersion.specName, "council") || ["council"];
  const elections = api.query["phragmenElection"] ? "phragmenElection" : api.query["electionsPhragmen"] ? "electionsPhragmen" : api.query.elections ? "elections" : null;
  const resolvedCouncil = api.query[council] ? council : "council";
  return [resolvedCouncil, elections];
}
function queryAll(api, council, elections) {
  return api.queryMulti([
    api.query[council].members,
    api.query[elections].candidates,
    api.query[elections].members,
    api.query[elections].runnersUp
  ]);
}
function queryCouncil(api, council) {
  return combineLatest([
    api.query[council].members(),
    of([]),
    of([]),
    of([])
  ]);
}
function info2(instanceId, api) {
  return memo(instanceId, () => {
    const [council, elections] = getModules(api);
    return (elections ? queryAll(api, council, elections) : queryCouncil(api, council)).pipe(map2(([councilMembers, candidates2, members7, runnersUp]) => objectSpread3({}, getConstants(api, elections), {
      candidateCount: api.registry.createType("u32", candidates2.length),
      candidates: candidates2.map(getCandidate),
      members: members7.length ? members7.map(getAccountTuple).sort(sortAccounts) : councilMembers.map((a) => [a, api.registry.createType("Balance")]),
      runnersUp: runnersUp.map(getAccountTuple).sort(sortAccounts)
    })));
  });
}

// node_modules/@polkadot/api-derive/imOnline/index.js
var imOnline_exports = {};
__export(imOnline_exports, {
  receivedHeartbeats: () => receivedHeartbeats
});

// node_modules/@polkadot/api-derive/imOnline/receivedHeartbeats.js
function mapResult([result, validators2, heartbeats, numBlocks]) {
  validators2.forEach((validator, index) => {
    const validatorId = validator.toString();
    const blockCount = numBlocks[index];
    const hasMessage = !heartbeats[index].isEmpty;
    const prev = result[validatorId];
    if (!prev || prev.hasMessage !== hasMessage || !prev.blockCount.eq(blockCount)) {
      result[validatorId] = {
        blockCount,
        hasMessage,
        isOnline: hasMessage || blockCount.gt(BN_ZERO2)
      };
    }
  });
  return result;
}
function receivedHeartbeats(instanceId, api) {
  return memo(instanceId, () => api.query.imOnline?.receivedHeartbeats ? api.derive.staking.overview().pipe(switchMap(({ currentIndex, validators: validators2 }) => combineLatest([
    of({}),
    of(validators2),
    api.query.imOnline.receivedHeartbeats.multi(validators2.map((_address, index) => [currentIndex, index])),
    api.query.imOnline.authoredBlocks.multi(validators2.map((address) => [currentIndex, address]))
  ])), map2(mapResult)) : of({}));
}

// node_modules/@polkadot/api-derive/membership/index.js
var membership_exports = {};
__export(membership_exports, {
  hasProposals: () => hasProposals4,
  members: () => members4,
  prime: () => prime4,
  proposal: () => proposal4,
  proposalCount: () => proposalCount4,
  proposalHashes: () => proposalHashes4,
  proposals: () => proposals5
});
var members4 = /* @__PURE__ */ members("membership");
var hasProposals4 = /* @__PURE__ */ hasProposals("membership");
var proposal4 = /* @__PURE__ */ proposal("membership");
var proposalCount4 = /* @__PURE__ */ proposalCount("membership");
var proposalHashes4 = /* @__PURE__ */ proposalHashes("membership");
var proposals5 = /* @__PURE__ */ proposals("membership");
var prime4 = /* @__PURE__ */ prime("membership");

// node_modules/@polkadot/api-derive/parachains/index.js
var parachains_exports = {};
__export(parachains_exports, {
  info: () => info3,
  overview: () => overview
});

// node_modules/@polkadot/api-derive/parachains/util.js
function didUpdateToBool(didUpdate, id) {
  return didUpdate.isSome ? didUpdate.unwrap().some((paraId) => paraId.eq(id)) : false;
}

// node_modules/@polkadot/api-derive/parachains/info.js
function parseActive(id, active) {
  const found = active.find(([paraId]) => paraId === id);
  if (found && found[1].isSome) {
    const [collatorId, retriable] = found[1].unwrap();
    return objectSpread3({ collatorId }, retriable.isWithRetries ? {
      isRetriable: true,
      retries: retriable.asWithRetries.toNumber()
    } : {
      isRetriable: false,
      retries: 0
    });
  }
  return null;
}
function parseCollators(id, collatorQueue) {
  return collatorQueue.map((queue) => {
    const found = queue.find(([paraId]) => paraId === id);
    return found ? found[1] : null;
  });
}
function parse3(id, [active, retryQueue, selectedThreads, didUpdate, info6, pendingSwap, heads, relayDispatchQueue]) {
  if (info6.isNone) {
    return null;
  }
  return {
    active: parseActive(id, active),
    didUpdate: didUpdateToBool(didUpdate, id),
    heads,
    id,
    info: objectSpread3({ id }, info6.unwrap()),
    pendingSwapId: pendingSwap.unwrapOr(null),
    relayDispatchQueue,
    retryCollators: parseCollators(id, retryQueue),
    selectedCollators: parseCollators(id, selectedThreads)
  };
}
function info3(instanceId, api) {
  return memo(instanceId, (id) => api.query["registrar"] && api.query["parachains"] ? api.queryMulti([
    api.query["registrar"]["active"],
    api.query["registrar"]["retryQueue"],
    api.query["registrar"]["selectedThreads"],
    api.query["parachains"]["didUpdate"],
    [api.query["registrar"]["paras"], id],
    [api.query["registrar"]["pendingSwap"], id],
    [api.query["parachains"]["heads"], id],
    [api.query["parachains"]["relayDispatchQueue"], id]
  ]).pipe(map2((result) => parse3(api.registry.createType("ParaId", id), result))) : of(null));
}

// node_modules/@polkadot/api-derive/parachains/overview.js
function parse4([ids, didUpdate, relayDispatchQueueSizes, infos, pendingSwaps]) {
  return ids.map((id, index) => ({
    didUpdate: didUpdateToBool(didUpdate, id),
    id,
    info: objectSpread3({ id }, infos[index].unwrapOr(null)),
    pendingSwapId: pendingSwaps[index].unwrapOr(null),
    relayDispatchQueueSize: relayDispatchQueueSizes[index][0].toNumber()
  }));
}
function overview(instanceId, api) {
  return memo(instanceId, () => api.query["registrar"]?.["parachains"] && api.query["parachains"] ? api.query["registrar"]["parachains"]().pipe(switchMap((paraIds) => combineLatest([
    of(paraIds),
    api.query["parachains"]["didUpdate"](),
    api.query["parachains"]["relayDispatchQueueSize"].multi(paraIds),
    api.query["registrar"]["paras"].multi(paraIds),
    api.query["registrar"]["pendingSwap"].multi(paraIds)
  ])), map2(parse4)) : of([]));
}

// node_modules/@polkadot/api-derive/session/index.js
var session_exports = {};
__export(session_exports, {
  eraLength: () => eraLength,
  eraProgress: () => eraProgress,
  indexes: () => indexes2,
  info: () => info4,
  progress: () => progress,
  sessionProgress: () => sessionProgress
});

// node_modules/@polkadot/api-derive/session/indexes.js
function parse5([currentIndex, activeEra, activeEraStart, currentEra, validatorCount]) {
  return {
    activeEra,
    activeEraStart,
    currentEra,
    currentIndex,
    validatorCount
  };
}
function queryStaking(api) {
  return api.queryMulti([
    api.query.session.currentIndex,
    api.query.staking.activeEra,
    api.query.staking.currentEra,
    api.query.staking.validatorCount
  ]).pipe(map2(([currentIndex, activeOpt, currentEra, validatorCount]) => {
    const { index, start } = activeOpt.unwrapOrDefault();
    return parse5([
      currentIndex,
      index,
      start,
      currentEra.unwrapOrDefault(),
      validatorCount
    ]);
  }));
}
function querySession(api) {
  return api.query.session.currentIndex().pipe(map2((currentIndex) => parse5([
    currentIndex,
    api.registry.createType("EraIndex"),
    api.registry.createType("Option<Moment>"),
    api.registry.createType("EraIndex"),
    api.registry.createType("u32")
  ])));
}
function empty(api) {
  return of(parse5([
    api.registry.createType("SessionIndex", 1),
    api.registry.createType("EraIndex"),
    api.registry.createType("Option<Moment>"),
    api.registry.createType("EraIndex"),
    api.registry.createType("u32")
  ]));
}
function indexes2(instanceId, api) {
  return memo(instanceId, () => api.query.session ? api.query.staking ? queryStaking(api) : querySession(api) : empty(api));
}

// node_modules/@polkadot/api-derive/session/info.js
function info4(instanceId, api) {
  return memo(instanceId, () => api.derive.session.indexes().pipe(map2((indexes3) => {
    const sessionLength = api.consts?.babe?.epochDuration || api.registry.createType("u64", 1);
    const sessionsPerEra = api.consts?.staking?.sessionsPerEra || api.registry.createType("SessionIndex", 1);
    return objectSpread3({
      eraLength: api.registry.createType("BlockNumber", sessionsPerEra.mul(sessionLength)),
      isEpoch: !!api.query.babe,
      sessionLength,
      sessionsPerEra
    }, indexes3);
  })));
}

// node_modules/@polkadot/api-derive/session/progress.js
function withProgressField(field) {
  return (instanceId, api) => memo(instanceId, () => api.derive.session.progress().pipe(map2((info6) => info6[field])));
}
function createDerive(api, info6, [currentSlot, epochIndex, epochOrGenesisStartSlot, activeEraStartSessionIndex]) {
  const epochStartSlot = epochIndex.mul(info6.sessionLength).iadd(epochOrGenesisStartSlot);
  const sessionProgress2 = currentSlot.sub(epochStartSlot);
  const eraProgress2 = info6.currentIndex.sub(activeEraStartSessionIndex).imul(info6.sessionLength).iadd(sessionProgress2);
  return objectSpread3({
    eraProgress: api.registry.createType("BlockNumber", eraProgress2),
    sessionProgress: api.registry.createType("BlockNumber", sessionProgress2)
  }, info6);
}
function queryAura(api) {
  return api.derive.session.info().pipe(map2((info6) => objectSpread3({
    eraProgress: api.registry.createType("BlockNumber"),
    sessionProgress: api.registry.createType("BlockNumber")
  }, info6)));
}
function queryBabe(api) {
  return api.derive.session.info().pipe(switchMap((info6) => combineLatest([
    of(info6),
    // we may have no staking, but have babe (permissioned)
    api.query.staking?.erasStartSessionIndex ? api.queryMulti([
      api.query.babe.currentSlot,
      api.query.babe.epochIndex,
      api.query.babe.genesisSlot,
      [api.query.staking.erasStartSessionIndex, info6.activeEra]
    ]) : api.queryMulti([
      api.query.babe.currentSlot,
      api.query.babe.epochIndex,
      api.query.babe.genesisSlot
    ])
  ])), map2(([info6, [currentSlot, epochIndex, genesisSlot, optStartIndex]]) => [
    info6,
    [currentSlot, epochIndex, genesisSlot, optStartIndex && optStartIndex.isSome ? optStartIndex.unwrap() : api.registry.createType("SessionIndex", 1)]
  ]));
}
function progress(instanceId, api) {
  return memo(instanceId, () => api.query.babe ? queryBabe(api).pipe(map2(([info6, slots]) => createDerive(api, info6, slots))) : queryAura(api));
}
var eraLength = /* @__PURE__ */ withProgressField("eraLength");
var eraProgress = /* @__PURE__ */ withProgressField("eraProgress");
var sessionProgress = /* @__PURE__ */ withProgressField("sessionProgress");

// node_modules/@polkadot/api-derive/society/index.js
var society_exports = {};
__export(society_exports, {
  _members: () => _members,
  candidates: () => candidates,
  info: () => info5,
  member: () => member,
  members: () => members5
});

// node_modules/@polkadot/api-derive/society/candidates.js
function getPrev(api) {
  return api.query.society.candidates().pipe(switchMap((candidates2) => combineLatest([
    of(candidates2),
    api.query.society["suspendedCandidates"].multi(candidates2.map(({ who }) => who))
  ])), map2(([candidates2, suspended]) => candidates2.map(({ kind, value, who }, index) => ({
    accountId: who,
    isSuspended: suspended[index].isSome,
    kind,
    value
  }))));
}
function getCurr(api) {
  return api.query.society.candidates.entries().pipe(map2((entries) => entries.filter(([, opt]) => opt.isSome).map(([{ args: [accountId2] }, opt]) => [accountId2, opt.unwrap()]).map(([accountId2, { bid, kind }]) => ({
    accountId: accountId2,
    isSuspended: false,
    kind,
    value: bid
  }))));
}
function candidates(instanceId, api) {
  return memo(instanceId, () => api.query.society["suspendedCandidates"] && api.query.society.candidates.creator.meta.type.isPlain ? getPrev(api) : getCurr(api));
}

// node_modules/@polkadot/api-derive/society/info.js
function info5(instanceId, api) {
  return memo(instanceId, () => combineLatest([
    api.query.society.bids(),
    api.query.society["defender"] ? api.query.society["defender"]() : of(void 0),
    api.query.society.founder(),
    api.query.society.head(),
    api.query.society["maxMembers"] ? api.query.society["maxMembers"]() : of(void 0),
    api.query.society.pot()
  ]).pipe(map2(([bids, defender, founder, head, maxMembers, pot]) => ({
    bids,
    defender: defender?.unwrapOr(void 0),
    founder: founder.unwrapOr(void 0),
    hasDefender: defender?.isSome && head.isSome && !head.eq(defender) || false,
    head: head.unwrapOr(void 0),
    maxMembers,
    pot
  }))));
}

// node_modules/@polkadot/api-derive/society/member.js
function member(instanceId, api) {
  return memo(instanceId, (accountId2) => api.derive.society._members([accountId2]).pipe(map2(([result]) => result)));
}

// node_modules/@polkadot/api-derive/society/members.js
function _membersPrev(api, accountIds) {
  return combineLatest([
    of(accountIds),
    api.query.society.payouts.multi(accountIds),
    api.query.society["strikes"].multi(accountIds),
    api.query.society.defenderVotes.multi(accountIds),
    api.query.society.suspendedMembers.multi(accountIds),
    api.query.society["vouching"].multi(accountIds)
  ]).pipe(map2(([accountIds2, payouts, strikes, defenderVotes, suspended, vouching]) => accountIds2.map((accountId2, index) => ({
    accountId: accountId2,
    isDefenderVoter: defenderVotes[index].isSome,
    isSuspended: suspended[index].isTrue,
    payouts: payouts[index],
    strikes: strikes[index],
    vote: defenderVotes[index].unwrapOr(void 0),
    vouching: vouching[index].unwrapOr(void 0)
  }))));
}
function _membersCurr(api, accountIds) {
  return combineLatest([
    of(accountIds),
    api.query.society.members.multi(accountIds),
    api.query.society.payouts.multi(accountIds),
    api.query.society.challengeRoundCount().pipe(switchMap((round) => api.query.society.defenderVotes.multi(accountIds.map((accountId2) => [round, accountId2])))),
    api.query.society.suspendedMembers.multi(accountIds)
  ]).pipe(map2(([accountIds2, members7, payouts, defenderVotes, suspendedMembers]) => accountIds2.map((accountId2, index) => members7[index].isSome ? {
    accountId: accountId2,
    isDefenderVoter: defenderVotes[index].isSome,
    isSuspended: suspendedMembers[index].isSome,
    member: members7[index].unwrap(),
    payouts: payouts[index].payouts
  } : null).filter((m) => !!m).map(({ accountId: accountId2, isDefenderVoter, isSuspended, member: member2, payouts: payouts2 }) => ({
    accountId: accountId2,
    isDefenderVoter,
    isSuspended,
    payouts: payouts2,
    strikes: member2.strikes,
    vouching: member2.vouching.unwrapOr(void 0)
  }))));
}
function _members(instanceId, api) {
  return memo(instanceId, (accountIds) => api.query.society.members.creator.meta.type.isMap ? _membersCurr(api, accountIds) : _membersPrev(api, accountIds));
}
function members5(instanceId, api) {
  return memo(instanceId, () => api.query.society.members.creator.meta.type.isMap ? api.query.society.members.keys().pipe(switchMap((keys2) => api.derive.society._members(keys2.map(({ args: [accountId2] }) => accountId2)))) : api.query.society.members().pipe(switchMap((members7) => api.derive.society._members(members7))));
}

// node_modules/@polkadot/api-derive/staking/index.js
var staking_exports = {};
__export(staking_exports, {
  _eraExposure: () => _eraExposure,
  _eraPrefs: () => _eraPrefs,
  _eraSlashes: () => _eraSlashes,
  _erasExposure: () => _erasExposure,
  _erasPoints: () => _erasPoints,
  _erasPrefs: () => _erasPrefs,
  _erasRewards: () => _erasRewards,
  _erasSlashes: () => _erasSlashes,
  _ownExposures: () => _ownExposures,
  _ownSlashes: () => _ownSlashes,
  _stakerExposures: () => _stakerExposures,
  _stakerPoints: () => _stakerPoints,
  _stakerPrefs: () => _stakerPrefs,
  _stakerRewards: () => _stakerRewards,
  _stakerRewardsEras: () => _stakerRewardsEras,
  _stakerSlashes: () => _stakerSlashes,
  account: () => account2,
  accounts: () => accounts,
  currentPoints: () => currentPoints,
  electedInfo: () => electedInfo,
  eraExposure: () => eraExposure,
  eraPrefs: () => eraPrefs,
  eraSlashes: () => eraSlashes,
  erasExposure: () => erasExposure,
  erasHistoric: () => erasHistoric,
  erasPoints: () => erasPoints,
  erasPrefs: () => erasPrefs,
  erasRewards: () => erasRewards,
  erasSlashes: () => erasSlashes,
  keys: () => keys,
  keysMulti: () => keysMulti,
  nextElected: () => nextElected,
  overview: () => overview2,
  ownExposure: () => ownExposure,
  ownExposures: () => ownExposures,
  ownSlash: () => ownSlash,
  ownSlashes: () => ownSlashes,
  query: () => query,
  queryMulti: () => queryMulti,
  stakerExposure: () => stakerExposure,
  stakerExposures: () => stakerExposures,
  stakerPoints: () => stakerPoints,
  stakerPrefs: () => stakerPrefs,
  stakerRewards: () => stakerRewards,
  stakerRewardsMulti: () => stakerRewardsMulti,
  stakerRewardsMultiEras: () => stakerRewardsMultiEras,
  stakerSlashes: () => stakerSlashes,
  stashes: () => stashes,
  validators: () => validators,
  waitingInfo: () => waitingInfo
});

// node_modules/@polkadot/api-derive/staking/account.js
var QUERY_OPTS = {
  withDestination: true,
  withLedger: true,
  withNominations: true,
  withPrefs: true
};
function groupByEra(list) {
  return list.reduce((map3, { era, value }) => {
    const key = era.toString();
    map3[key] = (map3[key] || BN_ZERO2).add(value.unwrap());
    return map3;
  }, {});
}
function calculateUnlocking(api, stakingLedger, sessionInfo) {
  const results = Object.entries(groupByEra((stakingLedger?.unlocking || []).filter(({ era }) => era.unwrap().gt(sessionInfo.activeEra)))).map(([eraString, value]) => ({
    remainingEras: new import_bn12.default(eraString).isub(sessionInfo.activeEra),
    value: api.registry.createType("Balance", value)
  }));
  return results.length ? results : void 0;
}
function redeemableSum(api, stakingLedger, sessionInfo) {
  return api.registry.createType("Balance", (stakingLedger?.unlocking || []).reduce((total, { era, value }) => {
    return era.unwrap().gt(sessionInfo.currentEra) ? total : total.iadd(value.unwrap());
  }, new import_bn12.default(0)));
}
function parseResult2(api, sessionInfo, keys2, query2) {
  return objectSpread3({}, keys2, query2, {
    redeemable: redeemableSum(api, query2.stakingLedger, sessionInfo),
    unlocking: calculateUnlocking(api, query2.stakingLedger, sessionInfo)
  });
}
function accounts(instanceId, api) {
  return memo(instanceId, (accountIds, opts = QUERY_OPTS) => api.derive.session.info().pipe(switchMap((sessionInfo) => combineLatest([
    api.derive.staking.keysMulti(accountIds),
    api.derive.staking.queryMulti(accountIds, opts)
  ]).pipe(map2(([keys2, queries]) => queries.map((q, index) => parseResult2(api, sessionInfo, keys2[index], q)))))));
}
var account2 = /* @__PURE__ */ firstMemo((api, accountId2, opts) => api.derive.staking.accounts([accountId2], opts));

// node_modules/@polkadot/api-derive/staking/currentPoints.js
function currentPoints(instanceId, api) {
  return memo(instanceId, () => api.derive.session.indexes().pipe(switchMap(({ activeEra }) => api.query.staking.erasRewardPoints(activeEra))));
}

// node_modules/@polkadot/api-derive/staking/electedInfo.js
var DEFAULT_FLAGS = { withController: true, withExposure: true, withPrefs: true };
function combineAccounts(nextElected2, validators2) {
  return arrayFlatten2([nextElected2, validators2.filter((v) => !nextElected2.find((n) => n.eq(v)))]);
}
function electedInfo(instanceId, api) {
  return memo(instanceId, (flags2 = DEFAULT_FLAGS, page = 0) => api.derive.staking.validators().pipe(switchMap(({ nextElected: nextElected2, validators: validators2 }) => api.derive.staking.queryMulti(combineAccounts(nextElected2, validators2), flags2, page).pipe(map2((info6) => ({
    info: info6,
    nextElected: nextElected2,
    validators: validators2
  }))))));
}

// node_modules/@polkadot/api-derive/staking/cache.js
function getEraCache(CACHE_KEY6, era, withActive) {
  const cacheKey = `${CACHE_KEY6}-${era.toString()}`;
  return [
    cacheKey,
    withActive ? void 0 : deriveCache.get(cacheKey)
  ];
}
function getEraMultiCache(CACHE_KEY6, eras, withActive) {
  const cached = withActive ? [] : eras.map((e) => deriveCache.get(`${CACHE_KEY6}-${e.toString()}`)).filter((v) => !!v);
  return cached;
}
function setEraCache(cacheKey, withActive, value) {
  !withActive && deriveCache.set(cacheKey, value);
  return value;
}
function setEraMultiCache(CACHE_KEY6, withActive, values) {
  !withActive && values.forEach((v) => deriveCache.set(`${CACHE_KEY6}-${v.era.toString()}`, v));
  return values;
}
function filterCachedEras(eras, cached, query2) {
  return eras.map((e) => cached.find(({ era }) => e.eq(era)) || query2.find(({ era }) => e.eq(era))).filter((e) => !!e);
}

// node_modules/@polkadot/api-derive/staking/util.js
var ERA_CHUNK_SIZE = 14;
function chunkEras(eras, fn) {
  const chunked = arrayChunk2(eras, ERA_CHUNK_SIZE);
  let index = 0;
  const subject = new BehaviorSubject(chunked[index]);
  return subject.pipe(switchMap(fn), tap(() => {
    nextTick2(() => {
      index++;
      index === chunked.length ? subject.complete() : subject.next(chunked[index]);
    });
  }), toArray(), map2(arrayFlatten2));
}
function filterEras(eras, list) {
  return eras.filter((e) => !list.some(({ era }) => e.eq(era)));
}
function erasHistoricApply(fn) {
  return (instanceId, api) => (
    // Cannot quite get the typing right, but it is right in the code
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    memo(instanceId, (withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap((e) => api.derive.staking[fn](e, withActive))))
  );
}
function erasHistoricApplyAccount(fn) {
  return (instanceId, api) => (
    // Cannot quite get the typing right, but it is right in the code
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    memo(instanceId, (accountId2, withActive = false, page) => api.derive.staking.erasHistoric(withActive).pipe(switchMap((e) => api.derive.staking[fn](accountId2, e, withActive, page || 0))))
  );
}
function singleEra(fn) {
  return (instanceId, api) => (
    // Cannot quite get the typing right, but it is right in the code
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    memo(instanceId, (era) => api.derive.staking[fn](era, true))
  );
}
function combineEras(fn) {
  return (instanceId, api) => (
    // Cannot quite get the typing right, but it is right in the code
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    memo(instanceId, (eras, withActive) => !eras.length ? of([]) : chunkEras(eras, (eras2) => combineLatest(eras2.map((e) => api.derive.staking[fn](e, withActive)))))
  );
}

// node_modules/@polkadot/api-derive/staking/erasExposure.js
var CACHE_KEY = "eraExposure";
function mapStakersClipped(era, stakers) {
  const nominators = {};
  const validators2 = {};
  stakers.forEach(([key, exposure]) => {
    const validatorId = key.args[1].toString();
    validators2[validatorId] = exposure;
    exposure.others.forEach(({ who }, validatorIndex) => {
      const nominatorId = who.toString();
      nominators[nominatorId] = nominators[nominatorId] || [];
      nominators[nominatorId].push({ validatorId, validatorIndex });
    });
  });
  return { era, nominators, validators: validators2 };
}
function mapStakersPaged(era, stakers) {
  const nominators = {};
  const validators2 = {};
  stakers.forEach(([key, exposureOpt]) => {
    if (exposureOpt.isSome) {
      const validatorId = key.args[1].toString();
      const exposure = exposureOpt.unwrap();
      validators2[validatorId] = exposure;
      exposure.others.forEach(({ who }, validatorIndex) => {
        const nominatorId = who.toString();
        nominators[nominatorId] = nominators[nominatorId] || [];
        nominators[nominatorId].push({ validatorId, validatorIndex });
      });
    }
  });
  return { era, nominators, validators: validators2 };
}
function _eraExposure(instanceId, api) {
  return memo(instanceId, (era, withActive = false) => {
    const [cacheKey, cached] = getEraCache(CACHE_KEY, era, withActive);
    return cached ? of(cached) : api.query.staking.erasStakersPaged ? api.query.staking.erasStakersPaged.entries(era).pipe(map2((r) => setEraCache(cacheKey, withActive, mapStakersPaged(era, r)))) : api.query.staking.erasStakersClipped.entries(era).pipe(map2((r) => setEraCache(cacheKey, withActive, mapStakersClipped(era, r))));
  });
}
var eraExposure = /* @__PURE__ */ singleEra("_eraExposure");
var _erasExposure = /* @__PURE__ */ combineEras("_eraExposure");
var erasExposure = /* @__PURE__ */ erasHistoricApply("_erasExposure");

// node_modules/@polkadot/api-derive/staking/erasHistoric.js
function erasHistoric(instanceId, api) {
  return memo(instanceId, (withActive) => combineLatest([
    api.query.staking.activeEra(),
    api.consts.staking.historyDepth ? of(api.consts.staking.historyDepth) : api.query.staking["historyDepth"]()
  ]).pipe(map2(([activeEraOpt, historyDepth]) => {
    const result = [];
    const max2 = historyDepth.toNumber();
    const activeEra = activeEraOpt.unwrapOrDefault().index;
    let lastEra = activeEra;
    while (lastEra.gte(BN_ZERO2) && result.length < max2) {
      if (lastEra !== activeEra || withActive === true) {
        result.push(api.registry.createType("EraIndex", lastEra));
      }
      lastEra = lastEra.sub(BN_ONE);
    }
    return result.reverse();
  })));
}

// node_modules/@polkadot/api-derive/staking/erasPoints.js
var CACHE_KEY2 = "eraPoints";
function mapValidators({ individual }) {
  return [...individual.entries()].filter(([, points]) => points.gt(BN_ZERO2)).reduce((result, [validatorId, points]) => {
    result[validatorId.toString()] = points;
    return result;
  }, {});
}
function mapPoints(eras, points) {
  return eras.map((era, index) => ({
    era,
    eraPoints: points[index].total,
    validators: mapValidators(points[index])
  }));
}
function _erasPoints(instanceId, api) {
  return memo(instanceId, (eras, withActive) => {
    if (!eras.length) {
      return of([]);
    }
    const cached = getEraMultiCache(CACHE_KEY2, eras, withActive);
    const remaining = filterEras(eras, cached);
    return !remaining.length ? of(cached) : api.query.staking.erasRewardPoints.multi(remaining).pipe(map2((p) => filterCachedEras(eras, cached, setEraMultiCache(CACHE_KEY2, withActive, mapPoints(remaining, p)))));
  });
}
var erasPoints = /* @__PURE__ */ erasHistoricApply("_erasPoints");

// node_modules/@polkadot/api-derive/staking/erasPrefs.js
var CACHE_KEY3 = "eraPrefs";
function mapPrefs(era, all3) {
  const validators2 = {};
  all3.forEach(([key, prefs]) => {
    validators2[key.args[1].toString()] = prefs;
  });
  return { era, validators: validators2 };
}
function _eraPrefs(instanceId, api) {
  return memo(instanceId, (era, withActive) => {
    const [cacheKey, cached] = getEraCache(CACHE_KEY3, era, withActive);
    return cached ? of(cached) : api.query.staking.erasValidatorPrefs.entries(era).pipe(map2((r) => setEraCache(cacheKey, withActive, mapPrefs(era, r))));
  });
}
var eraPrefs = /* @__PURE__ */ singleEra("_eraPrefs");
var _erasPrefs = /* @__PURE__ */ combineEras("_eraPrefs");
var erasPrefs = /* @__PURE__ */ erasHistoricApply("_erasPrefs");

// node_modules/@polkadot/api-derive/staking/erasRewards.js
var CACHE_KEY4 = "eraRewards";
function mapRewards(eras, optRewards) {
  return eras.map((era, index) => ({
    era,
    eraReward: optRewards[index].unwrapOrDefault()
  }));
}
function _erasRewards(instanceId, api) {
  return memo(instanceId, (eras, withActive) => {
    if (!eras.length) {
      return of([]);
    }
    const cached = getEraMultiCache(CACHE_KEY4, eras, withActive);
    const remaining = filterEras(eras, cached);
    if (!remaining.length) {
      return of(cached);
    }
    return api.query.staking.erasValidatorReward.multi(remaining).pipe(map2((r) => filterCachedEras(eras, cached, setEraMultiCache(CACHE_KEY4, withActive, mapRewards(remaining, r)))));
  });
}
var erasRewards = /* @__PURE__ */ erasHistoricApply("_erasRewards");

// node_modules/@polkadot/api-derive/staking/erasSlashes.js
var CACHE_KEY5 = "eraSlashes";
function mapSlashes(era, noms, vals) {
  const nominators = {};
  const validators2 = {};
  noms.forEach(([key, optBalance]) => {
    nominators[key.args[1].toString()] = optBalance.unwrap();
  });
  vals.forEach(([key, optRes]) => {
    validators2[key.args[1].toString()] = optRes.unwrapOrDefault()[1];
  });
  return { era, nominators, validators: validators2 };
}
function _eraSlashes(instanceId, api) {
  return memo(instanceId, (era, withActive) => {
    const [cacheKey, cached] = getEraCache(CACHE_KEY5, era, withActive);
    return cached ? of(cached) : combineLatest([
      api.query.staking.nominatorSlashInEra.entries(era),
      api.query.staking.validatorSlashInEra.entries(era)
    ]).pipe(map2(([n, v]) => setEraCache(cacheKey, withActive, mapSlashes(era, n, v))));
  });
}
var eraSlashes = /* @__PURE__ */ singleEra("_eraSlashes");
var _erasSlashes = /* @__PURE__ */ combineEras("_eraSlashes");
var erasSlashes = /* @__PURE__ */ erasHistoricApply("_erasSlashes");

// node_modules/@polkadot/api-derive/staking/keys.js
function extractsIds(stashId, queuedKeys, nextKeys) {
  const sessionIds = (queuedKeys.find(([currentId]) => currentId.eq(stashId)) || [void 0, []])[1];
  const nextSessionIds = nextKeys.unwrapOr([]);
  return {
    nextSessionIds: Array.isArray(nextSessionIds) ? nextSessionIds : [...nextSessionIds.values()],
    sessionIds: Array.isArray(sessionIds) ? sessionIds : [...sessionIds.values()]
  };
}
var keys = /* @__PURE__ */ firstMemo((api, stashId) => api.derive.staking.keysMulti([stashId]));
function keysMulti(instanceId, api) {
  return memo(instanceId, (stashIds) => stashIds.length ? api.query.session.queuedKeys().pipe(switchMap((queuedKeys) => combineLatest([
    of(queuedKeys),
    api.consts["session"]?.["dedupKeyPrefix"] ? api.query.session.nextKeys.multi(stashIds.map((s) => [api.consts["session"]["dedupKeyPrefix"], s])) : combineLatest(stashIds.map((s) => api.query.session.nextKeys(s)))
  ])), map2(([queuedKeys, nextKeys]) => stashIds.map((stashId, index) => extractsIds(stashId, queuedKeys, nextKeys[index])))) : of([]));
}

// node_modules/@polkadot/api-derive/staking/overview.js
function overview2(instanceId, api) {
  return memo(instanceId, () => combineLatest([
    api.derive.session.indexes(),
    api.derive.staking.validators()
  ]).pipe(map2(([indexes3, { nextElected: nextElected2, validators: validators2 }]) => objectSpread3({}, indexes3, {
    nextElected: nextElected2,
    validators: validators2
  }))));
}

// node_modules/@polkadot/api-derive/staking/ownExposure.js
function _ownExposures(instanceId, api) {
  return memo(instanceId, (accountId2, eras, _withActive, page) => {
    const emptyStakingExposure = api.registry.createType("Exposure");
    const emptyOptionPage = api.registry.createType("Option<Null>");
    const emptyOptionMeta = api.registry.createType("Option<Null>");
    return eras.length ? combineLatest([
      // Backwards and forward compat for historical integrity when using `erasHistoricApplyAccount`
      api.query.staking.erasStakersClipped ? combineLatest(eras.map((e) => api.query.staking.erasStakersClipped(e, accountId2))) : of(eras.map((_) => emptyStakingExposure)),
      api.query.staking.erasStakers ? combineLatest(eras.map((e) => api.query.staking.erasStakers(e, accountId2))) : of(eras.map((_) => emptyStakingExposure)),
      api.query.staking.erasStakersPaged ? combineLatest(eras.map((e) => api.query.staking.erasStakersPaged(e, accountId2, page))) : of(eras.map((_) => emptyOptionPage)),
      api.query.staking.erasStakersOverview ? combineLatest(eras.map((e) => api.query.staking.erasStakersOverview(e, accountId2))) : of(eras.map((_) => emptyOptionMeta))
    ]).pipe(map2(([clp, exp, paged, expMeta]) => eras.map((era, index) => ({ clipped: clp[index], era, exposure: exp[index], exposureMeta: expMeta[index], exposurePaged: paged[index] })))) : of([]);
  });
}
var ownExposure = /* @__PURE__ */ firstMemo((api, accountId2, era, page) => api.derive.staking._ownExposures(accountId2, [era], true, page || 0));
var ownExposures = /* @__PURE__ */ erasHistoricApplyAccount("_ownExposures");

// node_modules/@polkadot/api-derive/staking/ownSlashes.js
function _ownSlashes(instanceId, api) {
  return memo(instanceId, (accountId2, eras, _withActive) => eras.length ? combineLatest([
    combineLatest(eras.map((e) => api.query.staking.validatorSlashInEra(e, accountId2))),
    combineLatest(eras.map((e) => api.query.staking.nominatorSlashInEra(e, accountId2)))
  ]).pipe(map2(([vals, noms]) => eras.map((era, index) => ({
    era,
    total: vals[index].isSome ? vals[index].unwrap()[1] : noms[index].unwrapOrDefault()
  })))) : of([]));
}
var ownSlash = /* @__PURE__ */ firstMemo((api, accountId2, era) => api.derive.staking._ownSlashes(accountId2, [era], true));
var ownSlashes = /* @__PURE__ */ erasHistoricApplyAccount("_ownSlashes");

// node_modules/@polkadot/api-derive/staking/query.js
function rewardDestinationCompat(rewardDestination) {
  return typeof rewardDestination.isSome === "boolean" ? rewardDestination.unwrapOr(null) : rewardDestination;
}
function filterClaimedRewards(api, cl) {
  return api.registry.createType("Vec<u32>", cl.filter((c) => c !== -1));
}
function filterRewards(stashIds, eras, claimedRewards, stakersOverview) {
  const claimedData = {};
  const overviewData = {};
  const ids = stashIds.map((i) => i.toString());
  claimedRewards.forEach(([keys2, rewards]) => {
    const id = keys2.args[1].toString();
    const era = keys2.args[0].toNumber();
    if (ids.includes(id)) {
      if (claimedData[id]) {
        claimedData[id].set(era, rewards.toArray());
      } else {
        claimedData[id] = /* @__PURE__ */ new Map();
        claimedData[id].set(era, rewards.toArray());
      }
    }
  });
  stakersOverview.forEach(([keys2, overview3]) => {
    const id = keys2.args[1].toString();
    const era = keys2.args[0].toNumber();
    if (ids.includes(id) && overview3.isSome) {
      if (overviewData[id]) {
        overviewData[id].set(era, overview3.unwrap().pageCount);
      } else {
        overviewData[id] = /* @__PURE__ */ new Map();
        overviewData[id].set(era, overview3.unwrap().pageCount);
      }
    }
  });
  return stashIds.map((id) => {
    const rewardsPerEra = claimedData[id.toString()];
    const overviewPerEra = overviewData[id.toString()];
    return eras.map((era) => {
      if (rewardsPerEra && rewardsPerEra.has(era) && overviewPerEra && overviewPerEra.has(era)) {
        const rewards = rewardsPerEra.get(era);
        const pageCount = overviewPerEra.get(era);
        return rewards.length === pageCount.toNumber() ? era : -1;
      }
      return -1;
    });
  });
}
function parseDetails(api, stashId, controllerIdOpt, nominatorsOpt, rewardDestinationOpts, validatorPrefs, exposure, stakingLedgerOpt, exposureMeta, claimedRewards, exposureEraStakers) {
  return {
    accountId: stashId,
    claimedRewardsEras: filterClaimedRewards(api, claimedRewards),
    controllerId: controllerIdOpt?.unwrapOr(null) || null,
    exposureEraStakers,
    exposureMeta,
    exposurePaged: exposure,
    nominators: nominatorsOpt.isSome ? nominatorsOpt.unwrap().targets : [],
    rewardDestination: rewardDestinationCompat(rewardDestinationOpts),
    stakingLedger: stakingLedgerOpt.unwrapOrDefault(),
    stashId,
    validatorPrefs
  };
}
function getLedgers(api, optIds, { withLedger = false }) {
  const ids = optIds.filter((o) => withLedger && !!o && o.isSome).map((o) => o.unwrap());
  const emptyLed = api.registry.createType("Option<StakingLedger>");
  return (ids.length ? combineLatest(ids.map((s) => api.query.staking.ledger(s))) : of([])).pipe(map2((optLedgers) => {
    let offset = -1;
    return optIds.map((o) => o && o.isSome ? optLedgers[++offset] || emptyLed : emptyLed);
  }));
}
function getStashInfo(api, stashIds, activeEra, { withClaimedRewardsEras, withController, withDestination, withExposure, withExposureErasStakersLegacy, withExposureMeta, withLedger, withNominations, withPrefs }, page) {
  const emptyNoms = api.registry.createType("Option<Nominations>");
  const emptyRewa = api.registry.createType("RewardDestination");
  const emptyExpoEraStakers = api.registry.createType("Exposure");
  const emptyPrefs = api.registry.createType("ValidatorPrefs");
  const emptyExpo = api.registry.createType("Option<Null>");
  const emptyExpoMeta = api.registry.createType("Option<Null>");
  const emptyClaimedRewards = [-1];
  const depth = Number(api.consts.staking.historyDepth.toNumber());
  const eras = new Array(depth).fill(0).map((_, idx) => {
    if (idx === 0) {
      return activeEra.toNumber() - 1;
    }
    return activeEra.toNumber() - idx - 1;
  });
  return combineLatest([
    withController || withLedger ? combineLatest(stashIds.map((s) => api.query.staking.bonded(s))) : of(stashIds.map(() => null)),
    withNominations ? combineLatest(stashIds.map((s) => api.query.staking.nominators(s))) : of(stashIds.map(() => emptyNoms)),
    withDestination ? combineLatest(stashIds.map((s) => api.query.staking.payee(s))) : of(stashIds.map(() => emptyRewa)),
    withPrefs ? combineLatest(stashIds.map((s) => api.query.staking.validators(s))) : of(stashIds.map(() => emptyPrefs)),
    withExposure && api.query.staking.erasStakersPaged ? combineLatest(stashIds.map((s) => api.query.staking.erasStakersPaged(activeEra, s, page))) : of(stashIds.map(() => emptyExpo)),
    withExposureMeta && api.query.staking.erasStakersOverview ? combineLatest(stashIds.map((s) => api.query.staking.erasStakersOverview(activeEra, s))) : of(stashIds.map(() => emptyExpoMeta)),
    withClaimedRewardsEras && api.query.staking.claimedRewards ? combineLatest([
      api.query.staking.claimedRewards.entries(),
      api.query.staking.erasStakersOverview.entries()
    ]).pipe(map2(([rewardsStorageVec, overviewStorageVec]) => filterRewards(stashIds, eras, rewardsStorageVec, overviewStorageVec))) : of(stashIds.map(() => emptyClaimedRewards)),
    withExposureErasStakersLegacy && api.query.staking.erasStakers ? combineLatest(stashIds.map((s) => api.query.staking.erasStakers(activeEra, s))) : of(stashIds.map(() => emptyExpoEraStakers))
  ]);
}
function getBatch(api, activeEra, stashIds, flags2, page) {
  return getStashInfo(api, stashIds, activeEra, flags2, page).pipe(switchMap(([controllerIdOpt, nominatorsOpt, rewardDestination, validatorPrefs, exposure, exposureMeta, claimedRewardsEras, exposureEraStakers]) => getLedgers(api, controllerIdOpt, flags2).pipe(map2((stakingLedgerOpts) => stashIds.map((stashId, index) => parseDetails(api, stashId, controllerIdOpt[index], nominatorsOpt[index], rewardDestination[index], validatorPrefs[index], exposure[index], stakingLedgerOpts[index], exposureMeta[index], claimedRewardsEras[index], exposureEraStakers[index]))))));
}
var query = /* @__PURE__ */ firstMemo((api, accountId2, flags2, page) => api.derive.staking.queryMulti([accountId2], flags2, page));
function queryMulti(instanceId, api) {
  return memo(instanceId, (accountIds, flags2, page) => api.derive.session.indexes().pipe(switchMap(({ activeEra }) => {
    const stashIds = accountIds.map((a) => api.registry.createType("AccountId", a));
    const p = page || 0;
    return stashIds.length ? getBatch(api, activeEra, stashIds, flags2, p) : of([]);
  })));
}

// node_modules/@polkadot/api-derive/staking/stakerExposure.js
function _stakerExposures(instanceId, api) {
  return memo(instanceId, (accountIds, eras, withActive = false) => {
    const stakerIds = accountIds.map((a) => api.registry.createType("AccountId", a).toString());
    return api.derive.staking._erasExposure(eras, withActive).pipe(map2((exposures) => stakerIds.map((stakerId) => exposures.map(({ era, nominators: allNominators, validators: allValidators }) => {
      const isValidator = !!allValidators[stakerId];
      const validators2 = {};
      const nominating = allNominators[stakerId] || [];
      if (isValidator) {
        validators2[stakerId] = allValidators[stakerId];
      } else if (nominating) {
        nominating.forEach(({ validatorId }) => {
          validators2[validatorId] = allValidators[validatorId];
        });
      }
      return { era, isEmpty: !Object.keys(validators2).length, isValidator, nominating, validators: validators2 };
    }))));
  });
}
function stakerExposures(instanceId, api) {
  return memo(instanceId, (accountIds, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap((eras) => api.derive.staking._stakerExposures(accountIds, eras, withActive))));
}
var stakerExposure = /* @__PURE__ */ firstMemo((api, accountId2, withActive) => api.derive.staking.stakerExposures([accountId2], withActive));

// node_modules/@polkadot/api-derive/staking/stakerPoints.js
function _stakerPoints(instanceId, api) {
  return memo(instanceId, (accountId2, eras, withActive) => {
    const stakerId = api.registry.createType("AccountId", accountId2).toString();
    return api.derive.staking._erasPoints(eras, withActive).pipe(map2((points) => points.map(({ era, eraPoints, validators: validators2 }) => ({
      era,
      eraPoints,
      points: validators2[stakerId] || api.registry.createType("RewardPoint")
    }))));
  });
}
var stakerPoints = /* @__PURE__ */ erasHistoricApplyAccount("_stakerPoints");

// node_modules/@polkadot/api-derive/staking/stakerPrefs.js
function _stakerPrefs(instanceId, api) {
  return memo(instanceId, (accountId2, eras, _withActive) => api.query.staking.erasValidatorPrefs.multi(eras.map((e) => [e, accountId2])).pipe(map2((all3) => all3.map((validatorPrefs, index) => ({
    era: eras[index],
    validatorPrefs
  })))));
}
var stakerPrefs = /* @__PURE__ */ erasHistoricApplyAccount("_stakerPrefs");

// node_modules/@polkadot/api-derive/staking/stakerRewards.js
function extractCompatRewards(claimedRewardsEras, ledger) {
  const l13 = ledger ? (ledger.legacyClaimedRewards || ledger.claimedRewards).toArray() : [];
  return claimedRewardsEras.toArray().concat(l13);
}
function parseRewards(api, stashId, [erasPoints2, erasPrefs2, erasRewards2], exposures, claimedRewardsEras) {
  return exposures.map(({ era, isEmpty, isValidator, nominating, validators: eraValidators }) => {
    const { eraPoints, validators: allValPoints } = erasPoints2.find((p) => p.era.eq(era)) || { eraPoints: BN_ZERO2, validators: {} };
    const { eraReward } = erasRewards2.find((r) => r.era.eq(era)) || { eraReward: api.registry.createType("Balance") };
    const { validators: allValPrefs } = erasPrefs2.find((p) => p.era.eq(era)) || { validators: {} };
    const validators2 = {};
    const stakerId = stashId.toString();
    Object.entries(eraValidators).forEach(([validatorId, exposure]) => {
      const valPoints = allValPoints[validatorId] || BN_ZERO2;
      const valComm = allValPrefs[validatorId]?.commission.unwrap() || BN_ZERO2;
      const expTotal = exposure.total ? exposure.total?.unwrap() : exposure.pageTotal ? exposure.pageTotal?.unwrap() : BN_ZERO2;
      let avail = BN_ZERO2;
      let value;
      if (!(expTotal.isZero() || valPoints.isZero() || eraPoints.isZero())) {
        avail = eraReward.mul(valPoints).div(eraPoints);
        const valCut = valComm.mul(avail).div(BN_BILLION2);
        let staked;
        if (validatorId === stakerId) {
          if (exposure.own) {
            staked = exposure.own.unwrap();
          } else {
            const expAccount = exposure.others.find(({ who }) => who.eq(validatorId));
            staked = expAccount ? expAccount.value.unwrap() : BN_ZERO2;
          }
        } else {
          const stakerExp = exposure.others.find(({ who }) => who.eq(stakerId));
          staked = stakerExp ? stakerExp.value.unwrap() : BN_ZERO2;
        }
        value = avail.sub(valCut).imul(staked).div(expTotal).iadd(validatorId === stakerId ? valCut : BN_ZERO2);
      }
      validators2[validatorId] = {
        total: api.registry.createType("Balance", avail),
        value: api.registry.createType("Balance", value)
      };
    });
    return {
      era,
      eraReward,
      // This might not always be accurate as you need validator account information in order to see if the rewards have been claimed.
      // This is possibly adjusted in `filterRewards` when need be.
      isClaimed: claimedRewardsEras.some((c) => c.eq(era)),
      isEmpty,
      isValidator,
      nominating,
      validators: validators2
    };
  });
}
function allUniqValidators(rewards) {
  return rewards.reduce(([all3, perStash], rewards2) => {
    const uniq = [];
    perStash.push(uniq);
    rewards2.forEach(({ validators: validators2 }) => Object.keys(validators2).forEach((validatorId) => {
      if (!uniq.includes(validatorId)) {
        uniq.push(validatorId);
        if (!all3.includes(validatorId)) {
          all3.push(validatorId);
        }
      }
    }));
    return [all3, perStash];
  }, [[], []]);
}
function removeClaimed(validators2, queryValidators, reward, claimedRewardsEras) {
  const rm = [];
  Object.keys(reward.validators).forEach((validatorId) => {
    const index = validators2.indexOf(validatorId);
    if (index !== -1) {
      const valLedger = queryValidators[index].stakingLedger;
      if (extractCompatRewards(claimedRewardsEras, valLedger).some((e) => reward.era.eq(e))) {
        rm.push(validatorId);
      }
    }
  });
  rm.forEach((validatorId) => {
    delete reward.validators[validatorId];
  });
}
function filterRewards2(eras, valInfo, { claimedRewardsEras, rewards, stakingLedger }) {
  const filter2 = eras.filter((e) => !extractCompatRewards(claimedRewardsEras, stakingLedger).some((s) => s.eq(e)));
  const validators2 = valInfo.map(([v]) => v);
  const queryValidators = valInfo.map(([, q]) => q);
  return rewards.filter(({ isEmpty }) => !isEmpty).filter((reward) => {
    if (!filter2.some((e) => reward.era.eq(e))) {
      return false;
    }
    removeClaimed(validators2, queryValidators, reward, claimedRewardsEras);
    return true;
  }).filter(({ validators: validators3 }) => Object.keys(validators3).length !== 0).map((reward) => {
    let isClaimed = reward.isClaimed;
    const valKeys = Object.keys(reward.validators);
    if (!reward.isClaimed && valKeys.length) {
      for (const key of valKeys) {
        const info6 = queryValidators.find((i) => i.accountId.toString() === key);
        if (info6) {
          isClaimed = info6.claimedRewardsEras.toArray().some((era) => era.eq(reward.era));
          break;
        }
      }
    }
    return objectSpread3({}, reward, {
      isClaimed,
      nominators: reward.nominating.filter((n) => reward.validators[n.validatorId])
    });
  });
}
function _stakerRewardsEras(instanceId, api) {
  return memo(instanceId, (eras, withActive = false) => combineLatest([
    api.derive.staking._erasPoints(eras, withActive),
    api.derive.staking._erasPrefs(eras, withActive),
    api.derive.staking._erasRewards(eras, withActive)
  ]));
}
function _stakerRewards(instanceId, api) {
  return memo(instanceId, (accountIds, eras, withActive = false) => {
    const sanitizedEras = eras.map((e) => typeof e === "number" || typeof e === "string" ? api.registry.createType("u32", e) : e);
    return combineLatest([
      api.derive.staking.queryMulti(accountIds, { withClaimedRewardsEras: true, withLedger: true }),
      api.derive.staking._stakerExposures(accountIds, sanitizedEras, withActive),
      api.derive.staking._stakerRewardsEras(sanitizedEras, withActive)
    ]).pipe(switchMap(([queries, exposures, erasResult]) => {
      const allRewards = queries.map(({ claimedRewardsEras, stakingLedger, stashId }, index) => !stashId || !stakingLedger && !claimedRewardsEras ? [] : parseRewards(api, stashId, erasResult, exposures[index], claimedRewardsEras));
      if (withActive) {
        return of(allRewards);
      }
      const [allValidators, stashValidators] = allUniqValidators(allRewards);
      return api.derive.staking.queryMulti(allValidators, { withClaimedRewardsEras: true, withLedger: true }).pipe(map2((queriedVals) => queries.map(({ claimedRewardsEras, stakingLedger }, index) => filterRewards2(eras, stashValidators[index].map((validatorId) => [
        validatorId,
        queriedVals.find((q) => q.accountId.eq(validatorId))
      ]).filter((v) => !!v[1]), {
        claimedRewardsEras,
        rewards: allRewards[index],
        stakingLedger
      }))));
    }));
  });
}
var stakerRewards = /* @__PURE__ */ firstMemo((api, accountId2, withActive) => api.derive.staking.erasHistoric(withActive).pipe(switchMap((eras) => api.derive.staking._stakerRewards([accountId2], eras, withActive))));
function stakerRewardsMultiEras(instanceId, api) {
  return memo(instanceId, (accountIds, eras) => accountIds.length && eras.length ? api.derive.staking._stakerRewards(accountIds, eras, false) : of([]));
}
function stakerRewardsMulti(instanceId, api) {
  return memo(instanceId, (accountIds, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap((eras) => api.derive.staking.stakerRewardsMultiEras(accountIds, eras))));
}

// node_modules/@polkadot/api-derive/staking/stakerSlashes.js
function _stakerSlashes(instanceId, api) {
  return memo(instanceId, (accountId2, eras, withActive) => {
    const stakerId = api.registry.createType("AccountId", accountId2).toString();
    return api.derive.staking._erasSlashes(eras, withActive).pipe(map2((slashes) => slashes.map(({ era, nominators, validators: validators2 }) => ({
      era,
      total: nominators[stakerId] || validators2[stakerId] || api.registry.createType("Balance")
    }))));
  });
}
var stakerSlashes = /* @__PURE__ */ erasHistoricApplyAccount("_stakerSlashes");

// node_modules/@polkadot/api-derive/staking/stashes.js
function onBondedEvent(api) {
  let current = Date.now();
  return api.query.system.events().pipe(map2((events2) => {
    current = events2.filter(({ event, phase }) => {
      try {
        return phase.isApplyExtrinsic && event.section === "staking" && event.method === "Bonded";
      } catch {
        return false;
      }
    }) ? Date.now() : current;
    return current;
  }), startWith(current), drr({ skipTimeout: true }));
}
function stashes(instanceId, api) {
  return memo(instanceId, () => onBondedEvent(api).pipe(switchMap(() => api.query.staking.validators.keys()), map2((keys2) => keys2.map(({ args: [v] }) => v).filter((a) => a))));
}

// node_modules/@polkadot/api-derive/staking/validators.js
function nextElected(instanceId, api) {
  return memo(instanceId, () => (
    // Compatibility for future generation changes in staking.
    api.query.staking.erasStakersOverview ? api.derive.session.indexes().pipe(
      // only populate for next era in the last session, so track both here - entries are not
      // subscriptions, so we need a trigger - currentIndex acts as that trigger to refresh
      switchMap(({ currentEra }) => api.query.staking.erasStakersOverview.keys(currentEra)),
      // Dedupe any duplicates
      map2((keys2) => [...new Set(keys2.map(({ args: [, accountId2] }) => accountId2.toString()))].map((a) => api.registry.createType("AccountId", a)))
    ) : api.query.staking.erasStakers ? api.derive.session.indexes().pipe(
      // only populate for next era in the last session, so track both here - entries are not
      // subscriptions, so we need a trigger - currentIndex acts as that trigger to refresh
      switchMap(({ currentEra }) => api.query.staking.erasStakers.keys(currentEra)),
      // Dedupe any duplicates
      map2((keys2) => [...new Set(keys2.map(({ args: [, accountId2] }) => accountId2.toString()))].map((a) => api.registry.createType("AccountId", a)))
    ) : api.query.staking["currentElected"]()
  ));
}
function validators(instanceId, api) {
  return memo(instanceId, () => (
    // Sadly the node-template is (for some obscure reason) not comprehensive, so while the derive works
    // in all actual real-world deployed chains, it does create some confusion for limited template chains
    combineLatest([
      api.query.session ? api.query.session.validators() : of([]),
      api.query.staking ? api.derive.staking.nextElected() : of([])
    ]).pipe(map2(([validators2, nextElected2]) => ({
      nextElected: nextElected2.length ? nextElected2 : validators2,
      validators: validators2
    })))
  ));
}

// node_modules/@polkadot/api-derive/staking/waitingInfo.js
var DEFAULT_FLAGS2 = { withController: true, withPrefs: true };
function waitingInfo(instanceId, api) {
  return memo(instanceId, (flags2 = DEFAULT_FLAGS2) => combineLatest([
    api.derive.staking.validators(),
    api.derive.staking.stashes()
  ]).pipe(switchMap(([{ nextElected: nextElected2 }, stashes2]) => {
    const elected = nextElected2.map((a) => a.toString());
    const waiting = stashes2.filter((v) => !elected.includes(v.toString()));
    return api.derive.staking.queryMulti(waiting, flags2).pipe(map2((info6) => ({
      info: info6,
      waiting
    })));
  })));
}

// node_modules/@polkadot/api-derive/technicalCommittee/index.js
var technicalCommittee_exports = {};
__export(technicalCommittee_exports, {
  hasProposals: () => hasProposals5,
  members: () => members6,
  prime: () => prime5,
  proposal: () => proposal5,
  proposalCount: () => proposalCount5,
  proposalHashes: () => proposalHashes5,
  proposals: () => proposals6
});
var members6 = /* @__PURE__ */ members("technicalCommittee");
var hasProposals5 = /* @__PURE__ */ hasProposals("technicalCommittee");
var proposal5 = /* @__PURE__ */ proposal("technicalCommittee");
var proposalCount5 = /* @__PURE__ */ proposalCount("technicalCommittee");
var proposalHashes5 = /* @__PURE__ */ proposalHashes("technicalCommittee");
var proposals6 = /* @__PURE__ */ proposals("technicalCommittee");
var prime5 = /* @__PURE__ */ prime("technicalCommittee");

// node_modules/@polkadot/api-derive/treasury/index.js
var treasury_exports = {};
__export(treasury_exports, {
  proposals: () => proposals7
});

// node_modules/@polkadot/api-derive/treasury/proposals.js
function parseResult3(api, { allIds, allProposals, approvalIds, councilProposals, proposalCount: proposalCount6 }) {
  const approvals = [];
  const proposals8 = [];
  const councilTreasury = councilProposals.filter(({ proposal: proposal6 }) => (
    // FIXME `approveProposal` and `rejectProposal` have been removed in substrate and released in 1.14
    // in favor of `spend`. See: https://github.com/paritytech/polkadot-sdk/pull/3820
    proposal6 && (api.tx.treasury["approveProposal"] && api.tx.treasury["approveProposal"].is(proposal6) || api.tx.treasury["rejectProposal"] && api.tx.treasury["rejectProposal"].is(proposal6))
  ));
  allIds.forEach((id, index) => {
    if (allProposals[index].isSome) {
      const council = councilTreasury.filter(({ proposal: proposal6 }) => proposal6 && id.eq(proposal6.args[0])).sort((a, b) => a.proposal && b.proposal ? a.proposal.method.localeCompare(b.proposal.method) : a.proposal ? -1 : 1);
      const isApproval = approvalIds.some((approvalId) => approvalId.eq(id));
      const derived = { council, id, proposal: allProposals[index].unwrap() };
      if (isApproval) {
        approvals.push(derived);
      } else {
        proposals8.push(derived);
      }
    }
  });
  return { approvals, proposalCount: proposalCount6, proposals: proposals8 };
}
function retrieveProposals(api, proposalCount6, approvalIds) {
  const proposalIds = [];
  const count = proposalCount6.toNumber();
  for (let index = 0; index < count; index++) {
    if (!approvalIds.some((id) => id.eqn(index))) {
      proposalIds.push(api.registry.createType("ProposalIndex", index));
    }
  }
  const allIds = [...proposalIds, ...approvalIds];
  return combineLatest([
    api.query.treasury.proposals.multi(allIds),
    api.derive.council ? api.derive.council.proposals() : of([])
  ]).pipe(map2(([allProposals, councilProposals]) => parseResult3(api, { allIds, allProposals, approvalIds, councilProposals, proposalCount: proposalCount6 })));
}
function proposals7(instanceId, api) {
  return memo(instanceId, () => api.query.treasury ? combineLatest([
    api.query.treasury.proposalCount(),
    api.query.treasury.approvals()
  ]).pipe(switchMap(([proposalCount6, approvalIds]) => retrieveProposals(api, proposalCount6, approvalIds))) : of({
    approvals: [],
    proposalCount: api.registry.createType("ProposalIndex"),
    proposals: []
  }));
}

// node_modules/@polkadot/api-derive/tx/index.js
var tx_exports = {};
__export(tx_exports, {
  events: () => events,
  signingInfo: () => signingInfo
});

// node_modules/@polkadot/api-derive/tx/events.js
function events(instanceId, api) {
  return memo(instanceId, (blockHash) => combineLatest([
    api.rpc.chain.getBlock(blockHash),
    api.queryAt(blockHash).pipe(switchMap((queryAt) => queryAt.system.events()))
  ]).pipe(map2(([block, events2]) => ({ block, events: events2 }))));
}

// node_modules/@polkadot/api-derive/tx/constants.js
var FALLBACK_MAX_HASH_COUNT = 250;
var FALLBACK_PERIOD = new import_bn12.default(6 * 1e3);
var MAX_FINALITY_LAG = new import_bn12.default(5);
var MORTAL_PERIOD = new import_bn12.default(5 * 60 * 1e3);

// node_modules/@polkadot/api-derive/tx/signingInfo.js
function latestNonce(api, address) {
  return api.derive.balances.account(address).pipe(map2(({ accountNonce }) => accountNonce));
}
function nextNonce(api, address) {
  if (api.call.accountNonceApi) {
    return api.call.accountNonceApi.accountNonce(address);
  } else {
    return api.rpc.system?.accountNextIndex ? api.rpc.system.accountNextIndex(address) : latestNonce(api, address);
  }
}
function signingHeader(api) {
  return combineLatest([
    api.rpc.chain.getHeader().pipe(switchMap((header) => (
      // check for chains at genesis (until block 1 is produced, e.g. 6s), since
      // we do need to allow transactions at chain start (also dev/seal chains)
      header.parentHash.isEmpty ? of(header) : api.rpc.chain.getHeader(header.parentHash).pipe(catchError(() => of(header)))
    ))),
    api.rpc.chain.getFinalizedHead().pipe(switchMap((hash) => api.rpc.chain.getHeader(hash).pipe(catchError(() => of(null)))))
  ]).pipe(map2(([current, finalized]) => (
    // determine the hash to use, current when lag > max, else finalized
    !finalized || unwrapBlockNumber(current).sub(unwrapBlockNumber(finalized)).gt(MAX_FINALITY_LAG) ? current : finalized
  )));
}
function babeOrAuraPeriod(api) {
  const period = api.consts.babe?.expectedBlockTime || // this will be present ones https://github.com/paritytech/polkadot-sdk/pull/3732 is merged
  api.consts["aura"]?.slotDuration || api.consts.timestamp?.minimumPeriod.muln(2);
  return period && period.isZero && !period.isZero() ? period : void 0;
}
function signingInfo(_instanceId, api) {
  return (address, nonce, era) => combineLatest([
    // retrieve nonce if none was specified
    isUndefined3(nonce) ? latestNonce(api, address) : nonce === -1 ? nextNonce(api, address) : of(api.registry.createType("Index", nonce)),
    // if no era (create) or era > 0 (mortal), do block retrieval
    isUndefined3(era) || isNumber3(era) && era > 0 ? signingHeader(api) : of(null)
  ]).pipe(map2(([nonce2, header]) => ({
    header,
    mortalLength: Math.min(api.consts.system?.blockHashCount?.toNumber() || FALLBACK_MAX_HASH_COUNT, MORTAL_PERIOD.div(babeOrAuraPeriod(api) || FALLBACK_PERIOD).iadd(MAX_FINALITY_LAG).toNumber()),
    nonce: nonce2
  })));
}

// node_modules/@polkadot/api-derive/derive.js
var derive = { accounts: accounts_exports, alliance: alliance_exports, bagsList: bagsList_exports, balances: balances_exports, bounties: bounties_exports, chain: chain_exports, contracts: contracts_exports, council: council_exports, crowdloan: crowdloan_exports, democracy: democracy_exports, elections: elections_exports, imOnline: imOnline_exports, membership: membership_exports, parachains: parachains_exports, session: session_exports, society: society_exports, staking: staking_exports, technicalCommittee: technicalCommittee_exports, treasury: treasury_exports, tx: tx_exports };

// node_modules/@polkadot/api-derive/bundle.js
var checks = {
  allianceMotion: {
    instances: ["allianceMotion"],
    methods: []
  },
  bagsList: {
    instances: ["voterBagsList", "voterList", "bagsList"],
    methods: [],
    withDetect: true
  },
  contracts: {
    instances: ["contracts"],
    methods: []
  },
  council: {
    instances: ["council"],
    methods: [],
    withDetect: true
  },
  crowdloan: {
    instances: ["crowdloan"],
    methods: []
  },
  democracy: {
    instances: ["democracy"],
    methods: []
  },
  elections: {
    instances: ["phragmenElection", "electionsPhragmen", "elections", "council"],
    methods: [],
    withDetect: true
  },
  imOnline: {
    instances: ["imOnline"],
    methods: []
  },
  membership: {
    instances: ["membership"],
    methods: []
  },
  parachains: {
    instances: ["parachains", "registrar"],
    methods: []
  },
  session: {
    instances: ["session"],
    methods: []
  },
  society: {
    instances: ["society"],
    methods: []
  },
  staking: {
    instances: ["staking"],
    methods: ["erasRewardPoints"]
  },
  technicalCommittee: {
    instances: ["technicalCommittee"],
    methods: [],
    withDetect: true
  },
  treasury: {
    instances: ["treasury"],
    methods: []
  }
};
function getModuleInstances(api, specName, moduleName) {
  return api.registry.getModuleInstances(specName, moduleName) || [];
}
function injectFunctions(instanceId, api, derives) {
  const result = {};
  const names = Object.keys(derives);
  const keys2 = Object.keys(api.query);
  const specName = api.runtimeVersion.specName;
  const filterKeys = (q) => keys2.includes(q);
  const filterInstances = (q) => getModuleInstances(api, specName, q).some(filterKeys);
  const filterMethods = (all3) => (m) => all3.some((q) => keys2.includes(q) && api.query[q][m]);
  const getKeys2 = (s) => Object.keys(derives[s]);
  const creator = (s, m) => derives[s][m](instanceId, api);
  const isIncluded = (c) => !checks[c] || (checks[c].instances.some(filterKeys) && (!checks[c].methods.length || checks[c].methods.every(filterMethods(checks[c].instances))) || checks[c].withDetect && checks[c].instances.some(filterInstances));
  for (let i = 0, count = names.length; i < count; i++) {
    const name = names[i];
    isIncluded(name) && lazyDeriveSection(result, name, getKeys2, creator);
  }
  return result;
}
function getAvailableDerives(instanceId, api, custom2 = {}) {
  return {
    ...injectFunctions(instanceId, api, derive),
    ...injectFunctions(instanceId, api, custom2)
  };
}

// node_modules/@polkadot/api/util/decorate.js
function decorateDeriveSections(decorateMethod, derives) {
  const getKeys2 = (s) => Object.keys(derives[s]);
  const creator = (s, m) => decorateMethod(derives[s][m]);
  const result = {};
  const names = Object.keys(derives);
  for (let i = 0, count = names.length; i < count; i++) {
    lazyDeriveSection(result, names[i], getKeys2, creator);
  }
  return result;
}

// node_modules/@polkadot/api/submittable/Result.js
var recordIdentity = (record) => record;
function filterAndApply(events2, section2, methods, onFound) {
  return events2.filter(({ event }) => section2 === event.section && methods.includes(event.method)).map((record) => onFound(record));
}
function getDispatchError({ event: { data: [dispatchError] } }) {
  return dispatchError;
}
function getDispatchInfo({ event: { data, method } }) {
  return method === "ExtrinsicSuccess" ? data[0] : data[1];
}
function extractError(events2 = []) {
  return filterAndApply(events2, "system", ["ExtrinsicFailed"], getDispatchError)[0];
}
function extractInfo(events2 = []) {
  return filterAndApply(events2, "system", ["ExtrinsicFailed", "ExtrinsicSuccess"], getDispatchInfo)[0];
}
var SubmittableResult = class {
  dispatchError;
  dispatchInfo;
  internalError;
  events;
  status;
  txHash;
  txIndex;
  blockNumber;
  constructor({ blockNumber, dispatchError, dispatchInfo, events: events2, internalError, status, txHash, txIndex }) {
    this.dispatchError = dispatchError || extractError(events2);
    this.dispatchInfo = dispatchInfo || extractInfo(events2);
    this.events = events2 || [];
    this.internalError = internalError;
    this.status = status;
    this.txHash = txHash;
    this.txIndex = txIndex;
    this.blockNumber = blockNumber;
  }
  get isCompleted() {
    return this.isError || this.status.isInBlock || this.status.isFinalized;
  }
  get isError() {
    return this.status.isDropped || this.status.isFinalityTimeout || this.status.isInvalid || this.status.isUsurped;
  }
  get isFinalized() {
    return this.status.isFinalized;
  }
  get isInBlock() {
    return this.status.isInBlock;
  }
  get isWarning() {
    return this.status.isRetracted;
  }
  /**
   * @description Filters EventRecords for the specified method & section (there could be multiple)
   */
  filterRecords(section2, method) {
    return filterAndApply(this.events, section2, Array.isArray(method) ? method : [method], recordIdentity);
  }
  /**
   * @description Finds an EventRecord for the specified method & section
   */
  findRecord(section2, method) {
    return this.filterRecords(section2, method)[0];
  }
  /**
   * @description Creates a human representation of the output
   */
  toHuman(isExtended) {
    return {
      dispatchError: this.dispatchError?.toHuman(),
      dispatchInfo: this.dispatchInfo?.toHuman(),
      events: this.events.map((e) => e.toHuman(isExtended)),
      internalError: this.internalError?.message.toString(),
      status: this.status.toHuman(isExtended)
    };
  }
};

// node_modules/@polkadot/api/submittable/createClass.js
function makeEraOptions(api, registry, partialOptions, { header, mortalLength, nonce }) {
  if (!header) {
    if (partialOptions.era && !partialOptions.blockHash) {
      throw new Error("Expected blockHash to be passed alongside non-immortal era options");
    }
    if (isNumber(partialOptions.era)) {
      delete partialOptions.era;
      delete partialOptions.blockHash;
    }
    return makeSignOptions(api, partialOptions, { nonce });
  }
  return makeSignOptions(api, partialOptions, {
    blockHash: header.hash,
    era: registry.createTypeUnsafe("ExtrinsicEra", [{
      current: header.number,
      period: partialOptions.era || mortalLength
    }]),
    nonce
  });
}
function makeSignAndSendOptions(partialOptions, statusCb) {
  let options = {};
  if (isFunction(partialOptions)) {
    statusCb = partialOptions;
  } else {
    options = objectSpread({}, partialOptions);
  }
  return [options, statusCb];
}
function makeSignOptions(api, partialOptions, extras) {
  return objectSpread({ blockHash: api.genesisHash, genesisHash: api.genesisHash }, partialOptions, extras, { runtimeVersion: api.runtimeVersion, signedExtensions: api.registry.signedExtensions, version: api.extrinsicType });
}
function optionsOrNonce(partialOptions = {}) {
  return isBn(partialOptions) || isNumber(partialOptions) ? { nonce: partialOptions } : partialOptions;
}
function createClass({ api, apiType, blockHash, decorateMethod }) {
  const ExtrinsicBase2 = api.registry.createClass("Extrinsic");
  class Submittable extends ExtrinsicBase2 {
    __internal__ignoreStatusCb;
    __internal__transformResult = identity;
    constructor(registry, extrinsic) {
      super(registry, extrinsic, { version: api.extrinsicType });
      this.__internal__ignoreStatusCb = apiType === "rxjs";
    }
    get hasDryRun() {
      return isFunction(api.rpc.system?.dryRun);
    }
    get hasPaymentInfo() {
      return isFunction(api.call.transactionPaymentApi?.queryInfo);
    }
    // dry run an extrinsic
    dryRun(account3, optionsOrHash) {
      if (!this.hasDryRun) {
        throw new Error("The system.dryRun RPC call is not available in your environment");
      }
      if (blockHash || isString(optionsOrHash) || isU8a(optionsOrHash)) {
        return decorateMethod(() => api.rpc.system.dryRun(this.toHex(), blockHash || optionsOrHash));
      }
      return decorateMethod(() => this.__internal__observeSign(account3, optionsOrHash).pipe(switchMap(() => api.rpc.system.dryRun(this.toHex()))))();
    }
    // calculate the payment info for this transaction (if signed and submitted)
    paymentInfo(account3, optionsOrHash) {
      if (!this.hasPaymentInfo) {
        throw new Error("The transactionPaymentApi.queryInfo runtime call is not available in your environment");
      }
      if (blockHash || isString(optionsOrHash) || isU8a(optionsOrHash)) {
        return decorateMethod(() => api.callAt(blockHash || optionsOrHash).pipe(switchMap((callAt) => {
          const u8a = this.toU8a();
          return callAt.transactionPaymentApi.queryInfo(u8a, u8a.length);
        })));
      }
      const [allOptions] = makeSignAndSendOptions(optionsOrHash);
      const address = isKeyringPair(account3) ? account3.address : account3.toString();
      return decorateMethod(() => api.derive.tx.signingInfo(address, allOptions.nonce, allOptions.era).pipe(first(), switchMap((signingInfo2) => {
        const eraOptions = makeEraOptions(api, this.registry, allOptions, signingInfo2);
        const signOptions = makeSignOptions(api, eraOptions, {});
        const u8a = api.tx(this.toU8a()).signFake(address, signOptions).toU8a();
        return api.call.transactionPaymentApi.queryInfo(u8a, u8a.length);
      })))();
    }
    // send implementation for both immediate Hash and statusCb variants
    send(statusCb) {
      const isSubscription2 = api.hasSubscriptions && (this.__internal__ignoreStatusCb || !!statusCb);
      return decorateMethod(isSubscription2 ? this.__internal__observeSubscribe : this.__internal__observeSend)(statusCb);
    }
    /**
     * @description Signs a transaction, returning `this` to allow chaining. E.g.: `signAsync(...).send()`. Like `.signAndSend` this will retrieve the nonce and blockHash to send the tx with.
     */
    signAsync(account3, partialOptions) {
      return decorateMethod(() => this.__internal__observeSign(account3, partialOptions).pipe(map2(() => this)))();
    }
    // signAndSend implementation for all 3 cases above
    signAndSend(account3, partialOptions, optionalStatusCb) {
      const [options, statusCb] = makeSignAndSendOptions(partialOptions, optionalStatusCb);
      const isSubscription2 = api.hasSubscriptions && (this.__internal__ignoreStatusCb || !!statusCb);
      return decorateMethod(
        () => this.__internal__observeSign(account3, options).pipe(switchMap((info6) => isSubscription2 ? this.__internal__observeSubscribe(info6) : this.__internal__observeSend(info6)))
        // FIXME This is wrong, SubmittableResult is _not_ a codec
      )(statusCb);
    }
    // adds a transform to the result, applied before result is returned
    withResultTransform(transform) {
      this.__internal__transformResult = transform;
      return this;
    }
    __internal__observeSign = (account3, partialOptions) => {
      const address = isKeyringPair(account3) ? account3.address : account3.toString();
      const options = optionsOrNonce(partialOptions);
      return api.derive.tx.signingInfo(address, options.nonce, options.era).pipe(first(), mergeMap(async (signingInfo2) => {
        const eraOptions = makeEraOptions(api, this.registry, options, signingInfo2);
        let updateId = -1;
        let signedTx = null;
        if (isKeyringPair(account3)) {
          this.sign(account3, eraOptions);
        } else {
          const result = await this.__internal__signViaSigner(address, eraOptions, signingInfo2.header);
          updateId = result.id;
          if (result.signedTransaction) {
            signedTx = result.signedTransaction;
          }
        }
        return { options: eraOptions, signedTransaction: signedTx, updateId };
      }));
    };
    __internal__observeStatus = (txHash, status) => {
      if (!status.isFinalized && !status.isInBlock) {
        return of(this.__internal__transformResult(new SubmittableResult({
          status,
          txHash
        })));
      }
      const blockHash2 = status.isInBlock ? status.asInBlock : status.asFinalized;
      return api.derive.tx.events(blockHash2).pipe(map2(({ block, events: events2 }) => this.__internal__transformResult(new SubmittableResult({
        ...filterEvents(txHash, block, events2, status),
        status,
        txHash
      }))), catchError((internalError) => of(this.__internal__transformResult(new SubmittableResult({
        internalError,
        status,
        txHash
      })))));
    };
    __internal__observeSend = (info6) => {
      return api.rpc.author.submitExtrinsic(info6?.signedTransaction || this).pipe(tap((hash) => {
        this.__internal__updateSigner(hash, info6);
      }));
    };
    __internal__observeSubscribe = (info6) => {
      const txHash = this.hash;
      return api.rpc.author.submitAndWatchExtrinsic(info6?.signedTransaction || this).pipe(switchMap((status) => this.__internal__observeStatus(txHash, status)), tap((status) => {
        this.__internal__updateSigner(status, info6);
      }));
    };
    __internal__signViaSigner = async (address, options, header) => {
      const signer = options.signer || api.signer;
      if (!signer) {
        throw new Error("No signer specified, either via api.setSigner or via sign options. You possibly need to pass through an explicit keypair for the origin so it can be used for signing.");
      }
      const payload = this.registry.createTypeUnsafe("SignerPayload", [objectSpread({}, options, {
        address,
        blockNumber: header ? header.number : 0,
        method: this.method
      })]);
      let result;
      if (isFunction(signer.signPayload)) {
        result = await signer.signPayload(payload.toPayload());
        if (result.signedTransaction && !options.withSignedTransaction) {
          throw new Error("The `signedTransaction` field may not be submitted when `withSignedTransaction` is disabled");
        }
        if (result.signedTransaction && options.withSignedTransaction) {
          const ext = this.registry.createTypeUnsafe("Extrinsic", [result.signedTransaction]);
          const newSignerPayload = this.registry.createTypeUnsafe("SignerPayload", [objectSpread({}, {
            address,
            assetId: ext.assetId && ext.assetId.isSome ? ext.assetId.toHex() : null,
            blockHash: payload.blockHash,
            blockNumber: header ? header.number : 0,
            era: ext.era.toHex(),
            genesisHash: payload.genesisHash,
            metadataHash: ext.metadataHash ? ext.metadataHash.toHex() : null,
            method: ext.method.toHex(),
            mode: ext.mode ? ext.mode.toHex() : null,
            nonce: ext.nonce.toHex(),
            runtimeVersion: payload.runtimeVersion,
            signedExtensions: payload.signedExtensions,
            tip: ext.tip ? ext.tip.toHex() : null,
            version: payload.version
          })]);
          if (!ext.isSigned) {
            throw new Error(`When using the signedTransaction field, the transaction must be signed. Recieved isSigned: ${ext.isSigned}`);
          }
          this.__internal__validateSignedTransaction(payload, ext);
          super.addSignature(address, result.signature, newSignerPayload.toPayload());
          return { id: result.id, signedTransaction: result.signedTransaction };
        }
      } else if (isFunction(signer.signRaw)) {
        result = await signer.signRaw(payload.toRaw());
      } else {
        throw new Error("Invalid signer interface, it should implement either signPayload or signRaw (or both)");
      }
      super.addSignature(address, result.signature, payload.toPayload());
      return { id: result.id };
    };
    __internal__updateSigner = (status, info6) => {
      if (info6 && info6.updateId !== -1) {
        const { options, updateId } = info6;
        const signer = options.signer || api.signer;
        if (signer && isFunction(signer.update)) {
          signer.update(updateId, status);
        }
      }
    };
    /**
     * When a signer includes `signedTransaction` within the SignerResult this will validate
     * specific fields within the signed extrinsic against the original payload that was passed
     * to the signer.
     */
    __internal__validateSignedTransaction = (signerPayload, signedExt) => {
      const payload = signerPayload.toPayload();
      const errMsg = (field) => `signAndSend: ${field} does not match the original payload`;
      if (payload.method !== signedExt.method.toHex()) {
        throw new Error(errMsg("call data"));
      }
    };
  }
  return Submittable;
}

// node_modules/@polkadot/api/submittable/createSubmittable.js
function createSubmittable(apiType, api, decorateMethod, registry, blockHash) {
  const Submittable = createClass({ api, apiType, blockHash, decorateMethod });
  return (extrinsic) => new Submittable(registry || api.registry, extrinsic);
}

// node_modules/@polkadot/api/base/find.js
function findCall(registry, callIndex) {
  return registry.findMetaCall(u8aToU8a(callIndex));
}
function findError(registry, errorIndex) {
  return registry.findMetaError(u8aToU8a(errorIndex));
}

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/is/function.js
function isFunction9(value) {
  return typeof value === "function";
}

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/hex/toU8a.js
var CHR9 = "0123456789abcdef";
var U815 = new Uint8Array(256);
var U1615 = new Uint8Array(256 * 256);
for (let i = 0, count = CHR9.length; i < count; i++) {
  U815[CHR9[i].charCodeAt(0) | 0] = i | 0;
  if (i > 9) {
    U815[CHR9[i].toUpperCase().charCodeAt(0) | 0] = i | 0;
  }
}
for (let i = 0; i < 256; i++) {
  const s = i << 8;
  for (let j = 0; j < 256; j++) {
    U1615[s | j] = U815[i] << 4 | U815[j];
  }
}
function hexToU8a8(value, bitLength = -1) {
  if (!value) {
    return new Uint8Array();
  }
  let s = value.startsWith("0x") ? 2 : 0;
  const decLength = Math.ceil((value.length - s) / 2);
  const endLength = Math.ceil(bitLength === -1 ? decLength : bitLength / 8);
  const result = new Uint8Array(endLength);
  const offset = endLength > decLength ? endLength - decLength : 0;
  for (let i = offset; i < endLength; i++, s += 2) {
    result[i] = U1615[value.charCodeAt(s) << 8 | value.charCodeAt(s + 1)];
  }
  return result;
}

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/bn/bn.js
var import_bn44 = __toESM(require_bn(), 1);

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/is/hex.js
var REGEX_HEX_PREFIXED8 = /^0x[\da-fA-F]+$/;
var REGEX_HEX_NOPREFIX4 = /^[\da-fA-F]+$/;
function isHex8(value, bitLength = -1, ignoreLength) {
  return typeof value === "string" && (value === "0x" || REGEX_HEX_PREFIXED8.test(value)) && (bitLength === -1 ? ignoreLength || value.length % 2 === 0 : value.length === 2 + Math.ceil(bitLength / 4));
}

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/is/object.js
function isObject7(value) {
  return !!value && typeof value === "object";
}

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/is/helpers.js
function isOn4(...fns) {
  return (value) => (isObject7(value) || isFunction9(value)) && fns.every((f) => isFunction9(value[f]));
}

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/is/toBigInt.js
var isToBigInt4 = /* @__PURE__ */ isOn4("toBigInt");

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/is/toBn.js
var isToBn5 = /* @__PURE__ */ isOn4("toBn");

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/hex/stripPrefix.js
function hexStripPrefix4(value) {
  if (!value || value === "0x") {
    return "";
  } else if (REGEX_HEX_PREFIXED8.test(value)) {
    return value.substring(2);
  } else if (REGEX_HEX_NOPREFIX4.test(value)) {
    return value;
  }
  throw new Error(`Expected hex value to convert, found '${value}'`);
}

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/hex/toBn.js
function hexToBn4(value, { isLe = false, isNegative = false } = {}) {
  if (!value || value === "0x") {
    return new import_bn44.default(0);
  }
  const stripped = hexStripPrefix4(value);
  const bn = new import_bn44.default(stripped, 16, isLe ? "le" : "be");
  return isNegative ? bn.fromTwos(stripped.length * 4) : bn;
}

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/is/bigInt.js
function isBigInt7(value) {
  return typeof value === "bigint";
}

// node_modules/@polkadot/types-known/node_modules/@polkadot/util/bn/toBn.js
function bnToBn4(value) {
  return value ? import_bn44.default.isBN(value) ? value : isHex8(value) ? hexToBn4(value.toString()) : isBigInt7(value) ? new import_bn44.default(value.toString()) : isToBn5(value) ? value.toBn() : isToBigInt4(value) ? new import_bn44.default(value.toBigInt().toString()) : new import_bn44.default(value) : new import_bn44.default(0);
}

// node_modules/@polkadot/types-known/chain/index.js
var typesChain = {};

// node_modules/@polkadot/types-known/spec/centrifuge-chain.js
var sharedTypes = {
  // Anchor
  AnchorData: {
    anchoredBlock: "u64",
    docRoot: "H256",
    id: "H256"
  },
  DispatchErrorModule: "DispatchErrorModuleU8",
  PreCommitData: {
    expirationBlock: "u64",
    identity: "H256",
    signingRoot: "H256"
  },
  // Fees
  Fee: {
    key: "Hash",
    price: "Balance"
  },
  // MultiAccount
  MultiAccountData: {
    deposit: "Balance",
    depositor: "AccountId",
    signatories: "Vec<AccountId>",
    threshold: "u16"
  },
  // Bridge
  ChainId: "u8",
  DepositNonce: "u64",
  ResourceId: "[u8; 32]",
  "chainbridge::ChainId": "u8",
  // NFT
  RegistryId: "H160",
  TokenId: "U256",
  AssetId: {
    registryId: "RegistryId",
    tokenId: "TokenId"
  },
  AssetInfo: {
    metadata: "Bytes"
  },
  MintInfo: {
    anchorId: "Hash",
    proofs: "Vec<ProofMint>",
    staticHashes: "[Hash; 3]"
  },
  Proof: {
    leafHash: "H256",
    sortedHashes: "H256"
  },
  ProofMint: {
    hashes: "Vec<Hash>",
    property: "Bytes",
    salt: "[u8; 32]",
    value: "Bytes"
  },
  RegistryInfo: {
    fields: "Vec<Bytes>",
    ownerCanBurn: "bool"
  },
  ProxyType: {
    _enum: [
      "Any",
      "NonTransfer",
      "Governance",
      "Staking",
      "NonProxy"
    ]
  }
};
var standaloneTypes = {
  ...sharedTypes,
  AccountInfo: "AccountInfoWithRefCount",
  Address: "LookupSource",
  LookupSource: "IndicesLookupSource",
  Multiplier: "Fixed64",
  RefCount: "RefCountTo259"
};
var versioned = [
  {
    minmax: [240, 243],
    types: {
      ...standaloneTypes,
      ProxyType: {
        _enum: [
          "Any",
          "NonTransfer",
          "Governance",
          "Staking",
          "Vesting"
        ]
      }
    }
  },
  {
    minmax: [244, 999],
    types: { ...standaloneTypes }
  },
  {
    minmax: [1e3, void 0],
    types: { ...sharedTypes }
  }
];

// node_modules/@polkadot/types-known/spec/kusama.js
var sharedTypes2 = {
  CompactAssignments: "CompactAssignmentsWith24",
  DispatchErrorModule: "DispatchErrorModuleU8",
  RawSolution: "RawSolutionWith24",
  Keys: "SessionKeys6",
  ProxyType: {
    _enum: ["Any", "NonTransfer", "Governance", "Staking", "IdentityJudgement", "CancelProxy", "Auction"]
  },
  Weight: "WeightV1"
};
var addrIndicesTypes = {
  AccountInfo: "AccountInfoWithRefCount",
  Address: "LookupSource",
  CompactAssignments: "CompactAssignmentsWith16",
  DispatchErrorModule: "DispatchErrorModuleU8",
  RawSolution: "RawSolutionWith16",
  Keys: "SessionKeys5",
  LookupSource: "IndicesLookupSource",
  ValidatorPrefs: "ValidatorPrefsWithCommission"
};
var addrAccountIdTypes = {
  AccountInfo: "AccountInfoWithRefCount",
  Address: "AccountId",
  CompactAssignments: "CompactAssignmentsWith16",
  DispatchErrorModule: "DispatchErrorModuleU8",
  RawSolution: "RawSolutionWith16",
  Keys: "SessionKeys5",
  LookupSource: "AccountId",
  ValidatorPrefs: "ValidatorPrefsWithCommission"
};
var versioned2 = [
  {
    // 1020 is first CC3
    minmax: [1019, 1031],
    types: {
      ...addrIndicesTypes,
      BalanceLock: "BalanceLockTo212",
      CompactAssignments: "CompactAssignmentsTo257",
      DispatchError: "DispatchErrorTo198",
      DispatchInfo: "DispatchInfoTo244",
      Heartbeat: "HeartbeatTo244",
      IdentityInfo: "IdentityInfoTo198",
      Keys: "SessionKeys5",
      Multiplier: "Fixed64",
      OpenTip: "OpenTipTo225",
      RefCount: "RefCountTo259",
      ReferendumInfo: "ReferendumInfoTo239",
      Scheduled: "ScheduledTo254",
      SlashingSpans: "SlashingSpansTo204",
      StakingLedger: "StakingLedgerTo223",
      Votes: "VotesTo230",
      Weight: "u32"
    }
  },
  {
    minmax: [1032, 1042],
    types: {
      ...addrIndicesTypes,
      BalanceLock: "BalanceLockTo212",
      CompactAssignments: "CompactAssignmentsTo257",
      DispatchInfo: "DispatchInfoTo244",
      Heartbeat: "HeartbeatTo244",
      Keys: "SessionKeys5",
      Multiplier: "Fixed64",
      OpenTip: "OpenTipTo225",
      RefCount: "RefCountTo259",
      ReferendumInfo: "ReferendumInfoTo239",
      Scheduled: "ScheduledTo254",
      SlashingSpans: "SlashingSpansTo204",
      StakingLedger: "StakingLedgerTo223",
      Votes: "VotesTo230",
      Weight: "u32"
    }
  },
  {
    // actual at 1045 (1043-1044 is dev)
    minmax: [1043, 1045],
    types: {
      ...addrIndicesTypes,
      BalanceLock: "BalanceLockTo212",
      CompactAssignments: "CompactAssignmentsTo257",
      DispatchInfo: "DispatchInfoTo244",
      Heartbeat: "HeartbeatTo244",
      Keys: "SessionKeys5",
      Multiplier: "Fixed64",
      OpenTip: "OpenTipTo225",
      RefCount: "RefCountTo259",
      ReferendumInfo: "ReferendumInfoTo239",
      Scheduled: "ScheduledTo254",
      StakingLedger: "StakingLedgerTo223",
      Votes: "VotesTo230",
      Weight: "u32"
    }
  },
  {
    minmax: [1046, 1049],
    types: {
      ...sharedTypes2,
      ...addrAccountIdTypes,
      CompactAssignments: "CompactAssignmentsTo257",
      DispatchInfo: "DispatchInfoTo244",
      Heartbeat: "HeartbeatTo244",
      Multiplier: "Fixed64",
      OpenTip: "OpenTipTo225",
      RefCount: "RefCountTo259",
      ReferendumInfo: "ReferendumInfoTo239",
      Scheduled: "ScheduledTo254",
      StakingLedger: "StakingLedgerTo223",
      Weight: "u32"
    }
  },
  {
    minmax: [1050, 1054],
    types: {
      ...sharedTypes2,
      ...addrAccountIdTypes,
      CompactAssignments: "CompactAssignmentsTo257",
      DispatchInfo: "DispatchInfoTo244",
      Heartbeat: "HeartbeatTo244",
      Multiplier: "Fixed64",
      OpenTip: "OpenTipTo225",
      RefCount: "RefCountTo259",
      ReferendumInfo: "ReferendumInfoTo239",
      Scheduled: "ScheduledTo254",
      StakingLedger: "StakingLedgerTo240",
      Weight: "u32"
    }
  },
  {
    minmax: [1055, 1056],
    types: {
      ...sharedTypes2,
      ...addrAccountIdTypes,
      CompactAssignments: "CompactAssignmentsTo257",
      DispatchInfo: "DispatchInfoTo244",
      Heartbeat: "HeartbeatTo244",
      Multiplier: "Fixed64",
      OpenTip: "OpenTipTo225",
      RefCount: "RefCountTo259",
      Scheduled: "ScheduledTo254",
      StakingLedger: "StakingLedgerTo240",
      Weight: "u32"
    }
  },
  {
    minmax: [1057, 1061],
    types: {
      ...sharedTypes2,
      ...addrAccountIdTypes,
      CompactAssignments: "CompactAssignmentsTo257",
      DispatchInfo: "DispatchInfoTo244",
      Heartbeat: "HeartbeatTo244",
      OpenTip: "OpenTipTo225",
      RefCount: "RefCountTo259",
      // Last 100% known problematic runtime range - this quite possibly need to
      // apply to more runtime ranges that follow, we just don't know how far this
      // should be applied to
      //
      // TL;DR whack-a-mole since this was not histrically checked
      //
      // See https://github.com/polkadot-js/api/issues/5618#issuecomment-1530970316
      Scheduled: "ScheduledTo254"
    }
  },
  {
    minmax: [1062, 2012],
    types: {
      ...sharedTypes2,
      ...addrAccountIdTypes,
      CompactAssignments: "CompactAssignmentsTo257",
      OpenTip: "OpenTipTo225",
      RefCount: "RefCountTo259"
    }
  },
  {
    minmax: [2013, 2022],
    types: {
      ...sharedTypes2,
      ...addrAccountIdTypes,
      CompactAssignments: "CompactAssignmentsTo257",
      RefCount: "RefCountTo259"
    }
  },
  {
    minmax: [2023, 2024],
    types: {
      ...sharedTypes2,
      ...addrAccountIdTypes,
      RefCount: "RefCountTo259"
    }
  },
  {
    minmax: [2025, 2027],
    types: {
      ...sharedTypes2,
      ...addrAccountIdTypes
    }
  },
  {
    minmax: [2028, 2029],
    types: {
      ...sharedTypes2,
      AccountInfo: "AccountInfoWithDualRefCount",
      CompactAssignments: "CompactAssignmentsWith16",
      RawSolution: "RawSolutionWith16"
    }
  },
  {
    minmax: [2030, 9e3],
    types: {
      ...sharedTypes2,
      CompactAssignments: "CompactAssignmentsWith16",
      RawSolution: "RawSolutionWith16"
    }
  },
  {
    minmax: [9010, 9099],
    types: {
      ...sharedTypes2,
      ...mapXcmTypes("V0")
    }
  },
  {
    // jump from 9100 to 9110, however align with Rococo
    minmax: [9100, 9105],
    types: {
      ...sharedTypes2,
      ...mapXcmTypes("V1")
    }
  },
  {
    // metadata v14
    minmax: [9106, void 0],
    types: {
      Weight: "WeightV1"
    }
  }
  // ,
  // {
  //   // weight v2 introduction
  //   minmax: [9300, undefined],
  //   types: {
  //     Weight: 'WeightV2'
  //   }
  // }
];

// node_modules/@polkadot/types-known/spec/node.js
var versioned3 = [
  {
    minmax: [0, void 0],
    types: {
      // nothing, API tracks master
      // (v2 weights are not yet the default)
      Weight: "WeightV2"
    }
  }
];

// node_modules/@polkadot/types-known/spec/node-template.js
var versioned4 = [
  {
    minmax: [0, void 0],
    types: {
      // nothing, API tracks master
      // (v2 weights are not yet the default)
      Weight: "WeightV2"
    }
  }
];

// node_modules/@polkadot/types-known/spec/polkadot.js
var sharedTypes3 = {
  CompactAssignments: "CompactAssignmentsWith16",
  DispatchErrorModule: "DispatchErrorModuleU8",
  RawSolution: "RawSolutionWith16",
  Keys: "SessionKeys6",
  ProxyType: {
    _enum: {
      Any: 0,
      NonTransfer: 1,
      Governance: 2,
      Staking: 3,
      UnusedSudoBalances: 4,
      IdentityJudgement: 5,
      CancelProxy: 6,
      Auction: 7
    }
  },
  Weight: "WeightV1"
};
var addrAccountIdTypes2 = {
  AccountInfo: "AccountInfoWithRefCount",
  Address: "AccountId",
  DispatchErrorModule: "DispatchErrorModuleU8",
  Keys: "SessionKeys5",
  LookupSource: "AccountId",
  ValidatorPrefs: "ValidatorPrefsWithCommission"
};
var versioned5 = [
  {
    minmax: [0, 12],
    types: {
      ...sharedTypes3,
      ...addrAccountIdTypes2,
      CompactAssignments: "CompactAssignmentsTo257",
      OpenTip: "OpenTipTo225",
      RefCount: "RefCountTo259"
    }
  },
  {
    minmax: [13, 22],
    types: {
      ...sharedTypes3,
      ...addrAccountIdTypes2,
      CompactAssignments: "CompactAssignmentsTo257",
      RefCount: "RefCountTo259"
    }
  },
  {
    minmax: [23, 24],
    types: {
      ...sharedTypes3,
      ...addrAccountIdTypes2,
      RefCount: "RefCountTo259"
    }
  },
  {
    minmax: [25, 27],
    types: {
      ...sharedTypes3,
      ...addrAccountIdTypes2
    }
  },
  {
    minmax: [28, 29],
    types: {
      ...sharedTypes3,
      AccountInfo: "AccountInfoWithDualRefCount"
    }
  },
  {
    minmax: [30, 9109],
    types: {
      ...sharedTypes3
    }
  },
  {
    // metadata v14
    minmax: [9110, void 0],
    types: {
      Weight: "WeightV1"
    }
  }
  // ,
  // {
  //   // weight v2 introduction
  //   minmax: [9300, undefined],
  //   types: {
  //     Weight: 'WeightV2'
  //   }
  // }
];

// node_modules/@polkadot/types-known/spec/rococo.js
var sharedTypes4 = {
  DispatchErrorModule: "DispatchErrorModuleU8",
  FullIdentification: "()",
  // No staking, only session (as per config)
  Keys: "SessionKeys7B",
  Weight: "WeightV1"
};
var versioned6 = [
  {
    minmax: [0, 200],
    types: {
      ...sharedTypes4,
      AccountInfo: "AccountInfoWithDualRefCount",
      Address: "AccountId",
      LookupSource: "AccountId"
    }
  },
  {
    minmax: [201, 214],
    types: {
      ...sharedTypes4,
      AccountInfo: "AccountInfoWithDualRefCount"
    }
  },
  {
    minmax: [215, 228],
    types: {
      ...sharedTypes4,
      Keys: "SessionKeys6"
    }
  },
  {
    minmax: [229, 9099],
    types: {
      ...sharedTypes4,
      ...mapXcmTypes("V0")
    }
  },
  {
    minmax: [9100, 9105],
    types: {
      ...sharedTypes4,
      ...mapXcmTypes("V1")
    }
  },
  {
    // metadata v14
    minmax: [9106, void 0],
    types: {
      Weight: "WeightV1"
    }
  }
  // ,
  // {
  //   // weight v2 introduction
  //   minmax: [9300, undefined],
  //   types: {
  //     Weight: 'WeightV2'
  //   }
  // }
];

// node_modules/@polkadot/types-known/spec/shell.js
var versioned7 = [
  {
    minmax: [0, void 0],
    types: {
      // nothing, limited runtime
    }
  }
];

// node_modules/@polkadot/types-known/spec/statemine.js
var sharedTypes5 = {
  DispatchErrorModule: "DispatchErrorModuleU8",
  TAssetBalance: "u128",
  ProxyType: {
    _enum: [
      "Any",
      "NonTransfer",
      "CancelProxy",
      "Assets",
      "AssetOwner",
      "AssetManager",
      "Staking"
    ]
  },
  Weight: "WeightV1"
};
var versioned8 = [
  {
    minmax: [0, 3],
    types: {
      // Enum was modified mid-flight -
      // https://github.com/paritytech/substrate/pull/10382/files#diff-e4e016b33a82268b6208dc974eea841bad47597865a749fee2f937eb6fdf67b4R498
      DispatchError: "DispatchErrorPre6First",
      ...sharedTypes5,
      ...mapXcmTypes("V0")
    }
  },
  {
    minmax: [4, 5],
    types: {
      // As above, see https://github.com/polkadot-js/api/issues/5301
      DispatchError: "DispatchErrorPre6First",
      ...sharedTypes5,
      ...mapXcmTypes("V1")
    }
  },
  {
    // metadata V14
    minmax: [500, 9999],
    types: {
      Weight: "WeightV1",
      TAssetConversion: "Option<AssetId>"
    }
  },
  {
    minmax: [1e4, void 0],
    types: {
      Weight: "WeightV1"
    }
  }
];

// node_modules/@polkadot/types-known/spec/statemint.js
var sharedTypes6 = {
  DispatchErrorModule: "DispatchErrorModuleU8",
  TAssetBalance: "u128",
  ProxyType: {
    _enum: [
      "Any",
      "NonTransfer",
      "CancelProxy",
      "Assets",
      "AssetOwner",
      "AssetManager",
      "Staking"
    ]
  },
  Weight: "WeightV1"
};
var versioned9 = [
  {
    minmax: [0, 3],
    types: {
      // Enum was modified mid-flight -
      // https://github.com/paritytech/substrate/pull/10382/files#diff-e4e016b33a82268b6208dc974eea841bad47597865a749fee2f937eb6fdf67b4R498
      DispatchError: "DispatchErrorPre6First",
      ...sharedTypes6,
      ...mapXcmTypes("V0")
    }
  },
  {
    minmax: [4, 5],
    types: {
      // As above, see https://github.com/polkadot-js/api/issues/5301
      DispatchError: "DispatchErrorPre6First",
      ...sharedTypes6,
      ...mapXcmTypes("V1")
    }
  },
  {
    // metadata V14
    minmax: [500, 1001003],
    types: {
      Weight: "WeightV1",
      TAssetConversion: "Option<AssetId>"
    }
  },
  {
    minmax: [1002e3, void 0],
    types: {
      Weight: "WeightV1"
    }
  }
  // ,
  // {
  //   // weight v2 introduction
  //   minmax: [9300, undefined],
  //   types: {
  //     Weight: 'WeightV2'
  //   }
  // }
];

// node_modules/@polkadot/types-known/spec/westend.js
var sharedTypes7 = {
  // 16 validators
  CompactAssignments: "CompactAssignmentsWith16",
  DispatchErrorModule: "DispatchErrorModuleU8",
  RawSolution: "RawSolutionWith16",
  // general
  Keys: "SessionKeys6",
  ProxyType: {
    _enum: ["Any", "NonTransfer", "Staking", "SudoBalances", "IdentityJudgement", "CancelProxy"]
  },
  Weight: "WeightV1"
};
var addrAccountIdTypes3 = {
  AccountInfo: "AccountInfoWithRefCount",
  Address: "AccountId",
  CompactAssignments: "CompactAssignmentsWith16",
  DispatchErrorModule: "DispatchErrorModuleU8",
  LookupSource: "AccountId",
  Keys: "SessionKeys5",
  RawSolution: "RawSolutionWith16",
  ValidatorPrefs: "ValidatorPrefsWithCommission"
};
var versioned10 = [
  {
    minmax: [1, 2],
    types: {
      ...sharedTypes7,
      ...addrAccountIdTypes3,
      CompactAssignments: "CompactAssignmentsTo257",
      DispatchInfo: "DispatchInfoTo244",
      Heartbeat: "HeartbeatTo244",
      Multiplier: "Fixed64",
      OpenTip: "OpenTipTo225",
      RefCount: "RefCountTo259",
      Weight: "u32"
    }
  },
  {
    minmax: [3, 22],
    types: {
      ...sharedTypes7,
      ...addrAccountIdTypes3,
      CompactAssignments: "CompactAssignmentsTo257",
      DispatchInfo: "DispatchInfoTo244",
      Heartbeat: "HeartbeatTo244",
      OpenTip: "OpenTipTo225",
      RefCount: "RefCountTo259"
    }
  },
  {
    minmax: [23, 42],
    types: {
      ...sharedTypes7,
      ...addrAccountIdTypes3,
      CompactAssignments: "CompactAssignmentsTo257",
      DispatchInfo: "DispatchInfoTo244",
      Heartbeat: "HeartbeatTo244",
      RefCount: "RefCountTo259"
    }
  },
  {
    minmax: [43, 44],
    types: {
      ...sharedTypes7,
      ...addrAccountIdTypes3,
      DispatchInfo: "DispatchInfoTo244",
      Heartbeat: "HeartbeatTo244",
      RefCount: "RefCountTo259"
    }
  },
  {
    minmax: [45, 47],
    types: {
      ...sharedTypes7,
      ...addrAccountIdTypes3
    }
  },
  {
    minmax: [48, 49],
    types: {
      ...sharedTypes7,
      AccountInfo: "AccountInfoWithDualRefCount"
    }
  },
  {
    minmax: [50, 9099],
    types: {
      ...sharedTypes7,
      ...mapXcmTypes("V0")
    }
  },
  {
    minmax: [9100, 9105],
    types: {
      ...sharedTypes7,
      ...mapXcmTypes("V1")
    }
  },
  {
    // metadata v14
    minmax: [9106, void 0],
    types: {
      Weight: "WeightV1"
    }
  }
  // ,
  // {
  //   // weight v2 introduction
  //   minmax: [9300, undefined],
  //   types: {
  //     Weight: 'WeightV2'
  //   }
  // }
];

// node_modules/@polkadot/types-known/spec/westmint.js
var sharedTypes8 = {
  DispatchErrorModule: "DispatchErrorModuleU8",
  TAssetBalance: "u128",
  ProxyType: {
    _enum: [
      "Any",
      "NonTransfer",
      "CancelProxy",
      "Assets",
      "AssetOwner",
      "AssetManager",
      "Staking"
    ]
  },
  Weight: "WeightV1"
};
var versioned11 = [
  {
    minmax: [0, 3],
    types: {
      // Enum was modified mid-flight -
      // https://github.com/paritytech/substrate/pull/10382/files#diff-e4e016b33a82268b6208dc974eea841bad47597865a749fee2f937eb6fdf67b4R498
      DispatchError: "DispatchErrorPre6First",
      ...sharedTypes8,
      ...mapXcmTypes("V0")
    }
  },
  {
    minmax: [4, 5],
    types: {
      // As above, see https://github.com/polkadot-js/api/issues/5301
      DispatchError: "DispatchErrorPre6First",
      ...sharedTypes8,
      ...mapXcmTypes("V1")
    }
  },
  {
    // metadata V14
    minmax: [500, 9434],
    types: {
      Weight: "WeightV1",
      TAssetConversion: "Option<AssetId>"
    }
  },
  {
    minmax: [9435, void 0],
    types: {
      Weight: "WeightV1"
    }
  }
];

// node_modules/@polkadot/types-known/spec/index.js
var typesSpec = {
  "centrifuge-chain": versioned,
  kusama: versioned2,
  node: versioned3,
  "node-template": versioned4,
  polkadot: versioned5,
  rococo: versioned6,
  shell: versioned7,
  statemine: versioned8,
  statemint: versioned9,
  westend: versioned10,
  westmint: versioned11
};

// node_modules/@polkadot/types-known/upgrades/e2e/index.js
var e2e_exports = {};
__export(e2e_exports, {
  kusama: () => upgrades,
  polkadot: () => upgrades2,
  westend: () => upgrades3
});

// node_modules/@polkadot/types-known/upgrades/e2e/kusama.js
var upgrades = [
  [
    0,
    1020,
    [
      [
        "0xdf6acb689907609b",
        2
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        1
      ],
      [
        "0xf78b278be53f454c",
        1
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        1
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    26669,
    1021,
    [
      [
        "0xdf6acb689907609b",
        2
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        1
      ],
      [
        "0xf78b278be53f454c",
        1
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        1
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    38245,
    1022,
    [
      [
        "0xdf6acb689907609b",
        2
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        1
      ],
      [
        "0xf78b278be53f454c",
        1
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        1
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    54248,
    1023,
    [
      [
        "0xdf6acb689907609b",
        2
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        1
      ],
      [
        "0xf78b278be53f454c",
        1
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        1
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    59659,
    1024,
    [
      [
        "0xdf6acb689907609b",
        2
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        1
      ],
      [
        "0xf78b278be53f454c",
        1
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        1
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    67651,
    1025,
    [
      [
        "0xdf6acb689907609b",
        2
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        1
      ],
      [
        "0xf78b278be53f454c",
        1
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        1
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    82191,
    1027,
    [
      [
        "0xdf6acb689907609b",
        2
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        1
      ],
      [
        "0xf78b278be53f454c",
        1
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        1
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    83238,
    1028,
    [
      [
        "0xdf6acb689907609b",
        2
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        1
      ],
      [
        "0xf78b278be53f454c",
        1
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        1
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    101503,
    1029,
    [
      [
        "0xdf6acb689907609b",
        2
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        1
      ],
      [
        "0xf78b278be53f454c",
        1
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        1
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    203466,
    1030,
    [
      [
        "0xdf6acb689907609b",
        2
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        1
      ],
      [
        "0xf78b278be53f454c",
        1
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        1
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    295787,
    1031,
    [
      [
        "0xdf6acb689907609b",
        2
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        1
      ],
      [
        "0xf78b278be53f454c",
        1
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        1
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    461692,
    1032,
    [
      [
        "0xdf6acb689907609b",
        2
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        1
      ],
      [
        "0xf78b278be53f454c",
        1
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        1
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    504329,
    1033,
    [
      [
        "0xdf6acb689907609b",
        2
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        1
      ],
      [
        "0xf78b278be53f454c",
        1
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        1
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    569327,
    1038,
    [
      [
        "0xdf6acb689907609b",
        2
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        1
      ],
      [
        "0xf78b278be53f454c",
        1
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        1
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    587687,
    1039,
    [
      [
        "0xdf6acb689907609b",
        2
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        1
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        1
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    653183,
    1040,
    [
      [
        "0xdf6acb689907609b",
        2
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        1
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        1
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    693488,
    1042,
    [
      [
        "0xdf6acb689907609b",
        2
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        1
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        1
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    901442,
    1045,
    [
      [
        "0xdf6acb689907609b",
        2
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        1
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        1
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    1375086,
    1050,
    [
      [
        "0xdf6acb689907609b",
        2
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        1
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        1
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    1445458,
    1051,
    [
      [
        "0xdf6acb689907609b",
        2
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        1
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        1
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    1472960,
    1052,
    [
      [
        "0xdf6acb689907609b",
        2
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        1
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        1
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    1475648,
    1053,
    [
      [
        "0xdf6acb689907609b",
        2
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        1
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        1
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    1491596,
    1054,
    [
      [
        "0xdf6acb689907609b",
        2
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        1
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        1
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    1574408,
    1055,
    [
      [
        "0xdf6acb689907609b",
        2
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        1
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        1
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    2064961,
    1058,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        1
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    2201991,
    1062,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    2671528,
    2005,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    2704202,
    2007,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    2728002,
    2008,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    2832534,
    2011,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    2962294,
    2012,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    324e4,
    2013,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    3274408,
    2015,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    3323565,
    2019,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    3534175,
    2022,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    3860281,
    2023,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    4143129,
    2024,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    4401242,
    2025,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    4841367,
    2026,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    5961600,
    2027,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    6137912,
    2028,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    6561855,
    2029,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    7100891,
    2030,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    7468792,
    9010,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    7668600,
    9030,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    7812476,
    9040,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    8010981,
    9050,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    8073833,
    9070,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    8555825,
    9080,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    8945245,
    9090,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    9611377,
    9100,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    9625129,
    9111,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    9866422,
    9122,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    10403784,
    9130,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    10960765,
    9150,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    11006614,
    9151,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    11404482,
    9160,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    11601803,
    9170,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    12008022,
    9180,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    12405451,
    9190,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    12665416,
    9200,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    12909508,
    9220,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    13109752,
    9230,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    13555777,
    9250,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    13727747,
    9260,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    14248044,
    9271,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ]
    ]
  ],
  [
    14433840,
    9280,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ],
      [
        "0xf3ff14d5ab527059",
        1
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ]
    ]
  ],
  [
    14645900,
    9291,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ],
      [
        "0xf3ff14d5ab527059",
        1
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ]
    ]
  ],
  [
    15048375,
    9300,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ],
      [
        "0xf3ff14d5ab527059",
        1
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ]
    ]
  ],
  [
    15426015,
    9320,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        2
      ],
      [
        "0xf3ff14d5ab527059",
        2
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ]
    ]
  ],
  [
    15680713,
    9340,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        2
      ],
      [
        "0xf3ff14d5ab527059",
        2
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ]
    ]
  ],
  [
    15756296,
    9350,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        2
      ],
      [
        "0xf3ff14d5ab527059",
        2
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ]
    ]
  ],
  [
    15912007,
    9360,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        2
      ],
      [
        "0xf3ff14d5ab527059",
        2
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ]
    ]
  ],
  [
    16356547,
    9370,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        2
      ],
      [
        "0xf3ff14d5ab527059",
        2
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ]
    ]
  ],
  [
    17335450,
    9381,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        3
      ],
      [
        "0xf3ff14d5ab527059",
        3
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ]
    ]
  ],
  [
    18062739,
    9420,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        2
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        4
      ],
      [
        "0x49eaaf1b548a0cb0",
        2
      ],
      [
        "0x91d5df18b0d2cf58",
        2
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        4
      ],
      [
        "0xf3ff14d5ab527059",
        3
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ],
      [
        "0x18ef58a3b67ba770",
        1
      ]
    ]
  ],
  [
    18625e3,
    9430,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        2
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        4
      ],
      [
        "0x49eaaf1b548a0cb0",
        2
      ],
      [
        "0x91d5df18b0d2cf58",
        2
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        4
      ],
      [
        "0xf3ff14d5ab527059",
        3
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ],
      [
        "0x18ef58a3b67ba770",
        1
      ]
    ]
  ],
  [
    20465806,
    1e6,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        2
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        5
      ],
      [
        "0x49eaaf1b548a0cb0",
        3
      ],
      [
        "0x91d5df18b0d2cf58",
        2
      ],
      [
        "0x2a5e924655399e60",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        4
      ],
      [
        "0xf3ff14d5ab527059",
        3
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ],
      [
        "0x18ef58a3b67ba770",
        1
      ]
    ]
  ],
  [
    2157e4,
    1001e3,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        2
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        7
      ],
      [
        "0x49eaaf1b548a0cb0",
        3
      ],
      [
        "0x91d5df18b0d2cf58",
        2
      ],
      [
        "0x2a5e924655399e60",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        4
      ],
      [
        "0xf3ff14d5ab527059",
        3
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ],
      [
        "0x18ef58a3b67ba770",
        1
      ],
      [
        "0xfbc577b9d747efd6",
        1
      ]
    ]
  ],
  [
    21786291,
    1001002,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        2
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        7
      ],
      [
        "0x49eaaf1b548a0cb0",
        3
      ],
      [
        "0x91d5df18b0d2cf58",
        2
      ],
      [
        "0x2a5e924655399e60",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        4
      ],
      [
        "0xf3ff14d5ab527059",
        3
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ],
      [
        "0x18ef58a3b67ba770",
        1
      ],
      [
        "0xfbc577b9d747efd6",
        1
      ]
    ]
  ],
  [
    22515962,
    1001003,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        2
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        7
      ],
      [
        "0x49eaaf1b548a0cb0",
        3
      ],
      [
        "0x91d5df18b0d2cf58",
        2
      ],
      [
        "0x2a5e924655399e60",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        4
      ],
      [
        "0xf3ff14d5ab527059",
        3
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ],
      [
        "0x18ef58a3b67ba770",
        1
      ],
      [
        "0xfbc577b9d747efd6",
        1
      ]
    ]
  ],
  [
    2279e4,
    1002e3,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        2
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        10
      ],
      [
        "0x49eaaf1b548a0cb0",
        3
      ],
      [
        "0x91d5df18b0d2cf58",
        2
      ],
      [
        "0x2a5e924655399e60",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        4
      ],
      [
        "0xf3ff14d5ab527059",
        3
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ],
      [
        "0x18ef58a3b67ba770",
        1
      ],
      [
        "0xfbc577b9d747efd6",
        1
      ]
    ]
  ],
  [
    23176015,
    1002001,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        2
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        10
      ],
      [
        "0x49eaaf1b548a0cb0",
        3
      ],
      [
        "0x91d5df18b0d2cf58",
        2
      ],
      [
        "0x2a5e924655399e60",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        4
      ],
      [
        "0xf3ff14d5ab527059",
        3
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ],
      [
        "0x18ef58a3b67ba770",
        1
      ],
      [
        "0xfbc577b9d747efd6",
        1
      ]
    ]
  ],
  [
    23450253,
    1002004,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        2
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        10
      ],
      [
        "0x49eaaf1b548a0cb0",
        3
      ],
      [
        "0x91d5df18b0d2cf58",
        2
      ],
      [
        "0x2a5e924655399e60",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        4
      ],
      [
        "0xf3ff14d5ab527059",
        3
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ],
      [
        "0x18ef58a3b67ba770",
        1
      ],
      [
        "0xfbc577b9d747efd6",
        1
      ]
    ]
  ],
  [
    23565293,
    1002005,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        2
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        10
      ],
      [
        "0x49eaaf1b548a0cb0",
        3
      ],
      [
        "0x91d5df18b0d2cf58",
        2
      ],
      [
        "0x2a5e924655399e60",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        4
      ],
      [
        "0xf3ff14d5ab527059",
        3
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ],
      [
        "0x18ef58a3b67ba770",
        1
      ],
      [
        "0xfbc577b9d747efd6",
        1
      ]
    ]
  ],
  [
    23780224,
    1002006,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        2
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        10
      ],
      [
        "0x49eaaf1b548a0cb0",
        3
      ],
      [
        "0x91d5df18b0d2cf58",
        2
      ],
      [
        "0x2a5e924655399e60",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        4
      ],
      [
        "0xf3ff14d5ab527059",
        3
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ],
      [
        "0x18ef58a3b67ba770",
        1
      ],
      [
        "0xfbc577b9d747efd6",
        1
      ]
    ]
  ],
  [
    24786390,
    1003e3,
    [
      [
        "0xc51ff1fa3f5d0cca",
        1
      ],
      [
        "0xdf6acb689907609b",
        5
      ],
      [
        "0x37e397fc7c91f5e4",
        2
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        11
      ],
      [
        "0x49eaaf1b548a0cb0",
        3
      ],
      [
        "0x91d5df18b0d2cf58",
        2
      ],
      [
        "0x2a5e924655399e60",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        4
      ],
      [
        "0xf3ff14d5ab527059",
        3
      ],
      [
        "0x6ff52ee858e6c5bd",
        1
      ],
      [
        "0x91b1c8b16328eb92",
        1
      ],
      [
        "0x9ffb505aa738d69c",
        1
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ],
      [
        "0x18ef58a3b67ba770",
        1
      ],
      [
        "0xfbc577b9d747efd6",
        1
      ]
    ]
  ]
];

// node_modules/@polkadot/types-known/upgrades/e2e/polkadot.js
var upgrades2 = [
  [
    0,
    0,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    29231,
    1,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    188836,
    5,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    199405,
    6,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    214264,
    7,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    244358,
    8,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    303079,
    9,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    314201,
    10,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    342400,
    11,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    443963,
    12,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    528470,
    13,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    687751,
    14,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    746085,
    15,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    787923,
    16,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    799302,
    17,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    1205128,
    18,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    1603423,
    23,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    1733218,
    24,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    2005673,
    25,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    2436698,
    26,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    3613564,
    27,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    3899547,
    28,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    4345767,
    29,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    4876134,
    30,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    5661442,
    9050,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    6321619,
    9080,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    6713249,
    9090,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    7217907,
    9100,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    7229126,
    9110,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    7560558,
    9122,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    8115869,
    9140,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    8638103,
    9151,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    9280179,
    9170,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    9738717,
    9180,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    10156856,
    9190,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    10458576,
    9200,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    10655116,
    9220,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    10879371,
    9230,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    11328884,
    9250,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    11532856,
    9260,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    11933818,
    9270,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    12217535,
    9280,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ],
      [
        "0xf3ff14d5ab527059",
        1
      ]
    ]
  ],
  [
    12245277,
    9281,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ],
      [
        "0xf3ff14d5ab527059",
        1
      ]
    ]
  ],
  [
    12532644,
    9291,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ],
      [
        "0xf3ff14d5ab527059",
        1
      ]
    ]
  ],
  [
    12876189,
    9300,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ],
      [
        "0xf3ff14d5ab527059",
        1
      ]
    ]
  ],
  [
    13800015,
    9340,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        2
      ],
      [
        "0xf3ff14d5ab527059",
        2
      ]
    ]
  ],
  [
    14188833,
    9360,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        2
      ],
      [
        "0xf3ff14d5ab527059",
        2
      ]
    ]
  ],
  [
    14543918,
    9370,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        2
      ],
      [
        "0xf3ff14d5ab527059",
        2
      ]
    ]
  ],
  [
    15978362,
    9420,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        2
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ],
      [
        "0x18ef58a3b67ba770",
        1
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        4
      ],
      [
        "0x49eaaf1b548a0cb0",
        2
      ],
      [
        "0x91d5df18b0d2cf58",
        2
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        4
      ],
      [
        "0xf3ff14d5ab527059",
        3
      ]
    ]
  ],
  [
    1645e4,
    9430,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        2
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ],
      [
        "0x18ef58a3b67ba770",
        1
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        4
      ],
      [
        "0x49eaaf1b548a0cb0",
        2
      ],
      [
        "0x91d5df18b0d2cf58",
        2
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        4
      ],
      [
        "0xf3ff14d5ab527059",
        3
      ]
    ]
  ],
  [
    1784e4,
    9431,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        2
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ],
      [
        "0x18ef58a3b67ba770",
        1
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        4
      ],
      [
        "0x49eaaf1b548a0cb0",
        2
      ],
      [
        "0x91d5df18b0d2cf58",
        2
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        4
      ],
      [
        "0xf3ff14d5ab527059",
        3
      ]
    ]
  ],
  [
    18407475,
    1000001,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        2
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ],
      [
        "0x18ef58a3b67ba770",
        1
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        5
      ],
      [
        "0x49eaaf1b548a0cb0",
        3
      ],
      [
        "0x91d5df18b0d2cf58",
        2
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        4
      ],
      [
        "0xf3ff14d5ab527059",
        3
      ]
    ]
  ],
  [
    19551e3,
    1001002,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        2
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ],
      [
        "0x18ef58a3b67ba770",
        1
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        5
      ],
      [
        "0x49eaaf1b548a0cb0",
        3
      ],
      [
        "0x91d5df18b0d2cf58",
        2
      ],
      [
        "0x2a5e924655399e60",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        4
      ],
      [
        "0xf3ff14d5ab527059",
        3
      ],
      [
        "0xfbc577b9d747efd6",
        1
      ]
    ]
  ],
  [
    20181758,
    1001003,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        2
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ],
      [
        "0x18ef58a3b67ba770",
        1
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        5
      ],
      [
        "0x49eaaf1b548a0cb0",
        3
      ],
      [
        "0x91d5df18b0d2cf58",
        2
      ],
      [
        "0x2a5e924655399e60",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        4
      ],
      [
        "0xf3ff14d5ab527059",
        3
      ],
      [
        "0xfbc577b9d747efd6",
        1
      ]
    ]
  ],
  [
    20438530,
    1002e3,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        2
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ],
      [
        "0x18ef58a3b67ba770",
        1
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        10
      ],
      [
        "0x49eaaf1b548a0cb0",
        3
      ],
      [
        "0x91d5df18b0d2cf58",
        2
      ],
      [
        "0x2a5e924655399e60",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        4
      ],
      [
        "0xf3ff14d5ab527059",
        3
      ],
      [
        "0xfbc577b9d747efd6",
        1
      ]
    ]
  ],
  [
    21169168,
    1002004,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        2
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ],
      [
        "0x18ef58a3b67ba770",
        1
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        10
      ],
      [
        "0x49eaaf1b548a0cb0",
        3
      ],
      [
        "0x91d5df18b0d2cf58",
        2
      ],
      [
        "0x2a5e924655399e60",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        4
      ],
      [
        "0xf3ff14d5ab527059",
        3
      ],
      [
        "0xfbc577b9d747efd6",
        1
      ]
    ]
  ],
  [
    21455374,
    1002005,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        2
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ],
      [
        "0x18ef58a3b67ba770",
        1
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        10
      ],
      [
        "0x49eaaf1b548a0cb0",
        3
      ],
      [
        "0x91d5df18b0d2cf58",
        2
      ],
      [
        "0x2a5e924655399e60",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        4
      ],
      [
        "0xf3ff14d5ab527059",
        3
      ],
      [
        "0xfbc577b9d747efd6",
        1
      ]
    ]
  ],
  [
    21558004,
    1002006,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        2
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ],
      [
        "0x18ef58a3b67ba770",
        1
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        10
      ],
      [
        "0x49eaaf1b548a0cb0",
        3
      ],
      [
        "0x91d5df18b0d2cf58",
        2
      ],
      [
        "0x2a5e924655399e60",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        4
      ],
      [
        "0xf3ff14d5ab527059",
        3
      ],
      [
        "0xfbc577b9d747efd6",
        1
      ]
    ]
  ],
  [
    21800141,
    1002007,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        2
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ],
      [
        "0x18ef58a3b67ba770",
        1
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        10
      ],
      [
        "0x49eaaf1b548a0cb0",
        3
      ],
      [
        "0x91d5df18b0d2cf58",
        2
      ],
      [
        "0x2a5e924655399e60",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        4
      ],
      [
        "0xf3ff14d5ab527059",
        3
      ],
      [
        "0xfbc577b9d747efd6",
        1
      ]
    ]
  ]
];

// node_modules/@polkadot/types-known/upgrades/e2e/westend.js
var upgrades3 = [
  [
    214356,
    4,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        1
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    392764,
    7,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    409740,
    8,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    809976,
    20,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    877581,
    24,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    879238,
    25,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    889472,
    26,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    902937,
    27,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    932751,
    28,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    991142,
    29,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    1030162,
    31,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    1119657,
    32,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    1199282,
    33,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    1342534,
    34,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    1392263,
    35,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    1431703,
    36,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    1433369,
    37,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    1490972,
    41,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    2087397,
    43,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    2316688,
    44,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    2549864,
    45,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    3925782,
    46,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    3925843,
    47,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    4207800,
    48,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    4627944,
    49,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    5124076,
    50,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    5478664,
    900,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    5482450,
    9e3,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        4
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    5584305,
    9010,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    5784566,
    9030,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    5879822,
    9031,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    5896856,
    9032,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    5897316,
    9033,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    6117927,
    9050,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    6210274,
    9070,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        2
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    6379314,
    9080,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        2
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    6979141,
    9090,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    7568453,
    9100,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    7766394,
    9111,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    7911691,
    9120,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    7968866,
    9121,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    7982889,
    9122,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    8514322,
    9130,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    9091726,
    9140,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    9091774,
    9150,
    [
      [
        "0xdf6acb689907609b",
        3
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        1
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    9406726,
    9160,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    9921066,
    9170,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    10007115,
    9180,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        5
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    10480973,
    9190,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    10578091,
    9200,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    10678509,
    9210,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    10811001,
    9220,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    11096116,
    9230,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    11409279,
    9250,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    11584820,
    9251,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    11716837,
    9260,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    11876919,
    9261,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ]
    ]
  ],
  [
    11987927,
    9270,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ]
    ]
  ],
  [
    12077324,
    9271,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ]
    ]
  ],
  [
    12301871,
    9280,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ],
      [
        "0xf3ff14d5ab527059",
        1
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ]
    ]
  ],
  [
    12604343,
    9290,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        2
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ],
      [
        "0xf3ff14d5ab527059",
        1
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ]
    ]
  ],
  [
    12841034,
    9300,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ],
      [
        "0xf3ff14d5ab527059",
        1
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ]
    ]
  ],
  [
    13128237,
    9310,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        1
      ],
      [
        "0xf3ff14d5ab527059",
        1
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ]
    ]
  ],
  [
    13272363,
    9320,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        2
      ],
      [
        "0xf3ff14d5ab527059",
        2
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ]
    ]
  ],
  [
    13483497,
    9330,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        2
      ],
      [
        "0xf3ff14d5ab527059",
        2
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ]
    ]
  ],
  [
    13649433,
    9340,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        2
      ],
      [
        "0xf3ff14d5ab527059",
        2
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ]
    ]
  ],
  [
    13761100,
    9350,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        2
      ],
      [
        "0xf3ff14d5ab527059",
        2
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ]
    ]
  ],
  [
    13847400,
    9360,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        2
      ],
      [
        "0xf3ff14d5ab527059",
        2
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ]
    ]
  ],
  [
    14249200,
    9370,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        2
      ],
      [
        "0xf3ff14d5ab527059",
        2
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ]
    ]
  ],
  [
    14576855,
    9380,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        3
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        3
      ],
      [
        "0xf3ff14d5ab527059",
        3
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ]
    ]
  ],
  [
    14849830,
    9390,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        4
      ],
      [
        "0x49eaaf1b548a0cb0",
        1
      ],
      [
        "0x91d5df18b0d2cf58",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        3
      ],
      [
        "0xf3ff14d5ab527059",
        3
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ],
      [
        "0x18ef58a3b67ba770",
        1
      ]
    ]
  ],
  [
    15146832,
    9400,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        4
      ],
      [
        "0x49eaaf1b548a0cb0",
        2
      ],
      [
        "0x91d5df18b0d2cf58",
        2
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        3
      ],
      [
        "0xf3ff14d5ab527059",
        3
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ],
      [
        "0x18ef58a3b67ba770",
        1
      ]
    ]
  ],
  [
    15332317,
    9401,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        1
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        4
      ],
      [
        "0x49eaaf1b548a0cb0",
        2
      ],
      [
        "0x91d5df18b0d2cf58",
        2
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        3
      ],
      [
        "0xf3ff14d5ab527059",
        3
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ],
      [
        "0x18ef58a3b67ba770",
        1
      ]
    ]
  ],
  [
    15661793,
    9420,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        2
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        4
      ],
      [
        "0x49eaaf1b548a0cb0",
        2
      ],
      [
        "0x91d5df18b0d2cf58",
        2
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        4
      ],
      [
        "0xf3ff14d5ab527059",
        3
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ],
      [
        "0x18ef58a3b67ba770",
        1
      ]
    ]
  ],
  [
    16165469,
    9430,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        2
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        4
      ],
      [
        "0x49eaaf1b548a0cb0",
        2
      ],
      [
        "0x91d5df18b0d2cf58",
        2
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        4
      ],
      [
        "0xf3ff14d5ab527059",
        3
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ],
      [
        "0x18ef58a3b67ba770",
        1
      ]
    ]
  ],
  [
    18293984,
    102e3,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        2
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        7
      ],
      [
        "0x49eaaf1b548a0cb0",
        3
      ],
      [
        "0x91d5df18b0d2cf58",
        2
      ],
      [
        "0x2a5e924655399e60",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        4
      ],
      [
        "0xf3ff14d5ab527059",
        3
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ],
      [
        "0x18ef58a3b67ba770",
        1
      ],
      [
        "0xfbc577b9d747efd6",
        1
      ]
    ]
  ],
  [
    18293991,
    103e3,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        2
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        8
      ],
      [
        "0x49eaaf1b548a0cb0",
        3
      ],
      [
        "0x91d5df18b0d2cf58",
        2
      ],
      [
        "0x2a5e924655399e60",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        4
      ],
      [
        "0xf3ff14d5ab527059",
        3
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ],
      [
        "0x18ef58a3b67ba770",
        1
      ],
      [
        "0xfbc577b9d747efd6",
        1
      ]
    ]
  ],
  [
    18451783,
    104e3,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        2
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        9
      ],
      [
        "0x49eaaf1b548a0cb0",
        3
      ],
      [
        "0x91d5df18b0d2cf58",
        2
      ],
      [
        "0x2a5e924655399e60",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        4
      ],
      [
        "0xf3ff14d5ab527059",
        3
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ],
      [
        "0x18ef58a3b67ba770",
        1
      ],
      [
        "0xfbc577b9d747efd6",
        1
      ]
    ]
  ],
  [
    18679741,
    1005e3,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        2
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        9
      ],
      [
        "0x49eaaf1b548a0cb0",
        3
      ],
      [
        "0x91d5df18b0d2cf58",
        2
      ],
      [
        "0x2a5e924655399e60",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        4
      ],
      [
        "0xf3ff14d5ab527059",
        3
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ],
      [
        "0x18ef58a3b67ba770",
        1
      ],
      [
        "0xfbc577b9d747efd6",
        1
      ]
    ]
  ],
  [
    19166695,
    1006e3,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        2
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        10
      ],
      [
        "0x49eaaf1b548a0cb0",
        3
      ],
      [
        "0x91d5df18b0d2cf58",
        2
      ],
      [
        "0x2a5e924655399e60",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        4
      ],
      [
        "0xf3ff14d5ab527059",
        3
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ],
      [
        "0x18ef58a3b67ba770",
        1
      ],
      [
        "0xfbc577b9d747efd6",
        1
      ]
    ]
  ],
  [
    19234157,
    1006001,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        2
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        10
      ],
      [
        "0x49eaaf1b548a0cb0",
        3
      ],
      [
        "0x91d5df18b0d2cf58",
        2
      ],
      [
        "0x2a5e924655399e60",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        4
      ],
      [
        "0xf3ff14d5ab527059",
        3
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ],
      [
        "0x18ef58a3b67ba770",
        1
      ],
      [
        "0xfbc577b9d747efd6",
        1
      ]
    ]
  ],
  [
    19542944,
    1007e3,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        2
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        10
      ],
      [
        "0x49eaaf1b548a0cb0",
        3
      ],
      [
        "0x91d5df18b0d2cf58",
        2
      ],
      [
        "0x2a5e924655399e60",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        4
      ],
      [
        "0xf3ff14d5ab527059",
        3
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ],
      [
        "0x18ef58a3b67ba770",
        1
      ],
      [
        "0xfbc577b9d747efd6",
        1
      ]
    ]
  ],
  [
    19621258,
    1007001,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        2
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        10
      ],
      [
        "0x49eaaf1b548a0cb0",
        3
      ],
      [
        "0x91d5df18b0d2cf58",
        2
      ],
      [
        "0x2a5e924655399e60",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        4
      ],
      [
        "0xf3ff14d5ab527059",
        3
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ],
      [
        "0x18ef58a3b67ba770",
        1
      ],
      [
        "0xfbc577b9d747efd6",
        1
      ]
    ]
  ],
  [
    19761406,
    1008e3,
    [
      [
        "0xdf6acb689907609b",
        4
      ],
      [
        "0x37e397fc7c91f5e4",
        2
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        10
      ],
      [
        "0x49eaaf1b548a0cb0",
        3
      ],
      [
        "0x91d5df18b0d2cf58",
        2
      ],
      [
        "0x2a5e924655399e60",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        4
      ],
      [
        "0xf3ff14d5ab527059",
        3
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ],
      [
        "0x18ef58a3b67ba770",
        1
      ],
      [
        "0xfbc577b9d747efd6",
        1
      ]
    ]
  ],
  [
    20056997,
    1009e3,
    [
      [
        "0xdf6acb689907609b",
        5
      ],
      [
        "0x37e397fc7c91f5e4",
        2
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        10
      ],
      [
        "0x49eaaf1b548a0cb0",
        3
      ],
      [
        "0x91d5df18b0d2cf58",
        2
      ],
      [
        "0x2a5e924655399e60",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        4
      ],
      [
        "0xf3ff14d5ab527059",
        3
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ],
      [
        "0x18ef58a3b67ba770",
        1
      ],
      [
        "0xfbc577b9d747efd6",
        1
      ]
    ]
  ],
  [
    20368318,
    101e4,
    [
      [
        "0xdf6acb689907609b",
        5
      ],
      [
        "0x37e397fc7c91f5e4",
        2
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        10
      ],
      [
        "0x49eaaf1b548a0cb0",
        3
      ],
      [
        "0x91d5df18b0d2cf58",
        2
      ],
      [
        "0x2a5e924655399e60",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        4
      ],
      [
        "0xf3ff14d5ab527059",
        3
      ],
      [
        "0x6ff52ee858e6c5bd",
        1
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ],
      [
        "0x18ef58a3b67ba770",
        1
      ],
      [
        "0xfbc577b9d747efd6",
        1
      ]
    ]
  ],
  [
    20649086,
    1011e3,
    [
      [
        "0xdf6acb689907609b",
        5
      ],
      [
        "0x37e397fc7c91f5e4",
        2
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        11
      ],
      [
        "0x49eaaf1b548a0cb0",
        3
      ],
      [
        "0x91d5df18b0d2cf58",
        2
      ],
      [
        "0x2a5e924655399e60",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        4
      ],
      [
        "0xf3ff14d5ab527059",
        3
      ],
      [
        "0x6ff52ee858e6c5bd",
        1
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ],
      [
        "0x18ef58a3b67ba770",
        1
      ],
      [
        "0xfbc577b9d747efd6",
        1
      ]
    ]
  ],
  [
    21217837,
    1011001,
    [
      [
        "0xdf6acb689907609b",
        5
      ],
      [
        "0x37e397fc7c91f5e4",
        2
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        11
      ],
      [
        "0x49eaaf1b548a0cb0",
        3
      ],
      [
        "0x91d5df18b0d2cf58",
        2
      ],
      [
        "0x2a5e924655399e60",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        4
      ],
      [
        "0xf3ff14d5ab527059",
        3
      ],
      [
        "0x6ff52ee858e6c5bd",
        1
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ],
      [
        "0x18ef58a3b67ba770",
        1
      ],
      [
        "0xfbc577b9d747efd6",
        1
      ]
    ]
  ],
  [
    21300429,
    1013e3,
    [
      [
        "0xdf6acb689907609b",
        5
      ],
      [
        "0x37e397fc7c91f5e4",
        2
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        11
      ],
      [
        "0x49eaaf1b548a0cb0",
        3
      ],
      [
        "0x91d5df18b0d2cf58",
        2
      ],
      [
        "0x2a5e924655399e60",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        4
      ],
      [
        "0xf3ff14d5ab527059",
        3
      ],
      [
        "0x6ff52ee858e6c5bd",
        1
      ],
      [
        "0x91b1c8b16328eb92",
        1
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ],
      [
        "0x18ef58a3b67ba770",
        1
      ],
      [
        "0xfbc577b9d747efd6",
        1
      ]
    ]
  ],
  [
    21460051,
    1014e3,
    [
      [
        "0xdf6acb689907609b",
        5
      ],
      [
        "0x37e397fc7c91f5e4",
        2
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        11
      ],
      [
        "0x49eaaf1b548a0cb0",
        3
      ],
      [
        "0x91d5df18b0d2cf58",
        2
      ],
      [
        "0x2a5e924655399e60",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        4
      ],
      [
        "0xf3ff14d5ab527059",
        3
      ],
      [
        "0x6ff52ee858e6c5bd",
        1
      ],
      [
        "0x91b1c8b16328eb92",
        1
      ],
      [
        "0x9ffb505aa738d69c",
        1
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ],
      [
        "0x18ef58a3b67ba770",
        1
      ],
      [
        "0xfbc577b9d747efd6",
        1
      ]
    ]
  ],
  [
    21925427,
    1015e3,
    [
      [
        "0xdf6acb689907609b",
        5
      ],
      [
        "0x37e397fc7c91f5e4",
        2
      ],
      [
        "0x40fe3ad401f8959a",
        6
      ],
      [
        "0xd2bc9897eed08f15",
        3
      ],
      [
        "0xf78b278be53f454c",
        2
      ],
      [
        "0xaf2c0297a23e6d3d",
        11
      ],
      [
        "0x49eaaf1b548a0cb0",
        4
      ],
      [
        "0x91d5df18b0d2cf58",
        2
      ],
      [
        "0x2a5e924655399e60",
        1
      ],
      [
        "0xed99c5acb25eedf5",
        3
      ],
      [
        "0xcbca25e39f142387",
        2
      ],
      [
        "0x687ad44ad37f03c2",
        1
      ],
      [
        "0xab3c0572291feb8b",
        1
      ],
      [
        "0xbc9d89904f5b923f",
        1
      ],
      [
        "0x37c8bb1350a9a2a8",
        4
      ],
      [
        "0xf3ff14d5ab527059",
        3
      ],
      [
        "0x6ff52ee858e6c5bd",
        1
      ],
      [
        "0x91b1c8b16328eb92",
        1
      ],
      [
        "0x9ffb505aa738d69c",
        1
      ],
      [
        "0x17a6bc0d0062aeb3",
        1
      ],
      [
        "0x18ef58a3b67ba770",
        1
      ],
      [
        "0xfbc577b9d747efd6",
        1
      ]
    ]
  ]
];

// node_modules/@polkadot/types-known/upgrades/index.js
var NET_EXTRA = {
  westend: {
    genesisHash: ["0xe143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e"]
  }
};
function mapRaw([network, versions]) {
  const chain2 = selectableNetworks.find((n) => n.network === network) || NET_EXTRA[network];
  if (!chain2) {
    throw new Error(`Unable to find info for chain ${network}`);
  }
  return {
    genesisHash: hexToU8a8(chain2.genesisHash[0]),
    network,
    versions: versions.map(([blockNumber, specVersion, apis]) => ({
      apis,
      blockNumber: new import_bn44.default(blockNumber),
      specVersion: new import_bn44.default(specVersion)
    }))
  };
}
var upgrades4 = Object.entries(e2e_exports).map(mapRaw);

// node_modules/@polkadot/types-known/util.js
function withNames(chainName, specName, fn) {
  return fn(chainName.toString(), specName.toString());
}
function filterVersions(versions = [], specVersion) {
  return versions.filter(({ minmax: [min, max2] }) => (min === void 0 || min === null || specVersion >= min) && (max2 === void 0 || max2 === null || specVersion <= max2)).reduce((result, { types: types2 }) => ({ ...result, ...types2 }), {});
}
function getSpecExtensions({ knownTypes: knownTypes2 }, chainName, specName) {
  return withNames(chainName, specName, (c, s) => ({
    ...knownTypes2.typesBundle?.spec?.[s]?.signedExtensions ?? {},
    ...knownTypes2.typesBundle?.chain?.[c]?.signedExtensions ?? {}
  }));
}
function getSpecTypes({ knownTypes: knownTypes2 }, chainName, specName, specVersion) {
  const _specVersion = bnToBn4(specVersion).toNumber();
  return withNames(chainName, specName, (c, s) => ({
    // The order here is always, based on -
    //   - spec then chain
    //   - typesBundle takes higher precedence
    //   - types is the final catch-all override
    ...filterVersions(typesSpec[s], _specVersion),
    ...filterVersions(typesChain[c], _specVersion),
    ...filterVersions(knownTypes2.typesBundle?.spec?.[s]?.types, _specVersion),
    ...filterVersions(knownTypes2.typesBundle?.chain?.[c]?.types, _specVersion),
    ...knownTypes2.typesSpec?.[s] ?? {},
    ...knownTypes2.typesChain?.[c] ?? {},
    ...knownTypes2.types ?? {}
  }));
}
function getSpecHasher({ knownTypes: knownTypes2 }, chainName, specName) {
  return withNames(chainName, specName, (c, s) => knownTypes2.hasher || knownTypes2.typesBundle?.chain?.[c]?.hasher || knownTypes2.typesBundle?.spec?.[s]?.hasher || null);
}
function getSpecRpc({ knownTypes: knownTypes2 }, chainName, specName) {
  return withNames(chainName, specName, (c, s) => ({
    ...knownTypes2.typesBundle?.spec?.[s]?.rpc ?? {},
    ...knownTypes2.typesBundle?.chain?.[c]?.rpc ?? {}
  }));
}
function getSpecRuntime({ knownTypes: knownTypes2 }, chainName, specName) {
  return withNames(chainName, specName, (c, s) => ({
    ...knownTypes2.typesBundle?.spec?.[s]?.runtime ?? {},
    ...knownTypes2.typesBundle?.chain?.[c]?.runtime ?? {}
  }));
}
function getSpecAlias({ knownTypes: knownTypes2 }, chainName, specName) {
  return withNames(chainName, specName, (c, s) => ({
    // as per versions, first spec, then chain then finally non-versioned
    ...knownTypes2.typesBundle?.spec?.[s]?.alias ?? {},
    ...knownTypes2.typesBundle?.chain?.[c]?.alias ?? {},
    ...knownTypes2.typesAlias ?? {}
  }));
}
function getUpgradeVersion(genesisHash, blockNumber) {
  const known2 = upgrades4.find((u) => genesisHash.eq(u.genesisHash));
  return known2 ? [
    known2.versions.reduce((last2, version2) => {
      return blockNumber.gt(version2.blockNumber) ? version2 : last2;
    }, void 0),
    known2.versions.find((version2) => blockNumber.lte(version2.blockNumber))
  ] : [void 0, void 0];
}

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/crypto.js
function cryptoWaitReady() {
  return waitReady().then(() => {
    if (!isReady()) {
      throw new Error("Unable to initialize @polkadot/util-crypto");
    }
    return true;
  }).catch(() => false);
}

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/helpers.js
function createAsHex2(fn) {
  return (...args) => u8aToHex(fn(...args));
}

// node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/blake2/asU8a.js
function blake2AsU8a3(data, bitLength = 256, key, onlyJs) {
  const byteLength = Math.ceil(bitLength / 8);
  const u8a = u8aToU8a(data);
  return !hasBigInt || !onlyJs && isReady() ? blake2b(u8a, u8aToU8a(key), byteLength) : key ? blake2b3(u8a, { dkLen: byteLength, key }) : blake2b3(u8a, { dkLen: byteLength });
}
var blake2AsHex3 = /* @__PURE__ */ createAsHex2(blake2AsU8a3);

// node_modules/@polkadot/api/util/augmentObject.js
var l10 = logger("api/augment");
function logLength(type, values, and2 = []) {
  return values.length ? ` ${values.length} ${type}${and2.length ? " and" : ""}` : "";
}
function logValues(type, values) {
  return values.length ? `
	${type.padStart(7)}: ${values.sort().join(", ")}` : "";
}
function warn(prefix2, type, [added, removed]) {
  if (added.length || removed.length) {
    l10.warn(`api.${prefix2}: Found${logLength("added", added, removed)}${logLength("removed", removed)} ${type}:${logValues("added", added)}${logValues("removed", removed)}`);
  }
}
function findSectionExcludes(a, b) {
  return a.filter((s) => !b.includes(s));
}
function findSectionIncludes(a, b) {
  return a.filter((s) => b.includes(s));
}
function extractSections(src, dst) {
  const srcSections = Object.keys(src);
  const dstSections = Object.keys(dst);
  return [
    findSectionExcludes(srcSections, dstSections),
    findSectionExcludes(dstSections, srcSections)
  ];
}
function findMethodExcludes(src, dst) {
  const srcSections = Object.keys(src);
  const dstSections = findSectionIncludes(Object.keys(dst), srcSections);
  const excludes = [];
  for (let s = 0, scount = dstSections.length; s < scount; s++) {
    const section2 = dstSections[s];
    const srcMethods = Object.keys(src[section2]);
    const dstMethods = Object.keys(dst[section2]);
    for (let d = 0, mcount = dstMethods.length; d < mcount; d++) {
      const method = dstMethods[d];
      if (!srcMethods.includes(method)) {
        excludes.push(`${section2}.${method}`);
      }
    }
  }
  return excludes;
}
function extractMethods(src, dst) {
  return [
    findMethodExcludes(dst, src),
    findMethodExcludes(src, dst)
  ];
}
function augmentObject(prefix2, src, dst, fromEmpty = false) {
  fromEmpty && objectClear(dst);
  if (prefix2 && Object.keys(dst).length) {
    warn(prefix2, "modules", extractSections(src, dst));
    warn(prefix2, "calls", extractMethods(src, dst));
  }
  const sections = Object.keys(src);
  for (let i = 0, count = sections.length; i < count; i++) {
    const section2 = sections[i];
    const methods = src[section2];
    if (!dst[section2]) {
      dst[section2] = {};
    }
    lazyMethods(dst[section2], Object.keys(methods), (m) => methods[m]);
  }
  return dst;
}

// node_modules/@polkadot/api/util/validate.js
function sig({ lookup }, { method, section: section2 }, args) {
  return `${section2}.${method}(${args.map((a) => lookup.getTypeDef(a).type).join(", ")})`;
}
function extractStorageArgs(registry, creator, _args) {
  const args = _args.filter((a) => !isUndefined(a));
  if (creator.meta.type.isPlain) {
    if (args.length !== 0) {
      throw new Error(`${sig(registry, creator, [])} does not take any arguments, ${args.length} found`);
    }
  } else {
    const { hashers, key } = creator.meta.type.asMap;
    const keys2 = hashers.length === 1 ? [key] : registry.lookup.getSiType(key).def.asTuple.map((t) => t);
    if (args.length !== keys2.length) {
      throw new Error(`${sig(registry, creator, keys2)} is a map, requiring ${keys2.length} arguments, ${args.length} found`);
    }
  }
  return [creator, args];
}

// node_modules/@polkadot/api/base/Events.js
var Events = class {
  __internal__eventemitter = new import_index.default();
  emit(type, ...args) {
    return this.__internal__eventemitter.emit(type, ...args);
  }
  /**
   * @description Attach an eventemitter handler to listen to a specific event
   *
   * @param type The type of event to listen to. Available events are `connected`, `disconnected`, `ready` and `error`
   * @param handler The callback to be called when the event fires. Depending on the event type, it could fire with additional arguments.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * api.on('connected', (): void => {
   *   console.log('API has been connected to the endpoint');
   * });
   *
   * api.on('disconnected', (): void => {
   *   console.log('API has been disconnected from the endpoint');
   * });
   * ```
   */
  on(type, handler) {
    this.__internal__eventemitter.on(type, handler);
    return this;
  }
  /**
   * @description Remove the given eventemitter handler
   *
   * @param type The type of event the callback was attached to. Available events are `connected`, `disconnected`, `ready` and `error`
   * @param handler The callback to unregister.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * const handler = (): void => {
   *  console.log('Connected !);
   * };
   *
   * // Start listening
   * api.on('connected', handler);
   *
   * // Stop listening
   * api.off('connected', handler);
   * ```
   */
  off(type, handler) {
    this.__internal__eventemitter.removeListener(type, handler);
    return this;
  }
  /**
   * @description Attach an one-time eventemitter handler to listen to a specific event
   *
   * @param type The type of event to listen to. Available events are `connected`, `disconnected`, `ready` and `error`
   * @param handler The callback to be called when the event fires. Depending on the event type, it could fire with additional arguments.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * api.once('connected', (): void => {
   *   console.log('API has been connected to the endpoint');
   * });
   *
   * api.once('disconnected', (): void => {
   *   console.log('API has been disconnected from the endpoint');
   * });
   * ```
   */
  once(type, handler) {
    this.__internal__eventemitter.once(type, handler);
    return this;
  }
};

// node_modules/@polkadot/api/base/Decorate.js
var PAGE_SIZE_K2 = 1e3;
var PAGE_SIZE_V = 250;
var PAGE_SIZE_Q = 50;
var l11 = logger("api/init");
var instanceCounter = 0;
function getAtQueryFn(api, { method, section: section2 }) {
  return assertReturn(api.rx.query[section2] && api.rx.query[section2][method], () => `query.${section2}.${method} is not available in this version of the metadata`);
}
var Decorate = class extends Events {
  __internal__instanceId;
  __internal__runtimeLog = {};
  __internal__registry;
  __internal__storageGetQ = [];
  __internal__storageSubQ = [];
  // HACK Use BN import so decorateDerive works... yes, wtf.
  __phantom = new import_bn.default(0);
  _type;
  _call = {};
  _consts = {};
  _derive;
  _errors = {};
  _events = {};
  _extrinsics;
  _extrinsicType = GenericExtrinsic.LATEST_EXTRINSIC_VERSION;
  _genesisHash;
  _isConnected;
  _isReady = false;
  _query = {};
  _queryMulti;
  _rpc;
  _rpcCore;
  _runtimeMap = {};
  _runtimeChain;
  _runtimeMetadata;
  _runtimeVersion;
  _rx = { call: {}, consts: {}, query: {}, tx: {} };
  _options;
  /**
   * This is the one and only method concrete children classes need to implement.
   * It's a higher-order function, which takes one argument
   * `method: Method extends (...args: any[]) => Observable<any>`
   * (and one optional `options`), and should return the user facing method.
   * For example:
   * - For ApiRx, `decorateMethod` should just be identity, because the input
   * function is already an Observable
   * - For ApiPromise, `decorateMethod` should return a function that takes all
   * the parameters from `method`, adds an optional `callback` argument, and
   * returns a Promise.
   *
   * We could easily imagine other user-facing interfaces, which are simply
   * implemented by transforming the Observable to Stream/Iterator/Kefir/Bacon
   * via `decorateMethod`.
   */
  _decorateMethod;
  /**
   * @description Create an instance of the class
   *
   * @param options Options object to create API instance or a Provider instance
   *
   * @example
   * <BR>
   *
   * ```javascript
   * import Api from '@polkadot/api/promise';
   *
   * const api = new Api().isReady();
   *
   * api.rpc.subscribeNewHeads((header) => {
   *   console.log(`new block #${header.number.toNumber()}`);
   * });
   * ```
   */
  constructor(options, type, decorateMethod) {
    super();
    this.__internal__instanceId = `${++instanceCounter}`;
    this.__internal__registry = options.source?.registry || options.registry || new TypeRegistry();
    this._rx.callAt = (blockHash, knownVersion) => from(this.at(blockHash, knownVersion)).pipe(map2((a) => a.rx.call));
    this._rx.queryAt = (blockHash, knownVersion) => from(this.at(blockHash, knownVersion)).pipe(map2((a) => a.rx.query));
    this._rx.registry = this.__internal__registry;
    this._decorateMethod = decorateMethod;
    this._options = options;
    this._type = type;
    const provider = options.source ? options.source._rpcCore.provider.isClonable ? options.source._rpcCore.provider.clone() : options.source._rpcCore.provider : options.provider || new WsProvider();
    this._rpcCore = new RpcCore(this.__internal__instanceId, this.__internal__registry, {
      isPedantic: this._options.isPedantic,
      provider,
      rpcCacheCapacity: this._options.rpcCacheCapacity,
      userRpc: this._options.rpc
    });
    this._isConnected = new BehaviorSubject(this._rpcCore.provider.isConnected);
    this._rx.hasSubscriptions = this._rpcCore.provider.hasSubscriptions;
  }
  /**
   * @description Return the current used registry
   */
  get registry() {
    return this.__internal__registry;
  }
  /**
   * @description Creates an instance of a type as registered
   */
  createType(type, ...params) {
    return this.__internal__registry.createType(type, ...params);
  }
  /**
   * @description Register additional user-defined of chain-specific types in the type registry
   */
  registerTypes(types2) {
    types2 && this.__internal__registry.register(types2);
  }
  /**
   * @returns `true` if the API operates with subscriptions
   */
  get hasSubscriptions() {
    return this._rpcCore.provider.hasSubscriptions;
  }
  /**
   * @returns `true` if the API decorate multi-key queries
   */
  get supportMulti() {
    return this._rpcCore.provider.hasSubscriptions || !!this._rpcCore.state.queryStorageAt;
  }
  _emptyDecorated(registry, blockHash) {
    return {
      call: {},
      consts: {},
      errors: {},
      events: {},
      query: {},
      registry,
      rx: {
        call: {},
        query: {}
      },
      tx: createSubmittable(this._type, this._rx, this._decorateMethod, registry, blockHash)
    };
  }
  _createDecorated(registry, fromEmpty, decoratedApi, blockHash) {
    if (!decoratedApi) {
      decoratedApi = this._emptyDecorated(registry.registry, blockHash);
    }
    if (fromEmpty || !registry.decoratedMeta) {
      registry.decoratedMeta = expandMetadata(registry.registry, registry.metadata);
    }
    const runtime37 = this._decorateCalls(registry, this._decorateMethod, blockHash);
    const runtimeRx = this._decorateCalls(registry, this._rxDecorateMethod, blockHash);
    const storage = this._decorateStorage(registry.decoratedMeta, this._decorateMethod, blockHash);
    const storageRx = this._decorateStorage(registry.decoratedMeta, this._rxDecorateMethod, blockHash);
    augmentObject("consts", registry.decoratedMeta.consts, decoratedApi.consts, fromEmpty);
    augmentObject("errors", registry.decoratedMeta.errors, decoratedApi.errors, fromEmpty);
    augmentObject("events", registry.decoratedMeta.events, decoratedApi.events, fromEmpty);
    augmentObject("query", storage, decoratedApi.query, fromEmpty);
    augmentObject("query", storageRx, decoratedApi.rx.query, fromEmpty);
    augmentObject("call", runtime37, decoratedApi.call, fromEmpty);
    augmentObject("call", runtimeRx, decoratedApi.rx.call, fromEmpty);
    decoratedApi.findCall = (callIndex) => findCall(registry.registry, callIndex);
    decoratedApi.findError = (errorIndex) => findError(registry.registry, errorIndex);
    decoratedApi.queryMulti = blockHash ? this._decorateMultiAt(decoratedApi, this._decorateMethod, blockHash) : this._decorateMulti(this._decorateMethod);
    decoratedApi.runtimeVersion = registry.runtimeVersion;
    return {
      createdAt: blockHash,
      decoratedApi,
      decoratedMeta: registry.decoratedMeta
    };
  }
  _injectMetadata(registry, fromEmpty = false) {
    if (fromEmpty || !registry.decoratedApi) {
      registry.decoratedApi = this._emptyDecorated(registry.registry);
    }
    const { decoratedApi, decoratedMeta } = this._createDecorated(registry, fromEmpty, registry.decoratedApi);
    this._call = decoratedApi.call;
    this._consts = decoratedApi.consts;
    this._errors = decoratedApi.errors;
    this._events = decoratedApi.events;
    this._query = decoratedApi.query;
    this._rx.call = decoratedApi.rx.call;
    this._rx.query = decoratedApi.rx.query;
    const tx2 = this._decorateExtrinsics(decoratedMeta, this._decorateMethod);
    const rxtx = this._decorateExtrinsics(decoratedMeta, this._rxDecorateMethod);
    if (fromEmpty || !this._extrinsics) {
      this._extrinsics = tx2;
      this._rx.tx = rxtx;
    } else {
      augmentObject("tx", tx2, this._extrinsics, false);
      augmentObject(null, rxtx, this._rx.tx, false);
    }
    augmentObject(null, decoratedMeta.consts, this._rx.consts, fromEmpty);
    this.emit("decorated");
  }
  /**
   * @deprecated
   * backwards compatible endpoint for metadata injection, may be removed in the future (However, it is still useful for testing injection)
   */
  injectMetadata(metadata, fromEmpty, registry) {
    this._injectMetadata({ counter: 0, metadata, registry: registry || this.__internal__registry, runtimeVersion: this.__internal__registry.createType("RuntimeVersionPartial") }, fromEmpty);
  }
  _decorateFunctionMeta(input, output) {
    output.meta = input.meta;
    output.method = input.method;
    output.section = input.section;
    output.toJSON = input.toJSON;
    if (input.callIndex) {
      output.callIndex = input.callIndex;
    }
    return output;
  }
  // Filter all RPC methods based on the results of the rpc_methods call. We do this in the following
  // manner to cater for both old and new:
  //   - when the number of entries are 0, only remove the ones with isOptional (account & contracts)
  //   - when non-zero, remove anything that is not in the array (we don't do this)
  _filterRpc(methods, additional) {
    if (Object.keys(additional).length !== 0) {
      this._rpcCore.addUserInterfaces(additional);
      this._decorateRpc(this._rpcCore, this._decorateMethod, this._rpc);
      this._decorateRpc(this._rpcCore, this._rxDecorateMethod, this._rx.rpc);
    }
    const sectionMap = {};
    for (let i = 0, count = methods.length; i < count; i++) {
      const [section2] = methods[i].split("_");
      sectionMap[section2] = true;
    }
    const sections = Object.keys(sectionMap);
    for (let i = 0, count = sections.length; i < count; i++) {
      const nameA = stringUpperFirst(sections[i]);
      const nameB = `${nameA}Api`;
      this._runtimeMap[blake2AsHex3(nameA, 64)] = nameA;
      this._runtimeMap[blake2AsHex3(nameB, 64)] = nameB;
    }
    this._filterRpcMethods(methods);
  }
  _filterRpcMethods(exposed) {
    const hasResults = exposed.length !== 0;
    const allKnown = [...this._rpcCore.mapping.entries()];
    const allKeys = [];
    const count = allKnown.length;
    for (let i = 0; i < count; i++) {
      const [, { alias: alias2, endpoint, method, pubsub, section: section2 }] = allKnown[i];
      allKeys.push(`${section2}_${method}`);
      if (pubsub) {
        allKeys.push(`${section2}_${pubsub[1]}`);
        allKeys.push(`${section2}_${pubsub[2]}`);
      }
      if (alias2) {
        allKeys.push(...alias2);
      }
      if (endpoint) {
        allKeys.push(endpoint);
      }
    }
    const unknown = exposed.filter((k) => !allKeys.includes(k) && !k.includes("_unstable_"));
    if (unknown.length && !this._options.noInitWarn) {
      l11.warn(`RPC methods not decorated: ${unknown.join(", ")}`);
    }
    for (let i = 0; i < count; i++) {
      const [k, { method, section: section2 }] = allKnown[i];
      if (hasResults && !exposed.includes(k) && k !== "rpc_methods") {
        if (this._rpc[section2]) {
          delete this._rpc[section2][method];
          delete this._rx.rpc[section2][method];
        }
      }
    }
  }
  _rpcSubmitter(decorateMethod) {
    const method = (method2, ...params) => {
      return from(this._rpcCore.provider.send(method2, params));
    };
    return decorateMethod(method);
  }
  _decorateRpc(rpc18, decorateMethod, input = this._rpcSubmitter(decorateMethod)) {
    const out = input;
    const decorateFn = (section2, method) => {
      const source = rpc18[section2][method];
      const fn = decorateMethod(source, { methodName: method });
      fn.meta = source.meta;
      fn.raw = decorateMethod(source.raw, { methodName: method });
      return fn;
    };
    for (let s = 0, scount = rpc18.sections.length; s < scount; s++) {
      const section2 = rpc18.sections[s];
      if (!Object.prototype.hasOwnProperty.call(out, section2)) {
        const methods = Object.keys(rpc18[section2]);
        const decorateInternal = (method) => decorateFn(section2, method);
        for (let m = 0, mcount = methods.length; m < mcount; m++) {
          const method = methods[m];
          if (this.hasSubscriptions || !(method.startsWith("subscribe") || method.startsWith("unsubscribe"))) {
            if (!Object.prototype.hasOwnProperty.call(out, section2)) {
              out[section2] = {};
            }
            lazyMethod(out[section2], method, decorateInternal);
          }
        }
      }
    }
    return out;
  }
  // add all definition entries
  _addRuntimeDef(result, additional) {
    if (!additional) {
      return;
    }
    const entries = Object.entries(additional);
    for (let j = 0, ecount = entries.length; j < ecount; j++) {
      const [key, defs] = entries[j];
      if (result[key]) {
        for (let k = 0, dcount = defs.length; k < dcount; k++) {
          const def = defs[k];
          const prev = result[key].find(({ version: version2 }) => def.version === version2);
          if (prev) {
            objectSpread(prev.methods, def.methods);
          } else {
            result[key].push(def);
          }
        }
      } else {
        result[key] = defs;
      }
    }
  }
  // extract all runtime definitions
  _getRuntimeDefs(registry, specName, chain2 = "") {
    const result = {};
    const defValues = Object.values(definitions_exports);
    for (let i = 0, count = defValues.length; i < count; i++) {
      this._addRuntimeDef(result, defValues[i].runtime);
    }
    this._addRuntimeDef(result, getSpecRuntime(registry, chain2, specName));
    this._addRuntimeDef(result, this._options.runtime);
    return Object.entries(result);
  }
  // Helper for _getRuntimeDefsViaMetadata
  _getMethods(registry, methods) {
    const result = {};
    methods.forEach((m) => {
      const { docs, inputs, name, output } = m;
      result[name.toString()] = {
        description: docs.map((d) => d.toString()).join(),
        params: inputs.map(({ name: name2, type }) => {
          return { name: name2.toString(), type: registry.lookup.getName(type) || registry.lookup.getTypeDef(type).type };
        }),
        type: registry.lookup.getName(output) || registry.lookup.getTypeDef(output).type
      };
    });
    return result;
  }
  // Maintains the same structure as `_getRuntimeDefs` in order to make conversion easier.
  _getRuntimeDefsViaMetadata(registry) {
    const result = {};
    const { apis } = registry.metadata;
    for (let i = 0, count = apis.length; i < count; i++) {
      const { methods, name } = apis[i];
      result[name.toString()] = [{
        methods: this._getMethods(registry, methods),
        // We set the version to 0 here since it will not be relevant when we are grabbing the runtime apis
        // from the Metadata.
        version: 0
      }];
    }
    return Object.entries(result);
  }
  // When the calls are available in the metadata, it will generate them based off of the metadata.
  // When they are not available it will use the hardcoded calls generated in the static types.
  _decorateCalls({ registry, runtimeVersion: { apis, specName, specVersion } }, decorateMethod, blockHash) {
    const result = {};
    const named = {};
    const hashes = {};
    const isApiInMetadata = registry.metadata.apis.length > 0;
    const sections = isApiInMetadata ? this._getRuntimeDefsViaMetadata(registry) : this._getRuntimeDefs(registry, specName, this._runtimeChain);
    const older = [];
    const implName = `${specName.toString()}/${specVersion.toString()}`;
    const hasLogged = this.__internal__runtimeLog[implName] || false;
    this.__internal__runtimeLog[implName] = true;
    if (isApiInMetadata) {
      for (let i = 0, scount = sections.length; i < scount; i++) {
        const [_section, secs] = sections[i];
        const sec = secs[0];
        const sectionHash = blake2AsHex3(_section, 64);
        const section2 = stringCamelCase(_section);
        const methods = Object.entries(sec.methods);
        if (!named[section2]) {
          named[section2] = {};
        }
        for (let m = 0, mcount = methods.length; m < mcount; m++) {
          const [_method, def] = methods[m];
          const method = stringCamelCase(_method);
          named[section2][method] = objectSpread({ method, name: `${_section}_${_method}`, section: section2, sectionHash }, def);
        }
      }
    } else {
      for (let i = 0, scount = sections.length; i < scount; i++) {
        const [_section, secs] = sections[i];
        const sectionHash = blake2AsHex3(_section, 64);
        const rtApi = apis.find(([a]) => a.eq(sectionHash));
        hashes[sectionHash] = true;
        if (rtApi) {
          const all3 = secs.map(({ version: version2 }) => version2).sort();
          const sec = secs.find(({ version: version2 }) => rtApi[1].eq(version2));
          if (sec) {
            const section2 = stringCamelCase(_section);
            const methods = Object.entries(sec.methods);
            if (methods.length) {
              if (!named[section2]) {
                named[section2] = {};
              }
              for (let m = 0, mcount = methods.length; m < mcount; m++) {
                const [_method, def] = methods[m];
                const method = stringCamelCase(_method);
                named[section2][method] = objectSpread({ method, name: `${_section}_${_method}`, section: section2, sectionHash }, def);
              }
            }
          } else {
            older.push(`${_section}/${rtApi[1].toString()} (${all3.join("/")} known)`);
          }
        }
      }
      const notFound = apis.map(([a, v]) => [a.toHex(), v.toString()]).filter(([a]) => !hashes[a]).map(([a, v]) => `${this._runtimeMap[a] || a}/${v}`);
      if (!this._options.noInitWarn && !hasLogged) {
        if (older.length) {
          l11.warn(`${implName}: Not decorating runtime apis without matching versions: ${older.join(", ")}`);
        }
        if (notFound.length) {
          l11.warn(`${implName}: Not decorating unknown runtime apis: ${notFound.join(", ")}`);
        }
      }
    }
    const stateCall = blockHash ? (name, bytes2) => this._rpcCore.state.call(name, bytes2, blockHash) : (name, bytes2) => this._rpcCore.state.call(name, bytes2);
    const lazySection = (section2) => lazyMethods({}, Object.keys(named[section2]), (method) => this._decorateCall(registry, named[section2][method], stateCall, decorateMethod));
    const modules = Object.keys(named);
    for (let i = 0, count = modules.length; i < count; i++) {
      lazyMethod(result, modules[i], lazySection);
    }
    return result;
  }
  _decorateCall(registry, def, stateCall, decorateMethod) {
    const decorated = decorateMethod((...args) => {
      if (args.length !== def.params.length) {
        throw new Error(`${def.name}:: Expected ${def.params.length} arguments, found ${args.length}`);
      }
      const bytes2 = registry.createType("Raw", u8aConcatStrict(args.map((a, i) => registry.createTypeUnsafe(def.params[i].type, [a]).toU8a())));
      return stateCall(def.name, bytes2).pipe(map2((r) => registry.createTypeUnsafe(def.type, [r])));
    });
    decorated.meta = def;
    return decorated;
  }
  // only be called if supportMulti is true
  _decorateMulti(decorateMethod) {
    return decorateMethod((keys2) => keys2.length ? (this.hasSubscriptions ? this._rpcCore.state.subscribeStorage : this._rpcCore.state.queryStorageAt)(keys2.map((args) => Array.isArray(args) ? args[0].creator.meta.type.isPlain ? [args[0].creator] : args[0].creator.meta.type.asMap.hashers.length === 1 ? [args[0].creator, args.slice(1)] : [args[0].creator, ...args.slice(1)] : [args.creator])) : of([]));
  }
  _decorateMultiAt(atApi, decorateMethod, blockHash) {
    return decorateMethod((calls) => calls.length ? this._rpcCore.state.queryStorageAt(calls.map((args) => {
      if (Array.isArray(args)) {
        const { creator } = getAtQueryFn(atApi, args[0].creator);
        return creator.meta.type.isPlain ? [creator] : creator.meta.type.asMap.hashers.length === 1 ? [creator, args.slice(1)] : [creator, ...args.slice(1)];
      }
      return [getAtQueryFn(atApi, args.creator).creator];
    }), blockHash) : of([]));
  }
  _decorateExtrinsics({ tx: tx2 }, decorateMethod) {
    const result = createSubmittable(this._type, this._rx, decorateMethod);
    const lazySection = (section2) => lazyMethods({}, Object.keys(tx2[section2]), (method) => method.startsWith("$") ? tx2[section2][method] : this._decorateExtrinsicEntry(tx2[section2][method], result));
    const sections = Object.keys(tx2);
    for (let i = 0, count = sections.length; i < count; i++) {
      lazyMethod(result, sections[i], lazySection);
    }
    return result;
  }
  _decorateExtrinsicEntry(method, creator) {
    const decorated = (...params) => creator(method(...params));
    decorated.is = (other) => method.is(other);
    return this._decorateFunctionMeta(method, decorated);
  }
  _decorateStorage({ query: query2, registry }, decorateMethod, blockHash) {
    const result = {};
    const lazySection = (section2) => lazyMethods({}, Object.keys(query2[section2]), (method) => blockHash ? this._decorateStorageEntryAt(registry, query2[section2][method], decorateMethod, blockHash) : this._decorateStorageEntry(query2[section2][method], decorateMethod));
    const sections = Object.keys(query2);
    for (let i = 0, count = sections.length; i < count; i++) {
      lazyMethod(result, sections[i], lazySection);
    }
    return result;
  }
  _decorateStorageEntry(creator, decorateMethod) {
    const getArgs = (args, registry) => extractStorageArgs(registry || this.__internal__registry, creator, args);
    const getQueryAt = (blockHash) => from(this.at(blockHash)).pipe(map2((api) => getAtQueryFn(api, creator)));
    const decorated = this._decorateStorageCall(creator, decorateMethod);
    decorated.creator = creator;
    decorated.at = decorateMethod((blockHash, ...args) => getQueryAt(blockHash).pipe(switchMap((q) => q(...args))));
    decorated.hash = decorateMethod((...args) => this._rpcCore.state.getStorageHash(getArgs(args)));
    decorated.is = (key) => key.section === creator.section && key.method === creator.method;
    decorated.key = (...args) => u8aToHex(compactStripLength(creator(...args))[1]);
    decorated.keyPrefix = (...args) => u8aToHex(creator.keyPrefix(...args));
    decorated.size = decorateMethod((...args) => this._rpcCore.state.getStorageSize(getArgs(args)));
    decorated.sizeAt = decorateMethod((blockHash, ...args) => getQueryAt(blockHash).pipe(switchMap((q) => this._rpcCore.state.getStorageSize(getArgs(args, q.creator.meta.registry), blockHash))));
    if (creator.iterKey && creator.meta.type.isMap) {
      decorated.entries = decorateMethod(memo(this.__internal__instanceId, (...args) => this._retrieveMapEntries(creator, null, args)));
      decorated.entriesAt = decorateMethod(memo(this.__internal__instanceId, (blockHash, ...args) => getQueryAt(blockHash).pipe(switchMap((q) => this._retrieveMapEntries(q.creator, blockHash, args)))));
      decorated.entriesPaged = decorateMethod(memo(this.__internal__instanceId, (opts) => this._retrieveMapEntriesPaged(creator, void 0, opts)));
      decorated.keys = decorateMethod(memo(this.__internal__instanceId, (...args) => this._retrieveMapKeys(creator, null, args)));
      decorated.keysAt = decorateMethod(memo(this.__internal__instanceId, (blockHash, ...args) => getQueryAt(blockHash).pipe(switchMap((q) => this._retrieveMapKeys(q.creator, blockHash, args)))));
      decorated.keysPaged = decorateMethod(memo(this.__internal__instanceId, (opts) => this._retrieveMapKeysPaged(creator, void 0, opts)));
    }
    if (this.supportMulti && creator.meta.type.isMap) {
      decorated.multi = decorateMethod((args) => creator.meta.type.asMap.hashers.length === 1 ? this._retrieveMulti(args.map((a) => [creator, [a]])) : this._retrieveMulti(args.map((a) => [creator, a])));
    }
    return this._decorateFunctionMeta(creator, decorated);
  }
  _decorateStorageEntryAt(registry, creator, decorateMethod, blockHash) {
    const getArgs = (args) => extractStorageArgs(registry, creator, args);
    const decorated = decorateMethod((...args) => this._rpcCore.state.getStorage(getArgs(args), blockHash));
    decorated.creator = creator;
    decorated.hash = decorateMethod((...args) => this._rpcCore.state.getStorageHash(getArgs(args), blockHash));
    decorated.is = (key) => key.section === creator.section && key.method === creator.method;
    decorated.key = (...args) => u8aToHex(compactStripLength(creator(...args))[1]);
    decorated.keyPrefix = (...keys2) => u8aToHex(creator.keyPrefix(...keys2));
    decorated.size = decorateMethod((...args) => this._rpcCore.state.getStorageSize(getArgs(args), blockHash));
    if (creator.iterKey && creator.meta.type.isMap) {
      decorated.entries = decorateMethod(memo(this.__internal__instanceId, (...args) => this._retrieveMapEntries(creator, blockHash, args)));
      decorated.entriesPaged = decorateMethod(memo(this.__internal__instanceId, (opts) => this._retrieveMapEntriesPaged(creator, blockHash, opts)));
      decorated.keys = decorateMethod(memo(this.__internal__instanceId, (...args) => this._retrieveMapKeys(creator, blockHash, args)));
      decorated.keysPaged = decorateMethod(memo(this.__internal__instanceId, (opts) => this._retrieveMapKeysPaged(creator, blockHash, opts)));
    }
    if (this.supportMulti && creator.meta.type.isMap) {
      decorated.multi = decorateMethod((args) => creator.meta.type.asMap.hashers.length === 1 ? this._retrieveMulti(args.map((a) => [creator, [a]]), blockHash) : this._retrieveMulti(args.map((a) => [creator, a]), blockHash));
    }
    return this._decorateFunctionMeta(creator, decorated);
  }
  _queueStorage(call, queue) {
    const query2 = queue === this.__internal__storageSubQ ? this._rpcCore.state.subscribeStorage : this._rpcCore.state.queryStorageAt;
    let queueIdx = queue.length - 1;
    let valueIdx = 0;
    let valueObs;
    if (queueIdx === -1 || !queue[queueIdx] || queue[queueIdx][1].length === PAGE_SIZE_Q) {
      queueIdx++;
      valueObs = from(
        // we delay the execution until the next tick, this allows
        // any queries made in this timeframe to be added to the same
        // queue for a single query
        new Promise((resolve) => {
          nextTick(() => {
            const calls = queue[queueIdx][1];
            delete queue[queueIdx];
            resolve(calls);
          });
        })
      ).pipe(switchMap((calls) => query2(calls)));
      queue.push([valueObs, [call]]);
    } else {
      valueObs = queue[queueIdx][0];
      valueIdx = queue[queueIdx][1].length;
      queue[queueIdx][1].push(call);
    }
    return valueObs.pipe(
      // return the single value at this index
      map2((values) => values[valueIdx])
    );
  }
  // Decorate the base storage call. In the case or rxjs or promise-without-callback (await)
  // we make a subscription, alternatively we push this through a single-shot query
  _decorateStorageCall(creator, decorateMethod) {
    const memoed = memo(this.__internal__instanceId, (...args) => {
      const call = extractStorageArgs(this.__internal__registry, creator, args);
      if (!this.hasSubscriptions) {
        return this._rpcCore.state.getStorage(call);
      }
      return this._queueStorage(call, this.__internal__storageSubQ);
    });
    return decorateMethod(memoed, {
      methodName: creator.method,
      overrideNoSub: (...args) => this._queueStorage(extractStorageArgs(this.__internal__registry, creator, args), this.__internal__storageGetQ)
    });
  }
  // retrieve a set of values for a specific set of keys - here we chunk the keys into PAGE_SIZE sizes
  _retrieveMulti(keys2, blockHash) {
    if (!keys2.length) {
      return of([]);
    }
    const query2 = this.hasSubscriptions && !blockHash ? this._rpcCore.state.subscribeStorage : this._rpcCore.state.queryStorageAt;
    if (keys2.length <= PAGE_SIZE_V) {
      return blockHash ? query2(keys2, blockHash) : query2(keys2);
    }
    return combineLatest(arrayChunk(keys2, PAGE_SIZE_V).map((k) => blockHash ? query2(k, blockHash) : query2(k))).pipe(map2(arrayFlatten));
  }
  _retrieveMapKeys({ iterKey, meta, method, section: section2 }, at, args) {
    if (!iterKey || !meta.type.isMap) {
      throw new Error("keys can only be retrieved on maps");
    }
    const headKey = iterKey(...args).toHex();
    const startSubject = new BehaviorSubject(headKey);
    const query2 = at ? (startKey) => this._rpcCore.state.getKeysPaged(headKey, PAGE_SIZE_K2, startKey, at) : (startKey) => this._rpcCore.state.getKeysPaged(headKey, PAGE_SIZE_K2, startKey);
    const setMeta = (key) => key.setMeta(meta, section2, method);
    return startSubject.pipe(
      switchMap(query2),
      map2((keys2) => keys2.map(setMeta)),
      tap((keys2) => nextTick(() => {
        keys2.length === PAGE_SIZE_K2 ? startSubject.next(keys2[PAGE_SIZE_K2 - 1].toHex()) : startSubject.complete();
      })),
      toArray(),
      // toArray since we want to startSubject to be completed
      map2(arrayFlatten)
    );
  }
  _retrieveMapKeysPaged({ iterKey, meta, method, section: section2 }, at, opts) {
    if (!iterKey || !meta.type.isMap) {
      throw new Error("keys can only be retrieved on maps");
    }
    const setMeta = (key) => key.setMeta(meta, section2, method);
    const query2 = at ? (headKey) => this._rpcCore.state.getKeysPaged(headKey, opts.pageSize, opts.startKey || headKey, at) : (headKey) => this._rpcCore.state.getKeysPaged(headKey, opts.pageSize, opts.startKey || headKey);
    return query2(iterKey(...opts.args).toHex()).pipe(map2((keys2) => keys2.map(setMeta)));
  }
  _retrieveMapEntries(entry, at, args) {
    const query2 = at ? (keys2) => this._rpcCore.state.queryStorageAt(keys2, at) : (keys2) => this._rpcCore.state.queryStorageAt(keys2);
    return this._retrieveMapKeys(entry, at, args).pipe(switchMap((keys2) => keys2.length ? combineLatest(arrayChunk(keys2, PAGE_SIZE_V).map(query2)).pipe(map2((valsArr) => arrayFlatten(valsArr).map((value, index) => [keys2[index], value]))) : of([])));
  }
  _retrieveMapEntriesPaged(entry, at, opts) {
    const query2 = at ? (keys2) => this._rpcCore.state.queryStorageAt(keys2, at) : (keys2) => this._rpcCore.state.queryStorageAt(keys2);
    return this._retrieveMapKeysPaged(entry, at, opts).pipe(switchMap((keys2) => keys2.length ? query2(keys2).pipe(map2((valsArr) => valsArr.map((value, index) => [keys2[index], value]))) : of([])));
  }
  _decorateDeriveRx(decorateMethod) {
    const specName = this._runtimeVersion?.specName.toString();
    const available = getAvailableDerives(this.__internal__instanceId, this._rx, objectSpread({}, this._options.derives, this._options.typesBundle?.spec?.[specName || ""]?.derives));
    return decorateDeriveSections(decorateMethod, available);
  }
  _decorateDerive(decorateMethod) {
    return decorateDeriveSections(decorateMethod, this._rx.derive);
  }
  /**
   * Put the `this.onCall` function of ApiRx here, because it is needed by
   * `api._rx`.
   */
  _rxDecorateMethod = (method) => {
    return method;
  };
};

// node_modules/@polkadot/api/base/Init.js
var KEEPALIVE_INTERVAL = 1e4;
var WITH_VERSION_SHORTCUT = false;
var SUPPORTED_METADATA_VERSIONS = [15, 14];
var l12 = logger("api/init");
function textToString(t) {
  return t.toString();
}
var Init = class extends Decorate {
  __internal__atLast = null;
  __internal__healthTimer = null;
  __internal__registries = [];
  __internal__updateSub = null;
  __internal__waitingRegistries = {};
  constructor(options, type, decorateMethod) {
    super(options, type, decorateMethod);
    this.registry.setKnownTypes(options);
    if (!options.source) {
      this.registerTypes(options.types);
    } else {
      this.__internal__registries = options.source.__internal__registries;
    }
    this._rpc = this._decorateRpc(this._rpcCore, this._decorateMethod);
    this._rx.rpc = this._decorateRpc(this._rpcCore, this._rxDecorateMethod);
    if (this.supportMulti) {
      this._queryMulti = this._decorateMulti(this._decorateMethod);
      this._rx.queryMulti = this._decorateMulti(this._rxDecorateMethod);
    }
    this._rx.signer = options.signer;
    this._rpcCore.setRegistrySwap((blockHash) => this.getBlockRegistry(blockHash));
    this._rpcCore.setResolveBlockHash((blockNumber) => firstValueFrom(this._rpcCore.chain.getBlockHash(blockNumber)));
    if (this.hasSubscriptions) {
      this._rpcCore.provider.on("disconnected", () => this.__internal__onProviderDisconnect());
      this._rpcCore.provider.on("error", (e) => this.__internal__onProviderError(e));
      this._rpcCore.provider.on("connected", () => this.__internal__onProviderConnect());
    } else if (!this._options.noInitWarn) {
      l12.warn("Api will be available in a limited mode since the provider does not support subscriptions");
    }
    if (this._rpcCore.provider.isConnected) {
      this.__internal__onProviderConnect().catch(noop);
    }
  }
  /**
   * @description Decorates a registry based on the runtime version
   */
  _initRegistry(registry, chain2, version2, metadata, chainProps) {
    registry.clearCache();
    registry.setChainProperties(chainProps || this.registry.getChainProperties());
    registry.setKnownTypes(this._options);
    registry.register(getSpecTypes(registry, chain2, version2.specName, version2.specVersion));
    registry.setHasher(getSpecHasher(registry, chain2, version2.specName));
    if (registry.knownTypes.typesBundle) {
      registry.knownTypes.typesAlias = getSpecAlias(registry, chain2, version2.specName);
    }
    registry.setMetadata(metadata, void 0, objectSpread({}, getSpecExtensions(registry, chain2, version2.specName), this._options.signedExtensions), this._options.noInitWarn);
  }
  /**
   * @description Returns the default versioned registry
   */
  _getDefaultRegistry() {
    return assertReturn(this.__internal__registries.find(({ isDefault }) => isDefault), "Initialization error, cannot find the default registry");
  }
  /**
   * @description Returns a decorated API instance at a specific point in time
   */
  async at(blockHash, knownVersion) {
    const u8aHash = u8aToU8a(blockHash);
    const u8aHex = u8aToHex(u8aHash);
    const registry = await this.getBlockRegistry(u8aHash, knownVersion);
    if (!this.__internal__atLast || this.__internal__atLast[0] !== u8aHex) {
      this.__internal__atLast = [u8aHex, this._createDecorated(registry, true, null, u8aHash).decoratedApi];
    }
    return this.__internal__atLast[1];
  }
  async _createBlockRegistry(blockHash, header, version2) {
    const registry = new TypeRegistry(blockHash);
    const metadata = await this._retrieveMetadata(version2.apis, header.parentHash, registry);
    const runtimeChain = this._runtimeChain;
    if (!runtimeChain) {
      throw new Error("Invalid initializion order, runtimeChain is not available");
    }
    this._initRegistry(registry, runtimeChain, version2, metadata);
    const result = { counter: 0, lastBlockHash: blockHash, metadata, registry, runtimeVersion: version2 };
    this.__internal__registries.push(result);
    return result;
  }
  _cacheBlockRegistryProgress(key, creator) {
    let waiting = this.__internal__waitingRegistries[key];
    if (isUndefined(waiting)) {
      waiting = this.__internal__waitingRegistries[key] = new Promise((resolve, reject) => {
        creator().then((registry) => {
          delete this.__internal__waitingRegistries[key];
          resolve(registry);
        }).catch((error) => {
          delete this.__internal__waitingRegistries[key];
          reject(error);
        });
      });
    }
    return waiting;
  }
  _getBlockRegistryViaVersion(blockHash, version2) {
    if (version2) {
      const existingViaVersion = this.__internal__registries.find(({ runtimeVersion: { specName, specVersion } }) => specName.eq(version2.specName) && specVersion.eq(version2.specVersion));
      if (existingViaVersion) {
        existingViaVersion.counter++;
        existingViaVersion.lastBlockHash = blockHash;
        return existingViaVersion;
      }
    }
    return null;
  }
  async _getBlockRegistryViaHash(blockHash) {
    if (!this._genesisHash || !this._runtimeVersion) {
      throw new Error("Cannot retrieve data on an uninitialized chain");
    }
    const header = this.registry.createType("HeaderPartial", this._genesisHash.eq(blockHash) ? { number: BN_ZERO, parentHash: this._genesisHash } : await firstValueFrom(this._rpcCore.chain.getHeader.raw(blockHash)));
    if (header.parentHash.isEmpty) {
      throw new Error("Unable to retrieve header and parent from supplied hash");
    }
    const [firstVersion, lastVersion] = getUpgradeVersion(this._genesisHash, header.number);
    const version2 = this.registry.createType("RuntimeVersionPartial", WITH_VERSION_SHORTCUT && (firstVersion && (lastVersion || firstVersion.specVersion.eq(this._runtimeVersion.specVersion))) ? { apis: firstVersion.apis, specName: this._runtimeVersion.specName, specVersion: firstVersion.specVersion } : await firstValueFrom(this._rpcCore.state.getRuntimeVersion.raw(header.parentHash)));
    return (
      // try to find via version
      this._getBlockRegistryViaVersion(blockHash, version2) || // return new or in-flight result
      await this._cacheBlockRegistryProgress(version2.toHex(), () => this._createBlockRegistry(blockHash, header, version2))
    );
  }
  /**
   * @description Sets up a registry based on the block hash defined
   */
  async getBlockRegistry(blockHash, knownVersion) {
    return (
      // try to find via blockHash
      this.__internal__registries.find(({ lastBlockHash }) => lastBlockHash && u8aEq(lastBlockHash, blockHash)) || // try to find via version
      this._getBlockRegistryViaVersion(blockHash, knownVersion) || // return new or in-flight result
      await this._cacheBlockRegistryProgress(u8aToHex(blockHash), () => this._getBlockRegistryViaHash(blockHash))
    );
  }
  async _loadMeta() {
    if (this._isReady) {
      if (!this._options.source) {
        this._subscribeUpdates();
      }
      return true;
    }
    this._unsubscribeUpdates();
    [this._genesisHash, this._runtimeMetadata] = this._options.source?._isReady ? await this._metaFromSource(this._options.source) : await this._metaFromChain(this._options.metadata);
    return this._initFromMeta(this._runtimeMetadata);
  }
  // eslint-disable-next-line @typescript-eslint/require-await
  async _metaFromSource(source) {
    this._extrinsicType = source.extrinsicVersion;
    this._runtimeChain = source.runtimeChain;
    this._runtimeVersion = source.runtimeVersion;
    const sections = Object.keys(source.rpc);
    const rpcs = [];
    for (let s = 0, scount = sections.length; s < scount; s++) {
      const section2 = sections[s];
      const methods = Object.keys(source.rpc[section2]);
      for (let m = 0, mcount = methods.length; m < mcount; m++) {
        rpcs.push(`${section2}_${methods[m]}`);
      }
    }
    this._filterRpc(rpcs, getSpecRpc(this.registry, source.runtimeChain, source.runtimeVersion.specName));
    return [source.genesisHash, source.runtimeMetadata];
  }
  // subscribe to metadata updates, inject the types on changes
  _subscribeUpdates() {
    if (this.__internal__updateSub || !this.hasSubscriptions) {
      return;
    }
    this.__internal__updateSub = this._rpcCore.state.subscribeRuntimeVersion().pipe(switchMap((version2) => (
      // only retrieve the metadata when the on-chain version has been changed
      this._runtimeVersion?.specVersion.eq(version2.specVersion) ? of(false) : this._rpcCore.state.getMetadata().pipe(map2((metadata) => {
        l12.log(`Runtime version updated to spec=${version2.specVersion.toString()}, tx=${version2.transactionVersion.toString()}`);
        this._runtimeMetadata = metadata;
        this._runtimeVersion = version2;
        this._rx.runtimeVersion = version2;
        const thisRegistry = this._getDefaultRegistry();
        const runtimeChain = this._runtimeChain;
        if (!runtimeChain) {
          throw new Error("Invalid initializion order, runtimeChain is not available");
        }
        thisRegistry.metadata = metadata;
        thisRegistry.runtimeVersion = version2;
        this._initRegistry(this.registry, runtimeChain, version2, metadata);
        this._injectMetadata(thisRegistry, true);
        return true;
      }))
    ))).subscribe();
  }
  async _metaFromChain(optMetadata) {
    const [genesisHash, runtimeVersion, chain2, chainProps, rpcMethods] = await Promise.all([
      firstValueFrom(this._rpcCore.chain.getBlockHash(0)),
      firstValueFrom(this._rpcCore.state.getRuntimeVersion()),
      firstValueFrom(this._rpcCore.system.chain()),
      firstValueFrom(this._rpcCore.system.properties()),
      firstValueFrom(this._rpcCore.rpc.methods())
    ]);
    this._runtimeChain = chain2;
    this._runtimeVersion = runtimeVersion;
    this._rx.runtimeVersion = runtimeVersion;
    const metadataKey = `${genesisHash.toHex() || "0x"}-${runtimeVersion.specVersion.toString()}`;
    const metadata = optMetadata?.[metadataKey] ? new Metadata(this.registry, optMetadata[metadataKey]) : await this._retrieveMetadata(runtimeVersion.apis);
    this._initRegistry(this.registry, chain2, runtimeVersion, metadata, chainProps);
    this._filterRpc(rpcMethods.methods.map(textToString), getSpecRpc(this.registry, chain2, runtimeVersion.specName));
    this._subscribeUpdates();
    if (!this.__internal__registries.length) {
      this.__internal__registries.push({ counter: 0, isDefault: true, metadata, registry: this.registry, runtimeVersion });
    }
    metadata.getUniqTypes(this._options.throwOnUnknown || false);
    return [genesisHash, metadata];
  }
  _initFromMeta(metadata) {
    const runtimeVersion = this._runtimeVersion;
    if (!runtimeVersion) {
      throw new Error("Invalid initializion order, runtimeVersion is not available");
    }
    this._extrinsicType = metadata.asLatest.extrinsic.version.toNumber();
    this._rx.extrinsicType = this._extrinsicType;
    this._rx.genesisHash = this._genesisHash;
    this._rx.runtimeVersion = runtimeVersion;
    this._injectMetadata(this._getDefaultRegistry(), true);
    this._rx.derive = this._decorateDeriveRx(this._rxDecorateMethod);
    this._derive = this._decorateDerive(this._decorateMethod);
    return true;
  }
  /**
   * @internal
   *
   * Tries to use runtime api calls to retrieve metadata. This ensures the api initializes with the latest metadata.
   * If the runtime call is not there it will use the rpc method.
   */
  async _retrieveMetadata(apis, at, registry) {
    let metadataVersion = null;
    const metadataApi = apis.find(([a]) => a.eq(blake2AsHex3("Metadata", 64)));
    const typeRegistry = registry || this.registry;
    if (!metadataApi || metadataApi[1].toNumber() < 2) {
      l12.warn("MetadataApi not available, rpc::state::get_metadata will be used.");
      return at ? new Metadata(typeRegistry, await firstValueFrom(this._rpcCore.state.getMetadata.raw(at))) : await firstValueFrom(this._rpcCore.state.getMetadata());
    }
    try {
      const metadataVersionsAsBytes = at ? await firstValueFrom(this._rpcCore.state.call.raw("Metadata_metadata_versions", "0x", at)) : await firstValueFrom(this._rpcCore.state.call("Metadata_metadata_versions", "0x"));
      const versions = typeRegistry.createType("Vec<u32>", metadataVersionsAsBytes);
      metadataVersion = versions.reduce((largest, current) => current.gt(largest) ? current : largest);
    } catch (e) {
      l12.debug(e.message);
      l12.warn("error with state_call::Metadata_metadata_versions, rpc::state::get_metadata will be used");
    }
    if (metadataVersion && !SUPPORTED_METADATA_VERSIONS.includes(metadataVersion.toNumber())) {
      metadataVersion = null;
    }
    if (metadataVersion) {
      try {
        const metadataBytes = at ? await firstValueFrom(this._rpcCore.state.call.raw("Metadata_metadata_at_version", u8aToHex(metadataVersion.toU8a()), at)) : await firstValueFrom(this._rpcCore.state.call("Metadata_metadata_at_version", u8aToHex(metadataVersion.toU8a())));
        const rawMeta = at ? typeRegistry.createType("Raw", metadataBytes).toU8a() : metadataBytes;
        const opaqueMetadata = typeRegistry.createType("Option<OpaqueMetadata>", rawMeta).unwrapOr(null);
        if (opaqueMetadata) {
          return new Metadata(typeRegistry, opaqueMetadata.toHex());
        }
      } catch (e) {
        l12.debug(e.message);
        l12.warn("error with state_call::Metadata_metadata_at_version, rpc::state::get_metadata will be used");
      }
    }
    return at ? new Metadata(typeRegistry, await firstValueFrom(this._rpcCore.state.getMetadata.raw(at))) : await firstValueFrom(this._rpcCore.state.getMetadata());
  }
  _subscribeHealth() {
    this._unsubscribeHealth();
    this.__internal__healthTimer = this.hasSubscriptions ? setInterval(() => {
      firstValueFrom(this._rpcCore.system.health.raw()).catch(noop);
    }, KEEPALIVE_INTERVAL) : null;
  }
  _unsubscribeHealth() {
    if (this.__internal__healthTimer) {
      clearInterval(this.__internal__healthTimer);
      this.__internal__healthTimer = null;
    }
  }
  _unsubscribeUpdates() {
    if (this.__internal__updateSub) {
      this.__internal__updateSub.unsubscribe();
      this.__internal__updateSub = null;
    }
  }
  _unsubscribe() {
    this._unsubscribeHealth();
    this._unsubscribeUpdates();
  }
  async __internal__onProviderConnect() {
    this._isConnected.next(true);
    this.emit("connected");
    try {
      const cryptoReady = this._options.initWasm === false ? true : await cryptoWaitReady();
      const hasMeta = await this._loadMeta();
      this._subscribeHealth();
      if (hasMeta && !this._isReady && cryptoReady) {
        this._isReady = true;
        this.emit("ready", this);
      }
    } catch (_error) {
      const error = new Error(`FATAL: Unable to initialize the API: ${_error.message}`);
      l12.error(error);
      this.emit("error", error);
    }
  }
  __internal__onProviderDisconnect() {
    this._isConnected.next(false);
    this._unsubscribe();
    this.emit("disconnected");
  }
  __internal__onProviderError(error) {
    this.emit("error", error);
  }
};

// node_modules/@polkadot/api/base/Getters.js
function assertResult(value) {
  if (value === void 0) {
    throw new Error("Api interfaces needs to be initialized before using, wait for 'isReady'");
  }
  return value;
}
var Getters = class extends Init {
  /**
   * @description Runtime call interfaces (currently untyped, only decorated via API options)
   */
  get call() {
    return assertResult(this._call);
  }
  /**
   * @description Contains the parameter types (constants) of all modules.
   *
   * The values are instances of the appropriate type and are accessible using `section`.`constantName`,
   *
   * @example
   * <BR>
   *
   * ```javascript
   * console.log(api.consts.democracy.enactmentPeriod.toString())
   * ```
   */
  get consts() {
    return assertResult(this._consts);
  }
  /**
   * @description Derived results that are injected into the API, allowing for combinations of various query results.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * api.derive.chain.bestNumber((number) => {
   *   console.log('best number', number);
   * });
   * ```
   */
  get derive() {
    return assertResult(this._derive);
  }
  /**
   * @description Errors from metadata
   */
  get errors() {
    return assertResult(this._errors);
  }
  /**
   * @description Events from metadata
   */
  get events() {
    return assertResult(this._events);
  }
  /**
   * @description  Returns the version of extrinsics in-use on this chain
   */
  get extrinsicVersion() {
    return this._extrinsicType;
  }
  /**
   * @description Contains the genesis Hash of the attached chain. Apart from being useful to determine the actual chain, it can also be used to sign immortal transactions.
   */
  get genesisHash() {
    return assertResult(this._genesisHash);
  }
  /**
   * @description true is the underlying provider is connected
   */
  get isConnected() {
    return this._isConnected.getValue();
  }
  /**
   * @description The library information name & version (from package.json)
   */
  get libraryInfo() {
    return `${packageInfo.name} v${packageInfo.version}`;
  }
  /**
   * @description Contains all the chain state modules and their subsequent methods in the API. These are attached dynamically from the runtime metadata.
   *
   * All calls inside the namespace, is denoted by `section`.`method` and may take an optional query parameter. As an example, `api.query.timestamp.now()` (current block timestamp) does not take parameters, while `api.query.system.account(<accountId>)` (retrieving the associated nonce & balances for an account), takes the `AccountId` as a parameter.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * api.query.system.account(<accountId>, ([nonce, balance]) => {
   *   console.log('new free balance', balance.free, 'new nonce', nonce);
   * });
   * ```
   */
  get query() {
    return assertResult(this._query);
  }
  /**
   * @description Allows for the querying of multiple storage entries and the combination thereof into a single result. This is a very optimal way to make multiple queries since it only makes a single connection to the node and retrieves the data over one subscription.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * const unsub = await api.queryMulti(
   *   [
   *     // you can include the storage without any parameters
   *     api.query.balances.totalIssuance,
   *     // or you can pass parameters to the storage query
   *     [api.query.system.account, '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY']
   *   ],
   *   ([existential, [, { free }]]) => {
   *     console.log(`You have ${free.sub(existential)} more than the existential deposit`);
   *
   *     unsub();
   *   }
   * );
   * ```
   */
  get queryMulti() {
    return assertResult(this._queryMulti);
  }
  /**
   * @description Contains all the raw rpc sections and their subsequent methods in the API as defined by the jsonrpc interface definitions. Unlike the dynamic `api.query` and `api.tx` sections, these methods are fixed (although extensible with node upgrades) and not determined by the runtime.
   *
   * RPC endpoints available here allow for the query of chain, node and system information, in addition to providing interfaces for the raw queries of state (using known keys) and the submission of transactions.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * api.rpc.chain.subscribeNewHeads((header) => {
   *   console.log('new header', header);
   * });
   * ```
   */
  get rpc() {
    return assertResult(this._rpc);
  }
  /**
   * @description Contains the chain information for the current node.
   */
  get runtimeChain() {
    return assertResult(this._runtimeChain);
  }
  /**
   * @description Yields the current attached runtime metadata. Generally this is only used to construct extrinsics & storage, but is useful for current runtime inspection.
   */
  get runtimeMetadata() {
    return assertResult(this._runtimeMetadata);
  }
  /**
   * @description Contains the version information for the current runtime.
   */
  get runtimeVersion() {
    return assertResult(this._runtimeVersion);
  }
  /**
   * @description The underlying Rx API interface
   */
  get rx() {
    return assertResult(this._rx);
  }
  /**
   * @description Returns the underlying provider stats
   */
  get stats() {
    return this._rpcCore.stats;
  }
  /**
   * @description The type of this API instance, either 'rxjs' or 'promise'
   */
  get type() {
    return this._type;
  }
  /**
   * @description Contains all the extrinsic modules and their subsequent methods in the API. It allows for the construction of transactions and the submission thereof. These are attached dynamically from the runtime metadata.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * api.tx.balances
   *   .transferAllowDeath(<recipientId>, <balance>)
   *   .signAndSend(<keyPair>, ({status}) => {
   *     console.log('tx status', status.asFinalized.toHex());
   *   });
   * ```
   */
  get tx() {
    return assertResult(this._extrinsics);
  }
  /**
   * @description Finds the definition for a specific [[CallFunction]] based on the index supplied
   */
  findCall(callIndex) {
    return findCall(this.registry, callIndex);
  }
  /**
   * @description Finds the definition for a specific [[RegistryError]] based on the index supplied
   */
  findError(errorIndex) {
    return findError(this.registry, errorIndex);
  }
};

// node_modules/@polkadot/api/base/index.js
var ApiBase = class extends Getters {
  /**
   * @description Create an instance of the class
   *
   * @param options Options object to create API instance or a Provider instance
   *
   * @example
   * <BR>
   *
   * ```javascript
   * import Api from '@polkadot/api/promise';
   *
   * const api = new Api().isReady();
   *
   * api.rpc.subscribeNewHeads((header) => {
   *   console.log(`new block #${header.number.toNumber()}`);
   * });
   * ```
   */
  constructor(options = {}, type, decorateMethod) {
    super(options, type, decorateMethod);
  }
  /**
   * @description Connect from the underlying provider, halting all network traffic
   */
  connect() {
    return this._rpcCore.connect();
  }
  /**
   * @description Disconnect from the underlying provider, halting all network traffic
   */
  disconnect() {
    this._unsubscribe();
    return this._rpcCore.disconnect();
  }
  /**
   * @description Set an external signer which will be used to sign extrinsic when account passed in is not KeyringPair
   */
  setSigner(signer) {
    this._rx.signer = signer;
  }
  /**
   * @description Signs a raw signer payload, string or Uint8Array
   */
  async sign(address, data, { signer } = {}) {
    if (isString(address)) {
      const _signer = signer || this._rx.signer;
      if (!_signer?.signRaw) {
        throw new Error("No signer exists with a signRaw interface. You possibly need to pass through an explicit keypair for the origin so it can be used for signing.");
      }
      return (await _signer.signRaw(objectSpread({ type: "bytes" }, data, { address }))).signature;
    }
    return u8aToHex(address.sign(u8aToU8a(data.data)));
  }
};

// node_modules/@polkadot/api/promise/Combinator.js
var Combinator = class {
  __internal__allHasFired = false;
  __internal__callback;
  __internal__fired = [];
  __internal__fns = [];
  __internal__isActive = true;
  __internal__results = [];
  __internal__subscriptions = [];
  constructor(fns, callback) {
    this.__internal__callback = callback;
    this.__internal__subscriptions = fns.map(async (input, index) => {
      const [fn, ...args] = Array.isArray(input) ? input : [input];
      this.__internal__fired.push(false);
      this.__internal__fns.push(fn);
      return fn(...args, this._createCallback(index));
    });
  }
  _allHasFired() {
    this.__internal__allHasFired ||= this.__internal__fired.filter((hasFired) => !hasFired).length === 0;
    return this.__internal__allHasFired;
  }
  _createCallback(index) {
    return (value) => {
      this.__internal__fired[index] = true;
      this.__internal__results[index] = value;
      this._triggerUpdate();
    };
  }
  _triggerUpdate() {
    if (!this.__internal__isActive || !isFunction(this.__internal__callback) || !this._allHasFired()) {
      return;
    }
    try {
      Promise.resolve(this.__internal__callback(this.__internal__results)).catch(noop);
    } catch {
    }
  }
  unsubscribe() {
    if (!this.__internal__isActive) {
      return;
    }
    this.__internal__isActive = false;
    Promise.all(this.__internal__subscriptions.map(async (subscription) => {
      try {
        const unsubscribe = await subscription;
        if (isFunction(unsubscribe)) {
          unsubscribe();
        }
      } catch {
      }
    })).catch(() => {
    });
  }
};

// node_modules/@polkadot/api/promise/decorateMethod.js
function promiseTracker(resolve, reject) {
  let isCompleted = false;
  return {
    reject: (error) => {
      if (!isCompleted) {
        isCompleted = true;
        reject(error);
      }
      return EMPTY;
    },
    resolve: (value) => {
      if (!isCompleted) {
        isCompleted = true;
        resolve(value);
      }
    }
  };
}
function extractArgs(args, needsCallback) {
  const actualArgs = args.slice();
  const callback = args.length && isFunction(args[args.length - 1]) ? actualArgs.pop() : void 0;
  if (needsCallback && !isFunction(callback)) {
    throw new Error("Expected a callback to be passed with subscriptions");
  }
  return [actualArgs, callback];
}
function decorateCall(method, args) {
  return new Promise((resolve, reject) => {
    const tracker = promiseTracker(resolve, reject);
    const subscription = method(...args).pipe(catchError((error) => tracker.reject(error))).subscribe((result) => {
      tracker.resolve(result);
      nextTick(() => subscription.unsubscribe());
    });
  });
}
function decorateSubscribe(method, args, resultCb) {
  return new Promise((resolve, reject) => {
    const tracker = promiseTracker(resolve, reject);
    const subscription = method(...args).pipe(catchError((error) => tracker.reject(error)), tap(() => tracker.resolve(() => subscription.unsubscribe()))).subscribe((result) => {
      nextTick(() => resultCb(result));
    });
  });
}
function toPromiseMethod(method, options) {
  const needsCallback = !!(options?.methodName && options.methodName.includes("subscribe"));
  return function(...args) {
    const [actualArgs, resultCb] = extractArgs(args, needsCallback);
    return resultCb ? decorateSubscribe(method, actualArgs, resultCb) : decorateCall(options?.overrideNoSub || method, actualArgs);
  };
}

// node_modules/@polkadot/api/promise/Api.js
var ApiPromise = class _ApiPromise extends ApiBase {
  __internal__isReadyPromise;
  __internal__isReadyOrErrorPromise;
  /**
   * @description Creates an instance of the ApiPromise class
   * @param options Options to create an instance. This can be either [[ApiOptions]] or
   * an [[WsProvider]].
   * @example
   * <BR>
   *
   * ```javascript
   * import Api from '@polkadot/api/promise';
   *
   * new Api().isReady.then((api) => {
   *   api.rpc.subscribeNewHeads((header) => {
   *     console.log(`new block #${header.number.toNumber()}`);
   *   });
   * });
   * ```
   */
  constructor(options) {
    super(options, "promise", toPromiseMethod);
    this.__internal__isReadyPromise = new Promise((resolve) => {
      super.once("ready", () => resolve(this));
    });
    this.__internal__isReadyOrErrorPromise = new Promise((resolve, reject) => {
      const tracker = promiseTracker(resolve, reject);
      super.once("ready", () => tracker.resolve(this));
      super.once("error", (error) => tracker.reject(error));
    });
  }
  /**
   * @description Creates an ApiPromise instance using the supplied provider. Returns an Promise containing the actual Api instance.
   * @param options options that is passed to the class contructor. Can be either [[ApiOptions]] or a
   * provider (see the constructor arguments)
   * @example
   * <BR>
   *
   * ```javascript
   * import Api from '@polkadot/api/promise';
   *
   * Api.create().then(async (api) => {
   *   const timestamp = await api.query.timestamp.now();
   *
   *   console.log(`lastest block timestamp ${timestamp}`);
   * });
   * ```
   */
  static create(options) {
    const instance = new _ApiPromise(options);
    if (options && options.throwOnConnect) {
      return instance.isReadyOrError;
    }
    instance.isReadyOrError.catch(noop);
    return instance.isReady;
  }
  /**
   * @description Promise that resolves the first time we are connected and loaded
   */
  get isReady() {
    return this.__internal__isReadyPromise;
  }
  /**
   * @description Promise that resolves if we can connect, or reject if there is an error
   */
  get isReadyOrError() {
    return this.__internal__isReadyOrErrorPromise;
  }
  /**
   * @description Returns a clone of this ApiPromise instance (new underlying provider connection)
   */
  clone() {
    return new _ApiPromise(objectSpread({}, this._options, { source: this }));
  }
  /**
   * @description Creates a combinator that can be used to combine the latest results from multiple subscriptions
   * @param fns An array of function to combine, each in the form of `(cb: (value: void)) => void`
   * @param callback A callback that will return an Array of all the values this combinator has been applied to
   * @example
   * <BR>
   *
   * ```javascript
   * const address = '5DTestUPts3kjeXSTMyerHihn1uwMfLj8vU8sqF7qYrFacT7';
   *
   * // combines values from balance & nonce as it updates
   * api.combineLatest([
   *   api.rpc.chain.subscribeNewHeads,
   *   (cb) => api.query.system.account(address, cb)
   * ], ([head, [balance, nonce]]) => {
   *   console.log(`#${head.number}: You have ${balance.free} units, with ${nonce} transactions sent`);
   * });
   * ```
   */
  // eslint-disable-next-line @typescript-eslint/require-await
  async combineLatest(fns, callback) {
    const combinator = new Combinator(fns, callback);
    return () => {
      combinator.unsubscribe();
    };
  }
};

// src/integrations/chains.ts
var DEFAULT_ENDPOINTS = {
  polkadot: "wss://rpc.polkadot.io",
  "asset-hub-polkadot": "wss://polkadot-asset-hub-rpc.polkadot.io",
  moonbeam: "wss://wss.api.moonbeam.network"
};
var apiCache = /* @__PURE__ */ new Map();
async function getApiForChain(chain2, overrideEndpoint) {
  const endpoint = overrideEndpoint || DEFAULT_ENDPOINTS[chain2];
  if (!apiCache.has(endpoint)) {
    const provider = new WsProvider(endpoint);
    apiCache.set(endpoint, ApiPromise.create({ provider }));
  }
  return apiCache.get(endpoint);
}

// src/integrations/xcm.ts
async function buildXcmTransferExtrinsic(req) {
  const api = await getApiForChain(req.origin);
  const dest = { V3: { parents: 1, interior: { X1: { Parachain: 1e3 } } } };
  const beneficiary = { V3: { parents: 0, interior: { X1: { AccountId32: { id: req.recipient, network: null } } } } };
  const assets = { V3: [{ id: { Concrete: { parents: 0, interior: { X2: [{ PalletInstance: 50 }, { GeneralIndex: req.asset.assetId ?? 0 }] } } }, fun: { Fungible: req.amount } }] };
  const feeAssetItem = 0;
  const weightLimit = "Unlimited";
  const extrinsic = api.tx.xcmPallet.limitedReserveTransferAssets(dest, beneficiary, assets, feeAssetItem, weightLimit);
  return extrinsic;
}
async function estimateXcmFee(req) {
  const extrinsic = await buildXcmTransferExtrinsic(req);
  try {
    const info6 = await extrinsic.paymentInfo(req.sender || req.recipient);
    return String(info6.partialFee?.toString?.() ?? "0");
  } catch (e) {
    return "0";
  }
}

// src/utils/units.ts
function decimalToUnits(amount, decimals) {
  const [intPart, fracPartRaw = ""] = amount.trim().split(".");
  const fracPart = fracPartRaw.slice(0, decimals);
  const paddedFrac = fracPart.padEnd(decimals, "0");
  const normalized = (intPart || "0").replace(/^0+/, "") || "0";
  const units = normalized + paddedFrac;
  return units.replace(/^0+/, "") || "0";
}
function unitsToDecimal(units, decimals) {
  const u = units.replace(/^0+/, "") || "0";
  if (decimals === 0) return u;
  const pad = u.padStart(decimals + 1, "0");
  const intPart = pad.slice(0, -decimals);
  const fracPart = pad.slice(-decimals).replace(/0+$/, "");
  return fracPart ? `${intPart}.${fracPart}` : intPart;
}

// src/integrations/transfers.ts
async function buildNativeTransfer(chain2, tokenSymbol, recipient, amountHuman) {
  const info6 = getTokenInfo(tokenSymbol);
  if (!info6) throw new Error(`Unsupported token ${tokenSymbol}`);
  const api = await getApiForChain(chain2);
  const amountUnits = decimalToUnits(amountHuman, info6.decimals);
  if (info6.isNative) {
    return api.tx.balances.transferKeepAlive(recipient, amountUnits);
  }
  throw new Error("Token is not native on this chain");
}
async function estimateNativeFee(chain2, tokenSymbol, senderAddress, recipient, amountHuman) {
  const extrinsic = await buildNativeTransfer(chain2, tokenSymbol, recipient, amountHuman);
  try {
    const info6 = await extrinsic.paymentInfo(senderAddress || recipient);
    return String(info6.partialFee?.toString?.() ?? "0");
  } catch {
    return "0";
  }
}
async function buildAssetHubUsdtTransfer(recipient, amountHuman) {
  const info6 = getTokenInfo("USDT");
  const api = await getApiForChain("asset-hub-polkadot");
  const amountUnits = decimalToUnits(amountHuman, info6.decimals);
  const assetId = info6.assetId;
  return api.tx.assets.transfer(assetId, recipient, amountUnits);
}

// src/routes/voice.ts
var voice = new Hono2();
voice.post("/process", async (c) => {
  const env = c.env;
  const body = await c.req.json();
  const parsed = VoiceProcessSchema.safeParse(body);
  if (!parsed.success) return c.json({ error: parsed.error.flatten() }, 400);
  const { audio_data, user_id, format } = parsed.data;
  const db = getDb(env);
  await db.insert(users).values({ id: user_id, walletAddress: user_id }).onConflictDoNothing();
  const transcription = await speechToText(env, audio_data, format);
  let intent;
  if (env.PERPLEXITY_API_KEY) {
    try {
      intent = await parseIntentWithPerplexity(env, transcription);
    } catch (e) {
      intent = simpleFallbackIntent(transcription);
    }
  } else {
    intent = simpleFallbackIntent(transcription);
  }
  const txIds = [];
  for (const item of intent.items) {
    const txId = v4_default();
    txIds.push(txId);
    await db.insert(transactions).values({
      id: txId,
      userId: user_id,
      voiceCommand: transcription,
      parsedIntent: JSON.stringify(item),
      recipientAddress: item.recipient,
      amount: item.amount,
      tokenSymbol: item.token,
      status: "pending"
    });
  }
  const first2 = intent.items[0];
  const isXcm = first2.origin_chain !== first2.destination_chain;
  const originNative = getChainNativeTokenInfo(first2.origin_chain);
  let feeHint = "";
  try {
    if (isXcm) {
      const fee = await estimateXcmFee({
        origin: first2.origin_chain,
        destination: first2.destination_chain,
        asset: { symbol: originNative.symbol },
        amount: decimalToUnits(first2.amount, originNative.decimals),
        sender: user_id,
        recipient: first2.recipient
      });
      const feeHuman = unitsToDecimal(fee, originNative.decimals);
      feeHint = ` Estimated XCM fee about ${feeHuman} ${originNative.symbol} on ${first2.origin_chain}.`;
    } else {
      const fee = await estimateNativeFee(first2.origin_chain, originNative.symbol, user_id, first2.recipient, first2.amount);
      const feeHuman = unitsToDecimal(fee, originNative.decimals);
      feeHint = ` Estimated fee about ${feeHuman} ${originNative.symbol} on ${first2.origin_chain}.`;
    }
  } catch {
  }
  const confirmText = intent.items.length > 1 ? `You requested a batch of ${intent.items.length} transfers. First: send ${first2.amount} ${first2.token} on ${first2.origin_chain} to ${shortAddr(first2.recipient)}.${feeHint} Say confirm to proceed or cancel to abort.` : `You asked to send ${first2.amount} ${first2.token} on ${first2.origin_chain} to ${shortAddr(first2.recipient)}.${feeHint} Say confirm to proceed or cancel to abort.`;
  const confirmAudio = await textToSpeech(env, confirmText);
  const encrypted = await encryptAesGcm(env.ENCRYPTION_KEY, confirmAudio);
  const sessionId = v4_default();
  await db.insert(voiceSessions).values({ id: sessionId, userId: user_id, transcription, responseText: confirmText });
  return c.json({ transaction_ids: txIds, session_id: sessionId, intent, confirmation: { audio_base64: encrypted.ciphertext, iv: encrypted.iv, format: "mp3" } });
});
voice.post("/confirm", async (c) => {
  const env = c.env;
  const body = await c.req.json();
  const parsed = VoiceConfirmSchema.safeParse(body);
  if (!parsed.success) return c.json({ error: parsed.error.flatten() }, 400);
  const { audio_data, user_id } = parsed.data;
  const ids = parsed.data.transaction_ids ?? (parsed.data.transaction_id ? [parsed.data.transaction_id] : []);
  const db = getDb(env);
  const found = ids.length ? await db.select().from(transactions).where(inArray(transactions.id, ids)) : [];
  if (!found.length) return c.json({ error: "transaction(s) not found" }, 404);
  if (found.some((t) => t.status !== "pending")) return c.json({ error: "one or more transactions not pending" }, 400);
  const transcription = await speechToText(env, audio_data, "webm");
  const lower = transcription.trim().toLowerCase();
  let decision = "failed";
  let message = "Cancelled";
  if (lower.includes("confirm") || lower.includes("yes")) {
    decision = "confirmed";
    message = "Confirmed";
    await db.update(transactions).set({ status: "confirmed" }).where(inArray(transactions.id, ids));
  } else if (lower.includes("cancel") || lower.includes("no")) {
    decision = "failed";
    message = "Cancelled";
    await db.update(transactions).set({ status: "failed" }).where(inArray(transactions.id, ids));
  }
  const responseAudio = await textToSpeech(env, `Transaction ${message}.`);
  const encrypted = await encryptAesGcm(env.ENCRYPTION_KEY, responseAudio);
  const sessionId = v4_default();
  await db.insert(voiceSessions).values({ id: sessionId, userId: user_id, transcription, responseText: `Transaction ${message}.` });
  return c.json({ status: decision, transaction_ids: ids, response: { audio_base64: encrypted.ciphertext, iv: encrypted.iv, format: "mp3" } });
});
function simpleFallbackIntent(text2) {
  const words = text2.split(/\s+/);
  const amountIdx = words.findIndex((w) => /^(send|transfer)$/i.test(w));
  let amount = "0";
  let token = "DOT";
  let recipient = "";
  if (amountIdx >= 0 && words[amountIdx + 1]) amount = words[amountIdx + 1];
  const tokenIdx = amountIdx + 2;
  if (words[tokenIdx]) token = words[tokenIdx].toUpperCase();
  const toIdx = words.findIndex((w) => /^to$/i.test(w));
  if (toIdx >= 0 && words[toIdx + 1]) recipient = words[toIdx + 1];
  return {
    type: "single",
    language: "en",
    items: [{ action: "transfer", amount, token, recipient, origin_chain: "polkadot", destination_chain: "polkadot" }],
    schedule: null,
    condition: null
  };
}
function shortAddr(addr) {
  if (!addr) return "";
  return `${addr.slice(0, 6)}...${addr.slice(-4)}`;
}

// src/integrations/papi.ts
async function submitExtrinsic(env, signedExtrinsicHex, chain2 = "polkadot") {
  const api = await getApiForChain(chain2);
  const hash = await api.rpc.author.submitExtrinsic(`0x${signedExtrinsicHex}`);
  return hash.toString();
}

// src/routes/transactions.ts
var tx = new Hono2();
tx.get("/", async (c) => {
  const env = c.env;
  const db = getDb(env);
  const url = new URL(c.req.url);
  const userId = url.searchParams.get("user_id") ?? "";
  const status = url.searchParams.get("status") ?? void 0;
  const limit = Math.min(parseInt(url.searchParams.get("limit") || "20"), 100);
  const offset = parseInt(url.searchParams.get("offset") || "0");
  const where = status ? and(eq(transactions.userId, userId), eq(transactions.status, status)) : eq(transactions.userId, userId);
  const rows = await db.select().from(transactions).where(where).limit(limit).offset(offset);
  return c.json({ items: rows });
});
tx.get("/:id", async (c) => {
  const env = c.env;
  const db = getDb(env);
  const id = c.req.param("id");
  const [row] = await db.select().from(transactions).where(eq(transactions.id, id));
  if (!row) return c.json({ error: "not found" }, 404);
  return c.json(row);
});
tx.post("/execute", async (c) => {
  const env = c.env;
  const db = getDb(env);
  const body = await c.req.json();
  const parsed = ExecuteTxSchema.safeParse(body);
  if (!parsed.success) return c.json({ error: parsed.error.flatten() }, 400);
  const { transaction_id, signed_extrinsic, chain: chain2, token, min_receive, slippage_bps } = parsed.data;
  const [row] = await db.select().from(transactions).where(eq(transactions.id, transaction_id));
  if (!row) return c.json({ error: "transaction not found" }, 404);
  if (row.status !== "confirmed") return c.json({ error: "transaction not confirmed" }, 400);
  if (token && token.toUpperCase() !== (row.tokenSymbol || "").toUpperCase()) {
    return c.json({ error: "token does not match prepared transaction" }, 400);
  }
  try {
    const parsedIntent = JSON.parse(row.parsedIntent || "{}");
    const origin = parsedIntent.origin_chain;
    const destination = parsedIntent.destination_chain;
    const isXcm = origin && destination && origin !== destination;
    if (isXcm) {
      if (min_receive) {
        const info6 = getTokenInfo(token || row.tokenSymbol);
        if (info6) {
          const minUnits = decimalToUnits(min_receive, info6.decimals);
          const amtUnits = decimalToUnits(parsedIntent.amount, info6.decimals);
          if (BigInt(minUnits) > BigInt(amtUnits)) {
            return c.json({ error: "min_receive exceeds transfer amount" }, 400);
          }
        }
      }
      if (slippage_bps != null) {
        if (slippage_bps < 0 || slippage_bps > 1e4) {
          return c.json({ error: "invalid slippage_bps" }, 400);
        }
      }
      const updatedIntent = {
        ...parsedIntent,
        constraints: {
          ...parsedIntent.constraints || {},
          min_receive: min_receive ?? parsedIntent.constraints?.min_receive,
          slippage_bps: slippage_bps ?? parsedIntent.constraints?.slippage_bps,
          token: token || row.tokenSymbol,
          chain: chain2 || origin
        }
      };
      await db.update(transactions).set({ parsedIntent: JSON.stringify(updatedIntent) }).where(eq(transactions.id, transaction_id));
    }
  } catch {
  }
  const hash = await submitExtrinsic(env, signed_extrinsic, chain2 || "polkadot");
  await db.update(transactions).set({ transactionHash: hash, status: "submitted", confirmedAt: Date.now() }).where(eq(transactions.id, transaction_id));
  return c.json({ transaction_hash: hash });
});
tx.post("/xcm/build", async (c) => {
  const body = await c.req.json();
  const { origin, destination, symbol, amount, sender, recipient } = body || {};
  if (!origin || !destination || !symbol || !amount || !sender || !recipient) {
    return c.json({ error: "missing fields" }, 400);
  }
  try {
    const extrinsic = await buildXcmTransferExtrinsic({
      origin,
      destination,
      asset: { symbol, assetId: symbol === "USDT" ? 1984 : void 0 },
      amount,
      sender,
      recipient
    });
    const hex8 = extrinsic.method.toHex();
    return c.json({ call_hex: hex8 });
  } catch (e) {
    return c.json({ error: String(e) }, 500);
  }
});
tx.post("/build", async (c) => {
  const body = await c.req.json();
  const { token, amount, recipient, origin_chain, destination_chain, min_receive, slippage_bps } = body || {};
  if (!token || !amount || !recipient || !origin_chain || !destination_chain) {
    return c.json({ error: "missing fields" }, 400);
  }
  const info6 = getTokenInfo(token);
  if (!info6) return c.json({ error: "unsupported token" }, 400);
  try {
    let hex8;
    let fee;
    if (origin_chain === destination_chain) {
      const extrinsic = await buildNativeTransfer(origin_chain, token, recipient, amount);
      hex8 = extrinsic.method.toHex();
      fee = await estimateNativeFee(origin_chain, token, recipient, recipient, amount);
    } else {
      if (token.toUpperCase() === "USDT") {
        const extrinsic = await buildAssetHubUsdtTransfer(recipient, amount);
        hex8 = extrinsic.method.toHex();
      } else {
        const extrinsic = await buildXcmTransferExtrinsic({
          origin: origin_chain,
          destination: destination_chain,
          asset: { symbol: token.toUpperCase(), assetId: token.toUpperCase() === "USDT" ? 1984 : void 0 },
          amount,
          sender: "0x",
          recipient,
          minReceive: min_receive ? decimalToUnits(min_receive, info6.decimals) : void 0
        });
        hex8 = extrinsic.method.toHex();
        fee = await estimateXcmFee({
          origin: origin_chain,
          destination: destination_chain,
          asset: { symbol: token.toUpperCase(), assetId: token.toUpperCase() === "USDT" ? 1984 : void 0 },
          amount,
          sender: recipient,
          recipient,
          minReceive: min_receive ? decimalToUnits(min_receive, info6.decimals) : void 0
        });
      }
    }
    return c.json({ call_hex: hex8, fee });
  } catch (e) {
    return c.json({ error: String(e) }, 500);
  }
});
tx.get("/xcm/estimate", async (c) => {
  const url = new URL(c.req.url);
  const origin = (url.searchParams.get("origin") || "").toString();
  const destination = (url.searchParams.get("destination") || "").toString();
  const symbol = (url.searchParams.get("symbol") || "").toUpperCase();
  const amount = (url.searchParams.get("amount") || "0").toString();
  const sender = (url.searchParams.get("sender") || "").toString();
  const recipient = (url.searchParams.get("recipient") || "").toString();
  const minReceive = (url.searchParams.get("min_receive") || "").toString();
  if (!origin || !destination || !symbol || !amount || !recipient) {
    return c.json({ error: "missing fields" }, 400);
  }
  try {
    const fee = await estimateXcmFee({ origin, destination, asset: { symbol, assetId: symbol === "USDT" ? 1984 : void 0 }, amount, sender, recipient, minReceive: minReceive || void 0 });
    return c.json({ fee });
  } catch (e) {
    return c.json({ error: String(e) }, 500);
  }
});

// src/integrations/balances.ts
async function getTokenBalance(address, symbol) {
  const info6 = getTokenInfo(symbol);
  const api = await getApiForChain(info6.chain);
  if (symbol === "DOT" || symbol === "GLMR") {
    const { data } = await api.query.system.account(address);
    return data.free.toString();
  }
  if (symbol === "USDT") {
    const assetId = info6.assetId;
    const account3 = await api.query.assets.account(assetId, address);
    const json = account3.toJSON();
    const balance = json?.balance ?? "0";
    return String(balance);
  }
  return "0";
}

// src/routes/wallet.ts
var wallet = new Hono2();
wallet.post("/connect", async (c) => {
  const env = c.env;
  const db = getDb(env);
  const body = await c.req.json();
  const parsed = WalletConnectSchema.safeParse(body);
  if (!parsed.success) return c.json({ error: parsed.error.flatten() }, 400);
  const { wallet_address } = parsed.data;
  const id = wallet_address;
  await db.insert(users).values({ id, walletAddress: wallet_address }).onConflictDoNothing();
  return c.json({ user_id: id });
});
wallet.get("/balance", async (c) => {
  const url = new URL(c.req.url);
  const parsed = WalletBalanceSchema.safeParse({
    wallet_address: url.searchParams.get("wallet_address") ?? "",
    token_symbols: url.searchParams.get("token_symbols") ?? void 0
  });
  if (!parsed.success) return c.json({ error: parsed.error.flatten() }, 400);
  const { wallet_address, token_symbols } = parsed.data;
  const symbols = (token_symbols || "DOT").split(",").map((s) => s.trim().toUpperCase()).filter(Boolean);
  const balances = {};
  for (const sym of symbols) {
    try {
      balances[sym] = await getTokenBalance(wallet_address, sym);
    } catch {
      balances[sym] = "0";
    }
  }
  return c.json({ balances });
});

// src/routes/health.ts
var health = new Hono2();
health.get("/health", (c) => {
  return c.json({ ok: true, service: "voicedot-api", time: Date.now() });
});
health.get("/status/polkadot", async (c) => {
  try {
    const api = await getApiForChain("polkadot");
    const header = await api.rpc.chain.getHeader();
    return c.json({ connected: true, block: header.number.toString() });
  } catch (e) {
    return c.json({ connected: false, error: String(e) }, 500);
  }
});

// src/routes/prices.ts
var prices = new Hono2();
prices.get("/prices", async (c) => {
  const url = new URL(c.req.url);
  const symbols = (url.searchParams.get("symbols") || "DOT,USDT,GLMR").split(",").map((s) => s.trim().toUpperCase()).filter(Boolean);
  const data = await fetchUsdPrices(symbols);
  return c.json({ prices_usd: data });
});
prices.get("/prices/convert", async (c) => {
  const url = new URL(c.req.url);
  const amount = Number(url.searchParams.get("amount") || "0");
  const from2 = (url.searchParams.get("from") || "DOT").toUpperCase();
  const to = (url.searchParams.get("to") || "USDT").toUpperCase();
  const p = await fetchUsdPrices([from2, to]);
  const converted = convertAmount(amount, p[from2] || 0, p[to] || 0);
  return c.json({ amount, from: from2, to, converted });
});

// src/index.ts
var app = new Hono2();
app.route("/voice", voice);
app.route("/transactions", tx);
app.route("/wallet", wallet);
app.route("/", health);
app.route("/", prices);
var src_default = app;
export {
  src_default as default
};
/*! Bundled license information:

@scure/base/lib/esm/index.js:
  (*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/hashes/esm/utils.js:
  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/utils.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/abstract/modular.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/abstract/curve.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/abstract/weierstrass.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/_shortw_utils.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/secp256k1.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)
*/
